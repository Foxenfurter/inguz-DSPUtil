§*
4E:\GitHub\inguz-DSPUtil\InguzDSPUtilNew\Ambisonic.cs
	namespace

 	
DSPUtil


 
{ 
public 

class 
	UHJCoeffs 
{ 
public 
Complex 
LX 
; 
public 
Complex 
LW 
; 
public 
Complex 
LY 
; 
public 
Complex 
RX 
; 
public 
Complex 
RW 
; 
public 
Complex 
RY 
; 
public 
	UHJCoeffs 
( 
) 
{ 	
LX++ 
=++ 
new++ 
Complex++ 
(++ 
$num++ '
,++' (
$num++* 4
)++4 5
;++5 6
LW,, 
=,, 
new,, 
Complex,, 
(,, 
$num,, '
,,,' (
-,,) *
$num,,* 4
),,4 5
;,,5 6
LY-- 
=-- 
new-- 
Complex-- 
(-- 
$num-- '
,--' (
$num--* 4
)--4 5
;--5 6
RX.. 
=.. 
new.. 
Complex.. 
(.. 
$num.. '
,..' (
-..) *
$num..* 4
)..4 5
;..5 6
RW// 
=// 
new// 
Complex// 
(// 
$num// '
,//' (
$num//* 4
)//4 5
;//5 6
RY00 
=00 
new00 
Complex00 
(00 
-00 
$num00 '
,00' (
$num00* 4
)004 5
;005 6
}11 	
public22 
	UHJCoeffs22 
(22 
double22 
j22  !
)22! "
{33 	
double77 
mulX77 
=77 
Math77 
.77 
Sqrt77 #
(77# $
$num77$ %
)77% &
;77& '
double88 
mulY88 
=88 
Math88 
.88 
Sqrt88 #
(88# $
$num88$ %
)88% &
;88& '
LW<< 
=<< 
new<< 
Complex<< 
(<< 
$num<< 
,<< 
-<<  !
j<<! "
)<<" #
;<<# $
LX== 
=== 
new== 
Complex== 
(== 
mulX== !
,==! "
$num==# $
)==$ %
;==% &
LY>> 
=>> 
new>> 
Complex>> 
(>> 
mulY>> !
,>>! "
$num>># $
)>>$ %
;>>% &
RW?? 
=?? 
new?? 
Complex?? 
(?? 
$num?? 
,?? 
j??  !
)??! "
;??" #
RX@@ 
=@@ 
new@@ 
Complex@@ 
(@@ 
mulX@@ !
,@@! "
$num@@# $
)@@$ %
;@@% &
RYAA 
=AA 
newAA 
ComplexAA 
(AA 
-AA 
mulYAA "
,AA" #
$numAA$ %
)AA% &
;AA& '
}BB 	
publicCC 
	UHJCoeffsCC 
(CC 
doubleCC 
angleDegreesCC  ,
,CC, -
doubleCC. 4
wCC5 6
,CC6 7
doubleCC8 >
jCC? @
)CC@ A
{DD 	
doubleHH 
mulXHH 
=HH 
MathHH 
.HH 
CosHH "
(HH" #
MathUtilHH# +
.HH+ ,
RadiansHH, 3
(HH3 4
angleDegreesHH4 @
/HHA B
$numHHC D
)HHD E
)HHE F
;HHF G
doubleII 
mulYII 
=II 
MathII 
.II 
SinII "
(II" #
MathUtilII# +
.II+ ,
RadiansII, 3
(II3 4
angleDegreesII4 @
/IIA B
$numIIC D
)IID E
)IIE F
;IIF G
LWMM 
=MM 
newMM 
ComplexMM 
(MM 
wMM 
*MM  
MathUtilMM! )
.MM) *
INVSQRT2MM* 2
,MM2 3
-MM4 5
jMM5 6
*MM7 8
MathUtilMM9 A
.MMA B
INVSQRT2MMB J
)MMJ K
;MMK L
LXNN 
=NN 
newNN 
ComplexNN 
(NN 
mulXNN !
,NN! "
$numNN# $
)NN$ %
;NN% &
LYOO 
=OO 
newOO 
ComplexOO 
(OO 
mulYOO !
,OO! "
$numOO# $
)OO$ %
;OO% &
RWPP 
=PP 
newPP 
ComplexPP 
(PP 
wPP 
*PP  
MathUtilPP! )
.PP) *
INVSQRT2PP* 2
,PP2 3
jPP4 5
*PP6 7
MathUtilPP8 @
.PP@ A
INVSQRT2PPA I
)PPI J
;PPJ K
RXQQ 
=QQ 
newQQ 
ComplexQQ 
(QQ 
mulXQQ !
,QQ! "
$numQQ# $
)QQ$ %
;QQ% &
RYRR 
=RR 
newRR 
ComplexRR 
(RR 
-RR 
mulYRR "
,RR" #
$numRR$ %
)RR% &
;RR& '
}SS 	
}TT 
}ºº ¨ä
1E:\GitHub\inguz-DSPUtil\InguzDSPUtilNew\Buffer.cs
	namespace 	
DSPUtil
 
{ 
public		 

	interface		 
ISampleBuffer		 "
{

 
void 
Skip 
( 
int 
n 
, 
out 
int  
nn! #
,# $
out% (
bool) -
moreSamples. 9
)9 :
;: ;
ISample 
[ 
] 
Read 
( 
int 
n 
, 
out !
int" %
nn& (
,( )
out* -
bool. 2
moreSamples3 >
)> ?
;? @
Complex 
[ 
] 
[ 
] 
ReadComplex 
(  
int  #
n$ %
,% &
out' *
int+ .
nn/ 1
,1 2
out3 6
bool7 ;
moreSamples< G
)G H
;H I
} 
public 

class 
Padder 
: 
SoundObj "
{ 
int 
_pad 
; 
public 
Padder 
( 
int 
pad 
) 
{ 	
_pad 
= 
pad 
; 
} 	
public 
Padder 
( 
	ISoundObj 
input  %
,% &
int' *
pad+ .
). /
{ 	
Input 
= 
input 
; 
_pad 
= 
pad 
; 
} 	
public"" 
override"" 
IEnumerator"" #
<""# $
ISample""$ +
>""+ ,
Samples""- 4
{## 	
get$$ 
{%% 
if&& 
(&& 
_input&& 
==&& 
null&& "
)&&" #
{'' 
yield(( 
break(( 
;((  
})) 
Sample** 
nul** 
=** 
new**  
Sample**! '
(**' (
NumChannels**( 3
)**3 4
;**4 5
int++ 
j++ 
=++ 
$num++ 
;++ 
while,, 
(,, 
j,, 
<,, 
_pad,, 
),, 
{-- 
yield.. 
return..  
nul..! $
;..$ %
j// 
++// 
;// 
}00 
foreach11 
(11 
ISample11  
sample11! '
in11( *
_input11+ 1
)111 2
{22 
if33 
(33 
j33 
>=33 
-33 
_pad33 "
)33" #
{44 
yield55 
return55 $
sample55% +
;55+ ,
}66 
j77 
++77 
;77 
}88 
}99 
}:: 	
};; 
[?? 
Serializable?? 
]?? 
public@@ 

class@@ 
SampleBuffer@@ 
:@@ 
SoundObj@@  (
,@@( )
ISampleBuffer@@* 7
{AA 
privateBB 
ISampleBufferBB 

_inputEnumBB (
;BB( )
publicDD 
SampleBufferDD 
(DD 
)DD 
{EE 	
ResetFF 
(FF 
)FF 
;FF 
}GG 	
publicHH 
SampleBufferHH 
(HH 
	ISoundObjHH %
inputHH& +
)HH+ ,
{II 	
InputJJ 
=JJ 
inputJJ 
;JJ 
ResetKK 
(KK 
)KK 
;KK 
}LL 	
privateNN 
ISampleBufferNN 
GetInputEnumNN *
(NN* +
)NN+ ,
{OO 	
ifPP 
(PP 

_inputEnumPP 
==PP 
nullPP "
)PP" #
{QQ 

_inputEnumRR 
=RR 
_inputRR #
.RR# $!
GetBufferedEnumeratorRR$ 9
(RR9 :
)RR: ;
asRR< >
ISampleBufferRR? L
;RRL M
}SS 
returnTT 

_inputEnumTT 
;TT 
}UU 	
publicWW 
overrideWW 
voidWW 
ResetWW "
(WW" #
)WW# $
{XX 	

_inputEnumYY 
=YY 
nullYY 
;YY 
}ZZ 	
public\\ 
ISample\\ 
[\\ 
]\\ 
Read\\ 
(\\ 
int\\ !
n\\" #
,\\# $
out\\% (
int\\) ,
nn\\- /
,\\/ 0
out\\1 4
bool\\5 9
moreSamples\\: E
)\\E F
{]] 	
return^^ 
GetInputEnum^^ 
(^^  
)^^  !
.^^! "
Read^^" &
(^^& '
n^^' (
,^^( )
out^^* -
nn^^. 0
,^^0 1
out^^2 5
moreSamples^^6 A
)^^A B
;^^B C
}__ 	
publicaa 
Complexaa 
[aa 
]aa 
[aa 
]aa 
ReadComplexaa &
(aa& '
intaa' *
naa+ ,
,aa, -
outaa. 1
intaa2 5
nnaa6 8
,aa8 9
outaa: =
boolaa> B
moreSamplesaaC N
)aaN O
{bb 	
throwcc 
newcc #
NotImplementedExceptioncc -
(cc- .
)cc. /
;cc/ 0
}dd 	
publicff 
voidff 
Skipff 
(ff 
intff 
nff 
,ff 
outff  #
intff$ '
nnff( *
,ff* +
outff, /
boolff0 4
moreSamplesff5 @
)ff@ A
{gg 	
GetInputEnumhh 
(hh 
)hh 
.hh 
Skiphh 
(hh  
nhh  !
,hh! "
outhh# &
nnhh' )
,hh) *
outhh+ .
moreSampleshh/ :
)hh: ;
;hh; <
}ii 	
privatekk 
intkk 
_lengthkk 
=kk 
intkk !
.kk! "
MaxValuekk" *
;kk* +
publicll 
intll 
Lengthll 
{mm 	
getnn 
{nn 
returnnn 
_lengthnn  
==nn  "
intnn" %
.nn% &
MaxValuenn& .
?nn/ 0
$numnn1 2
:nn3 4
_lengthnn5 <
;nn< =
}nn> ?
setoo 
{oo 
_lengthoo 
=oo 
valueoo !
;oo! "
}oo# $
}pp 	
publicuu 
overrideuu 
IEnumeratoruu #
<uu# $
ISampleuu$ +
>uu+ ,
Samplesuu- 4
{vv 	
getww 
{xx 
ifyy 
(yy 
_inputyy 
==yy 
nullyy "
)yy" #
{zz 
yield{{ 
break{{ 
;{{  
}|| 
int}} 
nn}} 
;}} 
int~~ 
n~~ 
=~~ 
Math~~ 
.~~ 
Min~~  
(~~  !
DSPUtil~~! (
.~~( )
BUFSIZE~~) 0
,~~0 1
_length~~2 9
)~~9 :
;~~: ;
bool 
moreSamples  
=! "
true# '
;' (
while
 
(
 
moreSamples
 "
)
" #
{
 
ISample
 
[
 
]
 
tmp
 !
=
" #
GetInputEnum
$ 0
(
0 1
)
1 2
.
2 3
Read
3 7
(
7 8
n
8 9
,
9 :
out
; >
nn
? A
,
A B
out
C F
moreSamples
G R
)
R S
;
S T
n
 
-=
 
nn
 
;
 
for
 
(
 
int
 
j
 
=
 
$num
 
;
  
j
! "
<
" #
nn
# %
;
% &
j
' (
++
( *
)
* +
{
 
yield
 
return
 $
tmp
% (
[
( )
j
) *
]
* +
;
+ ,
}
 
}
 
}
 
}
 	
public
 
	ISoundObj
 
PaddedSubset
 %
(
% &
int
& )
start
* /
,
/ 0
int
1 4
count
5 :
)
: ;
{
 	
bool
 
started
 
=
 
false
  
;
  !
ISampleBuffer
 
sb
 
=
 
GetInputEnum
 +
(
+ ,
)
, -
;
- .
ushort
 
nc
 
=
 
NumChannels
 #
;
# $
return
 
new
 
CallbackSource
 %
(
% &
nc
& (
,
( )

SampleRate
* 4
,
4 5
delegate
6 >
(
> ?
long
? C
n
D E
)
E F
{
 
int
 
nn
 
;
 
bool
 
more
 
;
 
if
 
(
 
start
 
<
 
$num
 
)
 
{
 
start
 
++
 
;
 
return
 
new
 
Sample
 %
(
% &
nc
& (
)
( )
;
) *
}
 
if
   
(
   
!
   
started
   
)
   
{
¡¡ 
sb
¢¢ 
.
¢¢ 
Skip
¢¢ 
(
¢¢ 
start
¢¢ !
,
¢¢! "
out
¢¢# &
nn
¢¢' )
,
¢¢) *
out
¢¢+ .
more
¢¢/ 3
)
¢¢3 4
;
¢¢4 5
started
££ 
=
££ 
true
££ "
;
££" #
}
¤¤ 
if
¥¥ 
(
¥¥ 
n
¥¥ 
>
¥¥ 
count
¥¥ 
)
¥¥ 
{
¦¦ 
return
§§ 
null
§§ 
;
§§  
}
¨¨ 
ISample
©© 
[
©© 
]
©© 
sa
©© 
=
©© 
sb
©© !
.
©©! "
Read
©©" &
(
©©& '
$num
©©' (
,
©©( )
out
©©* -
nn
©©. 0
,
©©0 1
out
©©2 5
more
©©6 :
)
©©: ;
;
©©; <
if
ªª 
(
ªª 
sa
ªª 
.
ªª 
Length
ªª 
>
ªª 
$num
ªª  !
)
ªª! "
{
«« 
return
¬¬ 
sa
¬¬ 
[
¬¬ 
$num
¬¬ 
]
¬¬  
;
¬¬  !
}
­­ 
else
®® 
{
¯¯ 
return
°° 
null
°° 
;
°°  
}
±± 
}
²² 
)
²² 
;
²² 
}
³³ 	
public
µµ 
	ISoundObj
µµ 
Subset
µµ 
(
µµ  
int
µµ  #
start
µµ$ )
)
µµ) *
{
¶¶ 	
return
·· 
Subset
·· 
(
·· 
start
·· 
,
··  
int
··! $
.
··$ %
MaxValue
··% -
-
··. /
start
··0 5
)
··5 6
;
··6 7
}
¸¸ 	
public
ºº 
	ISoundObj
ºº 
Subset
ºº 
(
ºº  
int
ºº  #
start
ºº$ )
,
ºº) *
int
ºº+ .
count
ºº/ 4
)
ºº4 5
{
»» 	
bool
¼¼ 
started
¼¼ 
=
¼¼ 
false
¼¼  
;
¼¼  !
ISampleBuffer
½½ 
sb
½½ 
=
½½ 
GetInputEnum
½½ +
(
½½+ ,
)
½½, -
;
½½- .
return
¾¾ 
new
¾¾ 
CallbackSource
¾¾ %
(
¾¾% &
NumChannels
¾¾& 1
,
¾¾1 2

SampleRate
¾¾3 =
,
¾¾= >
delegate
¾¾? G
(
¾¾G H
long
¾¾H L
n
¾¾M N
)
¾¾N O
{
¿¿ 
int
ÀÀ 
nn
ÀÀ 
;
ÀÀ 
bool
ÁÁ 
more
ÁÁ 
;
ÁÁ 
if
ÂÂ 
(
ÂÂ 
!
ÂÂ 
started
ÂÂ 
)
ÂÂ 
{
ÃÃ 
sb
ÄÄ 
.
ÄÄ 
Skip
ÄÄ 
(
ÄÄ 
start
ÄÄ !
,
ÄÄ! "
out
ÄÄ# &
nn
ÄÄ' )
,
ÄÄ) *
out
ÄÄ+ .
more
ÄÄ/ 3
)
ÄÄ3 4
;
ÄÄ4 5
started
ÅÅ 
=
ÅÅ 
true
ÅÅ "
;
ÅÅ" #
}
ÆÆ 
if
ÇÇ 
(
ÇÇ 
n
ÇÇ 
>
ÇÇ 
count
ÇÇ 
)
ÇÇ 
{
ÈÈ 
return
ÉÉ 
null
ÉÉ 
;
ÉÉ  
}
ÊÊ 
ISample
ËË 
[
ËË 
]
ËË 
sa
ËË 
=
ËË 
sb
ËË !
.
ËË! "
Read
ËË" &
(
ËË& '
$num
ËË' (
,
ËË( )
out
ËË* -
nn
ËË. 0
,
ËË0 1
out
ËË2 5
more
ËË6 :
)
ËË: ;
;
ËË; <
if
ÌÌ 
(
ÌÌ 
sa
ÌÌ 
.
ÌÌ 
Length
ÌÌ 
>
ÌÌ 
$num
ÌÌ  !
)
ÌÌ! "
{
ÍÍ 
return
ÎÎ 
sa
ÎÎ 
[
ÎÎ 
$num
ÎÎ 
]
ÎÎ  
;
ÎÎ  !
}
ÏÏ 
else
ÐÐ 
{
ÑÑ 
return
ÒÒ 
null
ÒÒ 
;
ÒÒ  
}
ÓÓ 
}
ÔÔ 
)
ÔÔ 
;
ÔÔ 
}
ÕÕ 	
}
ÖÖ 
[
áá 
Serializable
áá 
]
áá 
public
ââ 

class
ââ 
SoundBuffer
ââ 
:
ââ 
SoundObj
ââ '
,
ââ' (
ISampleBuffer
ââ) 6
{
ãã 
private
ää 
List
ää 
<
ää 
ISample
ää 
>
ää 
_samples
ää &
;
ää& '
private
åå 
ISampleBuffer
åå 

_inputEnum
åå (
=
åå) *
null
åå+ /
;
åå/ 0
private
ææ 
bool
ææ 
_moreSamples
ææ !
=
ææ" #
true
ææ$ (
;
ææ( )
private
çç 
int
çç 
_pos
çç 
=
çç 
$num
çç 
;
çç 
private
éé 
ISample
éé 
[
éé 
]
éé 
_buff
éé 
;
éé  
private
êê 
int
êê 
_bufflen
êê 
;
êê 
private
ìì 
Complex
ìì 
[
ìì 
]
ìì 
[
ìì 
]
ìì 
_cbuff
ìì "
;
ìì" #
private
íí 
int
íí 
	_cbufflen
íí 
;
íí 
public
ïï 
SoundBuffer
ïï 
(
ïï 
)
ïï 
{
ðð 	
_samples
ññ 
=
ññ 
new
ññ 
List
ññ 
<
ññ  
ISample
ññ  '
>
ññ' (
(
ññ( )
DSPUtil
ññ) 0
.
ññ0 1
BUFSIZE
ññ1 8
)
ññ8 9
;
ññ9 :
}
òò 	
public
óó 
SoundBuffer
óó 
(
óó 
	ISoundObj
óó $
input
óó% *
)
óó* +
{
ôô 	
_samples
õõ 
=
õõ 
new
õõ 
List
õõ 
<
õõ  
ISample
õõ  '
>
õõ' (
(
õõ( )
DSPUtil
õõ) 0
.
õõ0 1
BUFSIZE
õõ1 8
)
õõ8 9
;
õõ9 :
Input
öö 
=
öö 
input
öö 
;
öö 
}
÷÷ 	
public
øø 
SoundBuffer
øø 
(
øø 
List
øø 
<
øø  
ISample
øø  '
>
øø' (
samples
øø) 0
,
øø0 1
ushort
øø2 8
numChannels
øø9 D
,
øøD E
uint
øøF J

sampleRate
øøK U
)
øøU V
{
ùù 	
_samples
úú 
=
úú 
samples
úú 
;
úú 
Input
ûû 
=
ûû 
null
ûû 
;
ûû 
_nc
üü 
=
üü 
numChannels
üü 
;
üü 
_sr
ýý 
=
ýý 

sampleRate
ýý 
;
ýý 
}
þþ 	
public
 
int
 
Count
 
{
 	
get
 
{
 
return
 
_samples
 
.
  
Count
  %
;
% &
}
 
}
 	
public
 
bool
 
ReadTo
 
(
 
int
 
n
  
)
  !
{
 	
if
 
(
 
n
 
<
 
_samples
 
.
 
Count
 "
)
" #
{
 
return
 
true
 
;
 
}
 
if
 
(
 
_input
 
==
 
null
 
)
 
{
 
_moreSamples
 
=
 
false
 $
;
$ %
return
 
_moreSamples
 #
;
# $
}
 
if
 
(
 

_inputEnum
 
==
 
null
 "
)
" #
{
 

_inputEnum
 
=
 
_input
 #
.
# $#
GetBufferedEnumerator
$ 9
(
9 :
)
: ;
as
< >
ISampleBuffer
? L
;
L M
}
 
int
 
nn
 
=
 
n
 
-
 
_samples
 !
.
! "
Count
" '
;
' (
if
 
(
 
nn
 
>
 
$num
 
&&
 
_moreSamples
 &
)
& '
{
 
if
 
(
 
n
 
<
 
int
 
.
 
MaxValue
 "
&&
# %
_samples
& .
.
. /
Capacity
/ 7
<
8 9
n
: ;
)
; <
_samples
= E
.
E F
Capacity
F N
=
O P
n
Q R
;
R S
int
 
tot
 
=
 
$num
 
;
 
int
   
nnn
   
;
   
while
¡¡ 
(
¡¡ 
_moreSamples
¡¡ #
&&
¡¡$ &
tot
¡¡' *
<
¡¡+ ,
nn
¡¡- /
)
¡¡/ 0
{
¢¢ 
ISample
££ 
[
££ 
]
££ 
tmp
££ !
=
££" #

_inputEnum
££$ .
.
££. /
Read
££/ 3
(
££3 4
DSPUtil
££4 ;
.
££; <
BUFSIZE
££< C
,
££C D
out
££E H
nnn
££I L
,
££L M
out
££N Q
_moreSamples
££R ^
)
££^ _
;
££_ `
for
¤¤ 
(
¤¤ 
int
¤¤ 
j
¤¤ 
=
¤¤  
$num
¤¤! "
;
¤¤" #
j
¤¤$ %
<
¤¤& '
nnn
¤¤( +
;
¤¤+ ,
j
¤¤- .
++
¤¤. 0
)
¤¤0 1
{
¥¥ 
_samples
¦¦  
.
¦¦  !
Add
¦¦! $
(
¦¦$ %
tmp
¦¦% (
[
¦¦( )
j
¦¦) *
]
¦¦* +
)
¦¦+ ,
;
¦¦, -
}
§§ 
tot
¨¨ 
+=
¨¨ 
nnn
¨¨ 
;
¨¨ 
}
©© 
}
ªª 
return
«« 
nn
«« 
<
«« 
$num
«« 
||
«« 
_moreSamples
«« )
;
««) *
}
¬¬ 	
public
­­ 
int
­­ 
ReadAll
­­ 
(
­­ 
)
­­ 
{
®® 	
ReadTo
¯¯ 
(
¯¯ 
int
¯¯ 
.
¯¯ 
MaxValue
¯¯ 
)
¯¯  
;
¯¯  !
return
°° 
_samples
°° 
.
°° 
Count
°° !
;
°°! "
}
±± 	
public
´´ 
ISample
´´ 
[
´´ 
]
´´ 
Read
´´ 
(
´´ 
int
´´ !
n
´´" #
,
´´# $
out
´´% (
int
´´) ,
nn
´´- /
,
´´/ 0
out
´´1 4
bool
´´5 9
moreSamples
´´: E
)
´´E F
{
µµ 	
if
¶¶ 
(
¶¶ 
_buff
¶¶ 
==
¶¶ 
null
¶¶ 
||
¶¶  
_bufflen
¶¶! )
<
¶¶* +
n
¶¶, -
)
¶¶- .
{
·· 
_buff
¸¸ 
=
¸¸ 
new
¸¸ 
ISample
¸¸ #
[
¸¸# $
n
¸¸$ %
]
¸¸% &
;
¸¸& '
_bufflen
¹¹ 
=
¹¹ 
n
¹¹ 
;
¹¹ 
}
ºº 
int
»» 
nnn
»» 
=
»» 
_pos
»» 
;
»» 
int
¼¼ 
n4
¼¼ 
=
¼¼ 
nnn
¼¼ 
+
¼¼ 
n
¼¼ 
;
¼¼ 
bool
½½ 
more
½½ 
=
½½ 
ReadTo
½½ 
(
½½ 
n4
½½ !
)
½½! "
;
½½" #
nn
¾¾ 
=
¾¾ 
(
¾¾ 
more
¾¾ 
?
¾¾ 
n
¾¾ 
:
¾¾ 
_samples
¾¾ %
.
¾¾% &
Count
¾¾& +
-
¾¾, -
nnn
¾¾. 1
)
¾¾1 2
;
¾¾2 3
_samples
ÀÀ 
.
ÀÀ 
CopyTo
ÀÀ 
(
ÀÀ 
nnn
ÀÀ 
,
ÀÀ  
_buff
ÀÀ! &
,
ÀÀ& '
$num
ÀÀ( )
,
ÀÀ) *
(
ÀÀ+ ,
int
ÀÀ, /
)
ÀÀ/ 0
nn
ÀÀ0 2
)
ÀÀ2 3
;
ÀÀ3 4
moreSamples
ÁÁ 
=
ÁÁ 
more
ÁÁ 
;
ÁÁ 
_pos
ÂÂ 
+=
ÂÂ 
(
ÂÂ 
int
ÂÂ 
)
ÂÂ 
nn
ÂÂ 
;
ÂÂ 
return
ÃÃ 
_buff
ÃÃ 
;
ÃÃ 
}
ÄÄ 	
public
ÅÅ 
Complex
ÅÅ 
[
ÅÅ 
]
ÅÅ 
[
ÅÅ 
]
ÅÅ 
ReadComplex
ÅÅ &
(
ÅÅ& '
int
ÅÅ' *
n
ÅÅ+ ,
,
ÅÅ, -
out
ÅÅ. 1
int
ÅÅ2 5
nn
ÅÅ6 8
,
ÅÅ8 9
out
ÅÅ: =
bool
ÅÅ> B
moreSamples
ÅÅC N
)
ÅÅN O
{
ÆÆ 	
if
ÇÇ 
(
ÇÇ 
_cbuff
ÇÇ 
==
ÇÇ 
null
ÇÇ 
||
ÇÇ !
	_cbufflen
ÇÇ" +
<
ÇÇ, -
n
ÇÇ. /
)
ÇÇ/ 0
{
ÈÈ 
_cbuff
ÉÉ 
=
ÉÉ 
new
ÉÉ 
Complex
ÉÉ $
[
ÉÉ$ %
_nc
ÉÉ% (
]
ÉÉ( )
[
ÉÉ) *
]
ÉÉ* +
;
ÉÉ+ ,
for
ÊÊ 
(
ÊÊ 
ushort
ÊÊ 
c
ÊÊ 
=
ÊÊ 
$num
ÊÊ  !
;
ÊÊ! "
c
ÊÊ# $
<
ÊÊ% &
_nc
ÊÊ' *
;
ÊÊ* +
c
ÊÊ, -
++
ÊÊ- /
)
ÊÊ/ 0
{
ËË 
_cbuff
ÌÌ 
[
ÌÌ 
c
ÌÌ 
]
ÌÌ 
=
ÌÌ 
new
ÌÌ  #
Complex
ÌÌ$ +
[
ÌÌ+ ,
n
ÌÌ, -
]
ÌÌ- .
;
ÌÌ. /
}
ÍÍ 
	_cbufflen
ÎÎ 
=
ÎÎ 
n
ÎÎ 
;
ÎÎ 
}
ÏÏ 
else
ÐÐ 
{
ÑÑ 
for
ÒÒ 
(
ÒÒ 
ushort
ÒÒ 
c
ÒÒ 
=
ÒÒ 
$num
ÒÒ  !
;
ÒÒ! "
c
ÒÒ# $
<
ÒÒ% &
_nc
ÒÒ' *
;
ÒÒ* +
c
ÒÒ, -
++
ÒÒ- /
)
ÒÒ/ 0
{
ÓÓ 
Array
ÔÔ 
.
ÔÔ 
Clear
ÔÔ 
(
ÔÔ  
_cbuff
ÔÔ  &
[
ÔÔ& '
c
ÔÔ' (
]
ÔÔ( )
,
ÔÔ) *
$num
ÔÔ+ ,
,
ÔÔ, -
n
ÔÔ. /
)
ÔÔ/ 0
;
ÔÔ0 1
}
ÕÕ 
}
ÖÖ 
int
ØØ 
nnn
ØØ 
=
ØØ 
_pos
ØØ 
;
ØØ 
int
ÙÙ 
n4
ÙÙ 
=
ÙÙ 
nnn
ÙÙ 
+
ÙÙ 
n
ÙÙ 
;
ÙÙ 
bool
ÚÚ 
more
ÚÚ 
=
ÚÚ 
ReadTo
ÚÚ 
(
ÚÚ 
n4
ÚÚ !
)
ÚÚ! "
;
ÚÚ" #
nn
ÛÛ 
=
ÛÛ 
(
ÛÛ 
more
ÛÛ 
?
ÛÛ 
n
ÛÛ 
:
ÛÛ 
_samples
ÛÛ %
.
ÛÛ% &
Count
ÛÛ& +
-
ÛÛ, -
nnn
ÛÛ. 1
)
ÛÛ1 2
;
ÛÛ2 3
_samples
ÞÞ 
.
ÞÞ 
CopyTo
ÞÞ 
(
ÞÞ 
nnn
ÞÞ 
,
ÞÞ  
_buff
ÞÞ! &
,
ÞÞ& '
$num
ÞÞ( )
,
ÞÞ) *
(
ÞÞ+ ,
int
ÞÞ, /
)
ÞÞ/ 0
nn
ÞÞ0 2
)
ÞÞ2 3
;
ÞÞ3 4
for
ßß 
(
ßß 
int
ßß 
j
ßß 
=
ßß 
$num
ßß 
;
ßß 
j
ßß 
<
ßß 
nn
ßß  "
;
ßß" #
j
ßß$ %
++
ßß% '
)
ßß' (
{
àà 
ISample
áá 
s
áá 
=
áá 
_samples
áá $
[
áá$ %
nnn
áá% (
+
áá) *
j
áá+ ,
]
áá, -
;
áá- .
for
ââ 
(
ââ 
ushort
ââ 
c
ââ 
=
ââ 
$num
ââ  !
;
ââ! "
c
ââ# $
<
ââ% &
_nc
ââ' *
;
ââ* +
c
ââ, -
++
ââ- /
)
ââ/ 0
{
ãã 
_cbuff
ää 
[
ää 
c
ää 
]
ää 
[
ää 
j
ää 
]
ää  
.
ää  !
Re
ää! #
=
ää$ %
s
ää& '
[
ää' (
c
ää( )
]
ää) *
;
ää* +
}
åå 
}
ææ 
moreSamples
èè 
=
èè 
more
èè 
;
èè 
_pos
éé 
+=
éé 
(
éé 
int
éé 
)
éé 
nn
éé 
;
éé 
return
ëë 
_cbuff
ëë 
;
ëë 
}
ìì 	
public
òò 
void
òò 
Skip
òò 
(
òò 
int
òò 
n
òò 
,
òò 
out
òò  #
int
òò$ '
nn
òò( *
,
òò* +
out
òò, /
bool
òò0 4
moreSamples
òò5 @
)
òò@ A
{
óó 	
Read
ôô 
(
ôô 
n
ôô 
,
ôô 
out
ôô 
nn
ôô 
,
ôô 
out
ôô 
moreSamples
ôô  +
)
ôô+ ,
;
ôô, -
}
õõ 	
private
úú 
int
úú 
_maxPos
úú 
=
úú 
int
úú !
.
úú! "
MaxValue
úú" *
;
úú* +
private
ûû 
double
ûû 
_maxVal
ûû 
=
ûû  
$num
ûû! "
;
ûû" #
private
üü 
void
üü 
FindMax
üü 
(
üü 
)
üü 
{
ýý 	
for
þþ 
(
þþ 
int
þþ 
j
þþ 
=
þþ 
$num
þþ 
;
þþ 
j
þþ 
<
þþ 
_samples
þþ  (
.
þþ( )
Count
þþ) .
;
þþ. /
j
þþ0 1
++
þþ1 3
)
þþ3 4
{
ÿÿ 
ISample
 
s
 
=
 
_samples
 $
[
$ %
j
% &
]
& '
;
' (
for
 
(
 
int
 
c
 
=
 
$num
 
;
 
c
  !
<
" #
s
$ %
.
% &
NumChannels
& 1
;
1 2
c
3 4
++
4 6
)
6 7
{
 
double
 
v
 
=
 
Math
 #
.
# $
Abs
$ '
(
' (
s
( )
[
) *
c
* +
]
+ ,
)
, -
;
- .
if
 
(
 
v
 
>
 
_maxVal
 #
)
# $
{
 
_maxVal
 
=
  !
v
" #
;
# $
_maxPos
 
=
  !
j
" #
;
# $
}
 
}
 
}
 
}
 	
public
 
int
 
MaxPos
 
(
 
)
 
{
 	
if
 
(
 
_maxPos
 
==
 
int
 
.
 
MaxValue
 '
)
' (
{
 
FindMax
 
(
 
)
 
;
 
}
 
return
 
_maxPos
 
;
 
}
 	
public
 
double
 
MaxVal
 
(
 
)
 
{
 	
if
 
(
 
_maxPos
 
==
 
int
 
.
 
MaxValue
 '
)
' (
{
 
FindMax
 
(
 
)
 
;
 
}
 
return
 
_maxVal
 
;
 
}
 	
public
¢¢ 
double
¢¢ 
	Normalize
¢¢ 
(
¢¢  
double
¢¢  &
dBfs
¢¢' +
)
¢¢+ ,
{
££ 	
return
¤¤ 
	Normalize
¤¤ 
(
¤¤ 
dBfs
¤¤ !
,
¤¤! "
true
¤¤# '
)
¤¤' (
;
¤¤( )
}
¥¥ 	
public
¦¦ 
double
¦¦ 
	Normalize
¦¦ 
(
¦¦  
double
¦¦  &
dBfs
¦¦' +
,
¦¦+ ,
bool
¦¦- 1
doIt
¦¦2 6
)
¦¦6 7
{
§§ 	
double
©© 
gain
©© 
=
©© 
$num
©© 
;
©© 
double
ªª 
max
ªª 
=
ªª 
$num
ªª 
;
ªª 
for
«« 
(
«« 
int
«« 
j
«« 
=
«« 
$num
«« 
;
«« 
j
«« 
<
«« 
_samples
««  (
.
««( )
Count
««) .
;
««. /
j
««0 1
++
««1 3
)
««3 4
{
¬¬ 
ISample
­­ 
s
­­ 
=
­­ 
_samples
­­ $
[
­­$ %
j
­­% &
]
­­& '
;
­­' (
for
®® 
(
®® 
int
®® 
c
®® 
=
®® 
$num
®® 
;
®® 
c
®®  !
<
®®" #
s
®®$ %
.
®®% &
NumChannels
®®& 1
;
®®1 2
c
®®3 4
++
®®4 6
)
®®6 7
{
¯¯ 
max
°° 
=
°° 
Math
°° 
.
°° 
Max
°° "
(
°°" #
max
°°# &
,
°°& '
Math
°°( ,
.
°°, -
Abs
°°- 0
(
°°0 1
s
°°1 2
[
°°2 3
c
°°3 4
]
°°4 5
)
°°5 6
)
°°6 7
;
°°7 8
}
±± 
}
²² 
if
³³ 
(
³³ 
max
³³ 
==
³³ 
$num
³³ 
)
³³ 
{
´´ 
return
µµ 
$num
µµ 
;
µµ 
}
¶¶ 
gain
·· 
=
·· 
MathUtil
·· 
.
·· 
gain
··  
(
··  !
dBfs
··! %
)
··% &
/
··' (
max
··) ,
;
··, -
if
¸¸ 
(
¸¸ 
doIt
¸¸ 
)
¸¸ 
{
¹¹ 
	ApplyGain
ºº 
(
ºº 
gain
ºº 
)
ºº 
;
ºº  
}
»» 
return
¼¼ 
gain
¼¼ 
;
¼¼ 
}
½½ 	
public
ÃÃ 
void
ÃÃ 
	ApplyGain
ÃÃ 
(
ÃÃ 
double
ÃÃ $
gain
ÃÃ% )
)
ÃÃ) *
{
ÄÄ 	
for
ÅÅ 
(
ÅÅ 
int
ÅÅ 
j
ÅÅ 
=
ÅÅ 
$num
ÅÅ 
;
ÅÅ 
j
ÅÅ 
<
ÅÅ 
_samples
ÅÅ  (
.
ÅÅ( )
Count
ÅÅ) .
;
ÅÅ. /
j
ÅÅ0 1
++
ÅÅ1 3
)
ÅÅ3 4
{
ÆÆ 
ISample
ÇÇ 
s
ÇÇ 
=
ÇÇ 
_samples
ÇÇ $
[
ÇÇ$ %
j
ÇÇ% &
]
ÇÇ& '
;
ÇÇ' (
_samples
ÈÈ 
[
ÈÈ 
j
ÈÈ 
]
ÈÈ 
=
ÈÈ 
new
ÈÈ !
Sample
ÈÈ" (
(
ÈÈ( )
s
ÈÈ) *
,
ÈÈ* +
gain
ÈÈ, 0
)
ÈÈ0 1
;
ÈÈ1 2
}
ÉÉ 
}
ÊÊ 	
public
ÐÐ 
void
ÐÐ 
ApplyWindow
ÐÐ 
(
ÐÐ  
	CosWindow
ÐÐ  )
window
ÐÐ* 0
)
ÐÐ0 1
{
ÑÑ 	
window
ÒÒ 
.
ÒÒ 
Input
ÒÒ 
=
ÒÒ 
new
ÒÒ 
CallbackSource
ÒÒ -
(
ÒÒ- .
NumChannels
ÒÒ. 9
,
ÒÒ9 :

SampleRate
ÒÒ; E
,
ÒÒE F
delegate
ÒÒG O
(
ÒÒO P
long
ÒÒP T
j
ÒÒU V
)
ÒÒV W
{
ÓÓ 
if
ÔÔ 
(
ÔÔ 
j
ÔÔ 
>=
ÔÔ 
_samples
ÔÔ !
.
ÔÔ! "
Count
ÔÔ" '
)
ÔÔ' (
{
ÕÕ 
return
ÖÖ 
null
ÖÖ 
;
ÖÖ  
}
×× 
return
ØØ 
_samples
ØØ 
[
ØØ  
(
ØØ  !
int
ØØ! $
)
ØØ$ %
j
ØØ% &
]
ØØ& '
;
ØØ' (
}
ÙÙ 
)
ÙÙ 
;
ÙÙ 
int
ÚÚ 
n
ÚÚ 
=
ÚÚ 
$num
ÚÚ 
;
ÚÚ 
foreach
ÛÛ 
(
ÛÛ 
Sample
ÛÛ 
s
ÛÛ 
in
ÛÛ  
window
ÛÛ! '
)
ÛÛ' (
{
ÜÜ 
_samples
ÝÝ 
[
ÝÝ 
n
ÝÝ 
++
ÝÝ 
]
ÝÝ 
=
ÝÝ 
s
ÝÝ  !
;
ÝÝ! "
}
ÞÞ 
}
ßß 	
public
áá 
void
áá 
PadTo
áá 
(
áá 
int
áá 
n
áá 
)
áá  
{
ââ 	
ReadTo
ãã 
(
ãã 
n
ãã 
)
ãã 
;
ãã 
Sample
åå 
s
åå 
=
åå 
new
åå 
Sample
åå !
(
åå! "
_input
åå" (
.
åå( )
NumChannels
åå) 4
)
åå4 5
;
åå5 6
while
ææ 
(
ææ 
_samples
ææ 
.
ææ 
Count
ææ !
<
ææ" #
n
ææ$ %
)
ææ% &
{
çç 
_samples
èè 
.
èè 
Add
èè 
(
èè 
s
èè 
)
èè 
;
èè  
}
éé 
}
êê 	
public
ìì 
void
ìì 
PadToPowerOfTwo
ìì #
(
ìì# $
)
ìì$ %
{
íí 	
int
ïï 
n
ïï 
=
ïï 
MathUtil
ïï 
.
ïï 
NextPowerOfTwo
ïï +
(
ïï+ ,
_samples
ïï, 4
.
ïï4 5
Count
ïï5 :
)
ïï: ;
;
ïï; <
PadTo
ðð 
(
ðð 
n
ðð 
)
ðð 
;
ðð 
}
ññ 	
public
öö 
override
öö 
IEnumerator
öö #
<
öö# $
ISample
öö$ +
>
öö+ ,
Samples
öö- 4
{
÷÷ 	
get
øø 
{
ùù 
_pos
úú 
=
úú 
$num
úú 
;
úú 
while
ûû 
(
ûû 
_pos
ûû 
<
ûû 
_samples
ûû %
.
ûû% &
Count
ûû& +
||
ûû, .
_moreSamples
ûû/ ;
)
ûû; <
{
üü 
if
ýý 
(
ýý 
!
ýý 
ReadTo
ýý 
(
ýý  
_pos
ýý  $
+
ýý% &
$num
ýý' (
)
ýý( )
)
ýý) *
{
þþ 
yield
ÿÿ 
break
ÿÿ #
;
ÿÿ# $
}
 
yield
 
return
  
_samples
! )
[
) *
(
* +
int
+ .
)
. /
_pos
/ 3
]
3 4
;
4 5
_pos
 
++
 
;
 
}
 
}
 
}
 	
public
 
IEnumerator
 
<
 
ISample
 "
>
" #
SampleSubset
$ 0
(
0 1
int
1 4
start
5 :
,
: ;
int
< ?
count
@ E
)
E F
{
 	
ReadTo
 
(
 
start
 
+
 
count
  
)
  !
;
! "
for
 
(
 
int
 
j
 
=
 
start
 
;
 
j
 
<
 
start
 $
+
$ %
count
% *
&&
+ -
j
. /
<
/ 0
_samples
0 8
.
8 9
Count
9 >
;
> ?
j
@ A
++
A C
)
C D
{
 
yield
 
return
 
_samples
 %
[
% &
j
& '
]
' (
;
( )
}
 
}
 	
public
 
	ISoundObj
 
Subset
 
(
  
int
  #
start
$ )
)
) *
{
 	
return
 
Subset
 
(
 
start
 
,
  
int
! $
.
$ %
MaxValue
% -
-
- .
start
. 3
)
3 4
;
4 5
}
 	
public
 
	ISoundObj
 
Subset
 
(
  
int
  #
start
$ )
,
) *
int
+ .
count
/ 4
)
4 5
{
 	
ReadTo
 
(
 
start
 
+
 
count
  
)
  !
;
! "
return
 
new
 
CallbackSource
 %
(
% &
NumChannels
& 1
,
1 2

SampleRate
3 =
,
= >
delegate
? G
(
G H
long
H L
j
M N
)
N O
{
   
if
¡¡ 
(
¡¡ 
j
¡¡ 
>=
¡¡ 
$num
¡¡ 
&&
¡¡ 
j
¡¡ 
<
¡¡  !
count
¡¡" '
&&
¡¡( *
(
¡¡+ ,
j
¡¡, -
+
¡¡. /
start
¡¡0 5
)
¡¡5 6
<
¡¡7 8
_samples
¡¡9 A
.
¡¡A B
Count
¡¡B G
)
¡¡G H
{
¢¢ 
return
££ 
_samples
££ #
[
££# $
(
££$ %
int
££% (
)
££( )
(
££) *
j
££* +
+
££, -
start
££. 3
)
££3 4
]
££4 5
;
££5 6
}
¤¤ 
return
¥¥ 
null
¥¥ 
;
¥¥ 
}
¦¦ 
)
¦¦ 
;
¦¦ 
}
§§ 	
public
ªª 
ISample
ªª 
this
ªª 
[
ªª 
int
ªª 
arg
ªª  #
]
ªª# $
{
«« 	
get
¬¬ 
{
­­ 
ReadTo
®® 
(
®® 
arg
®® 
)
®® 
;
®® 
return
¯¯ 
_samples
¯¯ 
[
¯¯  
arg
¯¯  #
]
¯¯# $
;
¯¯$ %
}
°° 
}
±± 	
public
´´ 
ISample
´´ 
[
´´ 
]
´´ 
ToArray
´´  
(
´´  !
)
´´! "
{
µµ 	
return
¶¶ 
ToArray
¶¶ 
(
¶¶ 
$num
¶¶ 
,
¶¶ 
-
¶¶ 
$num
¶¶  
)
¶¶  !
;
¶¶! "
}
·· 	
public
¹¹ 
ISample
¹¹ 
[
¹¹ 
]
¹¹ 
ToArray
¹¹  
(
¹¹  !
int
¹¹! $
startPos
¹¹% -
)
¹¹- .
{
ºº 	
return
»» 
ToArray
»» 
(
»» 
startPos
»» #
,
»»# $
-
»»% &
$num
»»& '
)
»»' (
;
»»( )
}
¼¼ 	
public
¾¾ 
ISample
¾¾ 
[
¾¾ 
]
¾¾ 
ToArray
¾¾  
(
¾¾  !
int
¾¾! $
startPos
¾¾% -
,
¾¾- .
int
¾¾/ 2
count
¾¾3 8
)
¾¾8 9
{
¿¿ 	
int
ÀÀ 
n
ÀÀ 
=
ÀÀ 
count
ÀÀ 
;
ÀÀ 
if
ÁÁ 
(
ÁÁ 
count
ÁÁ 
<
ÁÁ 
$num
ÁÁ 
)
ÁÁ 
{
ÂÂ 
ReadAll
ÃÃ 
(
ÃÃ 
)
ÃÃ 
;
ÃÃ 
n
ÄÄ 
=
ÄÄ 
_samples
ÄÄ 
.
ÄÄ 
Count
ÄÄ "
-
ÄÄ# $
startPos
ÄÄ% -
;
ÄÄ- .
}
ÅÅ 
else
ÆÆ 
{
ÇÇ 
ReadTo
ÈÈ 
(
ÈÈ 
startPos
ÈÈ 
+
ÈÈ  !
count
ÈÈ" '
)
ÈÈ' (
;
ÈÈ( )
n
ÉÉ 
=
ÉÉ 
Math
ÉÉ 
.
ÉÉ 
Min
ÉÉ 
(
ÉÉ 
startPos
ÉÉ %
+
ÉÉ& '
count
ÉÉ( -
,
ÉÉ- .
_samples
ÉÉ/ 7
.
ÉÉ7 8
Count
ÉÉ8 =
)
ÉÉ= >
;
ÉÉ> ?
}
ÊÊ 
ISample
ËË 
[
ËË 
]
ËË 
ret
ËË 
=
ËË 
new
ËË 
ISample
ËË  '
[
ËË' (
n
ËË( )
]
ËË) *
;
ËË* +
for
ÌÌ 
(
ÌÌ 
int
ÌÌ 
j
ÌÌ 
=
ÌÌ 
startPos
ÌÌ !
;
ÌÌ! "
j
ÌÌ# $
-
ÌÌ% &
startPos
ÌÌ' /
<
ÌÌ0 1
n
ÌÌ2 3
;
ÌÌ3 4
j
ÌÌ5 6
++
ÌÌ6 8
)
ÌÌ8 9
{
ÍÍ 
ret
ÎÎ 
[
ÎÎ 
j
ÎÎ 
-
ÎÎ 
startPos
ÎÎ  
]
ÎÎ  !
=
ÎÎ" #
_samples
ÎÎ$ ,
[
ÎÎ, -
j
ÎÎ- .
]
ÎÎ. /
;
ÎÎ/ 0
}
ÏÏ 
return
ÐÐ 
ret
ÐÐ 
;
ÐÐ 
}
ÑÑ 	
public
ÖÖ 
double
ÖÖ 
[
ÖÖ 
]
ÖÖ 
[
ÖÖ 
]
ÖÖ 
ToDoubleArray
ÖÖ '
(
ÖÖ' (
)
ÖÖ( )
{
×× 	
return
ØØ 
ToDoubleArray
ØØ  
(
ØØ  !
$num
ØØ! "
,
ØØ" #
-
ØØ$ %
$num
ØØ% &
)
ØØ& '
;
ØØ' (
}
ÙÙ 	
public
ÞÞ 
double
ÞÞ 
[
ÞÞ 
]
ÞÞ 
[
ÞÞ 
]
ÞÞ 
ToDoubleArray
ÞÞ '
(
ÞÞ' (
int
ÞÞ( +
startPos
ÞÞ, 4
)
ÞÞ4 5
{
ßß 	
return
àà 
ToDoubleArray
àà  
(
àà  !
startPos
àà! )
,
àà) *
-
àà+ ,
$num
àà, -
)
àà- .
;
àà. /
}
áá 	
public
èè 
double
èè 
[
èè 
]
èè 
[
èè 
]
èè 
ToDoubleArray
èè '
(
èè' (
int
èè( +
startPos
èè, 4
,
èè4 5
int
èè6 9
count
èè: ?
)
èè? @
{
éé 	
int
êê 
n
êê 
=
êê 
count
êê 
;
êê 
if
ëë 
(
ëë 
count
ëë 
<
ëë 
$num
ëë 
)
ëë 
{
ìì 
ReadAll
íí 
(
íí 
)
íí 
;
íí 
n
îî 
=
îî 
_samples
îî 
.
îî 
Count
îî "
-
îî# $
startPos
îî% -
;
îî- .
}
ïï 
else
ðð 
{
ññ 
ReadTo
òò 
(
òò 
startPos
òò 
+
òò  !
count
òò" '
)
òò' (
;
òò( )
n
óó 
=
óó 
Math
óó 
.
óó 
Min
óó 
(
óó 
startPos
óó %
+
óó& '
count
óó( -
,
óó- .
_samples
óó/ 7
.
óó7 8
Count
óó8 =
)
óó= >
;
óó> ?
}
ôô 
double
õõ 
[
õõ 
]
õõ 
[
õõ 
]
õõ 
ret
õõ 
=
õõ 
new
õõ  
double
õõ! '
[
õõ' (
NumChannels
õõ( 3
]
õõ3 4
[
õõ4 5
]
õõ5 6
;
õõ6 7
for
öö 
(
öö 
int
öö 
c
öö 
=
öö 
$num
öö 
;
öö 
c
öö 
<
öö 
NumChannels
öö  +
;
öö+ ,
c
öö- .
++
öö. 0
)
öö0 1
{
÷÷ 
ret
øø 
[
øø 
c
øø 
]
øø 
=
øø 
new
øø 
double
øø #
[
øø# $
count
øø$ )
<
øø) *
$num
øø* +
?
øø, -
n
øø. /
:
øø0 1
count
øø2 7
]
øø7 8
;
øø8 9
}
ùù 
for
úú 
(
úú 
int
úú 
j
úú 
=
úú 
startPos
úú !
;
úú! "
j
úú# $
-
úú% &
startPos
úú' /
<
úú0 1
n
úú2 3
;
úú3 4
j
úú5 6
++
úú6 8
)
úú8 9
{
ûû 
ISample
üü 
s
üü 
=
üü 
_samples
üü $
[
üü$ %
j
üü% &
]
üü& '
;
üü' (
for
ýý 
(
ýý 
int
ýý 
c
ýý 
=
ýý 
$num
ýý 
;
ýý 
c
ýý  !
<
ýý" #
NumChannels
ýý$ /
;
ýý/ 0
c
ýý1 2
++
ýý2 4
)
ýý4 5
{
þþ 
ret
ÿÿ 
[
ÿÿ 
c
ÿÿ 
]
ÿÿ 
[
ÿÿ 
j
ÿÿ 
-
ÿÿ 
startPos
ÿÿ '
]
ÿÿ' (
=
ÿÿ) *
s
ÿÿ+ ,
[
ÿÿ, -
c
ÿÿ- .
]
ÿÿ. /
;
ÿÿ/ 0
}
 
}
 
return
 
ret
 
;
 
}
 	
public
 
Complex
 
[
 
]
 
[
 
]
 
ToComplexArray
 )
(
) *
)
* +
{
 	
return
 
ToComplexArray
 !
(
! "
$num
" #
,
# $
-
% &
$num
& '
)
' (
;
( )
}
 	
public
 
Complex
 
[
 
]
 
[
 
]
 
ToComplexArray
 )
(
) *
int
* -
startPos
. 6
)
6 7
{
 	
return
 
ToComplexArray
 !
(
! "
startPos
" *
,
* +
-
, -
$num
- .
)
. /
;
/ 0
}
 	
public
 
Complex
 
[
 
]
 
[
 
]
 
ToComplexArray
 )
(
) *
int
* -
startPos
. 6
,
6 7
int
8 ;
count
< A
)
A B
{
 	
int
 
n
 
=
 
count
 
;
 
if
 
(
 
count
 
<
 
$num
 
)
 
{
 
ReadAll
 
(
 
)
 
;
 
n
 
=
 
_samples
 
.
 
Count
 "
-
# $
startPos
% -
;
- .
}
 
else
 
{
 
ReadTo
 
(
 
startPos
 
+
  !
count
" '
)
' (
;
( )
n
 
=
 
Math
 
.
 
Min
 
(
 
count
 "
,
" #
_samples
$ ,
.
, -
Count
- 2
-
3 4
startPos
5 =
)
= >
;
> ?
}
 
Complex
 
[
 
]
 
[
 
]
 
ret
 
=
 
new
 !
Complex
" )
[
) *
NumChannels
* 5
]
5 6
[
6 7
]
7 8
;
8 9
for
 
(
 
int
 
c
 
=
 
$num
 
;
 
c
 
<
 
NumChannels
  +
;
+ ,
c
- .
++
. 0
)
0 1
{
 
ret
 
[
 
c
 
]
 
=
 
new
 
Complex
 $
[
$ %
n
% &
]
& '
;
' (
}
 
for
   
(
   
int
   
j
   
=
   
startPos
   !
;
  ! "
j
  # $
-
  % &
startPos
  ' /
<
  0 1
n
  2 3
;
  3 4
j
  5 6
++
  6 8
)
  8 9
{
¡¡ 
ISample
¢¢ 
s
¢¢ 
=
¢¢ 
_samples
¢¢ $
[
¢¢$ %
j
¢¢% &
]
¢¢& '
;
¢¢' (
for
££ 
(
££ 
int
££ 
c
££ 
=
££ 
$num
££ 
;
££ 
c
££  !
<
££" #
NumChannels
££$ /
;
££/ 0
c
££1 2
++
££2 4
)
££4 5
{
¤¤ 
ret
¥¥ 
[
¥¥ 
c
¥¥ 
]
¥¥ 
[
¥¥ 
j
¥¥ 
-
¥¥ 
startPos
¥¥ '
]
¥¥' (
=
¥¥) *
new
¥¥+ .
Complex
¥¥/ 6
(
¥¥6 7
s
¥¥7 8
[
¥¥8 9
c
¥¥9 :
]
¥¥: ;
,
¥¥; <
$num
¥¥< =
)
¥¥= >
;
¥¥> ?
}
¦¦ 
}
§§ 
return
¨¨ 
ret
¨¨ 
;
¨¨ 
}
©© 	
}
ªª 
public
°° 

class
°° 
CircularBuffer
°° 
:
°°  !
SoundObj
°°" *
{
±± 
private
²² 
uint
²² 
_length
²² 
=
²² 
$num
²²  
;
²²  !
private
³³ 
uint
³³ 
_pos
³³ 
=
³³ 
$num
³³ 
;
³³ 
private
´´ 
ISample
´´ 
[
´´ 
]
´´ 
_data
´´ 
;
´´  
private
¶¶ 
ISample
¶¶ 
_peak
¶¶ 
=
¶¶ 
null
¶¶  $
;
¶¶$ %
private
·· 
ISample
·· 
_mean
·· 
=
·· 
null
··  $
;
··$ %
private
¸¸ 
ISample
¸¸ 
_meandB
¸¸ 
=
¸¸  !
null
¸¸" &
;
¸¸& '
private
¹¹ 
ISample
¹¹ 
_stddev
¹¹ 
=
¹¹  !
null
¹¹" &
;
¹¹& '
private
ºº 
ISample
ºº 
	_stddevdB
ºº !
=
ºº" #
null
ºº$ (
;
ºº( )
public
ÁÁ 
CircularBuffer
ÁÁ 
(
ÁÁ 
	ISoundObj
ÁÁ '
input
ÁÁ( -
,
ÁÁ- .
uint
ÁÁ/ 3
bufsize
ÁÁ4 ;
)
ÁÁ; <
{
ÂÂ 	
_data
ÃÃ 
=
ÃÃ 
new
ÃÃ 
ISample
ÃÃ 
[
ÃÃ  
bufsize
ÃÃ  '
]
ÃÃ' (
;
ÃÃ( )
_length
ÄÄ 
=
ÄÄ 
bufsize
ÄÄ 
;
ÄÄ 
Input
ÅÅ 
=
ÅÅ 
input
ÅÅ 
;
ÅÅ 
}
ÆÆ 	
public
ÌÌ 
CircularBuffer
ÌÌ 
(
ÌÌ 
uint
ÌÌ "
bufsize
ÌÌ# *
)
ÌÌ* +
{
ÍÍ 	
_data
ÎÎ 
=
ÎÎ 
new
ÎÎ 
ISample
ÎÎ 
[
ÎÎ  
bufsize
ÎÎ  '
]
ÎÎ' (
;
ÎÎ( )
_length
ÏÏ 
=
ÏÏ 
bufsize
ÏÏ 
;
ÏÏ 
}
ÐÐ 	
public
ÒÒ 
override
ÒÒ 
IEnumerator
ÒÒ #
<
ÒÒ# $
ISample
ÒÒ$ +
>
ÒÒ+ ,
Samples
ÒÒ- 4
{
ÓÓ 	
get
ÔÔ 
{
ÕÕ 
if
ÖÖ 
(
ÖÖ 
_input
ÖÖ 
==
ÖÖ 
null
ÖÖ "
)
ÖÖ" #
{
×× 
yield
ØØ 
break
ØØ 
;
ØØ  
}
ÙÙ 
ushort
ÛÛ 
nc
ÛÛ 
=
ÛÛ 
_input
ÛÛ "
.
ÛÛ" #
NumChannels
ÛÛ# .
;
ÛÛ. /
_peak
ÜÜ 
=
ÜÜ 
new
ÜÜ 
Sample
ÜÜ "
(
ÜÜ" #
nc
ÜÜ# %
)
ÜÜ% &
;
ÜÜ& '
foreach
ÞÞ 
(
ÞÞ 
ISample
ÞÞ  
sample
ÞÞ! '
in
ÞÞ( *
_input
ÞÞ+ 1
)
ÞÞ1 2
{
ßß 
_data
ââ 
[
ââ 
_pos
ââ 
++
ââ  
]
ââ  !
=
ââ" #
sample
ââ$ *
;
ââ* +
for
åå 
(
åå 
ushort
åå 
c
åå  !
=
åå" #
$num
åå$ %
;
åå% &
c
åå' (
<
åå) *
nc
åå+ -
;
åå- .
c
åå/ 0
++
åå0 2
)
åå2 3
{
ææ 
_peak
çç 
[
çç 
c
çç 
]
çç  
=
çç! "
Math
çç# '
.
çç' (
Max
çç( +
(
çç+ ,
_peak
çç, 1
[
çç1 2
c
çç2 3
]
çç3 4
,
çç4 5
sample
çç6 <
[
çç< =
c
çç= >
]
çç> ?
)
çç? @
;
çç@ A
}
èè 
_mean
ëë 
=
ëë 
null
ëë  
;
ëë  !
_meandB
ìì 
=
ìì 
null
ìì "
;
ìì" #
_stddev
íí 
=
íí 
null
íí "
;
íí" #
	_stddevdB
îî 
=
îî 
null
îî  $
;
îî$ %
if
ññ 
(
ññ 
_pos
ññ 
>=
ññ 
_length
ññ  '
)
ññ' (
{
òò 
_pos
óó 
=
óó 
$num
óó  
;
óó  !
}
ôô 
yield
÷÷ 
return
÷÷  
sample
÷÷! '
;
÷÷' (
}
øø 
}
ùù 
}
úú 	
public
 
ISample
 
this
 
[
 
int
 
arg
  #
]
# $
{
 	
get
 
{
 
uint
 
n
 
=
 
(
 
uint
 
)
 
(
  
(
  !
(
! "
(
" #
_pos
# '
+
( )
arg
* -
)
- .
%
/ 0
_length
1 8
)
8 9
+
: ;
_length
< C
)
C D
%
E F
_length
G N
)
N O
;
O P
ISample
 
s
 
=
 
_data
 !
[
! "
n
" #
]
# $
;
$ %
if
 
(
 
s
 
==
 
null
 
)
 
{
 
s
 
=
 
new
 
Sample
 "
(
" #
_nc
# &
)
& '
;
' (
}
 
return
 
s
 
;
 
}
 
}
 	
public
 
ISample
 
Peak
 
(
 
)
 
{
 	
return
 
_peak
 
;
 
}
 	
public
¢¢ 
ISample
¢¢ 
Mean
¢¢ 
(
¢¢ 
)
¢¢ 
{
££ 	
if
¤¤ 
(
¤¤ 
_mean
¤¤ 
!=
¤¤ 
null
¤¤ 
)
¤¤ 
{
¥¥ 
return
¦¦ 
_mean
¦¦ 
;
¦¦ 
}
§§ 
ushort
¨¨ 
nc
¨¨ 
=
¨¨ 
_input
¨¨ 
.
¨¨ 
NumChannels
¨¨ *
;
¨¨* +
_mean
©© 
=
©© 
new
©© 
Sample
©© 
(
©© 
nc
©© !
)
©©! "
;
©©" #
for
ªª 
(
ªª 
int
ªª 
n
ªª 
=
ªª 
$num
ªª 
;
ªª 
n
ªª 
<
ªª 
_length
ªª  '
;
ªª' (
n
ªª) *
++
ªª* ,
)
ªª, -
{
«« 
if
¬¬ 
(
¬¬ 
_data
¬¬ 
[
¬¬ 
n
¬¬ 
]
¬¬ 
!=
¬¬ 
null
¬¬  $
)
¬¬$ %
{
­­ 
for
®® 
(
®® 
ushort
®® 
c
®®  !
=
®®" #
$num
®®$ %
;
®®% &
c
®®' (
<
®®) *
nc
®®+ -
;
®®- .
c
®®/ 0
++
®®0 2
)
®®2 3
{
¯¯ 
_mean
°° 
[
°° 
c
°° 
]
°°  
+=
°°! #
_data
°°$ )
[
°°) *
n
°°* +
]
°°+ ,
[
°°, -
c
°°- .
]
°°. /
;
°°/ 0
}
±± 
}
²² 
}
³³ 
for
´´ 
(
´´ 
ushort
´´ 
c
´´ 
=
´´ 
$num
´´ 
;
´´ 
c
´´  
<
´´! "
nc
´´# %
;
´´% &
c
´´' (
++
´´( *
)
´´* +
{
µµ 
_mean
¶¶ 
[
¶¶ 
c
¶¶ 
]
¶¶ 
/=
¶¶ 
_length
¶¶ #
;
¶¶# $
}
·· 
return
¸¸ 
_mean
¸¸ 
;
¸¸ 
}
¹¹ 	
public
¿¿ 
ISample
¿¿ 
MeanDb
¿¿ 
(
¿¿ 
)
¿¿ 
{
ÀÀ 	
if
ÁÁ 
(
ÁÁ 
_meandB
ÁÁ 
!=
ÁÁ 
null
ÁÁ 
)
ÁÁ  
{
ÂÂ 
return
ÃÃ 
_meandB
ÃÃ 
;
ÃÃ 
}
ÄÄ 
ushort
ÅÅ 
nc
ÅÅ 
=
ÅÅ 
_input
ÅÅ 
.
ÅÅ 
NumChannels
ÅÅ *
;
ÅÅ* +
_meandB
ÆÆ 
=
ÆÆ 
new
ÆÆ 
Sample
ÆÆ  
(
ÆÆ  !
nc
ÆÆ! #
)
ÆÆ# $
;
ÆÆ$ %
for
ÇÇ 
(
ÇÇ 
int
ÇÇ 
n
ÇÇ 
=
ÇÇ 
$num
ÇÇ 
;
ÇÇ 
n
ÇÇ 
<
ÇÇ 
_length
ÇÇ  '
;
ÇÇ' (
n
ÇÇ) *
++
ÇÇ* ,
)
ÇÇ, -
{
ÈÈ 
if
ÉÉ 
(
ÉÉ 
_data
ÉÉ 
[
ÉÉ 
n
ÉÉ 
]
ÉÉ 
!=
ÉÉ 
null
ÉÉ  $
)
ÉÉ$ %
{
ÊÊ 
for
ËË 
(
ËË 
ushort
ËË 
c
ËË  !
=
ËË" #
$num
ËË$ %
;
ËË% &
c
ËË' (
<
ËË) *
nc
ËË+ -
;
ËË- .
c
ËË/ 0
++
ËË0 2
)
ËË2 3
{
ÌÌ 
_meandB
ÍÍ 
[
ÍÍ  
c
ÍÍ  !
]
ÍÍ! "
+=
ÍÍ# %
MathUtil
ÍÍ& .
.
ÍÍ. /
dB
ÍÍ/ 1
(
ÍÍ1 2
_data
ÍÍ2 7
[
ÍÍ7 8
n
ÍÍ8 9
]
ÍÍ9 :
[
ÍÍ: ;
c
ÍÍ; <
]
ÍÍ< =
)
ÍÍ= >
;
ÍÍ> ?
}
ÎÎ 
}
ÏÏ 
}
ÐÐ 
for
ÑÑ 
(
ÑÑ 
ushort
ÑÑ 
c
ÑÑ 
=
ÑÑ 
$num
ÑÑ 
;
ÑÑ 
c
ÑÑ  
<
ÑÑ! "
nc
ÑÑ# %
;
ÑÑ% &
c
ÑÑ' (
++
ÑÑ( *
)
ÑÑ* +
{
ÒÒ 
_meandB
ÓÓ 
[
ÓÓ 
c
ÓÓ 
]
ÓÓ 
/=
ÓÓ 
_length
ÓÓ %
;
ÓÓ% &
}
ÔÔ 
return
ÕÕ 
_meandB
ÕÕ 
;
ÕÕ 
}
ÖÖ 	
public
ÜÜ 
ISample
ÜÜ 
StdDev
ÜÜ 
(
ÜÜ 
)
ÜÜ 
{
ÝÝ 	
if
ÞÞ 
(
ÞÞ 
_stddev
ÞÞ 
!=
ÞÞ 
null
ÞÞ 
)
ÞÞ  
{
ßß 
return
àà 
_stddev
àà 
;
àà 
}
áá 
ISample
ââ 
mean
ââ 
=
ââ 
Mean
ââ 
(
ââ  
)
ââ  !
;
ââ! "
ushort
ãã 
nc
ãã 
=
ãã 
_input
ãã 
.
ãã 
NumChannels
ãã *
;
ãã* +
_stddev
ää 
=
ää 
new
ää 
Sample
ää  
(
ää  !
nc
ää! #
)
ää# $
;
ää$ %
for
åå 
(
åå 
int
åå 
n
åå 
=
åå 
$num
åå 
;
åå 
n
åå 
<
åå 
_length
åå  '
;
åå' (
n
åå) *
++
åå* ,
)
åå, -
{
ææ 
if
çç 
(
çç 
_data
çç 
[
çç 
n
çç 
]
çç 
!=
çç 
null
çç  $
)
çç$ %
{
èè 
for
éé 
(
éé 
ushort
éé 
c
éé  !
=
éé" #
$num
éé$ %
;
éé% &
c
éé' (
<
éé) *
nc
éé+ -
;
éé- .
c
éé/ 0
++
éé0 2
)
éé2 3
{
êê 
double
ëë 
dev
ëë "
=
ëë# $
(
ëë% &
_data
ëë& +
[
ëë+ ,
n
ëë, -
]
ëë- .
[
ëë. /
c
ëë/ 0
]
ëë0 1
-
ëë2 3
mean
ëë4 8
[
ëë8 9
c
ëë9 :
]
ëë: ;
)
ëë; <
;
ëë< =
_stddev
ìì 
[
ìì  
c
ìì  !
]
ìì! "
+=
ìì# %
(
ìì& '
dev
ìì' *
*
ìì+ ,
dev
ìì- 0
)
ìì0 1
;
ìì1 2
}
íí 
}
îî 
}
ïï 
for
ðð 
(
ðð 
ushort
ðð 
c
ðð 
=
ðð 
$num
ðð 
;
ðð 
c
ðð  
<
ðð! "
nc
ðð# %
;
ðð% &
c
ðð' (
++
ðð( *
)
ðð* +
{
ññ 
_stddev
òò 
[
òò 
c
òò 
]
òò 
=
òò 
Math
òò !
.
òò! "
Sqrt
òò" &
(
òò& '
_stddev
òò' .
[
òò. /
c
òò/ 0
]
òò0 1
/
òò1 2
_length
òò2 9
)
òò9 :
;
òò: ;
}
óó 
return
ôô 
_stddev
ôô 
;
ôô 
}
õõ 	
public
ûû 
ISample
ûû 
StdDevDb
ûû 
(
ûû  
)
ûû  !
{
üü 	
if
ýý 
(
ýý 
	_stddevdB
ýý 
!=
ýý 
null
ýý !
)
ýý! "
{
þþ 
return
ÿÿ 
	_stddevdB
ÿÿ  
;
ÿÿ  !
}
 
ISample
 
meandb
 
=
 
MeanDb
 #
(
# $
)
$ %
;
% &
ushort
 
nc
 
=
 
_input
 
.
 
NumChannels
 *
;
* +
	_stddevdB
 
=
 
new
 
Sample
 "
(
" #
nc
# %
)
% &
;
& '
for
 
(
 
int
 
n
 
=
 
$num
 
;
 
n
 
<
 
_length
  '
;
' (
n
) *
++
* ,
)
, -
{
 
if
 
(
 
_data
 
[
 
n
 
]
 
!=
 
null
  $
)
$ %
{
 
for
 
(
 
ushort
 
c
  !
=
" #
$num
$ %
;
% &
c
' (
<
) *
nc
+ -
;
- .
c
/ 0
++
0 2
)
2 3
{
 
double
 
devdb
 $
=
% &
(
' (
MathUtil
( 0
.
0 1
dB
1 3
(
3 4
_data
4 9
[
9 :
n
: ;
]
; <
[
< =
c
= >
]
> ?
)
? @
-
A B
meandb
C I
[
I J
c
J K
]
K L
)
L M
;
M N
	_stddevdB
 !
[
! "
c
" #
]
# $
+=
% '
(
( )
devdb
) .
*
/ 0
devdb
1 6
)
6 7
;
7 8
}
 
}
 
}
 
for
 
(
 
ushort
 
c
 
=
 
$num
 
;
 
c
  
<
! "
nc
# %
;
% &
c
' (
++
( *
)
* +
{
 
	_stddevdB
 
[
 
c
 
]
 
=
 
Math
 #
.
# $
Sqrt
$ (
(
( )
	_stddevdB
) 2
[
2 3
c
3 4
]
4 5
/
6 7
_length
8 ?
)
? @
;
@ A
}
 
return
 
	_stddevdB
 
;
 
}
 	
}
 
public
 

class
 
BufferReader
 
:
 
SoundObj
  (
{
 
private
 
Sample
 
[
 
]
 
_data
 
;
 
public
 
BufferReader
 
(
 
)
 
{
 	
}
   	
public
¡¡ 
BufferReader
¡¡ 
(
¡¡ 
Sample
¡¡ "
[
¡¡" #
]
¡¡# $
data
¡¡% )
)
¡¡) *
{
¢¢ 	
_data
££ 
=
££ 
data
££ 
;
££ 
}
¤¤ 	
public
©© 
override
©© 
IEnumerator
©© #
<
©©# $
ISample
©©$ +
>
©©+ ,
Samples
©©- 4
{
ªª 	
get
«« 
{
¬¬ 
if
­­ 
(
­­ 
_data
­­ 
==
­­ 
null
­­ !
)
­­! "
{
®® 
yield
¯¯ 
break
¯¯ 
;
¯¯  
}
°° 
foreach
±± 
(
±± 
ISample
±±  
sample
±±! '
in
±±( *
_data
±±+ 0
)
±±0 1
{
²² 
yield
³³ 
return
³³  
sample
³³! '
;
³³' (
}
´´ 
}
µµ 
}
¶¶ 	
}
·· 
public
»» 

enum
»»  
ComplexBufferFlags
»» "
{
¼¼ 
Both
½½ 
=
½½ 
$num
½½ 
,
½½ 
RealOnly
¾¾ 
=
¾¾ 
$num
¾¾ 
,
¾¾ 
ImaginaryOnly
¿¿ 
=
¿¿ 
$num
¿¿ 
,
¿¿ 
	Magnitude
ÀÀ 
=
ÀÀ 
$num
ÀÀ 
,
ÀÀ 
Phase
ÁÁ 
=
ÁÁ 
$num
ÁÁ 
}
ÂÂ 
public
ÄÄ 

class
ÄÄ !
ComplexBufferReader
ÄÄ $
:
ÄÄ% &
SoundObj
ÄÄ' /
{
ÅÅ 
private
ÆÆ 
Complex
ÆÆ 
[
ÆÆ 
]
ÆÆ 
[
ÆÆ 
]
ÆÆ 
_data
ÆÆ !
;
ÆÆ! "
private
ÇÇ 
int
ÇÇ 
_start
ÇÇ 
;
ÇÇ 
private
ÈÈ 
int
ÈÈ 
_end
ÈÈ 
;
ÈÈ 
private
ÉÉ  
ComplexBufferFlags
ÉÉ "
_flags
ÉÉ# )
;
ÉÉ) *
public
ËË !
ComplexBufferReader
ËË "
(
ËË" #
)
ËË# $
{
ÌÌ 	
}
ÎÎ 	
public
ÐÐ !
ComplexBufferReader
ÐÐ "
(
ÐÐ" #
Complex
ÐÐ# *
[
ÐÐ* +
]
ÐÐ+ ,
data
ÐÐ- 1
,
ÐÐ1 2
int
ÐÐ3 6
start
ÐÐ7 <
,
ÐÐ< =
int
ÐÐ> A
end
ÐÐB E
)
ÐÐE F
{
ÑÑ 	
_data
ÒÒ 
=
ÒÒ 
new
ÒÒ 
Complex
ÒÒ 
[
ÒÒ  
$num
ÒÒ  !
]
ÒÒ! "
[
ÒÒ" #
]
ÒÒ# $
;
ÒÒ$ %
_data
ÓÓ 
[
ÓÓ 
$num
ÓÓ 
]
ÓÓ 
=
ÓÓ 
data
ÓÓ 
;
ÓÓ 
_start
ÔÔ 
=
ÔÔ 
Math
ÔÔ 
.
ÔÔ 
Max
ÔÔ 
(
ÔÔ 
start
ÔÔ #
,
ÔÔ# $
$num
ÔÔ% &
)
ÔÔ& '
;
ÔÔ' (
_end
ÕÕ 
=
ÕÕ 
Math
ÕÕ 
.
ÕÕ 
Min
ÕÕ 
(
ÕÕ 
end
ÕÕ 
,
ÕÕ  
data
ÕÕ! %
.
ÕÕ% &
Length
ÕÕ& ,
)
ÕÕ, -
;
ÕÕ- .
_flags
ÖÖ 
=
ÖÖ  
ComplexBufferFlags
ÖÖ '
.
ÖÖ' (
RealOnly
ÖÖ( 0
;
ÖÖ0 1
NumChannels
×× 
=
×× 
$num
×× 
;
×× 
}
ØØ 	
public
ÙÙ !
ComplexBufferReader
ÙÙ "
(
ÙÙ" #
Complex
ÙÙ# *
[
ÙÙ* +
]
ÙÙ+ ,
data
ÙÙ- 1
,
ÙÙ1 2
int
ÙÙ3 6
start
ÙÙ7 <
,
ÙÙ< =
int
ÙÙ> A
end
ÙÙB E
,
ÙÙE F 
ComplexBufferFlags
ÙÙG Y
flags
ÙÙZ _
)
ÙÙ_ `
{
ÚÚ 	
_data
ÛÛ 
=
ÛÛ 
new
ÛÛ 
Complex
ÛÛ 
[
ÛÛ  
$num
ÛÛ  !
]
ÛÛ! "
[
ÛÛ" #
]
ÛÛ# $
;
ÛÛ$ %
_data
ÜÜ 
[
ÜÜ 
$num
ÜÜ 
]
ÜÜ 
=
ÜÜ 
data
ÜÜ 
;
ÜÜ 
_start
ÝÝ 
=
ÝÝ 
Math
ÝÝ 
.
ÝÝ 
Max
ÝÝ 
(
ÝÝ 
start
ÝÝ #
,
ÝÝ# $
$num
ÝÝ% &
)
ÝÝ& '
;
ÝÝ' (
_end
ÞÞ 
=
ÞÞ 
Math
ÞÞ 
.
ÞÞ 
Min
ÞÞ 
(
ÞÞ 
end
ÞÞ 
,
ÞÞ  
data
ÞÞ! %
.
ÞÞ% &
Length
ÞÞ& ,
)
ÞÞ, -
;
ÞÞ- .
_flags
ßß 
=
ßß 
flags
ßß 
;
ßß 
NumChannels
àà 
=
àà 
$num
àà 
;
àà 
}
áá 	
public
ãã !
ComplexBufferReader
ãã "
(
ãã" #
Complex
ãã# *
[
ãã* +
]
ãã+ ,
[
ãã, -
]
ãã- .
data
ãã/ 3
,
ãã3 4
ushort
ãã5 ;
	nChannels
ãã< E
,
ããE F
int
ããG J
start
ããK P
,
ããP Q
int
ããR U
end
ããV Y
,
ããY Z 
ComplexBufferFlags
ãã[ m
flags
ããn s
)
ããs t
{
ää 	
_data
åå 
=
åå 
data
åå 
;
åå 
_start
ææ 
=
ææ 
Math
ææ 
.
ææ 
Max
ææ 
(
ææ 
start
ææ #
,
ææ# $
$num
ææ% &
)
ææ& '
;
ææ' (
_end
çç 
=
çç 
Math
çç 
.
çç 
Min
çç 
(
çç 
end
çç 
,
çç  
data
çç! %
[
çç% &
$num
çç& '
]
çç' (
.
çç( )
Length
çç) /
)
çç/ 0
;
çç0 1
_flags
èè 
=
èè 
flags
èè 
;
èè 
NumChannels
éé 
=
éé 
(
éé 
ushort
éé !
)
éé! "
(
éé" #
(
éé# $
_flags
éé$ *
==
éé* , 
ComplexBufferFlags
éé, >
.
éé> ?
Both
éé? C
)
ééC D
?
ééE F
(
ééG H
$num
ééH I
*
ééJ K
	nChannels
ééL U
)
ééU V
:
ééW X
	nChannels
ééY b
)
ééb c
;
ééc d
}
êê 	
public
ìì 
override
ìì 
int
ìì 

Iterations
ìì &
{
íí 	
get
îî 
{
ïï 
return
ðð 
_end
ðð 
-
ðð 
_start
ðð $
;
ðð$ %
}
ññ 
}
òò 	
public
öö 
override
öö 
IEnumerator
öö #
<
öö# $
ISample
öö$ +
>
öö+ ,
Samples
öö- 4
{
÷÷ 	
get
øø 
{
ùù 
if
úú 
(
úú 
_data
úú 
==
úú 
null
úú !
)
úú! "
{
ûû 
yield
üü 
break
üü 
;
üü  
}
ýý 
for
þþ 
(
þþ 
int
þþ 
j
þþ 
=
þþ 
_start
þþ  
;
þþ  !
j
þþ" #
<
þþ# $
_end
þþ$ (
;
þþ( )
j
þþ* +
++
þþ+ -
)
þþ- .
{
ÿÿ 
yield
 
return
  
_next
! &
(
& '
j
' (
)
( )
;
) *
}
 
}
 
}
 	
internal
 
ISample
 
_next
 
(
 
int
 "
j
# $
)
$ %
{
 	
ISample
 
s
 
=
 
_nc
 
==
 
$num
  
?
! "
new
# &
Sample2
' .
(
. /
)
/ 0
:
1 2
new
3 6
Sample
7 =
(
= >
_nc
> A
)
A B
as
C E
ISample
F M
;
M N
int
 
cc
 
=
 
$num
 
;
 
for
 
(
 
int
 
c
 
=
 
$num
 
;
 
c
 
<
 
_nc
  #
;
# $
c
% &
+=
' )
(
* +
(
+ ,
_flags
, 2
==
3 5 
ComplexBufferFlags
6 H
.
H I
Both
I M
)
M N
?
O P
$num
Q R
:
S T
$num
U V
)
V W
)
W X
{
 
if
 
(
 
_flags
 
==
  
ComplexBufferFlags
 0
.
0 1
Both
1 5
)
5 6
{
 
s
 
[
 
c
 
]
 
=
 
_data
  
[
  !
cc
! #
]
# $
[
$ %
j
% &
]
& '
.
' (
Re
( *
;
* +
s
 
[
 
c
 
+
 
$num
 
]
 
=
 
_data
 $
[
$ %
cc
% '
]
' (
[
( )
j
) *
]
* +
.
+ ,
Im
, .
;
. /
}
 
else
 
if
 
(
 
_flags
 
==
  " 
ComplexBufferFlags
# 5
.
5 6
RealOnly
6 >
)
> ?
{
 
s
 
[
 
c
 
]
 
=
 
_data
  
[
  !
cc
! #
]
# $
[
$ %
j
% &
]
& '
.
' (
Re
( *
;
* +
}
 
else
 
if
 
(
 
_flags
 
==
  " 
ComplexBufferFlags
# 5
.
5 6
ImaginaryOnly
6 C
)
C D
{
 
s
 
[
 
c
 
]
 
=
 
_data
  
[
  !
cc
! #
]
# $
[
$ %
j
% &
]
& '
.
' (
Im
( *
;
* +
}
 
else
 
if
 
(
 
_flags
 
==
  " 
ComplexBufferFlags
# 5
.
5 6
	Magnitude
6 ?
)
? @
{
 
s
 
[
 
c
 
]
 
=
 
_data
  
[
  !
cc
! #
]
# $
[
$ %
j
% &
]
& '
.
' (
	Magnitude
( 1
;
1 2
}
 
else
 
if
 
(
 
_flags
 
==
  " 
ComplexBufferFlags
# 5
.
5 6
Phase
6 ;
)
; <
{
 
s
 
[
 
c
 
]
 
=
 
_data
  
[
  !
cc
! #
]
# $
[
$ %
j
% &
]
& '
.
' (
Phase
( -
;
- .
}
 
cc
   
++
   
;
   
}
¡¡ 
return
¢¢ 
s
¢¢ 
;
¢¢ 
}
££ 	
}
¤¤ 
}¥¥ ¡¦
9E:\GitHub\inguz-DSPUtil\InguzDSPUtilNew\ChannelSplicer.cs
	namespace		 	
DSPUtil		
 
{

 
[ 
Serializable 
] 
public 

class 
SingleChannel 
:  
SoundObj! )
{ 
ushort 
	_nChannel 
; 
bool  
_okIfChannelNotFound !
=" #
false$ )
;) *
public 
SingleChannel 
( 
	ISoundObj &
input' ,
,, -
ushort. 4
nChannel5 =
)= >
{ 	
Input 
= 
input 
; 
	_nChannel 
= 
nChannel  
;  !
} 	
public 
SingleChannel 
( 
	ISoundObj &
input' ,
,, -
ushort. 4
nChannel5 =
,= >
bool? C
okIfChannelNotFoundD W
)W X
{ 	
Input 
= 
input 
; 
	_nChannel 
= 
nChannel  
;  ! 
_okIfChannelNotFound  
=! "
okIfChannelNotFound# 6
;6 7
} 	
public!! 
override!! 
ushort!! 
NumChannels!! *
{"" 	
get## 
{$$ 
return%% 
$num%% 
;%% 
}&& 
}'' 	
public,, 
override,, 
IEnumerator,, #
<,,# $
ISample,,$ +
>,,+ ,
Samples,,- 4
{-- 	
get.. 
{// 
if00 
(00 
_input00 
==00 
null00 "
)00" #
{11 
throw22 
new22 
	Exception22 '
(22' (
$str22( 2
)222 3
;223 4
}33 
ushort44 
nc44 
=44 
_input44 "
.44" #
NumChannels44# .
;44. /
bool55 
no55 
=55 
false55 
;55  
if66 
(66 
nc66 
<66 
	_nChannel66 "
)66" #
{77 
no88 
=88 
true88 
;88 
if99 
(99 
!99  
_okIfChannelNotFound99 -
)99- .
{:: 
throw;; 
new;; !
	Exception;;" +
(;;+ ,
String;;, 2
.;;2 3
Format;;3 9
(;;9 :
$str;;: [
,;;[ \
	_nChannel;;] f
);;f g
);;g h
;;;h i
}<< 
}== 
foreach?? 
(?? 
ISample??  
sample??! '
in??( *
_input??+ 1
)??1 2
{@@ 
ifAA 
(AA 
noAA 
)AA 
{BB 
yieldCC 
returnCC $
newCC% (
SampleCC) /
(CC/ 0
(CC0 1
ushortCC1 7
)CC7 8
$numCC8 9
)CC9 :
;CC: ;
}DD 
elseEE 
ifEE 
(EE 
ncEE 
==EE  "
$numEE# $
)EE$ %
{FF 
yieldGG 
returnGG $
sampleGG% +
;GG+ ,
}HH 
elseII 
{JJ 
yieldKK 
returnKK $
newKK% (
SampleKK) /
(KK/ 0
sampleKK0 6
[KK6 7
	_nChannelKK7 @
]KK@ A
)KKA B
;KKB C
}LL 
}MM 
}NN 
}OO 	
}PP 
[VV 
SerializableVV 
]VV 
publicWW 

classWW 

TwoChannelWW 
:WW 
SoundObjWW &
{XX 
ushortYY 

_nChannel1YY 
;YY 
ushortZZ 

_nChannel2ZZ 
;ZZ 
public\\ 

TwoChannel\\ 
(\\ 
	ISoundObj\\ #
input\\$ )
,\\) *
ushort\\+ 1
	nChannel1\\2 ;
,\\; <
ushort\\= C
	nChannel2\\D M
)\\M N
{]] 	
Input^^ 
=^^ 
input^^ 
;^^ 

_nChannel1__ 
=__ 
	nChannel1__ "
;__" #

_nChannel2`` 
=`` 
	nChannel2`` "
;``" #
}aa 	
publiccc 
overridecc 
ushortcc 
NumChannelscc *
{dd 	
getee 
{ff 
returngg 
$numgg 
;gg 
}hh 
}ii 	
publicnn 
overridenn 
IEnumeratornn #
<nn# $
ISamplenn$ +
>nn+ ,
Samplesnn- 4
{oo 	
getpp 
{qq 
ifrr 
(rr 
_inputrr 
==rr 
nullrr "
)rr" #
{ss 
throwtt 
newtt 
	Exceptiontt '
(tt' (
$strtt( 2
)tt2 3
;tt3 4
}uu 
ushortvv 
ncvv 
=vv 
_inputvv "
.vv" #
NumChannelsvv# .
;vv. /
ifww 
(ww 
ncww 
<ww 

_nChannel1ww #
)ww# $
{xx 
throwyy 
newyy 
	Exceptionyy '
(yy' (
Stringyy( .
.yy. /
Formatyy/ 5
(yy5 6
$stryy6 W
,yyW X

_nChannel1yyY c
)yyc d
)yyd e
;yye f
}zz 
if{{ 
({{ 
nc{{ 
<{{ 

_nChannel2{{ #
){{# $
{|| 
throw}} 
new}} 
	Exception}} '
(}}' (
String}}( .
.}}. /
Format}}/ 5
(}}5 6
$str}}6 W
,}}W X

_nChannel2}}Y c
)}}c d
)}}d e
;}}e f
}~~ 
foreach
 
(
 
ISample
  
sample
! '
in
( *
_input
+ 1
)
1 2
{
 
yield
 
return
  
new
! $
Sample2
% ,
(
, -
sample
- 3
[
3 4

_nChannel1
4 >
]
> ?
,
? @
sample
A G
[
G H

_nChannel2
H R
]
R S
)
S T
;
T U
}
 
}
 
}
 	
}
 
[
 
Serializable
 
]
 
public
 

class
 
ChannelSplicer
 
:
  !
SoundObj
" *
{
 
List
 
<
 
	ISoundObj
 
>
 
_inputs
 
=
  !
new
" %
List
& *
<
* +
	ISoundObj
+ 4
>
4 5
(
5 6
)
6 7
;
7 8
List
 
<
 
double
 
>
 
_gains
 
=
 
new
 !
List
" &
<
& '
double
' -
>
- .
(
. /
)
/ 0
;
0 1
ushort
 

_nChannels
 
=
 
$num
 
;
 
bool
 
	_hasInput
 
=
 
false
 
;
 
public
 
ChannelSplicer
 
(
 
)
 
{
 	
}
 	
public
 
void
 
Add
 
(
 
)
 
{
 	
Add
 
(
 
null
 
,
 
$num
 
)
 
;
 
}
 	
public
   
void
   
Add
   
(
   
	ISoundObj
   !
input
  " '
)
  ' (
{
¡¡ 	
Add
¢¢ 
(
¢¢ 
input
¢¢ 
,
¢¢ 
$num
¢¢ 
)
¢¢ 
;
¢¢ 
}
££ 	
public
¦¦ 
void
¦¦ 
Add
¦¦ 
(
¦¦ 
	ISoundObj
¦¦ !
input
¦¦" '
,
¦¦' (
double
¦¦) /
	gainUnits
¦¦0 9
)
¦¦9 :
{
§§ 	
if
¨¨ 
(
¨¨ 
input
¨¨ 
!=
¨¨ 
null
¨¨ 
&&
¨¨  
!
¨¨! "
	_hasInput
¨¨" +
)
¨¨+ ,
{
©© 
Input
«« 
=
«« 
input
«« 
;
«« 
	_hasInput
¬¬ 
=
¬¬ 
true
¬¬  
;
¬¬  !
}
­­ 
_inputs
®® 
.
®® 
Add
®® 
(
®® 
input
®® 
)
®® 
;
®® 
_gains
¯¯ 
.
¯¯ 
Add
¯¯ 
(
¯¯ 
	gainUnits
¯¯  
)
¯¯  !
;
¯¯! "

_nChannels
°° 
+=
°° 
(
°° 
input
°°  
==
°°! #
null
°°$ (
)
°°( )
?
°°* +
(
°°, -
ushort
°°- 3
)
°°3 4
$num
°°4 5
:
°°6 7
input
°°8 =
.
°°= >
NumChannels
°°> I
;
°°I J
}
±± 	
public
³³ 
override
³³ 
ushort
³³ 
NumChannels
³³ *
{
´´ 	
get
µµ 
{
¶¶ 
return
·· 

_nChannels
·· !
;
··! "
}
¸¸ 
}
¹¹ 	
public
»» 
override
»» 
int
»» 

Iterations
»» &
{
¼¼ 	
get
½½ 
{
¾¾ 
int
¿¿ 
i
¿¿ 
=
¿¿ 
$num
¿¿ 
;
¿¿ 
foreach
ÀÀ 
(
ÀÀ 
	ISoundObj
ÀÀ "
input
ÀÀ# (
in
ÀÀ) +
_inputs
ÀÀ, 3
)
ÀÀ3 4
{
ÁÁ 
i
ÂÂ 
=
ÂÂ 
Math
ÂÂ 
.
ÂÂ 
Max
ÂÂ  
(
ÂÂ  !
i
ÂÂ! "
,
ÂÂ" #
(
ÂÂ$ %
input
ÂÂ% *
==
ÂÂ+ -
null
ÂÂ. 2
)
ÂÂ2 3
?
ÂÂ4 5
$num
ÂÂ6 7
:
ÂÂ8 9
input
ÂÂ: ?
.
ÂÂ? @

Iterations
ÂÂ@ J
)
ÂÂJ K
;
ÂÂK L
}
ÃÃ 
return
ÄÄ 
i
ÄÄ 
;
ÄÄ 
}
ÅÅ 
}
ÆÆ 	
public
ËË 
override
ËË 
IEnumerator
ËË #
<
ËË# $
ISample
ËË$ +
>
ËË+ ,
Samples
ËË- 4
{
ÌÌ 	
get
ÍÍ 
{
ÎÎ 
List
ÐÐ 
<
ÐÐ 
IEnumerator
ÐÐ  
<
ÐÐ  !
ISample
ÐÐ! (
>
ÐÐ( )
>
ÐÐ) *
enums
ÐÐ+ 0
=
ÐÐ1 2
new
ÐÐ3 6
List
ÐÐ7 ;
<
ÐÐ; <
IEnumerator
ÐÐ< G
<
ÐÐG H
ISample
ÐÐH O
>
ÐÐO P
>
ÐÐP Q
(
ÐÐQ R
)
ÐÐR S
;
ÐÐS T
List
ÑÑ 
<
ÑÑ 
bool
ÑÑ 
>
ÑÑ 
mores
ÑÑ  
=
ÑÑ! "
new
ÑÑ# &
List
ÑÑ' +
<
ÑÑ+ ,
bool
ÑÑ, 0
>
ÑÑ0 1
(
ÑÑ1 2
)
ÑÑ2 3
;
ÑÑ3 4
foreach
ÓÓ 
(
ÓÓ 
	ISoundObj
ÓÓ "
input
ÓÓ# (
in
ÓÓ) +
_inputs
ÓÓ, 3
)
ÓÓ3 4
{
ÔÔ 
if
ÕÕ 
(
ÕÕ 
input
ÕÕ 
==
ÕÕ  
null
ÕÕ! %
)
ÕÕ% &
{
ÖÖ 
enums
×× 
.
×× 
Add
×× !
(
××! "
null
××" &
)
××& '
;
××' (
mores
ØØ 
.
ØØ 
Add
ØØ !
(
ØØ! "
false
ØØ" '
)
ØØ' (
;
ØØ( )
}
ÙÙ 
else
ÚÚ 
{
ÛÛ 
enums
ÜÜ 
.
ÜÜ 
Add
ÜÜ !
(
ÜÜ! "
input
ÜÜ" '
.
ÜÜ' (
Samples
ÜÜ( /
)
ÜÜ/ 0
;
ÜÜ0 1
mores
ÝÝ 
.
ÝÝ 
Add
ÝÝ !
(
ÝÝ! "
true
ÝÝ" &
)
ÝÝ& '
;
ÝÝ' (
}
ÞÞ 
}
ßß 
bool
áá 
anymore
áá 
=
áá 
true
áá #
;
áá# $
while
ââ 
(
ââ 
anymore
ââ 
)
ââ 
{
ãã 
Sample
ää 
sample
ää !
=
ää" #
new
ää$ '
Sample
ää( .
(
ää. /
NumChannels
ää/ :
)
ää: ;
;
ää; <
int
åå 
j
åå 
=
åå 
$num
åå 
;
åå 
int
ææ 
e
ææ 
=
ææ 
$num
ææ 
;
ææ 
anymore
çç 
=
çç 
false
çç #
;
çç# $
foreach
èè 
(
èè 
IEnumerator
èè (
<
èè( )
ISample
èè) 0
>
èè0 1
src
èè2 5
in
èè6 8
enums
èè9 >
)
èè> ?
{
éé 
Sample
êê 
s
êê  
;
êê  !
if
ëë 
(
ëë 
mores
ëë !
[
ëë! "
e
ëë" #
]
ëë# $
)
ëë$ %
{
ìì 
mores
íí !
[
íí! "
e
íí" #
]
íí# $
=
íí% &
src
íí' *
.
íí* +
MoveNext
íí+ 3
(
íí3 4
)
íí4 5
;
íí5 6
}
îî 
if
ïï 
(
ïï 
mores
ïï !
[
ïï! "
e
ïï" #
]
ïï# $
)
ïï$ %
{
ðð 
s
ññ 
=
ññ 
(
ññ  !
Sample
ññ! '
)
ññ' (
src
ññ( +
.
ññ+ ,
Current
ññ, 3
;
ññ3 4
}
òò 
else
óó 
{
ôô 
s
õõ 
=
õõ 
new
õõ  #
Sample
õõ$ *
(
õõ* +
_inputs
õõ+ 2
[
õõ2 3
e
õõ3 4
]
õõ4 5
==
õõ5 7
null
õõ7 ;
?
õõ< =
(
õõ> ?
ushort
õõ? E
)
õõE F
$num
õõF G
:
õõH I
_inputs
õõJ Q
[
õõQ R
e
õõR S
]
õõS T
.
õõT U
NumChannels
õõU `
)
õõ` a
;
õõa b
}
öö 
anymore
÷÷ 
|=
÷÷  "
mores
÷÷# (
[
÷÷( )
e
÷÷) *
]
÷÷* +
;
÷÷+ ,
double
øø 
gain
øø #
=
øø$ %
_gains
øø& ,
[
øø, -
e
øø- .
]
øø. /
;
øø/ 0
e
ùù 
++
ùù 
;
ùù 
ushort
ûû 
nc
ûû !
=
ûû" #
s
ûû$ %
.
ûû% &
NumChannels
ûû& 1
;
ûû1 2
for
üü 
(
üü 
int
üü 
k
üü  !
=
üü! "
$num
üü" #
;
üü# $
k
üü% &
<
üü& '
nc
üü' )
;
üü) *
k
üü+ ,
++
üü, .
)
üü. /
{
ýý 
sample
þþ "
[
þþ" #
j
þþ# $
]
þþ$ %
=
þþ& '
s
þþ( )
[
þþ) *
k
þþ* +
]
þþ+ ,
*
þþ- .
gain
þþ/ 3
;
þþ3 4
j
ÿÿ 
++
ÿÿ 
;
ÿÿ  
}
 
}
 
yield
 
return
  
sample
! '
;
' (
}
 
}
 
}
 	
}
 
[
 
Serializable
 
]
 
public
 

class
 
ChannelInvertor
  
:
! "
SoundObj
# +
{
 
bool
 
[
 
]
 
_invert
 
;
 
public
 
ChannelInvertor
 
(
 
	ISoundObj
 (
input
) .
,
. /
params
0 6
bool
7 ;
[
; <
]
< =
invert
> D
)
D E
{
 	
Input
 
=
 
input
 
;
 
_invert
 
=
 
invert
 
;
 
}
 	
public
 
override
 
IEnumerator
 #
<
# $
ISample
$ +
>
+ ,
Samples
- 4
{
 	
get
 
{
 
if
   
(
   
_input
   
==
   
null
   "
)
  " #
{
¡¡ 
throw
¢¢ 
new
¢¢ 
	Exception
¢¢ '
(
¢¢' (
$str
¢¢( 2
)
¢¢2 3
;
¢¢3 4
}
££ 
ushort
¤¤ 
nc
¤¤ 
=
¤¤ 
(
¤¤ 
ushort
¤¤ #
)
¤¤# $
Math
¤¤$ (
.
¤¤( )
Min
¤¤) ,
(
¤¤, -
_input
¤¤- 3
.
¤¤3 4
NumChannels
¤¤4 ?
,
¤¤? @
_invert
¤¤A H
.
¤¤H I
Length
¤¤I O
)
¤¤O P
;
¤¤P Q
foreach
¦¦ 
(
¦¦ 
ISample
¦¦  
sample
¦¦! '
in
¦¦( *
_input
¦¦+ 1
)
¦¦1 2
{
§§ 
for
¨¨ 
(
¨¨ 
ushort
¨¨ 
c
¨¨  !
=
¨¨" #
$num
¨¨$ %
;
¨¨% &
c
¨¨' (
<
¨¨) *
nc
¨¨+ -
;
¨¨- .
c
¨¨/ 0
++
¨¨0 2
)
¨¨2 3
{
©© 
if
ªª 
(
ªª 
_invert
ªª #
[
ªª# $
c
ªª$ %
]
ªª% &
)
ªª& '
{
«« 
sample
¬¬ "
[
¬¬" #
c
¬¬# $
]
¬¬$ %
=
¬¬& '
-
¬¬( )
sample
¬¬) /
[
¬¬/ 0
c
¬¬0 1
]
¬¬1 2
;
¬¬2 3
}
­­ 
}
®® 
yield
¯¯ 
return
¯¯  
sample
¯¯! '
;
¯¯' (
}
°° 
}
±± 
}
²² 	
}
³³ 
[
»» 
Serializable
»» 
]
»» 
public
¼¼ 

class
¼¼ 
ChannelSwapper
¼¼ 
:
¼¼  
SoundObj
¼¼! )
{
½½ 
private
¾¾ 
ushort
¾¾ 
[
¾¾ 
]
¾¾ 
	_channels
¾¾ "
;
¾¾" #
public
ÉÉ 
ChannelSwapper
ÉÉ 
(
ÉÉ 
	ISoundObj
ÉÉ '
input
ÉÉ( -
,
ÉÉ- .
params
ÉÉ/ 5
ushort
ÉÉ6 <
[
ÉÉ< =
]
ÉÉ= >
channels
ÉÉ? G
)
ÉÉG H
{
ÊÊ 	
Input
ËË 
=
ËË 
input
ËË 
;
ËË 
	_channels
ÌÌ 
=
ÌÌ 
channels
ÌÌ  
;
ÌÌ  !
}
ÍÍ 	
public
ÏÏ 
override
ÏÏ 
ushort
ÏÏ 
NumChannels
ÏÏ *
{
ÐÐ 	
get
ÑÑ 
{
ÒÒ 
return
ÓÓ 
(
ÓÓ 
ushort
ÓÓ 
)
ÓÓ 
	_channels
ÓÓ (
.
ÓÓ( )
Length
ÓÓ) /
;
ÓÓ/ 0
}
ÔÔ 
}
ÕÕ 	
public
ÚÚ 
override
ÚÚ 
IEnumerator
ÚÚ #
<
ÚÚ# $
ISample
ÚÚ$ +
>
ÚÚ+ ,
Samples
ÚÚ- 4
{
ÛÛ 	
get
ÜÜ 
{
ÝÝ 
if
ÞÞ 
(
ÞÞ 
_input
ÞÞ 
==
ÞÞ 
null
ÞÞ "
)
ÞÞ" #
{
ßß 
throw
àà 
new
àà 
	Exception
àà '
(
àà' (
$str
àà( 2
)
àà2 3
;
àà3 4
}
áá 
ushort
ââ 
nc
ââ 
=
ââ 
_input
ââ "
.
ââ" #
NumChannels
ââ# .
;
ââ. /
ushort
ãã 
nC
ãã 
=
ãã 
(
ãã 
ushort
ãã #
)
ãã# $
	_channels
ãã$ -
.
ãã- .
Length
ãã. 4
;
ãã4 5
foreach
åå 
(
åå 
ISample
åå  
sample
åå! '
in
åå( *
_input
åå+ 1
)
åå1 2
{
ææ 
ISample
çç 
s
çç 
=
çç 
new
çç  #
Sample
çç$ *
(
çç* +
nC
çç+ -
)
çç- .
;
çç. /
for
èè 
(
èè 
ushort
èè 
c
èè  !
=
èè" #
$num
èè$ %
;
èè% &
c
èè' (
<
èè) *
nC
èè+ -
;
èè- .
c
èè/ 0
++
èè0 2
)
èè2 3
{
éé 
ushort
êê 
cc
êê !
=
êê" #
	_channels
êê$ -
[
êê- .
c
êê. /
]
êê/ 0
;
êê0 1
if
ëë 
(
ëë 
cc
ëë 
>=
ëë !
$num
ëë" #
&&
ëë$ &
cc
ëë' )
<=
ëë) +
nc
ëë+ -
)
ëë- .
{
ìì 
s
íí 
[
íí 
c
íí 
]
íí  
=
íí! "
sample
íí# )
[
íí) *
cc
íí* ,
]
íí, -
;
íí- .
}
îî 
}
ïï 
yield
ðð 
return
ðð  
s
ðð! "
;
ðð" #
}
ññ 
}
òò 
}
óó 	
}
ôô 
}÷÷ ¨
2E:\GitHub\inguz-DSPUtil\InguzDSPUtilNew\Complex.cs
	namespace 	
DSPUtil
 
{ 
public 

struct 
Complex 
{ 
public 
double 
Re 
; 
public 
double 
Im 
; 
public 
Complex 
( 
Complex 
c  
)  !
{ 	
this 
. 
Re 
= 
c 
. 
Re 
; 
this 
. 
Im 
= 
c 
. 
Im 
; 
} 	
public 
Complex 
( 
double 
real "
," #
double$ *
	imaginary+ 4
)4 5
{ 	
this 
. 
Re 
= 
real 
; 
this 
. 
Im 
= 
	imaginary 
;  
} 	
public 
Complex 
( 
double 
phase #
)# $
{   	
this!! 
.!! 
Re!! 
=!! 
Math!! 
.!! 
Cos!! 
(!! 
phase!! $
)!!$ %
;!!% &
this"" 
."" 
Im"" 
="" 
Math"" 
."" 
Sin"" 
("" 
phase"" $
)""$ %
;""% &
}## 	
public)) 
double)) 
Real)) 
{** 	
get++ 
{++ 
return++ 
Re++ 
;++ 
}++ 
set,, 
{,, 
Re,, 
=,, 
value,, 
;,, 
},, 
}-- 	
public22 
double22 
	Imaginary22 
{33 	
get44 
{44 
return44 
Im44 
;44 
}44 
set55 
{55 
Im55 
=55 
value55 
;55 
}55 
}66 	
public;; 
double;; 
	Magnitude;; 
{<< 	
get== 
{>> 
double?? 
abs?? 
=?? 
Math?? !
.??! "
Sqrt??" &
(??& '
Im??' )
*??* +
Im??, .
+??/ 0
Re??1 3
*??4 5
Re??6 8
)??8 9
;??9 :
returnAA 
absAA 
;AA 
}BB 
}CC 	
publicHH 
doubleHH 
PhaseHH 
{II 	
getJJ 
{KK 
returnLL 
MathLL 
.LL 
Atan2LL !
(LL! "
ImLL" $
,LL$ %
ReLL& (
)LL( )
;LL) *
}MM 
}NN 	
publicUU 
voidUU 
SetUU 
(UU 
doubleUU 
reUU !
,UU! "
doubleUU# )
imUU* ,
)UU, -
{VV 	
ReWW 
=WW 
reWW 
;WW 
ImXX 
=XX 
imXX 
;XX 
}YY 	
public__ 
void__ 
mul__ 
(__ 
Complex__ 
c__  !
)__! "
{`` 	
doubleaa 
gemaa 
=aa 
caa 
.aa 
Reaa 
*aa 
Reaa  "
-aa# $
caa% &
.aa& '
Imaa' )
*aa* +
Imaa, .
;aa. /
Imbb 
=bb 
cbb 
.bb 
Imbb 
*bb 
Rebb 
+bb 
cbb 
.bb 
Rebb !
*bb" #
Imbb$ &
;bb& '
Recc 
=cc 
gemcc 
;cc 
}dd 	
publicjj 
voidjj 
muljj 
(jj 
doublejj 
djj  
)jj  !
{kk 	
Imll 
*=ll 
dll 
;ll 
Remm 
*=mm 
dmm 
;mm 
}nn 	
publictt 
voidtt 
divtt 
(tt 
Complextt 
ctt  !
)tt! "
{uu 	
doublevv 
dvv 
=vv 
cvv 
.vv 
Revv 
*vv 
cvv 
.vv  
Revv  "
+vv# $
cvv% &
.vv& '
Imvv' )
*vv* +
cvv, -
.vv- .
Imvv. 0
;vv0 1
doublexx 
rxx 
=xx 
(xx 
Rexx 
*xx 
cxx 
.xx 
Rexx !
+xx" #
Imxx$ &
*xx' (
cxx) *
.xx* +
Imxx+ -
)xx- .
/xx/ 0
dxx1 2
;xx2 3
doubleyy 
iyy 
=yy 
(yy 
Imyy 
*yy 
cyy 
.yy 
Reyy !
-yy" #
Reyy$ &
*yy' (
cyy) *
.yy* +
Imyy+ -
)yy- .
/yy/ 0
dyy1 2
;yy2 3
Rezz 
=zz 
rzz 
;zz 
Im{{ 
={{ 
i{{ 
;{{ 
}|| 	
public
 
void
 
idiv
 
(
 
Complex
  
c
! "
)
" #
{
 	
double
 
d
 
=
 
Re
 
*
 
Re
 
+
  
Im
! #
*
$ %
Im
& (
;
( )
double
 
r
 
=
 
(
 
c
 
.
 
Re
 
*
 
Re
 !
+
" #
c
$ %
.
% &
Im
& (
*
) *
Im
+ -
)
- .
/
/ 0
d
1 2
;
2 3
double
 
i
 
=
 
(
 
c
 
.
 
Im
 
*
 
Re
 !
-
" #
c
$ %
.
% &
Re
& (
*
) *
Im
+ -
)
- .
/
/ 0
d
1 2
;
2 3
Re
 
=
 
r
 
;
 
Im
 
=
 
i
 
;
 
}
 	
public
 
void
 
Pow
 
(
 
Complex
 
y
  !
)
! "
{
 	
double
 
r
 
=
 
	Magnitude
  
;
  !
double
 
t
 
=
 
Phase
 
;
 
double
 
c
 
=
 
y
 
.
 
Re
 
;
 
double
 
d
 
=
 
y
 
.
 
Im
 
;
 
Re
 
=
 
Math
 
.
 
Pow
 
(
 
r
 
,
 
c
 
)
 
*
  !
Math
" &
.
& '
Exp
' *
(
* +
-
+ ,
d
, -
*
. /
t
0 1
)
1 2
*
3 4
Math
5 9
.
9 :
Cos
: =
(
= >
c
> ?
*
@ A
t
B C
+
D E
d
F G
*
H I
Math
J N
.
N O
Log
O R
(
R S
r
S T
)
T U
)
U V
;
V W
Im
 
=
 
Math
 
.
 
Pow
 
(
 
r
 
,
 
c
 
)
 
*
  !
Math
" &
.
& '
Exp
' *
(
* +
-
+ ,
d
, -
*
. /
t
0 1
)
1 2
*
3 4
Math
5 9
.
9 :
Sin
: =
(
= >
c
> ?
*
@ A
t
B C
+
D E
d
F G
*
H I
Math
J N
.
N O
Log
O R
(
R S
r
S T
)
T U
)
U V
;
V W
}
 	
public
   
static
   
implicit
   
operator
   '
double
  ( .
(
  . /
Complex
  / 6
c
  7 8
)
  8 9
{
¡¡ 	
return
¢¢ 
c
¢¢ 
.
¢¢ 
Re
¢¢ 
;
¢¢ 
}
££ 	
public
ªª 
static
ªª 
explicit
ªª 
operator
ªª '
Complex
ªª( /
(
ªª/ 0
double
ªª0 6
f
ªª7 8
)
ªª8 9
{
«« 	
return
¬¬ 
new
¬¬ 
Complex
¬¬ 
(
¬¬ 
f
¬¬  
,
¬¬  !
$num
¬¬" #
)
¬¬# $
;
¬¬$ %
}
­­ 	
public
´´ 
static
´´ 
Complex
´´ 
operator
´´ &
+
´´' (
(
´´( )
Complex
´´) 0
c
´´1 2
)
´´2 3
{
µµ 	
return
¶¶ 
c
¶¶ 
;
¶¶ 
}
·· 	
public
¾¾ 
static
¾¾ 
Complex
¾¾ 
operator
¾¾ &
-
¾¾' (
(
¾¾( )
Complex
¾¾) 0
c
¾¾1 2
)
¾¾2 3
{
¿¿ 	
return
ÀÀ 
new
ÀÀ 
Complex
ÀÀ 
(
ÀÀ 
-
ÀÀ  
c
ÀÀ  !
.
ÀÀ! "
Re
ÀÀ" $
,
ÀÀ$ %
-
ÀÀ& '
c
ÀÀ' (
.
ÀÀ( )
Im
ÀÀ) +
)
ÀÀ+ ,
;
ÀÀ, -
}
ÁÁ 	
public
ÈÈ 
static
ÈÈ 
Complex
ÈÈ 
operator
ÈÈ &
~
ÈÈ' (
(
ÈÈ( )
Complex
ÈÈ) 0
c
ÈÈ1 2
)
ÈÈ2 3
{
ÉÉ 	
return
ÊÊ 
new
ÊÊ 
Complex
ÊÊ 
(
ÊÊ 
c
ÊÊ  
.
ÊÊ  !
Re
ÊÊ! #
,
ÊÊ# $
-
ÊÊ% &
c
ÊÊ& '
.
ÊÊ' (
Im
ÊÊ( *
)
ÊÊ* +
;
ÊÊ+ ,
}
ËË 	
public
ÓÓ 
static
ÓÓ 
Complex
ÓÓ 
operator
ÓÓ &
+
ÓÓ' (
(
ÓÓ( )
Complex
ÓÓ) 0
c1
ÓÓ1 3
,
ÓÓ3 4
Complex
ÓÓ5 <
c2
ÓÓ= ?
)
ÓÓ? @
{
ÔÔ 	
return
ÕÕ 
new
ÕÕ 
Complex
ÕÕ 
(
ÕÕ 
c1
ÕÕ !
.
ÕÕ! "
Re
ÕÕ" $
+
ÕÕ% &
c2
ÕÕ' )
.
ÕÕ) *
Re
ÕÕ* ,
,
ÕÕ, -
c1
ÕÕ. 0
.
ÕÕ0 1
Im
ÕÕ1 3
+
ÕÕ4 5
c2
ÕÕ6 8
.
ÕÕ8 9
Im
ÕÕ9 ;
)
ÕÕ; <
;
ÕÕ< =
}
ÖÖ 	
public
ØØ 
static
ØØ 
Complex
ØØ 
operator
ØØ &
+
ØØ' (
(
ØØ( )
Complex
ØØ) 0
c1
ØØ1 3
,
ØØ3 4
double
ØØ5 ;
num
ØØ< ?
)
ØØ? @
{
ÙÙ 	
return
ÚÚ 
new
ÚÚ 
Complex
ÚÚ 
(
ÚÚ 
c1
ÚÚ !
.
ÚÚ! "
Re
ÚÚ" $
+
ÚÚ% &
num
ÚÚ' *
,
ÚÚ* +
c1
ÚÚ, .
.
ÚÚ. /
Im
ÚÚ/ 1
)
ÚÚ1 2
;
ÚÚ2 3
}
ÛÛ 	
public
ÝÝ 
static
ÝÝ 
Complex
ÝÝ 
operator
ÝÝ &
+
ÝÝ' (
(
ÝÝ( )
double
ÝÝ) /
num
ÝÝ0 3
,
ÝÝ3 4
Complex
ÝÝ5 <
c1
ÝÝ= ?
)
ÝÝ? @
{
ÞÞ 	
return
ßß 
new
ßß 
Complex
ßß 
(
ßß 
c1
ßß !
.
ßß! "
Re
ßß" $
+
ßß% &
num
ßß' *
,
ßß* +
c1
ßß, .
.
ßß. /
Im
ßß/ 1
)
ßß1 2
;
ßß2 3
}
àà 	
public
èè 
static
èè 
Complex
èè 
operator
èè &
-
èè' (
(
èè( )
Complex
èè) 0
c1
èè1 3
,
èè3 4
double
èè5 ;
num
èè< ?
)
èè? @
{
éé 	
return
êê 
new
êê 
Complex
êê 
(
êê 
c1
êê !
.
êê! "
Re
êê" $
-
êê% &
num
êê' *
,
êê* +
c1
êê, .
.
êê. /
Im
êê/ 1
)
êê1 2
;
êê2 3
}
ëë 	
public
íí 
static
íí 
Complex
íí 
operator
íí &
-
íí' (
(
íí( )
double
íí) /
num
íí0 3
,
íí3 4
Complex
íí5 <
c1
íí= ?
)
íí? @
{
îî 	
return
ïï 
new
ïï 
Complex
ïï 
(
ïï 
num
ïï "
-
ïï# $
c1
ïï% '
.
ïï' (
Re
ïï( *
,
ïï* +
-
ïï, -
c1
ïï- /
.
ïï/ 0
Im
ïï0 2
)
ïï2 3
;
ïï3 4
}
ðð 	
public
òò 
static
òò 
Complex
òò 
operator
òò &
-
òò' (
(
òò( )
Complex
òò) 0
c1
òò1 3
,
òò3 4
Complex
òò5 <
c2
òò= ?
)
òò? @
{
óó 	
return
ôô 
new
ôô 
Complex
ôô 
(
ôô 
c1
ôô !
.
ôô! "
Re
ôô" $
-
ôô% &
c2
ôô' )
.
ôô) *
Re
ôô* ,
,
ôô, -
c1
ôô. 0
.
ôô0 1
Im
ôô1 3
-
ôô4 5
c2
ôô6 8
.
ôô8 9
Im
ôô9 ;
)
ôô; <
;
ôô< =
}
õõ 	
public
ýý 
static
ýý 
Complex
ýý 
operator
ýý &
*
ýý' (
(
ýý( )
Complex
ýý) 0
c1
ýý1 3
,
ýý3 4
Complex
ýý5 <
c2
ýý= ?
)
ýý? @
{
þþ 	
return
ÿÿ 
new
ÿÿ 
Complex
ÿÿ 
(
ÿÿ 
(
ÿÿ  
c1
ÿÿ  "
.
ÿÿ" #
Re
ÿÿ# %
*
ÿÿ& '
c2
ÿÿ( *
.
ÿÿ* +
Re
ÿÿ+ -
)
ÿÿ- .
-
ÿÿ/ 0
(
ÿÿ1 2
c1
ÿÿ2 4
.
ÿÿ4 5
Im
ÿÿ5 7
*
ÿÿ8 9
c2
ÿÿ: <
.
ÿÿ< =
Im
ÿÿ= ?
)
ÿÿ? @
,
ÿÿ@ A
(
ÿÿC D
c1
ÿÿD F
.
ÿÿF G
Re
ÿÿG I
*
ÿÿJ K
c2
ÿÿL N
.
ÿÿN O
Im
ÿÿO Q
)
ÿÿQ R
+
ÿÿS T
(
ÿÿU V
c1
ÿÿV X
.
ÿÿX Y
Im
ÿÿY [
*
ÿÿ\ ]
c2
ÿÿ^ `
.
ÿÿ` a
Re
ÿÿa c
)
ÿÿc d
)
ÿÿd e
;
ÿÿe f
}
 	
public
 
static
 
Complex
 
operator
 &
*
' (
(
( )
Complex
) 0
c1
1 3
,
3 4
double
5 ;
num
< ?
)
? @
{
 	
return
 
new
 
Complex
 
(
 
c1
 !
.
! "
Re
" $
*
% &
num
' *
,
* +
c1
, .
.
. /
Im
/ 1
*
2 3
num
4 7
)
7 8
;
8 9
}
 	
public
 
static
 
Complex
 
operator
 &
*
' (
(
( )
double
) /
num
0 3
,
3 4
Complex
5 <
c1
= ?
)
? @
{
 	
return
 
new
 
Complex
 
(
 
c1
 !
.
! "
Re
" $
*
% &
num
' *
,
* +
c1
, .
.
. /
Im
/ 1
*
2 3
num
4 7
)
7 8
;
8 9
}
 	
public
 
static
 
Complex
 
operator
 &
/
' (
(
( )
Complex
) 0
c1
1 3
,
3 4
Complex
5 <
c2
= ?
)
? @
{
 	
double
 
div
 
=
 
c2
 
.
 
Re
 
*
  
c2
! #
.
# $
Re
$ &
+
' (
c2
) +
.
+ ,
Im
, .
*
/ 0
c2
1 3
.
3 4
Im
4 6
;
6 7
return
 
new
 
Complex
 
(
 
(
  
c1
  "
.
" #
Re
# %
*
& '
c2
( *
.
* +
Re
+ -
+
. /
c1
0 2
.
2 3
Im
3 5
*
6 7
c2
8 :
.
: ;
Im
; =
)
= >
/
? @
div
A D
,
D E
(
  !
c1
! #
.
# $
Im
$ &
*
' (
c2
) +
.
+ ,
Re
, .
-
/ 0
c1
1 3
.
3 4
Re
4 6
*
7 8
c2
9 ;
.
; <
Im
< >
)
> ?
/
@ A
div
B E
)
E F
;
F G
}
 	
public
 
static
 
Complex
 
operator
 &
/
' (
(
( )
double
) /
num
0 3
,
3 4
Complex
5 <
c1
= ?
)
? @
{
 	
return
 
new
 
Complex
 
(
 
num
 "
/
# $
c1
% '
.
' (
Re
( *
,
* +
num
, /
/
0 1
c1
2 4
.
4 5
Im
5 7
)
7 8
;
8 9
}
 	
public
   
static
   
Complex
   
operator
   &
/
  ' (
(
  ( )
Complex
  ) 0
c1
  1 3
,
  3 4
double
  5 ;
num
  < ?
)
  ? @
{
¡¡ 	
return
¢¢ 
new
¢¢ 
Complex
¢¢ 
(
¢¢ 
c1
¢¢ !
.
¢¢! "
Re
¢¢" $
/
¢¢% &
num
¢¢' *
,
¢¢* +
c1
¢¢, .
.
¢¢. /
Im
¢¢/ 1
/
¢¢2 3
num
¢¢4 7
)
¢¢7 8
;
¢¢8 9
}
££ 	
public
«« 
static
«« 
bool
«« 
operator
«« #
==
««$ &
(
««& '
Complex
««' .
c1
««/ 1
,
««1 2
Complex
««3 :
c2
««; =
)
««= >
{
¬¬ 	
return
­­ 
(
­­ 
c1
­­ 
.
­­ 
Re
­­ 
==
­­ 
c2
­­ 
.
­­  
Re
­­  "
)
­­" #
&&
­­$ &
(
­­' (
c1
­­( *
.
­­* +
Im
­­+ -
==
­­. 0
c2
­­1 3
.
­­3 4
Im
­­4 6
)
­­6 7
;
­­7 8
}
®® 	
public
¶¶ 
static
¶¶ 
bool
¶¶ 
operator
¶¶ #
!=
¶¶$ &
(
¶¶& '
Complex
¶¶' .
c1
¶¶/ 1
,
¶¶1 2
Complex
¶¶3 :
c2
¶¶; =
)
¶¶= >
{
·· 	
return
¸¸ 
(
¸¸ 
c1
¸¸ 
.
¸¸ 
Re
¸¸ 
!=
¸¸ 
c2
¸¸ 
.
¸¸  
Re
¸¸  "
)
¸¸" #
||
¸¸$ &
(
¸¸' (
c1
¸¸( *
.
¸¸* +
Im
¸¸+ -
!=
¸¸. 0
c2
¸¸1 3
.
¸¸3 4
Im
¸¸4 6
)
¸¸6 7
;
¸¸7 8
}
¹¹ 	
public
»» 
override
»» 
int
»» 
GetHashCode
»» '
(
»»' (
)
»»( )
{
¼¼ 	
return
½½ 
(
½½ 
Re
½½ 
.
½½ 
GetHashCode
½½ "
(
½½" #
)
½½# $
^
½½% &
Im
½½' )
.
½½) *
GetHashCode
½½* 5
(
½½5 6
)
½½6 7
)
½½7 8
;
½½8 9
}
¾¾ 	
public
ÀÀ 
override
ÀÀ 
bool
ÀÀ 
Equals
ÀÀ #
(
ÀÀ# $
object
ÀÀ$ *
obj
ÀÀ+ .
)
ÀÀ. /
{
ÁÁ 	
return
ÂÂ 
(
ÂÂ 
obj
ÂÂ 
is
ÂÂ 
Complex
ÂÂ "
)
ÂÂ" #
?
ÂÂ$ %
(
ÂÂ& '
this
ÂÂ' +
==
ÂÂ, .
(
ÂÂ/ 0
Complex
ÂÂ0 7
)
ÂÂ7 8
obj
ÂÂ8 ;
)
ÂÂ; <
:
ÂÂ= >
false
ÂÂ? D
;
ÂÂD E
}
ÃÃ 	
public
ÅÅ 
override
ÅÅ 
string
ÅÅ 
ToString
ÅÅ '
(
ÅÅ' (
)
ÅÅ( )
{
ÆÆ 	
return
ÇÇ 
(
ÇÇ 
String
ÇÇ 
.
ÇÇ 
Format
ÇÇ !
(
ÇÇ! "
$str
ÇÇ" .
,
ÇÇ. /
Real
ÇÇ0 4
,
ÇÇ4 5
	Imaginary
ÇÇ6 ?
)
ÇÇ? @
)
ÇÇ@ A
;
ÇÇA B
}
ÈÈ 	
}
ÉÉ 
}ÊÊ £¾
4E:\GitHub\inguz-DSPUtil\InguzDSPUtilNew\Convolver.cs
	namespace 	
DSPUtil
 
{ 
public 

	interface 

IConvolver 
:  !
	ISoundObj" +
{ 
	ISoundObj 
impulse 
{ 
set 
;  
}! "
int 

partitions 
{ 
get 
; 
set !
;! "
}# $
bool 

deconvolve 
{ 
get 
; 
set "
;" #
}$ %
string 
PersistPath 
{ 
set  
;  !
}" #
string 
PersistTail 
{ 
get  
;  !
set" %
;% &
}' (
bool   
IsPersistTail   
{   
get    
;    !
}  " #
}!! 
public%% 

class%% 
FastConvolver%% 
:%%  
SoundObj%%! )
,%%) *

IConvolver%%+ 5
{&& 
private'' 
Complex'' 
['' 
]'' 
['' 
]'' 
_NormalImpulseFFT'' -
;''- .
private(( 
Complex(( 
[(( 
](( 
[(( 
](( 
[(( 
](( "
_PartitionedImpulseFFT(( 4
;((4 5
	protected** 
bool** 
_running** 
=**  !
false**" '
;**' (
	protected-- 
	ISoundObj-- 
_impulse-- $
;--$ %
	protected.. 
int.. 
_impulseLength.. $
=..% &
DSPUtil..' .
.... /
BUFSIZE../ 6
;..6 7
	protected// 
int// 
_impulseLengthOrig// (
=//) *
DSPUtil//+ 2
.//2 3
BUFSIZE//3 :
;//: ;
	protected00 
bool00 
_impulseFFTReady00 '
=00( )
false00* /
;00/ 0
public66 
FastConvolver66 
(66 
)66 
{77 	
}88 	
public>> 
FastConvolver>> 
(>> 
	ISoundObj>> &
impulseFilter>>' 4
)>>4 5
{?? 	
impulse@@ 
=@@ 
impulseFilter@@ #
;@@# $
}AA 	
publicHH 
FastConvolverHH 
(HH 
	ISoundObjHH &
inputHH' ,
,HH, -
	ISoundObjHH. 7
impulseFilterHH8 E
)HHE F
{II 	
InputJJ 
=JJ 
inputJJ 
;JJ 
impulseKK 
=KK 
impulseFilterKK #
;KK# $
}LL 	
	protectedSS 
boolSS 
_deconvolveSS "
;SS" #
publicTT 
boolTT 

deconvolveTT 
{UU 	
getVV 
{WW 
returnXX 
_deconvolveXX "
;XX" #
}YY 
setZZ 
{[[ 
if\\ 
(\\ 
_running\\ 
)\\ 
{\\ 
throw\\  %
new\\& )
	Exception\\* 3
(\\3 4
$str\\4 W
)\\W X
;\\X Y
}\\Z [
_deconvolve]] 
=]] 
value]] #
;]]# $
}^^ 
}__ 	
	protectedcc 
stringcc 
_persistTailcc %
;cc% &
	protecteddd 
stringdd 
_persistFiledd %
;dd% &
	protectedee 
stringee 
_persistPathee %
=ee& '
Pathee( ,
.ee, -
GetTempPathee- 8
(ee8 9
)ee9 :
;ee: ;
publicff 
stringff 
PersistPathff !
{gg 	
sethh 
{ii 
_persistPathjj 
=jj 
valuejj $
;jj$ %
}kk 
}ll 	
publicmm 
stringmm 
PersistTailmm !
{nn 	
getoo 
{oo 
returnoo 
_persistTailoo %
;oo% &
}oo' (
setpp 
{qq 
_persistTailrr 
=rr 
valuerr $
;rr$ %
ifss 
(ss 
!ss 
Stringss 
.ss 
IsNullOrEmptyss )
(ss) *
_persistTailss* 6
)ss6 7
)ss7 8
{tt 
stringuu 
filenameuu #
=uu$ %
thisuu& *
.uu* +
GetTypeuu+ 2
(uu2 3
)uu3 4
+uu5 6
$struu7 :
+uu; <
_persistTailuu= I
;uuI J
foreachvv 
(vv 
charvv !
cvv" #
invv$ &
Systemvv' -
.vv- .
IOvv. 0
.vv0 1
Pathvv1 5
.vv5 6#
GetInvalidFileNameCharsvv6 M
(vvM N
)vvN O
)vvO P
{ww 
filenamexx  
=xx! "
filenamexx# +
.xx+ ,
Replacexx, 3
(xx3 4
cxx4 5
,xx5 6
$charxx7 :
)xx: ;
;xx; <
}yy 
_persistFilezz  
=zz! "
Pathzz# '
.zz' (
Combinezz( /
(zz/ 0
_persistPathzz0 <
,zz< =
filenamezz> F
+zzG H
$strzzI P
)zzP Q
;zzQ R
}{{ 
}}} 
}~~ 	
public 
bool 
IsPersistTail !
{
 	
get
 
{
 
return
 
(
 
!
 
String
 
.
  
IsNullOrEmpty
  -
(
- .
_persistTail
. :
)
: ;
)
; <
;
< =
}
 
}
 	
	protected
 
int
 
_partitions
 !
;
! "
public
 
int
 

partitions
 
{
 	
get
 
{
 
return
 
_partitions
 "
;
" #
}
 
set
 
{
 
if
 
(
 
_running
 
)
 
{
 
throw
  %
new
& )
	Exception
* 3
(
3 4
$str
4 W
)
W X
;
X Y
}
Z [
_partitions
 
=
 
value
 #
;
# $
_impulseFFTReady
  
=
! "
false
# (
;
( )
}
 
}
 	
public
 
override
 
int
 

Iterations
 &
{
 	
get
 
{
 
if
   
(
   
IsPersistTail
   !
)
  ! "
{
¡¡ 
return
¤¤ 
_input
¤¤ !
.
¤¤! "

Iterations
¤¤" ,
;
¤¤, -
}
¥¥ 
return
¦¦ 
(
¦¦ 
(
¦¦ 
_impulse
¦¦ !
==
¦¦" $
null
¦¦% )
)
¦¦) *
?
¦¦+ ,
$num
¦¦- .
:
¦¦/ 0 
_impulseLengthOrig
¦¦1 C
)
¦¦C D
+
¦¦E F
_input
¦¦G M
.
¦¦M N

Iterations
¦¦N X
;
¦¦X Y
}
§§ 
}
¨¨ 	
public
ªª 
override
ªª 
	ISoundObj
ªª !
Input
ªª" '
{
«« 	
get
¬¬ 
{
­­ 
return
®® 
base
®® 
.
®® 
Input
®® !
;
®®! "
}
¯¯ 
set
°° 
{
±± 
if
²² 
(
²² 
value
²² 
!=
²² 
null
²² !
&&
²²" $
_impulse
²²% -
!=
²². 0
null
²²1 5
)
²²5 6
{
³³ 
if
·· 
(
·· 
(
·· 
_impulse
·· !
.
··! "
NumChannels
··" -
>
··. /
$num
··0 1
)
··1 2
&&
··3 5
(
··6 7
_impulse
··7 ?
.
··? @
NumChannels
··@ K
!=
··L N
value
··O T
.
··T U
NumChannels
··U `
)
··` a
)
··a b
{
¸¸ 
throw
¹¹ 
new
¹¹ !
ArgumentException
¹¹" 3
(
¹¹3 4
String
¹¹4 :
.
¹¹: ;
Format
¹¹; A
(
¹¹A B
$str¹¹B 
,¹¹ 
_impulse¹¹ 
.¹¹ 
NumChannels¹¹ 
,¹¹ 
value¹¹  ¥
.¹¹¥ ¦
NumChannels¹¹¦ ±
)¹¹± ²
)¹¹² ³
;¹¹³ ´
}
ºº 
}
»» 
base
¼¼ 
.
¼¼ 
Input
¼¼ 
=
¼¼ 
value
¼¼ "
;
¼¼" #
}
½½ 
}
¾¾ 	
public
ÅÅ 
	ISoundObj
ÅÅ 
impulse
ÅÅ  
{
ÆÆ 	
get
ÇÇ 
{
ÈÈ 
return
ÉÉ 
_impulse
ÉÉ 
;
ÉÉ  
}
ÊÊ 
set
ËË 
{
ÌÌ 
SoundBuffer
ÒÒ 
imbuff
ÒÒ "
=
ÒÒ# $
new
ÒÒ% (
SoundBuffer
ÒÒ) 4
(
ÒÒ4 5
value
ÒÒ5 :
)
ÒÒ: ;
;
ÒÒ; <
int
ÓÓ 
iml
ÓÓ 
=
ÓÓ 
imbuff
ÓÓ  
.
ÓÓ  !
ReadAll
ÓÓ! (
(
ÓÓ( )
)
ÓÓ) *
;
ÓÓ* +
int
ÔÔ 
npt
ÔÔ 
=
ÔÔ 
MathUtil
ÔÔ "
.
ÔÔ" #
NextPowerOfTwo
ÔÔ# 1
(
ÔÔ1 2
iml
ÔÔ2 5
)
ÔÔ5 6
;
ÔÔ6 7
if
ÖÖ 
(
ÖÖ 
value
ÖÖ 
!=
ÖÖ 
null
ÖÖ !
)
ÖÖ! "
{
×× 
if
ØØ 
(
ØØ 
_impulse
ØØ  
!=
ØØ! #
null
ØØ$ (
&&
ØØ) +
npt
ØØ, /
!=
ØØ0 2
_impulseLength
ØØ3 A
)
ØØA B
{
ÙÙ 
throw
ÚÚ 
new
ÚÚ !
ArgumentException
ÚÚ" 3
(
ÚÚ3 4
$str
ÚÚ4 ^
)
ÚÚ^ _
;
ÚÚ_ `
}
ÛÛ 
}
ÜÜ 
_impulse
ÝÝ 
=
ÝÝ 
imbuff
ÝÝ !
;
ÝÝ! "
if
ÞÞ 
(
ÞÞ 
value
ÞÞ 
==
ÞÞ 
null
ÞÞ !
)
ÞÞ! "
{
ßß 
_enabled
áá 
=
áá 
false
áá $
;
áá$ %
return
ââ 
;
ââ 
}
ãã  
_impulseLengthOrig
ää "
=
ää# $
iml
ää% (
;
ää( )
_impulseLength
åå 
=
åå  
npt
åå! $
;
åå$ %
if
ææ 
(
ææ 
_input
ææ 
!=
ææ 
null
ææ  
)
ææ  !
{
çç 
if
ëë 
(
ëë 
(
ëë 
_impulse
ëë !
.
ëë! "
NumChannels
ëë" -
>
ëë. /
$num
ëë0 1
)
ëë1 2
&&
ëë3 5
(
ëë6 7
_impulse
ëë7 ?
.
ëë? @
NumChannels
ëë@ K
!=
ëëL N
_input
ëëO U
.
ëëU V
NumChannels
ëëV a
)
ëëa b
)
ëëb c
{
ìì 
throw
íí 
new
íí !
ArgumentException
íí" 3
(
íí3 4
String
íí4 :
.
íí: ;
Format
íí; A
(
ííA B
$strííB 
,íí 
_impulseíí 
.íí 
NumChannelsíí 
,íí 
_inputíí  ¦
.íí¦ §
NumChannelsíí§ ²
)íí² ³
)íí³ ´
;íí´ µ
}
îî 
}
ïï 
_enabled
ññ 
=
ññ 
true
ññ 
;
ññ  
_impulseFFTReady
òò  
=
òò! "
false
òò# (
;
òò( )
ComputeImpulseFFT
óó !
(
óó! "
)
óó" #
;
óó# $
}
ôô 
}
õõ 	
public
ûû 
override
ûû 
IEnumerator
ûû #
<
ûû# $
ISample
ûû$ +
>
ûû+ ,
Samples
ûû- 4
{
üü 	
get
ýý 
{
þþ 
if
 
(
 
_input
 
==
 
null
 "
)
" #
{
 
Trace
 
.
 
	WriteLine
 #
(
# $
$str
$ 0
)
0 1
;
1 2
yield
 
break
 
;
  
}
 
if
 
(
 
_impulse
 
.
 
NumChannels
 (
==
) +
$num
, -
||
. 0
!
1 2
_enabled
2 :
)
: ;
{
 
foreach
 
(
 
ISample
 $
sample
% +
in
, .
_input
/ 5
)
5 6
{
 
yield
 
return
 $
sample
% +
;
+ ,
}
 
yield
 
break
 
;
  
}
 
init
 
(
 
)
 
;
 
p
   
=
   
$num
   
;
   
inputSamples
¡¡ 
=
¡¡ 
_input
¡¡ %
.
¡¡% &#
GetBufferedEnumerator
¡¡& ;
(
¡¡; <
)
¡¡< =
as
¡¡> @
ISampleBuffer
¡¡A N
;
¡¡N O
bool
¢¢ 
moreSamples
¢¢  
=
¢¢! "
true
¢¢# '
;
¢¢' (
bool
££ 
tail
££ 
=
££ 
false
££ !
;
££! "
int
¤¤ 
tailLen
¤¤ 
=
¤¤ 
$num
¤¤ 
;
¤¤  
List
§§ 
<
§§ 
ISample
§§ 
>
§§ 
thisTailSamples
§§ -
=
§§. /
new
§§0 3
List
§§4 8
<
§§8 9
ISample
§§9 @
>
§§@ A
(
§§A B 
_impulseLengthOrig
§§B T
>
§§T U
$num
§§U V
?
§§W X 
_impulseLengthOrig
§§Y k
:
§§l m
DSPUtil
§§n u
.
§§u v
BUFSIZE
§§v }
)
§§} ~
;
§§~ 
while
©© 
(
©© 
moreSamples
©© "
||
©©# %
tail
©©& *
)
©©* +
{
ªª 
int
«« 
nn
«« 
;
«« 
if
¬¬ 
(
¬¬ 
_partitions
¬¬ #
<=
¬¬$ &
$num
¬¬' (
)
¬¬( )
{
­­ 
compute0
®®  
(
®®  !
out
®®! $
nn
®®% '
,
®®' (
out
®®) ,
moreSamples
®®- 8
)
®®8 9
;
®®9 :
for
°° 
(
°° 
int
°°  
j
°°! "
=
°°# $
$num
°°% &
;
°°& '
j
°°( )
<
°°* +
nn
°°, .
;
°°. /
j
°°0 1
++
°°1 3
)
°°3 4
{
±± 
yield
²² !
return
²²" (
_next
²²) .
(
²². /
j
²²/ 0
)
²²0 1
;
²²1 2
}
³³ 
}
´´ 
else
µµ 
{
¶¶ 
computeP
··  
(
··  !
out
··! $
nn
··% '
,
··' (
out
··) ,
moreSamples
··- 8
)
··8 9
;
··9 :
for
¹¹ 
(
¹¹ 
int
¹¹  
j
¹¹! "
=
¹¹# $
$num
¹¹% &
;
¹¹& '
j
¹¹( )
<
¹¹* +
nn
¹¹, .
;
¹¹. /
j
¹¹0 1
++
¹¹1 3
)
¹¹3 4
{
ºº 
yield
»» !
return
»»" (
_next
»») .
(
»». /
j
»»/ 0
)
»»0 1
;
»»1 2
}
¼¼ 
p
¾¾ 
=
¾¾ 
(
¾¾ 
p
¾¾ 
+
¾¾  
$num
¾¾! "
)
¾¾" #
%
¾¾$ %
P
¾¾& '
;
¾¾' (
}
¿¿ 
if
ÂÂ 
(
ÂÂ 
tail
ÂÂ 
)
ÂÂ 
{
ÃÃ 
for
ÅÅ 
(
ÅÅ 
int
ÅÅ  
j
ÅÅ! "
=
ÅÅ# $
$num
ÅÅ% &
;
ÅÅ& '
j
ÅÅ( )
<
ÅÅ* +
Math
ÅÅ, 0
.
ÅÅ0 1
Min
ÅÅ1 4
(
ÅÅ4 5
K
ÅÅ5 6
,
ÅÅ6 7
tailLen
ÅÅ7 >
)
ÅÅ> ?
;
ÅÅ? @
j
ÅÅA B
++
ÅÅB D
)
ÅÅD E
{
ÆÆ 
thisTailSamples
ÇÇ +
.
ÇÇ+ ,
Add
ÇÇ, /
(
ÇÇ/ 0
_next
ÇÇ0 5
(
ÇÇ5 6
j
ÇÇ6 7
)
ÇÇ7 8
)
ÇÇ8 9
;
ÇÇ9 :
}
ÈÈ 
if
ÉÉ 
(
ÉÉ 
K
ÉÉ 
>
ÉÉ 
tailLen
ÉÉ  '
)
ÉÉ' (
{
ÊÊ 
if
ÍÍ 
(
ÍÍ  
IsPersistTail
ÍÍ  -
)
ÍÍ- .
{
ÎÎ 
Trace
ÑÑ  %
.
ÑÑ% &
	WriteLine
ÑÑ& /
(
ÑÑ/ 0
$str
ÑÑ0 A
,
ÑÑA B
_persistFile
ÑÑC O
.
ÑÑO P
Replace
ÑÑP W
(
ÑÑW X
_persistPath
ÑÑX d
,
ÑÑd e
$str
ÑÑf h
)
ÑÑh i
,
ÑÑi j
thisTailSamples
ÑÑk z
.
ÑÑz {
CountÑÑ{ 
)ÑÑ 
;ÑÑ 
try
ÒÒ  #
{
ÓÓ  !

WaveWriter
ÔÔ$ .

tailWriter
ÔÔ/ 9
=
ÔÔ: ;
new
ÔÔ< ?

WaveWriter
ÔÔ@ J
(
ÔÔJ K
_persistFile
ÔÔK W
)
ÔÔW X
;
ÔÔX Y

tailWriter
ÖÖ$ .
.
ÖÖ. /
Input
ÖÖ/ 4
=
ÖÖ5 6
new
ÖÖ7 :
CallbackSource
ÖÖ; I
(
ÖÖI J
	nChannels
ÖÖJ S
,
ÖÖS T

SampleRate
ÖÖU _
,
ÖÖ_ `
delegate
ÖÖa i
(
ÖÖi j
long
ÖÖj n
n
ÖÖo p
)
ÖÖp q
{
××$ %
if
ØØ( *
(
ØØ+ ,
n
ØØ, -
>=
ØØ. 0
thisTailSamples
ØØ1 @
.
ØØ@ A
Count
ØØA F
)
ØØF G
{
ÙÙ( )
return
ÚÚ, 2
null
ÚÚ3 7
;
ÚÚ7 8
}
ÛÛ( )
return
ÜÜ( .
thisTailSamples
ÜÜ/ >
[
ÜÜ> ?
(
ÜÜ? @
int
ÜÜ@ C
)
ÜÜC D
n
ÜÜD E
]
ÜÜE F
;
ÜÜF G
}
ÝÝ$ %
)
ÝÝ% &
;
ÝÝ& '

tailWriter
ÞÞ$ .
.
ÞÞ. /

SampleRate
ÞÞ/ 9
=
ÞÞ: ;

SampleRate
ÞÞ< F
;
ÞÞF G

tailWriter
ßß$ .
.
ßß. /
Format
ßß/ 5
=
ßß6 7

WaveFormat
ßß8 B
.
ßßB C

IEEE_FLOAT
ßßC M
;
ßßM N

tailWriter
àà$ .
.
àà. /
BitsPerSample
àà/ <
=
àà= >
$num
àà? A
;
ààA B

tailWriter
áá$ .
.
áá. /
Run
áá/ 2
(
áá2 3
)
áá3 4
;
áá4 5

tailWriter
ââ$ .
.
ââ. /
Close
ââ/ 4
(
ââ4 5
)
ââ5 6
;
ââ6 7
}
ãã  !
catch
ää  %
(
ää& '
	Exception
ää' 0
e
ää1 2
)
ää2 3
{
åå  !
Trace
ææ$ )
.
ææ) *
	WriteLine
ææ* 3
(
ææ3 4
$str
ææ4 A
,
ææA B
e
ææC D
.
ææD E
Message
ææE L
)
ææL M
;
ææM N
}
èè  !
}
éé 
else
êê  
{
ëë 
foreach
íí  '
(
íí( )
ISample
íí) 0
s
íí1 2
in
íí3 5
thisTailSamples
íí6 E
)
ííE F
{
îî  !
yield
ïï$ )
return
ïï* 0
s
ïï1 2
;
ïï2 3
}
ðð  !
}
ññ 
yield
òò !
break
òò" '
;
òò' (
}
óó 
else
ôô 
{
õõ 
tailLen
÷÷ #
-=
÷÷$ &
K
÷÷' (
;
÷÷( )
}
øø 
}
ùù 
if
ûû 
(
ûû 
!
ûû 
moreSamples
ûû $
&&
ûû% '
!
ûû( )
tail
ûû) -
)
ûû- .
{
üü 
int
ýý 
nK
ýý 
=
ýý  
Math
ýý! %
.
ýý% &
Min
ýý& )
(
ýý) * 
_impulseLengthOrig
ýý* <
,
ýý< =
K
ýý> ?
-
ýý@ A
nn
ýýB D
)
ýýD E
;
ýýE F
for
þþ 
(
þþ 
int
þþ  
j
þþ! "
=
þþ# $
$num
þþ% &
;
þþ& '
j
þþ( )
<
þþ* +
nK
þþ, .
;
þþ. /
j
þþ0 1
++
þþ1 3
)
þþ3 4
{
ÿÿ 
thisTailSamples
 +
.
+ ,
Add
, /
(
/ 0
_next
0 5
(
5 6
j
6 7
+
8 9
nn
: <
)
< =
)
= >
;
> ?
}
 
tail
 
=
 
true
 #
;
# $
tailLen
 
=
  ! 
_impulseLengthOrig
" 4
-
5 6
nK
7 9
;
9 :
}
 
}
 
done
 
(
 
)
 
;
 
}
 
}
 	
ushort
 
	nChannels
 
;
 
int
 
N
 
;
 
int
 
Nh
 
;
 
int
 
K
 
,
 
L
 
,
 
P
 
;
 
int
 
p
 
;
 
Complex
 
[
 
]
 
[
 
]
 
src
 
;
 
Complex
 
[
 
]
 
[
 
]
 
output
 
;
 
Complex
 
[
 
]
 
[
 
]
 
[
 
]
 
accum
 
;
 
ISampleBuffer
 
inputSamples
 "
;
" #
List
 
<
 
ISample
 
>
 
prevTailSamples
 %
;
% &
IEnumerator
 
<
 
ISample
 
>
 
prevTailEnum
 )
=
* +
null
, 0
;
0 1
ushort
 
nImpulseChannels
 
;
  
private
 
ISample
 
_next
 
(
 
int
 !
j
" #
)
# $
{
 	
if
 
(
 
prevTailEnum
 
!=
 
null
  $
)
$ %
{
 
if
   
(
   
prevTailEnum
    
.
    !
MoveNext
  ! )
(
  ) *
)
  * +
)
  + ,
{
¡¡ 
for
¢¢ 
(
¢¢ 
ushort
¢¢ 
c
¢¢  !
=
¢¢" #
$num
¢¢$ %
;
¢¢% &
c
¢¢' (
<
¢¢) *
	nChannels
¢¢+ 4
;
¢¢4 5
c
¢¢6 7
++
¢¢7 9
)
¢¢9 :
{
££ 
output
¤¤ 
[
¤¤ 
c
¤¤  
]
¤¤  !
[
¤¤! "
j
¤¤" #
]
¤¤# $
.
¤¤$ %
Re
¤¤% '
+=
¤¤( *
prevTailEnum
¤¤+ 7
.
¤¤7 8
Current
¤¤8 ?
[
¤¤? @
c
¤¤@ A
]
¤¤A B
;
¤¤B C
}
¥¥ 
}
¦¦ 
else
§§ 
{
¨¨ 
prevTailEnum
©©  
=
©©! "
null
©©# '
;
©©' (
}
ªª 
}
«« 
if
¬¬ 
(
¬¬ 
	nChannels
¬¬ 
==
¬¬ 
$num
¬¬ 
)
¬¬ 
{
­­ 
return
®® 
new
®® 
Sample2
®® "
(
®®" #
output
®®# )
[
®®) *
$num
®®* +
]
®®+ ,
[
®®, -
j
®®- .
]
®®. /
.
®®/ 0
Re
®®0 2
,
®®2 3
output
®®4 :
[
®®: ;
$num
®®; <
]
®®< =
[
®®= >
j
®®> ?
]
®®? @
.
®®@ A
Re
®®A C
)
®®C D
;
®®D E
}
¯¯ 
ISample
°° 
ret
°° 
=
°° 
new
°° 
Sample
°° $
(
°°$ %
	nChannels
°°% .
)
°°. /
;
°°/ 0
for
±± 
(
±± 
ushort
±± 
c
±± 
=
±± 
$num
±± 
;
±± 
c
±±  
<
±±! "
	nChannels
±±# ,
;
±±, -
c
±±. /
++
±±/ 1
)
±±1 2
{
²² 
ret
³³ 
[
³³ 
c
³³ 
]
³³ 
=
³³ 
output
³³ 
[
³³  
c
³³  !
]
³³! "
[
³³" #
j
³³# $
]
³³$ %
.
³³% &
Re
³³& (
;
³³( )
}
´´ 
return
µµ 
ret
µµ 
;
µµ 
}
¶¶ 	
private
¸¸ 
void
¸¸ 
init
¸¸ 
(
¸¸ 
)
¸¸ 
{
¹¹ 	
_running
ºº 
=
ºº 
true
ºº 
;
ºº 
ComputeImpulseFFT
¼¼ 
(
¼¼ 
)
¼¼ 
;
¼¼  
	nChannels
¾¾ 
=
¾¾ 
NumChannels
¾¾ #
;
¾¾# $
N
ÀÀ 
=
ÀÀ 
_impulseLength
ÀÀ 
;
ÀÀ 
nImpulseChannels
ÁÁ 
=
ÁÁ 
_impulse
ÁÁ '
.
ÁÁ' (
NumChannels
ÁÁ( 3
;
ÁÁ3 4
Nh
ÂÂ 
=
ÂÂ 
N
ÂÂ 
<<
ÂÂ 
$num
ÂÂ 
;
ÂÂ 
K
ÄÄ 
=
ÄÄ 
(
ÄÄ 
_partitions
ÄÄ 
<=
ÄÄ 
$num
ÄÄ  !
)
ÄÄ! "
?
ÄÄ# $
N
ÄÄ% &
:
ÄÄ' (
(
ÄÄ) *
N
ÄÄ* +
/
ÄÄ, -
_partitions
ÄÄ. 9
)
ÄÄ9 :
;
ÄÄ: ;
L
ÅÅ 
=
ÅÅ 
MathUtil
ÅÅ 
.
ÅÅ 
NextPowerOfTwo
ÅÅ '
(
ÅÅ' (
K
ÅÅ( )
<<
ÅÅ* ,
$num
ÅÅ- .
)
ÅÅ. /
;
ÅÅ/ 0
P
ÆÆ 
=
ÆÆ 
(
ÆÆ 
int
ÆÆ 
)
ÆÆ 
Math
ÆÆ 
.
ÆÆ 
Ceiling
ÆÆ !
(
ÆÆ! "
(
ÆÆ" #
double
ÆÆ# )
)
ÆÆ) *
N
ÆÆ* +
/
ÆÆ, -
(
ÆÆ. /
double
ÆÆ/ 5
)
ÆÆ5 6
K
ÆÆ6 7
)
ÆÆ7 8
;
ÆÆ8 9
src
ËË 
=
ËË 
new
ËË 
Complex
ËË 
[
ËË 
	nChannels
ËË '
]
ËË' (
[
ËË( )
]
ËË) *
;
ËË* +
output
ÌÌ 
=
ÌÌ 
new
ÌÌ 
Complex
ÌÌ  
[
ÌÌ  !
	nChannels
ÌÌ! *
]
ÌÌ* +
[
ÌÌ+ ,
]
ÌÌ, -
;
ÌÌ- .
for
ÍÍ 
(
ÍÍ 
ushort
ÍÍ 
c
ÍÍ 
=
ÍÍ 
$num
ÍÍ 
;
ÍÍ 
c
ÍÍ  
<
ÍÍ! "
	nChannels
ÍÍ# ,
;
ÍÍ, -
c
ÍÍ. /
++
ÍÍ/ 1
)
ÍÍ1 2
{
ÎÎ 
src
ÏÏ 
[
ÏÏ 
c
ÏÏ 
]
ÏÏ 
=
ÏÏ 
new
ÏÏ 
Complex
ÏÏ $
[
ÏÏ$ %
Nh
ÏÏ% '
]
ÏÏ' (
;
ÏÏ( )
output
ÐÐ 
[
ÐÐ 
c
ÐÐ 
]
ÐÐ 
=
ÐÐ 
new
ÐÐ 
Complex
ÐÐ  '
[
ÐÐ' (
Nh
ÐÐ( *
]
ÐÐ* +
;
ÐÐ+ ,
}
ÑÑ 
if
ÔÔ 
(
ÔÔ 
_partitions
ÔÔ 
>
ÔÔ 
$num
ÔÔ 
)
ÔÔ  
{
ÕÕ 
accum
ÖÖ 
=
ÖÖ 
new
ÖÖ 
Complex
ÖÖ #
[
ÖÖ# $
	nChannels
ÖÖ$ -
]
ÖÖ- .
[
ÖÖ. /
]
ÖÖ/ 0
[
ÖÖ0 1
]
ÖÖ1 2
;
ÖÖ2 3
for
×× 
(
×× 
ushort
×× 
c
×× 
=
×× 
$num
××  !
;
××! "
c
××# $
<
××% &
	nChannels
××' 0
;
××0 1
c
××2 3
++
××3 5
)
××5 6
{
ØØ 
accum
ÙÙ 
[
ÙÙ 
c
ÙÙ 
]
ÙÙ 
=
ÙÙ 
new
ÙÙ "
Complex
ÙÙ# *
[
ÙÙ* +
P
ÙÙ+ ,
]
ÙÙ, -
[
ÙÙ- .
]
ÙÙ. /
;
ÙÙ/ 0
for
ÚÚ 
(
ÚÚ 
p
ÚÚ 
=
ÚÚ 
$num
ÚÚ 
;
ÚÚ 
p
ÚÚ  !
<
ÚÚ" #
P
ÚÚ$ %
;
ÚÚ% &
p
ÚÚ' (
++
ÚÚ( *
)
ÚÚ* +
{
ÛÛ 
accum
ÜÜ 
[
ÜÜ 
c
ÜÜ 
]
ÜÜ  
[
ÜÜ  !
p
ÜÜ! "
]
ÜÜ" #
=
ÜÜ$ %
new
ÜÜ& )
Complex
ÜÜ* 1
[
ÜÜ1 2
L
ÜÜ2 3
]
ÜÜ3 4
;
ÜÜ4 5
}
ÝÝ 
}
ÞÞ 
}
ßß 
if
áá 
(
áá 
IsPersistTail
áá 
)
áá 
{
ââ 
if
åå 
(
åå 
System
åå 
.
åå 
IO
åå 
.
åå 
File
åå "
.
åå" #
Exists
åå# )
(
åå) *
_persistFile
åå* 6
)
åå6 7
)
åå7 8
{
ææ 

WaveReader
çç 

tailReader
çç )
=
çç* +
null
çç, 0
;
çç0 1
try
èè 
{
éé 

tailReader
êê "
=
êê# $
new
êê% (

WaveReader
êê) 3
(
êê3 4
_persistFile
êê4 @
)
êê@ A
;
êêA B
prevTailSamples
ëë '
=
ëë( )
new
ëë* -
List
ëë. 2
<
ëë2 3
ISample
ëë3 :
>
ëë: ;
(
ëë; <

tailReader
ëë< F
.
ëëF G

Iterations
ëëG Q
)
ëëQ R
;
ëëR S
if
íí 
(
íí 

tailReader
íí &
.
íí& '
NumChannels
íí' 2
==
íí3 5
NumChannels
íí6 A
)
ííA B
{
îî 
foreach
ïï #
(
ïï$ %
ISample
ïï% ,
s
ïï- .
in
ïï/ 1

tailReader
ïï2 <
)
ïï< =
{
ðð 
prevTailSamples
ññ  /
.
ññ/ 0
Add
ññ0 3
(
ññ3 4
s
ññ4 5
)
ññ5 6
;
ññ6 7
}
òò 
}
óó 
prevTailEnum
ôô $
=
ôô% &
prevTailSamples
ôô' 6
.
ôô6 7
GetEnumerator
ôô7 D
(
ôôD E
)
ôôE F
;
ôôF G
}
õõ 
catch
öö 
(
öö 
	Exception
öö $
e
öö% &
)
öö& '
{
÷÷ 
Trace
øø 
.
øø 
	WriteLine
øø '
(
øø' (
$str
øø( F
,
øøF G
_persistFile
øøH T
.
øøT U
Replace
øøU \
(
øø\ ]
_persistPath
øø] i
,
øøi j
$str
øøk m
)
øøm n
,
øøn o
e
øøp q
.
øøq r
Message
øør y
)
øøy z
;
øøz {
}
ùù 
try
ýý 
{
þþ 
if
ÿÿ 
(
ÿÿ  

tailReader
ÿÿ  *
!=
ÿÿ+ -
null
ÿÿ. 2
)
ÿÿ2 3
{
 

tailReader
  *
.
* +
Close
+ 0
(
0 1
)
1 2
;
2 3

tailReader
  *
=
+ ,
null
- 1
;
1 2
}
 
System
 "
.
" #
IO
# %
.
% &
File
& *
.
* +
Delete
+ 1
(
1 2
_persistFile
2 >
)
> ?
;
? @
}
 
catch
 
(
 
	Exception
 (
)
( )
{
 
}
 
}
 
}
 
}
 	
struct
 
mre
 
{
 	
public
 
ManualResetEvent
 #
e
$ %
;
% &
public
 
int
 
p
 
;
 
public
 
ushort
 
c
 
;
 
}
 	
unsafe
 
int
 
compute0
 
(
 
out
 
int
  #
nn
$ &
,
& '
out
( +
bool
, 0
moreSamples
1 <
)
< =
{
 	
ushort
 
nc
 
=
 
	nChannels
 !
;
! "
Complex
 
[
 
]
 
[
 
]
 
buf
 
=
 
inputSamples
 *
.
* +
ReadComplex
+ 6
(
6 7
K
7 8
,
8 9
out
: =
nn
> @
,
@ A
out
B E
moreSamples
F Q
)
Q R
;
R S
mre
¡¡ 
[
¡¡ 
]
¡¡ 
ev
¡¡ 
=
¡¡ 
new
¡¡ 
mre
¡¡ 
[
¡¡ 
nc
¡¡ !
]
¡¡! "
;
¡¡" #
ManualResetEvent
¢¢ 
[
¢¢ 
]
¢¢ 
ee
¢¢ !
=
¢¢" #
new
¢¢$ '
ManualResetEvent
¢¢( 8
[
¢¢8 9
nc
¢¢9 ;
]
¢¢; <
;
¢¢< =
for
££ 
(
££ 
ushort
££ 
c
££ 
=
££ 
$num
££ 
;
££ 
c
££  
<
££! "
nc
££# %
;
££% &
c
££' (
++
££( *
)
££* +
{
¤¤ 
ManualResetEvent
¥¥  
mr
¥¥! #
=
¥¥$ %
new
¥¥& )
ManualResetEvent
¥¥* :
(
¥¥: ;
false
¥¥; @
)
¥¥@ A
;
¥¥A B
ev
¦¦ 
[
¦¦ 
c
¦¦ 
]
¦¦ 
.
¦¦ 
e
¦¦ 
=
¦¦ 
mr
¦¦ 
;
¦¦ 
ev
§§ 
[
§§ 
c
§§ 
]
§§ 
.
§§ 
c
§§ 
=
§§ 
c
§§ 
;
§§ 
ee
¨¨ 
[
¨¨ 
c
¨¨ 
]
¨¨ 
=
¨¨ 
mr
¨¨ 
;
¨¨ 

ThreadPool
©© 
.
©© 
QueueUserWorkItem
©© ,
(
©©, -
delegate
©©- 5
(
©©5 6
object
©©6 <
e
©©= >
)
©©> ?
{
ªª 
mre
«« 
m
«« 
=
«« 
(
«« 
mre
««  
)
««  !
e
««! "
;
««" #
ushort
¬¬ 
_c
¬¬ 
=
¬¬ 
m
¬¬  !
.
¬¬! "
c
¬¬" #
;
¬¬# $
Complex
®® 
[
®® 
]
®® 

impulseFFT
®® (
=
®®) *
_NormalImpulseFFT
®®+ <
[
®®< =
(
®®= >
nImpulseChannels
®®> N
==
®®O Q
$num
®®R S
)
®®S T
?
®®U V
(
®®W X
ushort
®®X ^
)
®®^ _
$num
®®_ `
:
®®a b
_c
®®c e
]
®®e f
;
®®f g
Array
°° 
.
°° 
Copy
°° 
(
°° 
buf
°° "
[
°°" #
_c
°°# %
]
°°% &
,
°°& '
$num
°°( )
,
°°) *
src
°°+ .
[
°°. /
_c
°°/ 1
]
°°1 2
,
°°2 3
K
°°4 5
,
°°5 6
K
°°7 8
)
°°8 9
;
°°9 :
Fourier
³³ 
.
³³ 
Convolve
³³ $
(
³³$ %
Nh
³³% '
,
³³' (

impulseFFT
³³) 3
,
³³3 4
src
³³5 8
[
³³8 9
_c
³³9 ;
]
³³; <
,
³³< =
_deconvolve
³³> I
)
³³I J
;
³³J K
Array
µµ 
.
µµ 
Copy
µµ 
(
µµ 
src
µµ "
[
µµ" #
_c
µµ# %
]
µµ% &
,
µµ& '
output
µµ( .
[
µµ. /
_c
µµ/ 1
]
µµ1 2
,
µµ2 3
K
µµ4 5
)
µµ5 6
;
µµ6 7
Array
¶¶ 
.
¶¶ 
Copy
¶¶ 
(
¶¶ 
buf
¶¶ "
[
¶¶" #
_c
¶¶# %
]
¶¶% &
,
¶¶& '
src
¶¶( +
[
¶¶+ ,
_c
¶¶, .
]
¶¶. /
,
¶¶/ 0
K
¶¶1 2
)
¶¶2 3
;
¶¶3 4
m
¹¹ 
.
¹¹ 
e
¹¹ 
.
¹¹ 
Set
¹¹ 
(
¹¹ 
)
¹¹ 
;
¹¹ 
}
ºº 
,
ºº 
ev
ºº 
[
ºº 
c
ºº 
]
ºº 
)
ºº 
;
ºº 
}
»» 

WaitHandle
¼¼ 
.
¼¼ 
WaitAll
¼¼ 
(
¼¼ 
ee
¼¼ !
)
¼¼! "
;
¼¼" #
return
¾¾ 
nn
¾¾ 
;
¾¾ 
}
¿¿ 	
unsafe
ÂÂ 
int
ÂÂ 
computeP
ÂÂ 
(
ÂÂ 
out
ÂÂ 
int
ÂÂ  #
nn
ÂÂ$ &
,
ÂÂ& '
out
ÂÂ( +
bool
ÂÂ, 0
moreSamples
ÂÂ1 <
)
ÂÂ< =
{
ÃÃ 	
ushort
ÄÄ 
nc
ÄÄ 
=
ÄÄ 
	nChannels
ÄÄ !
;
ÄÄ! "
Complex
ÉÉ 
[
ÉÉ 
]
ÉÉ 
[
ÉÉ 
]
ÉÉ 
buf
ÉÉ 
=
ÉÉ 
inputSamples
ÉÉ *
.
ÉÉ* +
ReadComplex
ÉÉ+ 6
(
ÉÉ6 7
K
ÉÉ7 8
,
ÉÉ8 9
out
ÉÉ: =
nn
ÉÉ> @
,
ÉÉ@ A
out
ÉÉB E
moreSamples
ÉÉF Q
)
ÉÉQ R
;
ÉÉR S
mre
ËË 
[
ËË 
]
ËË 
ev
ËË 
=
ËË 
new
ËË 
mre
ËË 
[
ËË 
nc
ËË !
]
ËË! "
;
ËË" #
ManualResetEvent
ÌÌ 
[
ÌÌ 
]
ÌÌ 
ee
ÌÌ !
=
ÌÌ" #
new
ÌÌ$ '
ManualResetEvent
ÌÌ( 8
[
ÌÌ8 9
nc
ÌÌ9 ;
]
ÌÌ; <
;
ÌÌ< =
for
ÍÍ 
(
ÍÍ 
ushort
ÍÍ 
c
ÍÍ 
=
ÍÍ 
$num
ÍÍ 
;
ÍÍ 
c
ÍÍ  
<
ÍÍ! "
nc
ÍÍ# %
;
ÍÍ% &
c
ÍÍ' (
++
ÍÍ( *
)
ÍÍ* +
{
ÎÎ 
ManualResetEvent
ÏÏ  
mr
ÏÏ! #
=
ÏÏ$ %
new
ÏÏ& )
ManualResetEvent
ÏÏ* :
(
ÏÏ: ;
false
ÏÏ; @
)
ÏÏ@ A
;
ÏÏA B
ev
ÐÐ 
[
ÐÐ 
c
ÐÐ 
]
ÐÐ 
.
ÐÐ 
e
ÐÐ 
=
ÐÐ 
mr
ÐÐ 
;
ÐÐ 
ev
ÑÑ 
[
ÑÑ 
c
ÑÑ 
]
ÑÑ 
.
ÑÑ 
c
ÑÑ 
=
ÑÑ 
c
ÑÑ 
;
ÑÑ 
ev
ÒÒ 
[
ÒÒ 
c
ÒÒ 
]
ÒÒ 
.
ÒÒ 
p
ÒÒ 
=
ÒÒ 
p
ÒÒ 
;
ÒÒ 
ee
ÓÓ 
[
ÓÓ 
c
ÓÓ 
]
ÓÓ 
=
ÓÓ 
mr
ÓÓ 
;
ÓÓ 

ThreadPool
ÔÔ 
.
ÔÔ 
QueueUserWorkItem
ÔÔ ,
(
ÔÔ, -
delegate
ÔÔ- 5
(
ÔÔ5 6
object
ÔÔ6 <
e
ÔÔ= >
)
ÔÔ> ?
{
ÕÕ 
mre
ÖÖ 
m
ÖÖ 
=
ÖÖ 
(
ÖÖ 
mre
ÖÖ  
)
ÖÖ  !
e
ÖÖ! "
;
ÖÖ" #
ushort
×× 
_c
×× 
=
×× 
m
××  !
.
××! "
c
××" #
;
××# $
Complex
ÙÙ 
[
ÙÙ 
]
ÙÙ 
[
ÙÙ 
]
ÙÙ 

impulseFFT
ÙÙ  *
=
ÙÙ+ ,$
_PartitionedImpulseFFT
ÙÙ- C
[
ÙÙC D
(
ÙÙD E
nImpulseChannels
ÙÙE U
==
ÙÙV X
$num
ÙÙY Z
)
ÙÙZ [
?
ÙÙ\ ]
(
ÙÙ^ _
ushort
ÙÙ_ e
)
ÙÙe f
$num
ÙÙf g
:
ÙÙh i
_c
ÙÙj l
]
ÙÙl m
;
ÙÙm n
Array
ÛÛ 
.
ÛÛ 
Copy
ÛÛ 
(
ÛÛ 
buf
ÛÛ "
[
ÛÛ" #
_c
ÛÛ# %
]
ÛÛ% &
,
ÛÛ& '
$num
ÛÛ( )
,
ÛÛ) *
src
ÛÛ+ .
[
ÛÛ. /
_c
ÛÛ/ 1
]
ÛÛ1 2
,
ÛÛ2 3
K
ÛÛ4 5
,
ÛÛ5 6
K
ÛÛ7 8
)
ÛÛ8 9
;
ÛÛ9 :
Fourier
ÝÝ 
.
ÝÝ 
ConvolvePart
ÝÝ (
(
ÝÝ( )
L
ÝÝ) *
,
ÝÝ* +
m
ÝÝ, -
.
ÝÝ- .
p
ÝÝ. /
,
ÝÝ/ 0
P
ÝÝ1 2
,
ÝÝ2 3

impulseFFT
ÝÝ4 >
,
ÝÝ> ?
src
ÝÝ@ C
[
ÝÝC D
_c
ÝÝD F
]
ÝÝF G
,
ÝÝG H
accum
ÝÝI N
[
ÝÝN O
_c
ÝÝO Q
]
ÝÝQ R
,
ÝÝR S
output
ÝÝT Z
[
ÝÝZ [
_c
ÝÝ[ ]
]
ÝÝ] ^
,
ÝÝ^ _
_deconvolve
ÝÝ` k
)
ÝÝk l
;
ÝÝl m
Array
ßß 
.
ßß 
Copy
ßß 
(
ßß 
buf
ßß "
[
ßß" #
_c
ßß# %
]
ßß% &
,
ßß& '
src
ßß( +
[
ßß+ ,
_c
ßß, .
]
ßß. /
,
ßß/ 0
K
ßß1 2
)
ßß2 3
;
ßß3 4
m
áá 
.
áá 
e
áá 
.
áá 
Set
áá 
(
áá 
)
áá 
;
áá 
}
ââ 
,
ââ 
ev
ââ 
[
ââ 
c
ââ 
]
ââ 
)
ââ 
;
ââ 
}
ãã 

WaitHandle
ää 
.
ää 
WaitAll
ää 
(
ää 
ee
ää !
)
ää! "
;
ää" #
return
ææ 
nn
ææ 
;
ææ 
}
çç 	
void
éé 
done
éé 
(
éé 
)
éé 
{
êê 	
_running
ìì 
=
ìì 
false
ìì 
;
ìì 
src
íí 
=
íí 
null
íí 
;
íí 
output
îî 
=
îî 
null
îî 
;
îî 
accum
ïï 
=
ïï 
null
ïï 
;
ïï 
inputSamples
ðð 
=
ðð 
null
ðð 
;
ðð  
}
ññ 	
private
õõ 
void
õõ 
ComputeImpulseFFT
õõ &
(
õõ& '
)
õõ' (
{
öö 	
if
÷÷ 
(
÷÷ 
!
÷÷ 
_impulseFFTReady
÷÷ !
)
÷÷! "
{
øø 
if
úú 
(
úú 
_partitions
úú 
==
úú  "
$num
úú# $
)
úú$ %
{
ûû 
_impulseFFTReady
üü $
=
üü% &%
ComputeNormalImpulseFFT
üü' >
(
üü> ?
)
üü? @
;
üü@ A
}
ýý 
else
þþ 
{
ÿÿ 
_impulseFFTReady
 $
=
% &*
ComputePartitionedImpulseFFT
' C
(
C D
)
D E
;
E F
}
 
}
 
}
 	
private
 
bool
 %
ComputeNormalImpulseFFT
 ,
(
, -
)
- .
{
 	
if
 
(
 
_impulse
 
==
 
null
  
)
  !
{
 
return
 
false
 
;
 
}
 
ushort
 
	nChannels
 
;
 
if
 
(
 
_input
 
==
 
null
 
)
 
{
 
	nChannels
 
=
 
_impulse
 $
.
$ %
NumChannels
% 0
;
0 1
}
 
else
 
{
 
	nChannels
 
=
 
_input
 "
.
" #
NumChannels
# .
;
. /
}
 
int
 
N
 
=
 
_impulseLength
 "
;
" #
int
 
Nh
 
=
 
N
 
<<
 
$num
 
;
 
_NormalImpulseFFT
 
=
 
new
  #
Complex
$ +
[
+ ,
	nChannels
, 5
]
5 6
[
6 7
]
7 8
;
8 9
for
 
(
 
ushort
 
c
 
=
 
$num
 
;
 
c
  
<
! "
	nChannels
# ,
;
, -
c
. /
++
/ 1
)
1 2
{
 
_NormalImpulseFFT
 !
[
! "
c
" #
]
# $
=
% &
new
' *
Complex
+ 2
[
2 3
Nh
3 5
]
5 6
;
6 7
}
 
int
   
i
   
=
   
$num
   
;
   
foreach
¡¡ 
(
¡¡ 
ISample
¡¡ 
sample
¡¡ #
in
¡¡$ &
_impulse
¡¡' /
)
¡¡/ 0
{
¢¢ 
for
££ 
(
££ 
ushort
££ 
c
££ 
=
££ 
$num
££  !
;
££! "
c
££# $
<
££% &
_impulse
££' /
.
££/ 0
NumChannels
££0 ;
;
££; <
c
££= >
++
££> @
)
££@ A
{
¤¤ 
_NormalImpulseFFT
¥¥ %
[
¥¥% &
c
¥¥& '
]
¥¥' (
[
¥¥( )
i
¥¥) *
+
¥¥+ ,
N
¥¥- .
]
¥¥. /
=
¥¥0 1
new
¥¥2 5
Complex
¥¥6 =
(
¥¥= >
sample
¥¥> D
[
¥¥D E
c
¥¥E F
]
¥¥F G
,
¥¥G H
$num
¥¥H I
)
¥¥I J
;
¥¥J K
}
¦¦ 
i
§§ 
++
§§ 
;
§§ 
if
¨¨ 
(
¨¨ 
i
¨¨ 
>=
¨¨ 
_impulseLength
¨¨ '
)
¨¨' (
{
¨¨) *
break
¨¨+ 0
;
¨¨0 1
}
¨¨2 3
}
©©  
_impulseLengthOrig
ªª 
=
ªª  
i
ªª! "
-
ªª# $
$num
ªª% &
;
ªª& '
for
­­ 
(
­­ 
ushort
­­ 
c
­­ 
=
­­ 
$num
­­ 
;
­­ 
c
­­  
<
­­! "
	nChannels
­­# ,
;
­­, -
c
­­. /
++
­­/ 1
)
­­1 2
{
®® 
if
¯¯ 
(
¯¯ 
c
¯¯ 
>=
¯¯ 
_impulse
¯¯ !
.
¯¯! "
NumChannels
¯¯" -
)
¯¯- .
{
°° 
_NormalImpulseFFT
´´ %
[
´´% &
c
´´& '
]
´´' (
=
´´) *
_NormalImpulseFFT
´´+ <
[
´´< =
$num
´´= >
]
´´> ?
;
´´? @
}
µµ 
else
¶¶ 
{
·· 
Fourier
¸¸ 
.
¸¸ 
FFT
¸¸ 
(
¸¸  
Nh
¸¸  "
,
¸¸" #
_NormalImpulseFFT
¸¸$ 5
[
¸¸5 6
c
¸¸6 7
]
¸¸7 8
)
¸¸8 9
;
¸¸9 :
}
¹¹ 
}
ºº 
return
»» 
true
»» 
;
»» 
}
¼¼ 	
private
¿¿ 
bool
¿¿ *
ComputePartitionedImpulseFFT
¿¿ 1
(
¿¿1 2
)
¿¿2 3
{
ÀÀ 	
if
ÁÁ 
(
ÁÁ 
_impulse
ÁÁ 
==
ÁÁ 
null
ÁÁ  
)
ÁÁ  !
{
ÂÂ 
return
ÃÃ 
false
ÃÃ 
;
ÃÃ 
}
ÄÄ 
ushort
ÅÅ 
	nChannels
ÅÅ 
;
ÅÅ 
if
ÆÆ 
(
ÆÆ 
_input
ÆÆ 
==
ÆÆ 
null
ÆÆ 
)
ÆÆ 
{
ÇÇ 
	nChannels
ÈÈ 
=
ÈÈ 
_impulse
ÈÈ $
.
ÈÈ$ %
NumChannels
ÈÈ% 0
;
ÈÈ0 1
}
ÉÉ 
else
ÊÊ 
{
ËË 
	nChannels
ÌÌ 
=
ÌÌ 
_input
ÌÌ "
.
ÌÌ" #
NumChannels
ÌÌ# .
;
ÌÌ. /
}
ÍÍ 
ushort
ÎÎ 
p
ÎÎ 
;
ÎÎ 
int
ÏÏ 
N
ÏÏ 
=
ÏÏ 
_impulseLength
ÏÏ "
;
ÏÏ" #
int
ÐÐ 
Nh
ÐÐ 
=
ÐÐ 
N
ÐÐ 
<<
ÐÐ 
$num
ÐÐ 
;
ÐÐ 
int
ÑÑ 
K
ÑÑ 
=
ÑÑ 
(
ÑÑ 
int
ÑÑ 
)
ÑÑ 
(
ÑÑ 
N
ÑÑ 
/
ÑÑ 
_partitions
ÑÑ )
)
ÑÑ) *
;
ÑÑ* +
int
ÒÒ 
L
ÒÒ 
=
ÒÒ 
MathUtil
ÒÒ 
.
ÒÒ 
NextPowerOfTwo
ÒÒ +
(
ÒÒ+ ,
K
ÒÒ, -
<<
ÒÒ. 0
$num
ÒÒ1 2
)
ÒÒ2 3
;
ÒÒ3 4
int
ÓÓ 
P
ÓÓ 
=
ÓÓ 
(
ÓÓ 
int
ÓÓ 
)
ÓÓ 
Math
ÓÓ 
.
ÓÓ 
Ceiling
ÓÓ %
(
ÓÓ% &
(
ÓÓ& '
double
ÓÓ' -
)
ÓÓ- .
N
ÓÓ. /
/
ÓÓ0 1
(
ÓÓ2 3
double
ÓÓ3 9
)
ÓÓ9 :
K
ÓÓ: ;
)
ÓÓ; <
;
ÓÓ< =$
_PartitionedImpulseFFT
ÖÖ "
=
ÖÖ# $
new
ÖÖ% (
Complex
ÖÖ) 0
[
ÖÖ0 1
	nChannels
ÖÖ1 :
]
ÖÖ: ;
[
ÖÖ; <
]
ÖÖ< =
[
ÖÖ= >
]
ÖÖ> ?
;
ÖÖ? @
Complex
×× 
[
×× 
]
×× 
[
×× 
]
×× 
tmp
×× 
=
×× 
new
×× !
Complex
××" )
[
××) *
	nChannels
××* 3
]
××3 4
[
××4 5
]
××5 6
;
××6 7
for
ØØ 
(
ØØ 
ushort
ØØ 
c
ØØ 
=
ØØ 
$num
ØØ 
;
ØØ 
c
ØØ  
<
ØØ! "
	nChannels
ØØ# ,
;
ØØ, -
c
ØØ. /
++
ØØ/ 1
)
ØØ1 2
{
ÙÙ 
tmp
ÚÚ 
[
ÚÚ 
c
ÚÚ 
]
ÚÚ 
=
ÚÚ 
new
ÚÚ 
Complex
ÚÚ $
[
ÚÚ$ %
Nh
ÚÚ% '
]
ÚÚ' (
;
ÚÚ( )$
_PartitionedImpulseFFT
ÛÛ &
[
ÛÛ& '
c
ÛÛ' (
]
ÛÛ( )
=
ÛÛ* +
new
ÛÛ, /
Complex
ÛÛ0 7
[
ÛÛ7 8
P
ÛÛ8 9
]
ÛÛ9 :
[
ÛÛ: ;
]
ÛÛ; <
;
ÛÛ< =
for
ÜÜ 
(
ÜÜ 
p
ÜÜ 
=
ÜÜ 
$num
ÜÜ 
;
ÜÜ 
p
ÜÜ 
<
ÜÜ 
P
ÜÜ  !
;
ÜÜ! "
p
ÜÜ# $
++
ÜÜ$ &
)
ÜÜ& '
{
ÝÝ $
_PartitionedImpulseFFT
ÞÞ *
[
ÞÞ* +
c
ÞÞ+ ,
]
ÞÞ, -
[
ÞÞ- .
p
ÞÞ. /
]
ÞÞ/ 0
=
ÞÞ1 2
new
ÞÞ3 6
Complex
ÞÞ7 >
[
ÞÞ> ?
L
ÞÞ? @
]
ÞÞ@ A
;
ÞÞA B
}
ßß 
}
àà 
int
ãã 
i
ãã 
=
ãã 
$num
ãã 
;
ãã 
int
ää 
n
ää 
=
ää 
$num
ää 
;
ää 
p
åå 
=
åå 
$num
åå 
;
åå 
foreach
ææ 
(
ææ 
ISample
ææ 
sample
ææ #
in
ææ$ &
_impulse
ææ' /
)
ææ/ 0
{
çç 
n
éé 
++
éé 
;
éé 
if
êê 
(
êê 
n
êê 
>
êê 
_impulseLength
êê &
)
êê& '
{
êê( )
break
êê* /
;
êê/ 0
}
êê1 2
for
ëë 
(
ëë 
ushort
ëë 
c
ëë 
=
ëë 
$num
ëë  !
;
ëë! "
c
ëë# $
<
ëë% &
_impulse
ëë' /
.
ëë/ 0
NumChannels
ëë0 ;
;
ëë; <
c
ëë= >
++
ëë> @
)
ëë@ A
{
ìì 
tmp
íí 
[
íí 
c
íí 
]
íí 
[
íí 
i
íí 
+
íí 
K
íí  
]
íí  !
=
íí" #
new
íí$ '
Complex
íí( /
(
íí/ 0
sample
íí0 6
[
íí6 7
c
íí7 8
]
íí8 9
,
íí9 :
$num
íí: ;
)
íí; <
;
íí< =
}
îî 
i
ïï 
++
ïï 
;
ïï 
if
ðð 
(
ðð 
i
ðð 
>=
ðð 
K
ðð 
)
ðð 
{
ññ 
for
óó 
(
óó 
ushort
óó 
c
óó  !
=
óó" #
$num
óó$ %
;
óó% &
c
óó' (
<
óó) *
	nChannels
óó+ 4
;
óó4 5
c
óó6 7
++
óó7 9
)
óó9 :
{
ôô 
if
õõ 
(
õõ 
c
õõ 
>=
õõ  
_impulse
õõ! )
.
õõ) *
NumChannels
õõ* 5
)
õõ5 6
{
öö $
_PartitionedImpulseFFT
úú 2
[
úú2 3
c
úú3 4
]
úú4 5
[
úú5 6
p
úú6 7
]
úú7 8
=
úú9 :$
_PartitionedImpulseFFT
úú; Q
[
úúQ R
$num
úúR S
]
úúS T
[
úúT U
p
úúU V
]
úúV W
;
úúW X
}
ûû 
else
üü 
{
ýý 
Array
þþ !
.
þþ! "
Copy
þþ" &
(
þþ& '
tmp
þþ' *
[
þþ* +
c
þþ+ ,
]
þþ, -
,
þþ- .$
_PartitionedImpulseFFT
þþ/ E
[
þþE F
c
þþF G
]
þþG H
[
þþH I
p
þþI J
]
þþJ K
,
þþK L
L
þþM N
)
þþN O
;
þþO P
Fourier
ÿÿ #
.
ÿÿ# $
FFT
ÿÿ$ '
(
ÿÿ' (
L
ÿÿ( )
,
ÿÿ) *$
_PartitionedImpulseFFT
ÿÿ+ A
[
ÿÿA B
c
ÿÿB C
]
ÿÿC D
[
ÿÿD E
p
ÿÿE F
]
ÿÿF G
)
ÿÿG H
;
ÿÿH I
}
 
}
 
i
 
=
 
$num
 
;
 
p
 
++
 
;
 
}
 
}
  
_impulseLengthOrig
 
=
  
n
! "
-
# $
$num
% &
;
& '
if
 
(
 
p
 
<
 
P
 
)
 
{
 
for
 
(
 
int
 
ii
 
=
 
i
 
;
  
ii
! #
<
$ %
K
& '
;
' (
ii
) +
++
+ -
)
- .
{
 
for
 
(
 
ushort
 
c
  !
=
" #
$num
$ %
;
% &
c
' (
<
) *
_impulse
+ 3
.
3 4
NumChannels
4 ?
;
? @
c
A B
++
B D
)
D E
{
 
tmp
 
[
 
c
 
]
 
[
 
ii
 !
+
" #
K
$ %
]
% &
=
' (
new
) ,
Complex
- 4
(
4 5
$num
5 6
,
6 7
$num
8 9
)
9 :
;
: ;
}
 
}
 
for
 
(
 
ushort
 
c
 
=
 
$num
  !
;
! "
c
# $
<
% &
	nChannels
' 0
;
0 1
c
2 3
++
3 5
)
5 6
{
 
if
 
(
 
c
 
>=
 
_impulse
 %
.
% &
NumChannels
& 1
)
1 2
{
 $
_PartitionedImpulseFFT
 .
[
. /
c
/ 0
]
0 1
[
1 2
p
2 3
]
3 4
=
5 6$
_PartitionedImpulseFFT
7 M
[
M N
$num
N O
]
O P
[
P Q
p
Q R
]
R S
;
S T
}
 
else
 
{
 
Array
 
.
 
Copy
 "
(
" #
tmp
# &
[
& '
c
' (
]
( )
,
) *$
_PartitionedImpulseFFT
+ A
[
A B
c
B C
]
C D
[
D E
p
E F
]
F G
,
G H
L
I J
)
J K
;
K L
Fourier
 
.
  
FFT
  #
(
# $
L
$ %
,
% &$
_PartitionedImpulseFFT
' =
[
= >
c
> ?
]
? @
[
@ A
p
A B
]
B C
)
C D
;
D E
}
 
}
 
}
   
return
¡¡ 
true
¡¡ 
;
¡¡ 
}
¢¢ 	
}
¤¤ 
}§§ Ý
4E:\GitHub\inguz-DSPUtil\InguzDSPUtilNew\Crossover.cs
	namespace 	
DSPUtil
 
{ 
public 

class 

FilterPair 
{ 
uint 
_sr 
; 
double 
	_cornerLo 
; 
double 
	_cornerHi 
; 
public 

FilterPair 
( 
double  
corner1! (
,( )
double* 0
corner21 8
,8 9
uint: >

sampleRate? I
,I J
intK N
nO P
)P Q
{ 	
_sr 
= 

sampleRate 
; 
	_cornerLo 
= 
corner1 
;  
	_cornerHi 
= 
corner2 
;  
if 
( 
	_cornerLo 
>= 
	_cornerHi &
&&' )
	_cornerHi* 3
!=4 6
$num7 8
)8 9
{ 
throw 
new !
NotSupportedException /
(/ 0
$str0 Q
)Q R
;R S
} 
} 	
public$$ 
double$$ 
FilterMagnitude$$ %
($$% &
double$$& ,
freq$$- 1
)$$1 2
{%% 	
Complex++ 
c1++ 
,++ 
c2++ 
;++ 
if,, 
(,, 
freq,, 
==,, 
$num,, 
),, 
{-- 
c1.. 
=.. 
new.. 
Complex..  
(..  !
$num..! "
,.." #
$num..$ %
)..% &
;..& '
}// 
else00 
{11 
c122 
=22 
(22 
new22 
Complex22 !
(22! "
$num22" #
,22# $
$num22% &
)22& '
/22( )
new22* -
Complex22. 5
(225 6
$num226 7
,227 8
(229 :
	_cornerLo22: C
)22C D
/22E F
freq22G K
)22K L
)22L M
;22M N
}33 
if66 
(66 
	_cornerHi66 
==66 
$num66 
)66 
{77 
c288 
=88 
new88 
Complex88  
(88  !
$num88! "
,88" #
$num88$ %
)88% &
;88& '
}99 
else:: 
{;; 
c2<< 
=<< 
(<< 
new<< 
Complex<< !
(<<! "
$num<<" #
,<<# $
$num<<% &
)<<& '
/<<( )
new<<* -
Complex<<. 5
(<<5 6
$num<<6 7
,<<7 8
freq<<9 =
/<<> ?
(<<@ A
	_cornerHi<<A J
)<<J K
)<<K L
)<<L M
;<<M N
}== 
double?? 
mag?? 
=?? 
(?? 
c1?? 
+?? 
c2?? !
)??! "
.??" #
	Magnitude??# ,
;??, -
return@@ 
mag@@ 
;@@ 
}AA 	
publicHH 
doubleHH 
InverseMagnitudeHH &
(HH& '
doubleHH' -
freqHH. 2
)HH2 3
{II 	
returnJJ 
$numJJ 
-JJ 
FilterMagnitudeJJ &
(JJ& '
freqJJ' +
)JJ+ ,
;JJ, -
}KK 	
publicMM 
	ISoundObjMM 
FilterMM 
(MM  
)MM  !
{NN 	
returnOO 
newOO 
CallbackSourceOO %
(OO% &
$numOO& '
,OO' (
_srOO) ,
,OO, -
delegateOO. 6
(OO6 7
longOO7 ;
nOO< =
)OO= >
{PP 
returnQQ 
newQQ 
SampleQQ !
(QQ! "
$numQQ" %
)QQ% &
;QQ& '
}RR 
)RR 
;RR 
}SS 	
}TT 
}UU Ó
2E:\GitHub\inguz-DSPUtil\InguzDSPUtilNew\Delayer.cs
	namespace 	
DSPUtil
 
{ 
public		 

class		 
Delayer		 
:		 
SoundObj		 #
{

 
private 
int 
_delay 
; 
private 
CircularBuffer 
_buff $
;$ %
private 
bool 
_tail 
; 
public 
Delayer 
( 
) 
{ 	
Delay 
= 
$num 
; 
_tail 
= 
true 
; 
} 	
public 
Delayer 
( 
bool 

returnTail &
)& '
{ 	
Delay 
= 
$num 
; 
_tail 
= 

returnTail 
; 
}   	
public"" 
override"" 
void"" 
Reset"" "
(""" #
)""# $
{## 	
Delay$$ 
=$$ 
_delay$$ 
;$$ 
base%% 
.%% 
Reset%% 
(%% 
)%% 
;%% 
}&& 	
public++ 
override++ 
IEnumerator++ #
<++# $
ISample++$ +
>+++ ,
Samples++- 4
{,, 	
get-- 
{.. 
if// 
(// 
_input// 
==// 
null// "
)//" #
{00 
yield11 
break11 
;11  
}22 
_buff44 
.44 
Input44 
=44 
_input44 $
;44$ %
foreach77 
(77 
ISample77  
sample77! '
in77( *
_buff77+ 0
)770 1
{88 
ISample99 
s99 
=99 
_buff99  %
[99% &
-99& '
_delay99' -
]99- .
;99. /
yield:: 
return::  
s::! "
;::" #
};; 
if<< 
(<< 
_tail<< 
)<< 
{== 
for>> 
(>> 
int>> 
j>> 
=>>  
$num>>! "
;>>" #
j>>$ %
<>>& '
_delay>>( .
;>>. /
j>>0 1
++>>1 3
)>>3 4
{?? 
yield@@ 
return@@ $
_buff@@% *
[@@* +
j@@+ ,
-@@, -
_delay@@- 3
]@@3 4
;@@4 5
}AA 
}BB 
}CC 
}DD 	
publicKK 
intKK 
DelayKK 
{LL 	
getMM 
{MM 
returnMM 
_delayMM 
;MM  
}MM! "
setNN 
{OO 
intPP 
dPP 
=PP 
valuePP 
;PP 
ifQQ 
(QQ 
_buffQQ 
==QQ 
nullQQ !
||QQ" $
_delayQQ% +
<QQ, -
dQQ. /
)QQ/ 0
{RR 
_buffTT 
=TT 
newTT 
CircularBufferTT  .
(TT. /
_inputTT/ 5
,TT5 6
(TT7 8
uintTT8 <
)TT< =
(TT= >
dTT> ?
+TT? @
$numTT@ A
)TTA B
)TTB C
;TTC D
}UU 
_delayVV 
=VV 
dVV 
;VV 
}WW 
}XX 	
}YY 
}ZZ ù
1E:\GitHub\inguz-DSPUtil\InguzDSPUtilNew\Dither.cs
	namespace 	
DSPUtil
 
{ 
public		 

enum		 

DitherType		 
{

 
NONE 
= 
$num 
, 

TRIANGULAR 
= 
$num 
, 
SHAPED 
= 
$num 
, 
SBM 
= 
$num 
} 
public 

class 
Dither 
{ 
private 
static 
double 
[ 
] 
_Wannamaker  +
=, -
{. /
$num& ,
,, -
-% &
$num& ,
,, -
$num& ,
,, -
-% &
$num& ,
,, -
$num& ,
,, -
-% &
$num& ,
,, -
$num& ,
,, -
-  % &
$num  & ,
,  , -
$num!!& -
}!!. /
;!!/ 0
private$$ 
static$$ 
double$$ 
[$$ 
]$$ 
_SBM$$  $
=$$% &
{$$' (
$num%%& -
,%%- .
-&&% &
$num&&& -
,&&- .
$num''& -
,''- .
-((% &
$num((& -
,((- .
$num))& 0
,))0 1
-**% &
$num**& 0
,**0 1
$num++& 0
,++0 1
-,,% &
$num,,& 0
,,,0 1
$num--& 0
,--0 1
$num..& 0
,..0 1
-//% &
$num//& 0
,//0 1
$num00& 0
}000 1
;001 2
private22 
const22 
double22 
_scale822 $
=22% &
$num22' +
;22+ ,
private33 
const33 
double33 
_scale1633 %
=33& '
$num33( .
;33. /
private44 
const44 
double44 
_scale2444 %
=44& '
$num44( 0
;440 1
private55 
const55 
double55 
_scale3255 %
=55& '
$num55( 3
;553 4
private77 

DitherType77 
_type77  
=77! "

DitherType77# -
.77- .
NONE77. 2
;772 3
private88 
uint88 
_sampleRate88  
;88  !
private99 
ushort99 
_bitsPerSample99 %
;99% &
private:: 
double:: 
[:: 
]:: 
_filter::  
;::  !
private<< 
double<< 
_minv<< 
;<< 
private== 
double== 
_maxv== 
;== 
private>> 
double>> 
_peak>> 
;>> 
privateAA 
doubleAA 
[AA 
]AA 
_EHAA 
;AA 
privateBB 
intBB 
_HistPosBB 
;BB 
privateEE 
RandomEE 
_randomEE 
;EE 
privateSS 
boolSS 
	_clippingSS 
=SS  
falseSS! &
;SS& '
publicUU 
DitherUU 
(UU 

DitherTypeUU  
typeUU! %
,UU% &
uintUU' +

sampleRateUU, 6
,UU6 7
ushortUU8 >
bitsPerSampleUU? L
)UUL M
{VV 	
_typeWW 
=WW 
typeWW 
;WW 
_sampleRateXX 
=XX 

sampleRateXX $
;XX$ %
_bitsPerSampleYY 
=YY 
bitsPerSampleYY *
;YY* +
_minv[[ 
=[[ 
MinValue[[ 
([[ 
_bitsPerSample[[ +
)[[+ ,
;[[, -
_maxv\\ 
=\\ 
MaxValue\\ 
(\\ 
_bitsPerSample\\ +
)\\+ ,
;\\, -
_filter^^ 
=^^ 
FilterArray^^ !
(^^! "
type^^" &
)^^& '
;^^' (
_EH__ 
=__ 
new__ 
double__ 
[__ 
$num__ 
*__  
_filter__! (
.__( )
Length__) /
]__/ 0
;__0 1
_HistPos`` 
=`` 
_filter`` 
.`` 
Length`` %
-``& '
$num``( )
;``) *
_randomcc 
=cc 
newcc 
Randomcc  
(cc  !
)cc! "
;cc" #
}dd 	
staticff 
privateff 
doubleff 
[ff 
]ff 
FilterArrayff  +
(ff+ ,

DitherTypeff, 6
typeff7 ;
)ff; <
{gg 	
switchhh 
(hh 
typehh 
)hh 
{ii 
casejj 

DitherTypejj 
.jj  
SHAPEDjj  &
:jj& '
returnkk 
_Wannamakerkk &
;kk& '
casell 

DitherTypell 
.ll  
SBMll  #
:ll# $
returnmm 
_SBMmm 
;mm  
casenn 

DitherTypenn 
.nn  
NONEnn  $
:nn$ %
caseoo 

DitherTypeoo 
.oo  

TRIANGULARoo  *
:oo* +
defaultpp 
:pp 
returnqq 
newqq 
doubleqq %
[qq% &
$numqq& '
]qq' (
;qq( )
}rr 
}ss 	
privateuu 
staticuu 
doubleuu 
MaxValueuu &
(uu& '
ushortuu' -
bitsPerSampleuu. ;
)uu; <
{vv 	
switchww 
(ww 
bitsPerSampleww !
)ww! "
{xx 
caseyy 
$numyy 
:yy 
returnzz 
_scale8zz "
;zz" #
case{{ 
$num{{ 
:{{ 
return|| 
_scale16|| #
;||# $
case}} 
$num}} 
:}} 
return~~ 
_scale24~~ #
;~~# $
case 
$num 
: 
return
 
_scale32
 #
;
# $
default
 
:
 
return
 
Math
 
.
  
Pow
  #
(
# $
$num
$ %
,
% &
bitsPerSample
' 4
-
5 6
$num
7 8
)
8 9
-
: ;
$num
< =
;
= >
}
 
}
 	
private
 
static
 
double
 
MinValue
 &
(
& '
ushort
' -
bitsPerSample
. ;
)
; <
{
 	
switch
 
(
 
bitsPerSample
 !
)
! "
{
 
case
 
$num
 
:
 
return
 
-
 
_scale8
 #
;
# $
case
 
$num
 
:
 
return
 
-
 
_scale16
 $
;
$ %
case
 
$num
 
:
 
return
 
-
 
_scale24
 $
;
$ %
case
 
$num
 
:
 
return
 
-
 
_scale32
 $
;
$ %
default
 
:
 
return
 
-
 
(
 
Math
 !
.
! "
Pow
" %
(
% &
$num
& '
,
' (
bitsPerSample
) 6
-
7 8
$num
9 :
)
: ;
)
; <
;
< =
}
 
}
 	
private
 
double
 

NextRandom
 !
(
! "
)
" #
{
 	
return
 
(
 
_random
 
.
 

NextDouble
 &
(
& '
)
' (
-
) *
$num
+ .
)
. /
;
/ 0
}
¯¯ 	
private
±± 
double
±± 
NextRandom2
±± "
(
±±" #
)
±±# $
{
²² 	
return
³³ 
(
³³ 
_random
³³ 
.
³³ 

NextDouble
³³ &
(
³³& '
)
³³' (
+
³³) *
_random
³³+ 2
.
³³2 3

NextDouble
³³3 =
(
³³= >
)
³³> ?
-
³³@ A
$num
³³B C
)
³³C D
;
³³D E
}
ÈÈ 	
public
ÊÊ 
bool
ÊÊ 
clipping
ÊÊ 
{
ËË 	
get
ÌÌ 
{
ÌÌ 
return
ÌÌ 
	_clipping
ÌÌ "
;
ÌÌ" #
}
ÌÌ$ %
set
ÍÍ 
{
ÍÍ 
	_clipping
ÍÍ 
=
ÍÍ 
value
ÍÍ #
;
ÍÍ# $
}
ÍÍ% &
}
ÎÎ 	
public
ÐÐ 
double
ÐÐ 
dbfsPeak
ÐÐ 
{
ÑÑ 	
get
ÒÒ 
{
ÓÓ 
return
ÕÕ 
MathUtil
ÕÕ 
.
ÕÕ  
dB
ÕÕ  "
(
ÕÕ" #
_peak
ÕÕ# (
)
ÕÕ( )
;
ÕÕ) *
}
ÖÖ 
}
×× 	
public
ÙÙ 
double
ÙÙ 
processDouble
ÙÙ #
(
ÙÙ# $
double
ÙÙ$ *
samp
ÙÙ+ /
)
ÙÙ/ 0
{
ÚÚ 	
int
ÛÛ 
	quantized
ÛÛ 
=
ÛÛ 
process
ÛÛ #
(
ÛÛ# $
samp
ÛÛ$ (
)
ÛÛ( )
;
ÛÛ) *
return
ÜÜ 
(
ÜÜ 
double
ÜÜ 
)
ÜÜ 
	quantized
ÜÜ $
/
ÜÜ% &
_maxv
ÜÜ' ,
;
ÜÜ, -
}
ÝÝ 	
public
ãã 
ISample
ãã 
process
ãã 
(
ãã 
ISample
ãã &
samp
ãã' +
)
ãã+ ,
{
ää 	
for
åå 
(
åå 
int
åå 
c
åå 
=
åå 
$num
åå 
;
åå 
c
åå 
<
åå 
samp
åå  $
.
åå$ %
NumChannels
åå% 0
;
åå0 1
c
åå2 3
++
åå3 5
)
åå5 6
{
ææ 
samp
çç 
[
çç 
c
çç 
]
çç 
=
çç 
processDouble
çç '
(
çç' (
samp
çç( ,
[
çç, -
c
çç- .
]
çç. /
)
çç/ 0
;
çç0 1
}
èè 
return
éé 
samp
éé 
;
éé 
}
êê 	
public
íí 
int
íí 
process
íí 
(
íí 
double
íí !
samp
íí" &
)
íí& '
{
îî 	
if
ðð 
(
ðð 
double
ðð 
.
ðð 
IsNaN
ðð 
(
ðð 
samp
ðð !
)
ðð! "
||
ðð# %
double
ðð& ,
.
ðð, -

IsInfinity
ðð- 7
(
ðð7 8
samp
ðð8 <
)
ðð< =
)
ðð= >
{
ññ 
samp
òò 
=
òò 
$num
òò 
;
òò 
}
óó 
_peak
ôô 
=
ôô 
Math
ôô 
.
ôô 
Max
ôô 
(
ôô 
_peak
ôô "
,
ôô" #
Math
ôô$ (
.
ôô( )
Abs
ôô) ,
(
ôô, -
samp
ôô- 1
)
ôô1 2
)
ôô2 3
;
ôô3 4
int
öö 
output
öö 
=
öö 
$num
öö 
;
öö 
double
÷÷ 
noise
÷÷ 
;
÷÷ 
double
øø 
error
øø 
;
øø 
try
ùù 
{
úú 
samp
ÿÿ 
*=
ÿÿ 
_maxv
ÿÿ 
;
ÿÿ 
switch
 
(
 
_type
 
)
 
{
 
case
 

DitherType
 #
.
# $
NONE
$ (
:
( )
output
 
=
  
(
! "
int
" %
)
% &
Math
& *
.
* +
Round
+ 0
(
0 1
samp
1 5
)
5 6
;
6 7
break
 
;
 
case
 

DitherType
 #
.
# $

TRIANGULAR
$ .
:
. /
noise
 
=
 
NextRandom2
  +
(
+ ,
)
, -
;
- .
samp
 
+=
 
noise
  %
;
% &
output
 
=
  
(
! "
int
" %
)
% &
Math
& *
.
* +
Round
+ 0
(
0 1
samp
1 5
)
5 6
;
6 7
break
 
;
 
case
 

DitherType
 #
.
# $
SHAPED
$ *
:
* +
case
 

DitherType
 #
.
# $
SBM
$ '
:
' (
noise
 
=
 

NextRandom
  *
(
* +
)
+ ,
;
, -
samp
 
+=
 
noise
  %
;
% &
for
 
(
 
int
  
x
! "
=
# $
$num
% &
;
& '
x
( )
<
* +
_filter
, 3
.
3 4
Length
4 :
;
: ;
x
< =
++
= ?
)
? @
{
 
samp
  
-=
! #
_filter
$ +
[
+ ,
x
, -
]
- .
*
/ 0
_EH
1 4
[
4 5
_HistPos
5 =
+
> ?
x
@ A
]
A B
;
B C
}
 
output
 
=
  
(
! "
int
" %
)
% &
Math
& *
.
* +
Round
+ 0
(
0 1
samp
1 5
)
5 6
;
6 7
break
 
;
 
}
 
if
 
(
 
_filter
 
.
 
Length
 "
>
# $
$num
% &
)
& '
{
   
error
¢¢ 
=
¢¢ 
(
¢¢ 
double
¢¢ #
)
¢¢# $
output
¢¢$ *
-
¢¢+ ,
samp
¢¢- 1
;
¢¢1 2
if
¤¤ 
(
¤¤ 
_HistPos
¤¤  
<
¤¤! "
$num
¤¤# $
)
¤¤$ %
_HistPos
¤¤& .
+=
¤¤/ 1
_filter
¤¤2 9
.
¤¤9 :
Length
¤¤: @
;
¤¤@ A
_HistPos
¥¥ 
--
¥¥ 
;
¥¥ 
_EH
¨¨ 
[
¨¨ 
_HistPos
¨¨  
+
¨¨! "
_filter
¨¨# *
.
¨¨* +
Length
¨¨+ 1
]
¨¨1 2
=
¨¨3 4
_EH
¨¨5 8
[
¨¨8 9
_HistPos
¨¨9 A
]
¨¨A B
=
¨¨C D
error
¨¨E J
;
¨¨J K
}
©© 
}
ªª 
catch
«« 
(
«« 
OverflowException
«« $
)
««$ %
{
¬¬ 
if
­­ 
(
­­ 
samp
­­ 
>
­­ 
(
­­ 
_maxv
­­ !
-
­­! "
$num
­­" #
)
­­# $
)
­­$ %
output
®® 
=
®® 
(
®® 
int
®® !
)
®®! "
(
®®" #
_maxv
®®# (
-
®®( )
$num
®®) *
)
®®* +
;
®®+ ,
else
¯¯ 
output
°° 
=
°° 
(
°° 
int
°° !
)
°°! "
_minv
°°" '
;
°°' (
}
±± 
if
²² 
(
²² 
output
²² 
<
²² 
_minv
²² 
)
²² 
{
³³ 
if
´´ 
(
´´ 
!
´´ 
	_clipping
´´ 
)
´´ 
{
µµ 
	_clipping
¶¶ 
=
¶¶ 
true
¶¶  $
;
¶¶$ %
Trace
·· 
.
·· 
	WriteLine
·· #
(
··# $
$str
··$ /
)
··/ 0
;
··0 1
}
¸¸ 
output
¹¹ 
=
¹¹ 
(
¹¹ 
int
¹¹ 
)
¹¹ 
_minv
¹¹ #
;
¹¹# $
}
ºº 
else
»» 
if
»» 
(
»» 
output
»» 
>
»» 
(
»» 
_maxv
»» $
-
»»$ %
$num
»»% &
)
»»& '
)
»»' (
{
¼¼ 
if
½½ 
(
½½ 
!
½½ 
clipping
½½ 
)
½½ 
{
¾¾ 
	_clipping
¿¿ 
=
¿¿ 
true
¿¿  $
;
¿¿$ %
Trace
ÀÀ 
.
ÀÀ 
	WriteLine
ÀÀ #
(
ÀÀ# $
$str
ÀÀ$ /
)
ÀÀ/ 0
;
ÀÀ0 1
}
ÁÁ 
output
ÂÂ 
=
ÂÂ 
(
ÂÂ 
int
ÂÂ 
)
ÂÂ 
(
ÂÂ 
_maxv
ÂÂ $
-
ÂÂ$ %
$num
ÂÂ% &
)
ÂÂ& '
;
ÂÂ' (
}
ÃÃ 
return
ÅÅ 
output
ÅÅ 
;
ÅÅ 
}
ÆÆ 	
public
ÈÈ 
int
ÈÈ 
process
ÈÈ 
(
ÈÈ 
float
ÈÈ  
samp
ÈÈ! %
)
ÈÈ% &
{
ÉÉ 	
return
ÊÊ 
process
ÊÊ 
(
ÊÊ 
(
ÊÊ 
double
ÊÊ "
)
ÊÊ" #
samp
ÊÊ# '
)
ÊÊ' (
;
ÊÊ( )
}
ËË 	
public
ÍÍ 
void
ÍÍ 
reset
ÍÍ 
(
ÍÍ 
)
ÍÍ 
{
ÎÎ 	
for
ÏÏ 
(
ÏÏ 
int
ÏÏ 
x
ÏÏ 
=
ÏÏ 
$num
ÏÏ 
;
ÏÏ 
x
ÏÏ 
<
ÏÏ 
_filter
ÏÏ  '
.
ÏÏ' (
Length
ÏÏ( .
;
ÏÏ. /
x
ÏÏ0 1
++
ÏÏ1 3
)
ÏÏ3 4
{
ÐÐ 
_EH
ÑÑ 
[
ÑÑ 
x
ÑÑ 
]
ÑÑ 
=
ÑÑ 
$num
ÑÑ 
;
ÑÑ 
}
ÒÒ 
_HistPos
ÓÓ 
=
ÓÓ 
_filter
ÓÓ 
.
ÓÓ 
Length
ÓÓ %
-
ÓÓ& '
$num
ÓÓ( )
;
ÓÓ) *
}
ÔÔ 	
}
ÕÕ 
}ÖÖ â
3E:\GitHub\inguz-DSPUtil\InguzDSPUtilNew\Envelope.cs
	namespace 	
DSPUtil
 
{ 
[		 
Serializable		 
]		 
public

 

class

 
LinearEnvelope

 
:

  !
SoundObj

" *
{ 
private 
double 

_startGain !
;! "
private 
double 
_endGain 
;  
private 
int 
	_nSamples 
; 
public 
LinearEnvelope 
( 
double $
dBstartGain% 0
,0 1
double2 8
	dBendGain9 B
,B C
intD G
nSamplesH P
)P Q
{ 	

_startGain 
= 
MathUtil !
.! "
gain" &
(& '
dBstartGain' 2
)2 3
;3 4
_endGain 
= 
MathUtil 
.  
gain  $
($ %
	dBendGain% .
). /
;/ 0
	_nSamples 
= 
nSamples  
;  !
} 	
public 
override 
IEnumerator #
<# $
ISample$ +
>+ ,
Samples- 4
{ 	
get   
{!! 
if"" 
("" 
_input"" 
=="" 
null"" "
)""" #
{## 
yield$$ 
break$$ 
;$$  
}%% 
int&& 
n&& 
=&& 
$num&& 
;&& 
foreach)) 
()) 
ISample))  
sample))! '
in))( *
Input))+ 0
)))0 1
{** 
double++ 
frac++ 
=++  !
(++" #
double++# )
)++) *
n++* +
/++, -
(++. /
double++/ 5
)++5 6
	_nSamples++6 ?
;++? @
double,, 
gain,, 
=,,  !

_startGain,," ,
+,,- .
frac,,/ 3
*,,4 5
(,,6 7
_endGain,,7 ?
-,,@ A

_startGain,,B L
),,L M
;,,M N
Sample-- 
s-- 
=-- 
new-- "
Sample--# )
(--) *
sample--+ 1
,--1 2
gain--3 7
)--8 9
;--9 :
n.. 
++.. 
;.. 
yield// 
return//  
s//! "
;//" #
}00 
}11 
}22 	
}33 
[55 
Serializable55 
]55 
public66 

class66 
LinearDbEnvelope66 !
:66" #
SoundObj66$ ,
{77 
private<< 
double<< 

_startGain<< !
;<<! "
private== 
double== 
_endGain== 
;==  
private>> 
int>> 
	_nSamples>> 
;>> 
public@@ 
LinearDbEnvelope@@ 
(@@  
double@@  &
dBstartGain@@' 2
,@@2 3
double@@4 :
	dBendGain@@; D
,@@D E
int@@F I
nSamples@@J R
)@@R S
{AA 	

_startGainBB 
=BB 
dBstartGainBB $
;BB$ %
_endGainCC 
=CC 
	dBendGainCC  
;CC  !
	_nSamplesDD 
=DD 
nSamplesDD  
;DD  !
}EE 	
publicJJ 
overrideJJ 
IEnumeratorJJ #
<JJ# $
ISampleJJ$ +
>JJ+ ,
SamplesJJ- 4
{KK 	
getLL 
{MM 
ifNN 
(NN 
_inputNN 
==NN 
nullNN "
)NN" #
{OO 
yieldPP 
breakPP 
;PP  
}QQ 
intRR 
nRR 
=RR 
$numRR 
;RR 
foreachUU 
(UU 
ISampleUU  
sampleUU! '
inUU( *
InputUU+ 0
)UU0 1
{VV 
doubleWW 
fracWW 
=WW  !
(WW" #
doubleWW# )
)WW) *
nWW* +
/WW, -
(WW. /
doubleWW/ 5
)WW5 6
	_nSamplesWW6 ?
;WW? @
doubleXX 
gainXX 
=XX  !

_startGainXX" ,
+XX- .
fracXX/ 3
*XX4 5
(XX6 7
_endGainXX7 ?
-XX@ A

_startGainXXB L
)XXL M
;XXM N
SampleYY 
sYY 
=YY 
newYY "
SampleYY# )
(YY) *
sampleYY* 0
,YY0 1
MathUtilYY2 :
.YY: ;
gainYY; ?
(YY? @
gainYY@ D
)YYD E
)YYE F
;YYF G
;YYG H
nZZ 
++ZZ 
;ZZ 
yield[[ 
return[[  
s[[! "
;[[" #
}\\ 
}]] 
}^^ 	
}__ 
[bb 
Serializablebb 
]bb 
publiccc 

classcc 
	CosWindowcc 
:cc 
SoundObjcc %
{dd 
privateii 
intii 
_centerii 
;ii 
privatejj 
intjj 

_sidewidthjj 
;jj 
privatekk 
intkk 
_halfplateauwidthkk %
;kk% &
privatell 
doublell 
_c0ll 
;ll 
privatemm 
doublemm 
_c1mm 
;mm 
privatenn 
doublenn 
_c2nn 
;nn 
privateoo 
doubleoo 
_c3oo 
;oo 
publicqq 
	CosWindowqq 
(qq 
intqq 
centerqq #
,qq# $
intqq% (
	sidewidthqq) 2
,qq2 3
intqq4 7
halfplateauwidthqq8 H
,qqH I
doubleqqJ P
c0qqQ S
,qqS T
doubleqqU [
c1qq\ ^
,qq^ _
doubleqq` f
c2qqg i
,qqi j
doubleqqk q
c3qqr t
)qqt u
{rr 	
_centerss 
=ss 
centerss 
;ss 

_sidewidthtt 
=tt 
	sidewidthtt "
;tt" #
_halfplateauwidthuu 
=uu 
halfplateauwidthuu  0
;uu0 1
_c0vv 
=vv 
c0vv 
;vv 
_c1ww 
=ww 
c1ww 
;ww 
_c2xx 
=xx 
c2xx 
;xx 
_c3yy 
=yy 
c3yy 
;yy 
}zz 	
public|| 
IEnumerator|| 
<|| 
double|| !
>||! "
Gains||# (
{}} 	
get~~ 
{ 
int
 
n
 
=
 
$num
 
;
 
int
 
nstart
 
=
 
_center
 $
-
% &
_halfplateauwidth
' 8
-
9 :

_sidewidth
; E
;
E F
int
 
nend
 
=
 
_center
 "
+
# $
_halfplateauwidth
% 6
+
7 8

_sidewidth
9 C
;
C D
int
 
plateaustart
  
=
! "
_center
# *
-
+ ,
_halfplateauwidth
- >
;
> ?
int
 

plateauend
 
=
  
_center
! (
+
) *
_halfplateauwidth
+ <
;
< =
while
 
(
 
true
 
)
 
{
 
double
 
gain
 
=
  !
$num
" #
;
# $
if
 
(
 
n
 
<
 
nstart
 "
)
" #
{
 
}
 
else
 
if
 
(
 
n
 
>
  
nend
! %
)
% &
{
 
}
 
else
 
if
 
(
 
n
 
>
  
plateaustart
! -
&&
. 0
n
1 2
<
3 4

plateauend
5 ?
)
? @
{
 
gain
 
=
 
$num
  
;
  !
}
 
else
 
{
 
long
 
nn
 
=
  !
(
" #
long
# '
)
' (
n
( )
-
* +
_center
, 3
;
3 4
if
 
(
 
nn
 
<
  
$num
! "
)
" #
{
$ %
nn
& (
+=
) +
(
, -
long
- 1
)
1 2
_halfplateauwidth
2 C
;
C D
}
E F
else
G K
{
L M
nn
N P
-=
Q S
(
T U
long
U Y
)
Y Z
_halfplateauwidth
Z k
;
k l
}
m n
long
 
N
 
=
  
(
! "
long
" &
)
& '

_sidewidth
' 1
;
1 2
if
 
(
 
Math
  
.
  !
Abs
! $
(
$ %
nn
% '
)
' (
<
) *
$num
+ ,
*
- .
N
/ 0
)
0 1
{
 
double
 "
phi
# &
=
' (
Math
) -
.
- .
PI
. 0
*
1 2
(
3 4
(
4 5
double
5 ;
)
; <
nn
< >
/
? @
N
A B
)
B C
;
C D
gain
  
=
! "
_c0
# &
+
' (
(
) *
_c1
* -
*
. /
Math
0 4
.
4 5
Cos
5 8
(
8 9
phi
9 <
)
< =
)
= >
+
? @
(
A B
_c2
B E
*
F G
Math
H L
.
L M
Cos
M P
(
P Q
$num
Q R
*
S T
phi
U X
)
X Y
)
Y Z
+
[ \
(
] ^
_c3
^ a
*
b c
Math
d h
.
h i
Cos
i l
(
l m
$num
m n
*
o p
phi
q t
)
t u
)
u v
;
v w
}
   
}
¡¡ 
n
¢¢ 
++
¢¢ 
;
¢¢ 
yield
££ 
return
££  
gain
££! %
;
££% &
}
¤¤ 
}
¥¥ 
}
¦¦ 	
public
«« 
override
«« 
IEnumerator
«« #
<
««# $
ISample
««$ +
>
««+ ,
Samples
««- 4
{
¬¬ 	
get
­­ 
{
®® 
if
¯¯ 
(
¯¯ 
_input
¯¯ 
==
¯¯ 
null
¯¯ "
)
¯¯" #
{
°° 
yield
±± 
break
±± 
;
±±  
}
²² 
IEnumerator
´´ 
<
´´ 
double
´´ "
>
´´" #
gains
´´$ )
=
´´* +
Gains
´´, 1
;
´´1 2
foreach
µµ 
(
µµ 
ISample
µµ  
sample
µµ! '
in
µµ( *
_input
µµ+ 1
)
µµ1 2
{
¶¶ 
gains
·· 
.
·· 
MoveNext
·· "
(
··" #
)
··# $
;
··$ %
double
¸¸ 
gain
¸¸ 
=
¸¸  !
gains
¸¸" '
.
¸¸' (
Current
¸¸( /
;
¸¸/ 0
Sample
¹¹ 
s
¹¹ 
=
¹¹ 
new
¹¹ "
Sample
¹¹# )
(
¹¹) *
sample
¹¹* 0
,
¹¹0 1
gain
¹¹2 6
)
¹¹6 7
;
¹¹7 8
yield
ºº 
return
ºº  
s
ºº! "
;
ºº" #
}
»» 
}
¼¼ 
}
½½ 	
}
¾¾ 
[
ÂÂ 
Serializable
ÂÂ 
]
ÂÂ 
public
ÃÃ 

class
ÃÃ 
Hann
ÃÃ 
:
ÃÃ 
	CosWindow
ÃÃ !
{
ÄÄ 
public
ÅÅ 
Hann
ÅÅ 
(
ÅÅ 
int
ÅÅ 
center
ÅÅ 
,
ÅÅ 
int
ÅÅ  #
	sidewidth
ÅÅ$ -
)
ÅÅ- .
:
ÆÆ 
base
ÆÆ 
(
ÆÆ 
center
ÆÆ 
,
ÆÆ 
	sidewidth
ÆÆ $
,
ÆÆ$ %
$num
ÆÆ& '
,
ÆÆ' (
$num
ÆÆ) ,
,
ÆÆ, -
$num
ÆÆ. 1
,
ÆÆ1 2
$num
ÆÆ3 4
,
ÆÆ4 5
$num
ÆÆ6 7
)
ÆÆ7 8
{
ÇÇ 	
}
ÈÈ 	
}
ÉÉ 
[
ËË 
Serializable
ËË 
]
ËË 
public
ÌÌ 

class
ÌÌ 
Hamming
ÌÌ 
:
ÌÌ 
	CosWindow
ÌÌ $
{
ÍÍ 
public
ÎÎ 
Hamming
ÎÎ 
(
ÎÎ 
int
ÎÎ 
center
ÎÎ !
,
ÎÎ! "
int
ÎÎ# &
	sidewidth
ÎÎ' 0
)
ÎÎ0 1
:
ÏÏ 
base
ÏÏ 
(
ÏÏ 
center
ÏÏ 
,
ÏÏ 
	sidewidth
ÏÏ $
,
ÏÏ$ %
$num
ÏÏ& '
,
ÏÏ' (
$num
ÏÏ) -
,
ÏÏ- .
$num
ÏÏ/ 3
,
ÏÏ3 4
$num
ÏÏ5 6
,
ÏÏ6 7
$num
ÏÏ8 9
)
ÏÏ9 :
{
ÐÐ 	
}
ÑÑ 	
public
ÓÓ 
Hamming
ÓÓ 
(
ÓÓ 
int
ÓÓ 
center
ÓÓ !
,
ÓÓ! "
int
ÓÓ# &
	sidewidth
ÓÓ' 0
,
ÓÓ0 1
int
ÓÓ2 5
halfplateauwidth
ÓÓ6 F
)
ÓÓF G
:
ÔÔ 
base
ÔÔ 
(
ÔÔ 
center
ÔÔ 
,
ÔÔ 
	sidewidth
ÔÔ $
,
ÔÔ$ %
halfplateauwidth
ÔÔ& 6
,
ÔÔ6 7
$num
ÔÔ8 <
,
ÔÔ< =
$num
ÔÔ> B
,
ÔÔB C
$num
ÔÔD E
,
ÔÔE F
$num
ÔÔG H
)
ÔÔH I
{
ÕÕ 	
}
ÖÖ 	
}
×× 
[
ÙÙ 
Serializable
ÙÙ 
]
ÙÙ 
public
ÚÚ 

class
ÚÚ 
Blackman
ÚÚ 
:
ÚÚ 
	CosWindow
ÚÚ %
{
ÛÛ 
public
ÜÜ 
Blackman
ÜÜ 
(
ÜÜ 
int
ÜÜ 
center
ÜÜ "
,
ÜÜ" #
int
ÜÜ$ '
	sidewidth
ÜÜ( 1
)
ÜÜ1 2
:
ÝÝ 
base
ÝÝ 
(
ÝÝ 
center
ÝÝ 
,
ÝÝ 
	sidewidth
ÝÝ $
,
ÝÝ$ %
$num
ÝÝ& '
,
ÝÝ' (
$num
ÝÝ) -
,
ÝÝ- .
$num
ÝÝ/ 2
,
ÝÝ2 3
$num
ÝÝ4 8
,
ÝÝ8 9
$num
ÝÝ: ;
)
ÝÝ; <
{
ÞÞ 	
}
ßß 	
public
áá 
Blackman
áá 
(
áá 
int
áá 
center
áá "
,
áá" #
int
áá$ '
	sidewidth
áá( 1
,
áá1 2
int
áá3 6
halfplateauwidth
áá7 G
)
ááG H
:
ââ 
base
ââ 
(
ââ 
center
ââ 
,
ââ 
	sidewidth
ââ $
,
ââ$ %
halfplateauwidth
ââ& 6
,
ââ6 7
$num
ââ8 <
,
ââ< =
$num
ââ> A
,
ââA B
$num
ââC G
,
ââG H
$num
ââI J
)
ââJ K
{
ãã 	
}
ää 	
}
åå 
[
çç 
Serializable
çç 
]
çç 
public
èè 

class
èè 
BlackmanHarris
èè 
:
èè  !
	CosWindow
èè" +
{
éé 
public
êê 
BlackmanHarris
êê 
(
êê 
int
êê !
center
êê" (
,
êê( )
int
êê* -
	sidewidth
êê. 7
)
êê7 8
:
ëë 
base
ëë 
(
ëë 
center
ëë 
,
ëë 
	sidewidth
ëë $
,
ëë$ %
$num
ëë& '
,
ëë' (
$num
ëë) 0
,
ëë0 1
$num
ëë2 9
,
ëë9 :
$num
ëë; B
,
ëëB C
$num
ëëD K
)
ëëK L
{
ìì 	
}
íí 	
public
ïï 
BlackmanHarris
ïï 
(
ïï 
int
ïï !
center
ïï" (
,
ïï( )
int
ïï* -
	sidewidth
ïï. 7
,
ïï7 8
int
ïï9 <
halfplateauwidth
ïï= M
)
ïïM N
:
ðð 
base
ðð 
(
ðð 
center
ðð 
,
ðð 
	sidewidth
ðð $
,
ðð$ %
halfplateauwidth
ðð& 6
,
ðð6 7
$num
ðð8 ?
,
ðð? @
$num
ððA H
,
ððH I
$num
ððJ Q
,
ððQ R
$num
ððS Z
)
ððZ [
{
ññ 	
}
òò 	
}
óó 
[
õõ 
Serializable
õõ 
]
õõ 
public
öö 

class
öö 
NormalWindow
öö 
:
öö 
SoundObj
öö  (
{
÷÷ 
private
øø 
int
øø 
_center
øø 
;
øø 
private
ùù 
int
ùù 
_plateau
ùù 
;
ùù 
private
úú 
double
úú 
_sigma
úú 
;
úú 
public
 
NormalWindow
 
(
 
int
 
center
  &
,
& '
double
( .
sigma
/ 4
)
4 5
{
 	
_center
 
=
 
center
 
;
 
_plateau
 
=
 
$num
 
;
 
_sigma
 
=
 
sigma
 
;
 
}
 	
public
 
NormalWindow
 
(
 
int
 
center
  &
,
& '
int
( +
plateau
, 3
,
3 4
double
5 ;
sigma
< A
)
A B
{
 	
_center
 
=
 
center
 
;
 
_plateau
 
=
 
plateau
 
;
 
_sigma
 
=
 
sigma
 
;
 
}
 	
public
 
override
 
IEnumerator
 #
<
# $
ISample
$ +
>
+ ,
Samples
- 4
{
 	
get
 
{
 
if
 
(
 
_input
 
==
 
null
 "
)
" #
{
 
yield
 
break
 
;
  
}
 
int
 
n
 
=
 
$num
 
;
 
double
 
sig2
 
=
 
$num
 
*
  !
_sigma
" (
*
) *
_sigma
+ 1
;
1 2
foreach
 
(
 
ISample
  
sample
! '
in
( *
Input
+ 0
)
0 1
{
 
long
   
nn
   
=
   
(
   
long
   #
)
  # $
_center
  $ +
-
  , -
(
  . /
long
  / 3
)
  3 4
n
  4 5
;
  5 6
double
¡¡ 
gain
¡¡ 
=
¡¡  !
$num
¡¡" #
;
¡¡# $
gain
££ 
=
££ 
Math
££ 
.
££  
Exp
££  #
(
££# $
-
££$ %
(
££% &
nn
££& (
*
££) *
nn
££+ -
/
££. /
sig2
££0 4
)
££4 5
)
££5 6
;
££6 7
Sample
¤¤ 
s
¤¤ 
=
¤¤ 
new
¤¤ "
Sample
¤¤# )
(
¤¤) *
sample
¤¤* 0
,
¤¤0 1
gain
¤¤2 6
)
¤¤6 7
;
¤¤7 8
n
¥¥ 
++
¥¥ 
;
¥¥ 
yield
¦¦ 
return
¦¦  
s
¦¦! "
;
¦¦" #
}
§§ 
}
¨¨ 
}
©© 	
}
«« 
[
­­ 
Serializable
­­ 
]
­­ 
public
®® 

class
®® 
ShelfEnvelope
®® 
:
®®  
SoundObj
®®! )
{
¯¯ 
private
¸¸ 
double
¸¸ 

_startGain
¸¸ !
;
¸¸! "
private
¹¹ 
double
¹¹ 
_endGain
¹¹ 
;
¹¹  
private
ºº 
int
ºº 
_startSample
ºº  
;
ºº  !
private
»» 
int
»» 

_endSample
»» 
;
»» 
public
½½ 
ShelfEnvelope
½½ 
(
½½ 
double
½½ #
dBstartGain
½½$ /
,
½½/ 0
double
½½1 7
	dBendGain
½½8 A
,
½½A B
int
½½C F
startSample
½½G R
,
½½R S
int
½½T W
	endSample
½½X a
)
½½a b
{
¾¾ 	

_startGain
¿¿ 
=
¿¿ 
dBstartGain
¿¿ $
;
¿¿$ %
_endGain
ÀÀ 
=
ÀÀ 
	dBendGain
ÀÀ  
;
ÀÀ  !
_startSample
ÁÁ 
=
ÁÁ 
startSample
ÁÁ &
;
ÁÁ& '

_endSample
ÂÂ 
=
ÂÂ 
	endSample
ÂÂ "
;
ÂÂ" #
}
ÃÃ 	
public
ÈÈ 
override
ÈÈ 
IEnumerator
ÈÈ #
<
ÈÈ# $
ISample
ÈÈ$ +
>
ÈÈ+ ,
Samples
ÈÈ- 4
{
ÉÉ 	
get
ÊÊ 
{
ËË 
if
ÌÌ 
(
ÌÌ 
_input
ÌÌ 
==
ÌÌ 
null
ÌÌ "
)
ÌÌ" #
{
ÍÍ 
yield
ÎÎ 
break
ÎÎ 
;
ÎÎ  
}
ÏÏ 
int
ÐÐ 
n
ÐÐ 
=
ÐÐ 
$num
ÐÐ 
;
ÐÐ 
foreach
ÓÓ 
(
ÓÓ 
ISample
ÓÓ  
sample
ÓÓ! '
in
ÓÓ( *
Input
ÓÓ+ 0
)
ÓÓ0 1
{
ÔÔ 
double
ÕÕ 
gain
ÕÕ 
;
ÕÕ  
if
ÖÖ 
(
ÖÖ 
n
ÖÖ 
<
ÖÖ 
_startSample
ÖÖ (
)
ÖÖ( )
{
×× 
gain
ØØ 
=
ØØ 

_startGain
ØØ )
;
ØØ) *
}
ÙÙ 
else
ÚÚ 
if
ÚÚ 
(
ÚÚ 
n
ÚÚ 
>
ÚÚ  

_endSample
ÚÚ! +
)
ÚÚ+ ,
{
ÛÛ 
gain
ÜÜ 
=
ÜÜ 
_endGain
ÜÜ '
;
ÜÜ' (
}
ÝÝ 
else
ÞÞ 
{
ßß 
double
ââ 
frac
ââ #
=
ââ$ %
(
ââ& '
double
ââ' -
)
ââ- .
(
ââ. /
n
ââ/ 0
-
ââ1 2
_startSample
ââ3 ?
)
ââ? @
/
ââA B
(
ââC D
double
ââD J
)
ââJ K
(
ââK L

_endSample
ââL V
-
ââW X
_startSample
ââY e
)
ââe f
;
ââf g
double
ãã 
phi
ãã "
=
ãã# $
Math
ãã% )
.
ãã) *
PI
ãã* ,
*
ãã- .
(
ãã/ 0
$num
ãã0 1
+
ãã2 3
frac
ãã4 8
)
ãã8 9
;
ãã9 :
double
ää 
rcos
ää #
=
ää$ %
(
ää& '
$num
ää( )
+
ää* +
Math
ää, 0
.
ää0 1
Cos
ää1 4
(
ää4 5
phi
ää5 8
)
ää8 9
)
ää: ;
/
ää; <
$num
ää< =
;
ää= >
gain
åå 
=
åå 

_startGain
åå )
+
åå* +
rcos
åå, 0
*
åå1 2
(
åå3 4
_endGain
åå4 <
-
åå= >

_startGain
åå? I
)
ååI J
;
ååJ K
}
ææ 
Sample
çç 
s
çç 
=
çç 
new
çç "
Sample
çç# )
(
çç) *
sample
çç+ 1
,
çç1 2
MathUtil
çç3 ;
.
çç; <
gain
çç< @
(
çç@ A
gain
ççA E
)
ççE F
)
ççG H
;
ççH I
n
èè 
++
èè 
;
èè 
yield
éé 
return
éé  
s
éé! "
;
éé" #
}
êê 
}
ëë 
}
ìì 	
}
íí 
[
ðð 
Serializable
ðð 
]
ðð 
public
ññ 

class
ññ #
LogBasisShelfEnvelope
ññ &
:
ññ' (
SoundObj
ññ) 1
{
òò 
private
üü 
double
üü 

_startGain
üü !
;
üü! "
private
ýý 
double
ýý 
_endGain
ýý 
;
ýý  
private
þþ 
int
þþ 
_startSample
þþ  
;
þþ  !
private
ÿÿ 
int
ÿÿ 

_endSample
ÿÿ 
;
ÿÿ 
public
 #
LogBasisShelfEnvelope
 $
(
$ %
double
% +
dBstartGain
, 7
,
7 8
double
9 ?
	dBendGain
@ I
,
I J
int
K N
startSample
O Z
,
Z [
int
\ _
	endSample
` i
)
i j
{
 	

_startGain
 
=
 
dBstartGain
 $
;
$ %
_endGain
 
=
 
	dBendGain
  
;
  !
_startSample
 
=
 
startSample
 &
;
& '

_endSample
 
=
 
	endSample
 "
;
" #
}
 	
public
 
override
 
IEnumerator
 #
<
# $
ISample
$ +
>
+ ,
Samples
- 4
{
 	
get
 
{
 
if
 
(
 
_input
 
==
 
null
 "
)
" #
{
 
yield
 
break
 
;
  
}
 
int
 
n
 
=
 
$num
 
;
 
double
 
logStart
 
=
  !
Math
" &
.
& '
Log
' *
(
* +
$num
+ ,
+
, -
_startSample
- 9
)
9 :
;
: ;
double
 
logEnd
 
=
 
Math
  $
.
$ %
Log
% (
(
( )
$num
) *
+
* +

_endSample
+ 5
)
5 6
;
6 7
foreach
 
(
 
ISample
  
sample
! '
in
( *
Input
+ 0
)
0 1
{
 
double
 
gain
 
;
  
if
 
(
 
n
 
<
 
_startSample
 (
)
( )
{
   
gain
¡¡ 
=
¡¡ 

_startGain
¡¡ )
;
¡¡) *
}
¢¢ 
else
££ 
if
££ 
(
££ 
n
££ 
>
££  

_endSample
££! +
)
££+ ,
{
¤¤ 
gain
¥¥ 
=
¥¥ 
_endGain
¥¥ '
;
¥¥' (
}
¦¦ 
else
§§ 
{
¨¨ 
double
®® 
frac
®® #
=
®®$ %
(
®®& '
Math
®®' +
.
®®+ ,
Log
®®, /
(
®®/ 0
n
®®0 1
+
®®2 3
$num
®®4 5
)
®®5 6
-
®®7 8
logStart
®®9 A
)
®®A B
/
®®C D
(
®®E F
logEnd
®®F L
-
®®M N
logStart
®®O W
)
®®W X
;
®®X Y
double
¯¯ 
phi
¯¯ "
=
¯¯# $
Math
¯¯% )
.
¯¯) *
PI
¯¯* ,
*
¯¯- .
(
¯¯/ 0
$num
¯¯0 1
+
¯¯2 3
frac
¯¯4 8
)
¯¯8 9
;
¯¯9 :
double
°° 
rcos
°° #
=
°°$ %
(
°°& '
$num
°°' (
+
°°) *
Math
°°+ /
.
°°/ 0
Cos
°°0 3
(
°°3 4
phi
°°4 7
)
°°7 8
)
°°8 9
/
°°: ;
$num
°°< =
;
°°= >
gain
±± 
=
±± 

_startGain
±± )
+
±±* +
rcos
±±, 0
*
±±1 2
(
±±3 4
_endGain
±±4 <
-
±±= >

_startGain
±±? I
)
±±I J
;
±±J K
}
²² 
Sample
³³ 
s
³³ 
=
³³ 
new
³³ "
Sample
³³# )
(
³³) *
sample
³³+ 1
,
³³1 2
MathUtil
³³3 ;
.
³³; <
gain
³³< @
(
³³@ A
gain
³³A E
)
³³E F
)
³³G H
;
³³H I
n
´´ 
++
´´ 
;
´´ 
yield
µµ 
return
µµ  
s
µµ! "
;
µµ" #
}
¶¶ 
}
·· 
}
¸¸ 	
}
¹¹ 
}»» µð
.E:\GitHub\inguz-DSPUtil\InguzDSPUtilNew\ERB.cs
	namespace 	
DSPUtil
 
{ 
public		 

enum		 
SmoothingType		 
{

 
OCTAVE 
= 
$num 
, 
ERB 
} 
public 

class 
	Smoothing 
{ 
public 
static 
double 
WindowLength )
() *
int* -
bin. 1
,1 2
int3 6
bins7 ;
,; <
double= C

sampleRateD N
,N O
SmoothingTypeP ]
type^ b
,b c
doubled j

resolutionk u
,u v
outw z
int{ ~
bin0	 
,
 
out
 
int
 
bin1
 
)
 
{ 	
double 
len 
= 
$num 
; 
bin0 
= 
bin 
; 
bin1 
= 
bin 
; 
double 
binw 
= 

sampleRate $
/% &
bins' +
;+ ,
double 
freq 
= 
( 
$num 
+  
bin! $
)$ %
*& '
binw( ,
;, -
double   
bw   
=   
$num   
;   
if!! 
(!! 
type!! 
==!! 
SmoothingType!! %
.!!% &
OCTAVE!!& ,
)!!, -
{"" 
bw$$ 
=$$ 
freq$$ 
*$$ 
Math$$  
.$$  !
Pow$$! $
($$$ %
$num$$% &
,$$& '

resolution$$( 2
)$$2 3
;$$3 4
}%% 
else&& 
if&& 
(&& 
type&& 
==&& 
SmoothingType&& '
.&&' (
ERB&&( +
)&&+ ,
{'' 
bw(( 
=(( 
ERB(( 
.(( 
ERBWidth(( !
(((! "
freq((" &
)((& '
*((' (

resolution((( 2
;((2 3
})) 
if11 
(11 
type11 
==11 
SmoothingType11 %
.11% &
OCTAVE11& ,
)11, -
{22 
}77 
return99 
len99 
*99 

resolution99 #
;99# $
}:: 	
public<< 
static<< 
FilterProfile<< #
Profile<<$ +
(<<+ ,
	ISoundObj<<, 5
impulse<<6 =
,<<= >
SmoothingType<<? L
type<<M Q
,<<Q R
double<<S Y

resolution<<Z d
)<<d e
{== 	
uint>> 
nSR>> 
=>> 
impulse>> 
.>> 

SampleRate>> )
;>>) *
uint?? 
nSR2?? 
=?? 
nSR?? 
/?? 
$num?? 
;??  
ushortAA 
	nChannelsAA 
=AA 
impulseAA &
.AA& '
NumChannelsAA' 2
;AA2 3
forBB 
(BB 
ushortBB 
cBB 
=BB 
$numBB 
;BB 
cBB  
<BB! "
	nChannelsBB# ,
;BB, -
cBB. /
++BB/ 1
)BB1 2
{CC 
SingleChannelEE 
channelEE %
=EE& '
impulseEE( /
.EE/ 0
ChannelEE0 7
(EE7 8
cEE8 9
)EE9 :
;EE: ;
SoundBufferFF 
buffFF  
=FF! "
newFF# &
SoundBufferFF' 2
(FF2 3
channelFF3 :
)FF: ;
;FF; <
buffGG 
.GG 
ReadAllGG 
(GG 
)GG 
;GG 
buffJJ 
.JJ 
PadToJJ 
(JJ 
buffJJ 
.JJ  
CountJJ  %
*JJ& '
$numJJ( )
)JJ) *
;JJ* +
buffLL 
.LL 
PadToPowerOfTwoLL $
(LL$ %
)LL% &
;LL& '
ComplexNN 
[NN 
]NN 
[NN 
]NN 
dataNN  
=NN! "
buffNN# '
.NN' (
ToComplexArrayNN( 6
(NN6 7
)NN7 8
;NN8 9
ComplexOO 
[OO 
]OO 
cdataOO 
=OO  !
dataOO" &
[OO& '
$numOO' (
]OO( )
;OO) *
buffRR 
=RR 
nullRR 
;RR 
GCSS 
.SS 
CollectSS 
(SS 
)SS 
;SS 
FourierVV 
.VV 
FFTVV 
(VV 
cdataVV !
.VV! "
LengthVV" (
,VV( )
cdataVV* /
)VV/ 0
;VV0 1
intXX 
nXX 
=XX 
cdataXX 
.XX 
LengthXX $
/XX% &
$numXX' (
;XX( )
forbb 
(bb 
intbb 
jbb 
=bb 
$numbb 
;bb 
jbb  !
<bb" #
cdatabb$ )
.bb) *
Lengthbb* 0
;bb0 1
jbb2 3
++bb3 5
)bb5 6
{cc 
cdatadd 
[dd 
jdd 
]dd 
.dd 
Redd 
=dd  !
cdatadd" '
[dd' (
jdd( )
]dd) *
.dd* +
	Magnitudedd+ 4
;dd4 5
cdataee 
[ee 
jee 
]ee 
.ee 
Imee 
=ee  !
$numee" #
;ee# $
}ff 
}nn 
returnoo 
newoo 
FilterProfileoo $
(oo$ %
)oo% &
;oo& '
}pp 	
}qq 
publicss 

classss 
ERBss 
{tt 
public 
static 
double 
ERBWidth %
(% &
double& ,
f- .
). /
{
 	
double
 
erb
 
=
 
(
 
$num
 !
*
" #
(
$ %
f
% &
*
' (
f
) *
)
* +
)
+ ,
+
- .
(
/ 0
$num
0 8
*
9 :
f
; <
)
< =
+
> ?
$num
@ E
;
E F
return
 
erb
 
;
 
}
 	
public
 
static
 
double
 
ERBVal
 #
(
# $
double
$ *
f
+ ,
)
, -
{
 	
double
 
i
 
=
 
$num
 
+
 
(
 
$num
 $
*
% &
f
' (
/
) *
(
+ ,
f
, -
+
. /
$num
0 8
)
8 9
)
9 :
;
: ;
double
 
v
 
=
 
$num
 
*
  !
Math
" &
.
& '
Log
' *
(
* +
i
+ ,
)
, -
;
- .
return
 
v
 
;
 
}
 	
public
 
static
 
double
 
	invERBVal
 &
(
& '
double
' -
v
. /
)
/ 0
{
 	
double
 
f
 
=
 
(
 
$num
  
/
! "
(
# $
$num
$ ,
-
- .
Math
/ 3
.
3 4
Exp
4 7
(
7 8
$num
8 B
*
C D
v
E F
)
F G
)
G H
)
H I
-
J K
$num
L T
;
T U
return
 
f
 
;
 
}
 	
public
 
static
 
double
 
invERB
 #
(
# $
double
$ *
b
+ ,
)
, -
{
   	
const
¡¡ 
double
¡¡ 
c0
¡¡ 
=
¡¡ 
$num
¡¡ %
;
¡¡% &
const
¢¢ 
double
¢¢ 
c1
¢¢ 
=
¢¢ 
$num
¢¢ &
/
¢¢' (
(
¢¢) *
$num
¢¢* -
*
¢¢. /
c0
¢¢0 2
)
¢¢2 3
;
¢¢3 4
const
££ 
double
££ 
c2
££ 
=
££ 
(
££ 
c1
££ !
*
££" #
c1
££$ &
)
££& '
*
££( )
c0
££* ,
;
££, -
double
¤¤ 
f
¤¤ 
=
¤¤ 
Math
¤¤ 
.
¤¤ 
Sqrt
¤¤  
(
¤¤  !
(
¤¤! "
b
¤¤" #
+
¤¤$ %
c2
¤¤& (
-
¤¤) *
$num
¤¤+ 0
)
¤¤0 1
/
¤¤2 3
c0
¤¤4 6
)
¤¤6 7
-
¤¤8 9
c1
¤¤: <
;
¤¤< =
return
¥¥ 
f
¥¥ 
;
¥¥ 
}
¦¦ 	
public
­­ 
static
­­ 
double
­­ 
integralofERB
­­ *
(
­­* +
double
­­+ 1
f
­­2 3
)
­­3 4
{
®® 	
double
¯¯ 
ierb
¯¯ 
=
¯¯ 
$num
¯¯ /
*
¯¯0 1
f
¯¯2 3
*
¯¯4 5
(
¯¯6 7
$num
¯¯7 H
+
¯¯I J
f
¯¯K L
)
¯¯L M
*
¯¯N O
(
¯¯P Q
$num
¯¯Q b
+
¯¯c d
f
¯¯e f
)
¯¯f g
;
¯¯g h
return
°° 
ierb
°° 
;
°° 
}
±± 	
public
´´ 
static
´´ 
double
´´ 
invintegralofERB
´´ -
(
´´- .
double
´´. 4
i
´´5 6
,
´´6 7
uint
´´8 <
sr
´´= ?
)
´´? @
{
µµ 	
return
¶¶ 
MathUtil
¶¶ 
.
¶¶ 
invert
¶¶ "
(
¶¶" #
integralofERB
¶¶# 0
,
¶¶0 1
$num
¶¶2 3
,
¶¶3 4
sr
¶¶5 7
/
¶¶8 9
$num
¶¶: ;
,
¶¶; <
i
¶¶= >
)
¶¶> ?
;
¶¶? @
}
·· 	
private
ºº 
const
ºº 
double
ºº 
_bins
ºº "
=
ºº# $
$num
ºº% )
;
ºº) *
public
¼¼ 
static
¼¼ 
double
¼¼ 
f2bin
¼¼ "
(
¼¼" #
double
¼¼# )
f
¼¼* +
,
¼¼+ ,
uint
¼¼- 1
sr
¼¼2 4
,
¼¼4 5
double
¼¼6 <
bins
¼¼= A
)
¼¼A B
{
½½ 	
double
¾¾ 
scale
¾¾ 
=
¾¾ 
(
¾¾ 
bins
¾¾  
/
¾¾! "
ERB
¾¾# &
.
¾¾& '
ERBVal
¾¾' -
(
¾¾- .
sr
¾¾. 0
/
¾¾1 2
$num
¾¾3 4
)
¾¾4 5
)
¾¾5 6
;
¾¾6 7
return
¿¿ 
ERB
¿¿ 
.
¿¿ 
ERBVal
¿¿ 
(
¿¿ 
f
¿¿ 
)
¿¿  
*
¿¿! "
scale
¿¿# (
;
¿¿( )
}
ÀÀ 	
public
ÁÁ 
static
ÁÁ 
double
ÁÁ 
bin2f
ÁÁ "
(
ÁÁ" #
double
ÁÁ# )
bin
ÁÁ* -
,
ÁÁ- .
uint
ÁÁ/ 3
sr
ÁÁ4 6
,
ÁÁ6 7
double
ÁÁ8 >
bins
ÁÁ? C
)
ÁÁC D
{
ÂÂ 	
double
ÃÃ 
scale
ÃÃ 
=
ÃÃ 
(
ÃÃ 
bins
ÃÃ  
/
ÃÃ! "
ERB
ÃÃ# &
.
ÃÃ& '
ERBVal
ÃÃ' -
(
ÃÃ- .
sr
ÃÃ. 0
/
ÃÃ1 2
$num
ÃÃ3 4
)
ÃÃ4 5
)
ÃÃ5 6
;
ÃÃ6 7
return
ÄÄ 
ERB
ÄÄ 
.
ÄÄ 
	invERBVal
ÄÄ  
(
ÄÄ  !
bin
ÄÄ! $
/
ÄÄ% &
scale
ÄÄ' ,
)
ÄÄ, -
;
ÄÄ- .
}
ÅÅ 	
public
ÇÇ 
static
ÇÇ 
double
ÇÇ 
f2bin
ÇÇ "
(
ÇÇ" #
double
ÇÇ# )
f
ÇÇ* +
,
ÇÇ+ ,
uint
ÇÇ- 1
sr
ÇÇ2 4
)
ÇÇ4 5
{
ÈÈ 	
double
ÉÉ 
scale
ÉÉ 
=
ÉÉ 
(
ÉÉ 
_bins
ÉÉ !
/
ÉÉ" #
ERB
ÉÉ$ '
.
ÉÉ' (
ERBVal
ÉÉ( .
(
ÉÉ. /
sr
ÉÉ/ 1
/
ÉÉ2 3
$num
ÉÉ4 5
)
ÉÉ5 6
)
ÉÉ6 7
;
ÉÉ7 8
return
ÊÊ 
ERB
ÊÊ 
.
ÊÊ 
ERBVal
ÊÊ 
(
ÊÊ 
f
ÊÊ 
)
ÊÊ  
*
ÊÊ! "
scale
ÊÊ# (
;
ÊÊ( )
}
ËË 	
public
ÌÌ 
static
ÌÌ 
double
ÌÌ 
bin2f
ÌÌ "
(
ÌÌ" #
double
ÌÌ# )
bin
ÌÌ* -
,
ÌÌ- .
uint
ÌÌ/ 3
sr
ÌÌ4 6
)
ÌÌ6 7
{
ÍÍ 	
double
ÎÎ 
scale
ÎÎ 
=
ÎÎ 
(
ÎÎ 
_bins
ÎÎ !
/
ÎÎ" #
ERB
ÎÎ$ '
.
ÎÎ' (
ERBVal
ÎÎ( .
(
ÎÎ. /
sr
ÎÎ/ 1
/
ÎÎ2 3
$num
ÎÎ4 5
)
ÎÎ5 6
)
ÎÎ6 7
;
ÎÎ7 8
return
ÏÏ 
ERB
ÏÏ 
.
ÏÏ 
	invERBVal
ÏÏ  
(
ÏÏ  !
bin
ÏÏ! $
/
ÏÏ% &
scale
ÏÏ' ,
)
ÏÏ, -
;
ÏÏ- .
}
ÐÐ 	
public
ÒÒ 
static
ÒÒ 
FilterProfile
ÒÒ #
profile
ÒÒ$ +
(
ÒÒ+ ,
double
ÒÒ, 2
[
ÒÒ2 3
]
ÒÒ3 4
data
ÒÒ5 9
,
ÒÒ9 :
uint
ÒÒ; ?
sr
ÒÒ@ B
)
ÒÒB C
{
ÓÓ 	
return
ÔÔ 
profile
ÔÔ 
(
ÔÔ 
data
ÔÔ 
,
ÔÔ  
sr
ÔÔ! #
,
ÔÔ# $
$num
ÔÔ% (
)
ÔÔ( )
;
ÔÔ) *
}
ÕÕ 	
public
ßß 
static
ßß 
FilterProfile
ßß #
profile
ßß$ +
(
ßß+ ,
double
ßß, 2
[
ßß2 3
]
ßß3 4
data
ßß5 9
,
ßß9 :
uint
ßß; ?
sr
ßß@ B
,
ßßB C
double
ßßD J
scaleFactor
ßßK V
)
ßßV W
{
àà 	
FilterProfile
áá 
pts
áá 
=
áá 
new
áá  #
FilterProfile
áá$ 1
(
áá1 2
)
áá2 3
;
áá3 4
int
ââ 
dl
ââ 
=
ââ 
data
ââ 
.
ââ 
Length
ââ  
;
ââ  !
for
ãã 
(
ãã 
double
ãã 
j
ãã 
=
ãã 
$num
ãã 
;
ãã 
j
ãã  
<
ãã! "
ERB
ãã# &
.
ãã& '
ERBVal
ãã' -
(
ãã- .
sr
ãã. 0
/
ãã1 2
$num
ãã3 4
)
ãã4 5
+
ãã6 7
$num
ãã8 9
;
ãã9 :
j
ãã; <
+=
ãã= ?
scaleFactor
ãã@ K
)
ããK L
{
ää 
double
åå 
f
åå 
=
åå 
ERB
åå 
.
åå 
	invERBVal
åå (
(
åå( )
j
åå) *
)
åå* +
;
åå+ ,
double
ææ 
n
ææ 
=
ææ 
f
ææ 
*
ææ 
$num
ææ  
*
ææ! "
dl
ææ# %
/
ææ& '
sr
ææ( *
;
ææ* +
if
çç 
(
çç 
n
çç 
<
çç 
dl
çç 
)
çç 
{
èè 
double
éé 
g
éé 
=
éé 
data
éé #
[
éé# $
(
éé$ %
int
éé% (
)
éé( )
n
éé) *
]
éé* +
;
éé+ ,
pts
êê 
.
êê 
Add
êê 
(
êê 
new
êê 
FreqGain
êê  (
(
êê( )
f
êê) *
,
êê* +
g
êê, -
)
êê- .
)
êê. /
;
êê/ 0
}
ëë 
}
ìì 
return
íí 
pts
íí 
;
íí 
}
îî 	
public
öö 
static
öö 
FilterProfile
öö #
inflections
öö$ /
(
öö/ 0
double
öö0 6
[
öö6 7
]
öö7 8
data
öö9 =
,
öö= >
uint
öö? C
sr
ööD F
)
ööF G
{
÷÷ 	
double
ùù 
bins
ùù 
=
ùù 
data
ùù 
.
ùù 
Length
ùù %
+
ùù& '
$num
ùù( )
;
ùù) *
double
úú 
[
úú 
]
úú 
diff
úú 
=
úú 
new
úú 
double
úú  &
[
úú& '
data
úú' +
.
úú+ ,
Length
úú, 2
]
úú2 3
;
úú3 4
double
üü 
n
üü 
=
üü 
data
üü 
[
üü 
$num
üü 
]
üü 
;
üü 
for
ýý 
(
ýý 
int
ýý 
j
ýý 
=
ýý 
$num
ýý 
;
ýý 
j
ýý 
<
ýý 
data
ýý  $
.
ýý$ %
Length
ýý% +
;
ýý+ ,
j
ýý- .
++
ýý. 0
)
ýý0 1
{
þþ 
double
ÿÿ 
d
ÿÿ 
=
ÿÿ 
data
ÿÿ 
[
ÿÿ  
j
ÿÿ  !
]
ÿÿ! "
;
ÿÿ" #
diff
 
[
 
j
 
]
 
=
 
d
 
-
 
n
 
;
  
n
 
=
 
d
 
;
 
}
 
FilterProfile
 
pts
 
=
 
new
  #
FilterProfile
$ 1
(
1 2
)
2 3
;
3 4
int
 
bin
 
;
 
double
 
pt
 
=
 
$num
 
;
 
int
 
last
 
=
 
-
 
$num
 
;
 
double
 
freq
 
;
 
double
 
lastfreq
 
=
 
-
 
$num
  
;
  !
pts
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
$num
! "
,
" #
MathUtil
$ ,
.
, -
dB
- /
(
/ 0
data
0 4
[
4 5
$num
5 6
]
6 7
)
7 8
)
8 9
)
9 :
;
: ;
freq
 
=
 
$num
 
;
 
bin
 
=
 
(
 
int
 
)
 
f2bin
 
(
 
freq
 !
,
! "
sr
" $
,
$ %
bins
% )
)
) *
;
* +
pts
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
freq
! %
,
% &
MathUtil
' /
.
/ 0
dB
0 2
(
2 3
data
3 7
[
7 8
bin
8 ;
]
; <
)
< =
)
= >
)
> ?
;
? @
pt
 
=
 
diff
 
[
 
bin
 
]
 
;
 
for
 
(
 
int
 
j
 
=
 
bin
 
+
 
$num
  
;
  !
j
" #
<
$ %
data
& *
.
* +
Length
+ 1
;
1 2
j
3 4
++
4 6
)
6 7
{
 
if
 
(
 
(
 
pt
 
>
 
$num
 
&&
 
diff
 #
[
# $
j
$ %
]
% &
<=
' )
$num
* +
)
+ ,
||
- /
(
0 1
pt
1 3
<
4 5
$num
6 7
&&
8 :
diff
; ?
[
? @
j
@ A
]
A B
>=
C E
$num
F G
)
G H
)
H I
{
 
freq
 
=
 
bin2f
  
(
  !
j
! "
,
" #
sr
# %
,
% &
bins
& *
)
* +
;
+ ,
pts
 
.
 
Add
 
(
 
new
 
FreqGain
  (
(
( )
freq
) -
,
- .
MathUtil
/ 7
.
7 8
dB
8 :
(
: ;
data
; ?
[
? @
j
@ A
]
A B
)
B C
)
C D
)
D E
;
E F
last
 
=
 
j
 
;
 
lastfreq
 
=
 
freq
 #
;
# $
}
 
pt
 
=
 
diff
 
[
 
j
 
]
 
;
 
}
   
if
¢¢ 
(
¢¢ 
lastfreq
¢¢ 
<
¢¢ 
(
¢¢ 
sr
¢¢ 
/
¢¢  
$num
¢¢! "
)
¢¢" #
-
¢¢$ %
$num
¢¢& *
)
¢¢* +
{
££ 
freq
¤¤ 
=
¤¤ 
(
¤¤ 
sr
¤¤ 
/
¤¤ 
$num
¤¤ 
)
¤¤ 
-
¤¤  !
$num
¤¤" &
;
¤¤& '
bin
¥¥ 
=
¥¥ 
(
¥¥ 
int
¥¥ 
)
¥¥ 
f2bin
¥¥  
(
¥¥  !
freq
¥¥! %
,
¥¥% &
sr
¥¥& (
,
¥¥( )
bins
¥¥) -
)
¥¥- .
;
¥¥. /
pts
¦¦ 
.
¦¦ 
Add
¦¦ 
(
¦¦ 
new
¦¦ 
FreqGain
¦¦ $
(
¦¦$ %
freq
¦¦% )
,
¦¦) *
MathUtil
¦¦+ 3
.
¦¦3 4
dB
¦¦4 6
(
¦¦6 7
data
¦¦7 ;
[
¦¦; <
bin
¦¦< ?
]
¦¦? @
)
¦¦@ A
)
¦¦A B
)
¦¦B C
;
¦¦C D
}
§§ 
if
¨¨ 
(
¨¨ 
lastfreq
¨¨ 
<
¨¨ 
(
¨¨ 
sr
¨¨ 
/
¨¨  
$num
¨¨! "
)
¨¨" #
-
¨¨$ %
$num
¨¨& *
)
¨¨* +
{
©© 
freq
ªª 
=
ªª 
(
ªª 
sr
ªª 
/
ªª 
$num
ªª 
)
ªª 
-
ªª  !
$num
ªª" &
;
ªª& '
bin
«« 
=
«« 
(
«« 
int
«« 
)
«« 
f2bin
««  
(
««  !
freq
««! %
,
««% &
sr
««& (
,
««( )
bins
««) -
)
««- .
;
««. /
pts
¬¬ 
.
¬¬ 
Add
¬¬ 
(
¬¬ 
new
¬¬ 
FreqGain
¬¬ $
(
¬¬$ %
freq
¬¬% )
,
¬¬) *
MathUtil
¬¬+ 3
.
¬¬3 4
dB
¬¬4 6
(
¬¬6 7
data
¬¬7 ;
[
¬¬; <
bin
¬¬< ?
]
¬¬? @
)
¬¬@ A
)
¬¬A B
)
¬¬B C
;
¬¬C D
}
­­ 
if
®® 
(
®® 
lastfreq
®® 
<
®® 
sr
®® 
/
®® 
$num
®®  !
)
®®! "
{
¯¯ 
freq
°° 
=
°° 
sr
°° 
/
°° 
$num
°° 
;
°° 
pts
±± 
.
±± 
Add
±± 
(
±± 
new
±± 
FreqGain
±± $
(
±±$ %
freq
±±% )
,
±±) *
MathUtil
±±+ 3
.
±±3 4
dB
±±4 6
(
±±6 7
data
±±7 ;
[
±±; <
data
±±< @
.
±±@ A
Length
±±A G
-
±±H I
$num
±±J K
]
±±K L
)
±±L M
)
±±M N
)
±±N O
;
±±O P
}
²² 
return
´´ 
pts
´´ 
;
´´ 
}
µµ 	
public
·· 
static
·· 
double
·· 
[
·· 
]
·· 
smooth
·· %
(
··% &
double
··& ,
[
··, -
]
··- .
data
··/ 3
,
··3 4
int
··5 8
bands
··9 >
)
··> ?
{
¸¸ 	
int
¹¹ 
j
¹¹ 
,
¹¹ 
k
¹¹ 
;
¹¹ 
int
ºº 
nn
ºº 
=
ºº 
data
ºº 
.
ºº 
Length
ºº  
;
ºº  !
double
»» 
[
»» 
]
»» 
smoo
»» 
=
»» 
new
»» 
double
»»  &
[
»»& '
nn
»»' )
]
»») *
;
»»* +
double
¿¿ 
c0
¿¿ 
=
¿¿ 
$num
¿¿ 
;
¿¿  
double
ÀÀ 
c1
ÀÀ 
=
ÀÀ 
$num
ÀÀ 
;
ÀÀ  
double
ÁÁ 
c2
ÁÁ 
=
ÁÁ 
$num
ÁÁ 
;
ÁÁ  
double
ÂÂ 
c3
ÂÂ 
=
ÂÂ 
$num
ÂÂ 
;
ÂÂ  
int
ÄÄ 

windowSize
ÄÄ 
;
ÄÄ 

windowSize
ÅÅ 
=
ÅÅ 
(
ÅÅ 
int
ÅÅ 
)
ÅÅ 
nn
ÅÅ  
/
ÅÅ! "
bands
ÅÅ# (
;
ÅÅ( )
double
ÉÉ 
[
ÉÉ 
]
ÉÉ 
window
ÉÉ 
=
ÉÉ 
new
ÉÉ !
double
ÉÉ" (
[
ÉÉ( )
$num
ÉÉ) *
*
ÉÉ+ ,

windowSize
ÉÉ- 7
]
ÉÉ7 8
;
ÉÉ8 9
double
ÊÊ 
windowScale
ÊÊ 
=
ÊÊ  
$num
ÊÊ! "
;
ÊÊ" #
for
ÌÌ 
(
ÌÌ 
k
ÌÌ 
=
ÌÌ 
-
ÌÌ 

windowSize
ÌÌ  
;
ÌÌ  !
k
ÌÌ" #
<
ÌÌ$ %

windowSize
ÌÌ& 0
;
ÌÌ0 1
k
ÌÌ2 3
++
ÌÌ3 5
)
ÌÌ5 6
{
ÍÍ 
double
ÎÎ 
frac
ÎÎ 
=
ÎÎ 
(
ÎÎ 
double
ÎÎ %
)
ÎÎ% &
(
ÎÎ& '
k
ÎÎ' (
)
ÎÎ( )
/
ÎÎ* +
(
ÎÎ, -
double
ÎÎ- 3
)
ÎÎ3 4
(
ÎÎ4 5

windowSize
ÎÎ5 ?
)
ÎÎ? @
;
ÎÎ@ A
double
ÏÏ 
phi
ÏÏ 
=
ÏÏ 
Math
ÏÏ !
.
ÏÏ! "
PI
ÏÏ" $
*
ÏÏ% &
frac
ÏÏ' +
;
ÏÏ+ ,
double
ÐÐ 
rcos
ÐÐ 
=
ÐÐ 
$num
ÐÐ 
-
ÐÐ  !
(
ÐÐ" #
c0
ÐÐ# %
-
ÐÐ& '
(
ÐÐ( )
c1
ÐÐ) +
*
ÐÐ, -
Math
ÐÐ. 2
.
ÐÐ2 3
Cos
ÐÐ3 6
(
ÐÐ6 7
phi
ÐÐ7 :
)
ÐÐ: ;
)
ÐÐ; <
+
ÐÐ= >
(
ÐÐ? @
c2
ÐÐ@ B
*
ÐÐC D
Math
ÐÐE I
.
ÐÐI J
Cos
ÐÐJ M
(
ÐÐM N
$num
ÐÐN O
*
ÐÐP Q
phi
ÐÐR U
)
ÐÐU V
)
ÐÐV W
-
ÐÐX Y
(
ÐÐZ [
c3
ÐÐ[ ]
*
ÐÐ^ _
Math
ÐÐ` d
.
ÐÐd e
Cos
ÐÐe h
(
ÐÐh i
$num
ÐÐi j
*
ÐÐk l
phi
ÐÐm p
)
ÐÐp q
)
ÐÐq r
)
ÐÐr s
;
ÐÐs t
window
ÑÑ 
[
ÑÑ 
k
ÑÑ 
+
ÑÑ 

windowSize
ÑÑ %
]
ÑÑ% &
=
ÑÑ' (
rcos
ÑÑ) -
;
ÑÑ- .
windowScale
ÒÒ 
+=
ÒÒ 
rcos
ÒÒ #
;
ÒÒ# $
}
ÓÓ 
for
ÕÕ 
(
ÕÕ 
j
ÕÕ 
=
ÕÕ 
$num
ÕÕ 
;
ÕÕ 
j
ÕÕ 
<
ÕÕ 
nn
ÕÕ 
;
ÕÕ 
j
ÕÕ  !
++
ÕÕ! #
)
ÕÕ# $
{
ÖÖ 
double
×× 
v
×× 
=
×× 
$num
×× 
;
×× 
for
ØØ 
(
ØØ 
k
ØØ 
=
ØØ 
-
ØØ 

windowSize
ØØ $
;
ØØ$ %
k
ØØ& '
<
ØØ( )

windowSize
ØØ* 4
;
ØØ4 5
k
ØØ6 7
++
ØØ7 9
)
ØØ9 :
{
ÙÙ 
double
ÚÚ 
rcos
ÚÚ 
=
ÚÚ  !
window
ÚÚ" (
[
ÚÚ( )
k
ÚÚ) *
+
ÚÚ+ ,

windowSize
ÚÚ- 7
]
ÚÚ7 8
;
ÚÚ8 9
int
ÜÜ 
i
ÜÜ 
=
ÜÜ 
j
ÜÜ 
+
ÜÜ 
k
ÜÜ  !
;
ÜÜ! "
if
ÝÝ 
(
ÝÝ 
i
ÝÝ 
<
ÝÝ 
$num
ÝÝ 
)
ÝÝ 
i
ÝÝ  
=
ÝÝ! "
-
ÝÝ# $
i
ÝÝ$ %
;
ÝÝ% &
if
ÞÞ 
(
ÞÞ 
i
ÞÞ 
>=
ÞÞ 
nn
ÞÞ 
)
ÞÞ  
i
ÞÞ! "
=
ÞÞ# $
nn
ÞÞ% '
-
ÞÞ( )
(
ÞÞ* +
i
ÞÞ+ ,
%
ÞÞ- .
(
ÞÞ/ 0
nn
ÞÞ0 2
-
ÞÞ3 4
$num
ÞÞ5 6
)
ÞÞ6 7
)
ÞÞ7 8
;
ÞÞ8 9
v
àà 
+=
àà 
rcos
àà 
*
àà 
data
àà  $
[
àà$ %
i
àà% &
]
àà& '
;
àà' (
}
áá 
smoo
ââ 
[
ââ 
j
ââ 
]
ââ 
=
ââ 
v
ââ 
/
ââ 
windowScale
ââ )
;
ââ) *
}
ãã 
double
ææ 
max
ææ 
=
ææ 
$num
ææ 
;
ææ  
for
çç 
(
çç 
j
çç 
=
çç 
$num
çç 
;
çç 
j
çç 
<
çç 
nn
çç 
;
çç 
j
çç  !
++
çç! #
)
çç# $
{
èè 
max
éé 
=
éé 
Math
éé 
.
éé 
Max
éé 
(
éé 
max
éé "
,
éé" #
smoo
éé$ (
[
éé( )
j
éé) *
]
éé* +
)
éé+ ,
;
éé, -
}
êê 
for
ëë 
(
ëë 
j
ëë 
=
ëë 
$num
ëë 
;
ëë 
j
ëë 
<
ëë 
nn
ëë 
;
ëë 
j
ëë  !
++
ëë! #
)
ëë# $
{
ìì 
smoo
íí 
[
íí 
j
íí 
]
íí 
=
íí 
smoo
íí 
[
íí 
j
íí  
]
íí  !
/
íí" #
max
íí$ '
;
íí' (
}
îî 
return
ðð 
smoo
ðð 
;
ðð 
}
ññ 	
}
óó 
}ôô ÀE
3E:\GitHub\inguz-DSPUtil\InguzDSPUtilNew\External.cs
	namespace 	
DSPUtil
 
{		 
public

 

class

  
SPDIFWrappedExternal

 %
:

& '
SoundObj

( 0
{ 
string 
_exeName 
; 
string 
_exeArgs 
; 

WaveWriter 
_writer 
= 
null !
;! "
System 
. 
Diagnostics 
. 
Process "
_process# +
=, -
null. 2
;2 3
StreamWriter 
_in 
= 
null 
;  
StreamReader 
_out 
= 
null  
;  !
double 
_gain 
; 
double 
[ 
] 
_gains 
= 
null 
; 
ushort 
_bitsPerSample 
; 

DitherType 
_dither 
; 

WaveFormat 
_audioFormat 
;  
WaveFormatEx 
	_formatEx 
; 
public  
SPDIFWrappedExternal #
(# $
string$ *
exeName+ 2
,2 3
string4 :
exeArgs; B
)B C
{ 	
_exeName 
= 
exeName 
; 
_exeArgs 
= 
exeArgs 
; 
} 	
public## 
double## 
Gain## 
{$$ 	
set%% 
{&& 
_gain'' 
='' 
value'' 
;'' 
}(( 
})) 	
public11 
void11 
SetChannelGain11 "
(11" #
ushort11# )
channel11* 1
,111 2
double113 9
gain11: >
)11> ?
{22 	
if33 
(33 
_gains33 
==33 
null33 
)33 
{44 
_gains55 
=55 
new55 
double55 #
[55# $
_nc55$ '
]55' (
;55( )
for66 
(66 
ushort66 
c66 
=66 
$num66  !
;66! "
c66# $
<66% &
_nc66' *
;66* +
c66, -
++66- /
)66/ 0
{77 
_gains88 
[88 
c88 
]88 
=88 
double88  &
.88& '
NaN88' *
;88* +
}99 
}:: 
_gains;; 
[;; 
channel;; 
];; 
=;; 
gain;; "
;;;" #
}<< 	
public?? 
ushort?? 
BitsPerSample?? #
{@@ 	
setAA 
{AA 
_bitsPerSampleAA  
=AA! "
valueAA# (
;AA( )
}AA* +
}BB 	
publicHH 

DitherTypeHH 
DitherHH  
{II 	
setJJ 
{KK 
_ditherLL 
=LL 
valueLL 
;LL  
}MM 
}NN 	
publicSS 

WaveFormatSS 
FormatSS  
{TT 	
setUU 
{VV 
_audioFormatWW 
=WW 
valueWW $
;WW$ %
}XX 
}YY 	
public\\ 
WaveFormatEx\\ 
FormatEx\\ $
{]] 	
set^^ 
{__ 
_audioFormat`` 
=`` 

WaveFormat`` )
.``) *

EXTENSIBLE``* 4
;``4 5
	_formatExaa 
=aa 
valueaa !
;aa! "
}bb 
}cc 	
publicii 
overrideii 
ushortii 
NumChannelsii *
{jj 	
getkk 
{ll 
returnmm 
$nummm 
;mm 
}nn 
}oo 	
privateqq 
boolqq 
validqq 
(qq 
)qq 
{rr 	
boolss 
okss 
=ss 
falsess 
;ss 
iftt 
(tt 
_inputtt 
!=tt 
nulltt 
)tt 
{uu 
okvv 
=vv 
truevv 
;vv 
ifww 
(ww 
_srww 
!=ww 
$numww  
&&ww! #
_srww$ '
!=ww( *
$numww+ 0
&&ww1 3
_srww4 7
!=ww8 :
$numww; @
)ww@ A
{xx 
throwyy 
newyy 
	Exceptionyy '
(yy' (
$stryy( G
)yyG H
;yyH I
}zz 
}{{ 
return|| 
ok|| 
;|| 
}}} 	
public
 
override
 
IEnumerator
 #
<
# $
ISample
$ +
>
+ ,
Samples
- 4
{
 	
get
 
{
 
if
 
(
 
!
 
valid
 
(
 
)
 
)
 
{
 
yield
 
break
 
;
  
}
 
Start
 
(
 
)
 
;
 
foreach
 
(
 
ISample
  
sample
! '
in
( *
_input
+ 1
)
1 2
{
 
if
 
(
 
_process
  
.
  !
	HasExited
! *
)
* +
{
 
break
 
;
 
}
 
yield
 
return
  
sample
! '
;
' (
}
 
Stop
 
(
 
)
 
;
 
}
 
}
 	
private
 
void
 
Start
 
(
 
)
 
{
 	
_process
 
=
 
new
 
System
 !
.
! "
Diagnostics
" -
.
- .
Process
. 5
(
5 6
)
6 7
;
7 8
System
 
.
 
Diagnostics
 
.
 
ProcessStartInfo
 /
processInfo
0 ;
=
< =
new
> A
System
B H
.
H I
Diagnostics
I T
.
T U
ProcessStartInfo
U e
(
e f
)
f g
;
g h
processInfo
 
.
 
	Arguments
 !
=
" #
_exeArgs
$ ,
;
, -
processInfo
 
.
 
FileName
  
=
! "
_exeName
# +
;
+ ,
processInfo
 
.
 
UseShellExecute
 '
=
( )
false
* /
;
/ 0
processInfo
   
.
   #
RedirectStandardInput
   -
=
  . /
true
  0 4
;
  4 5
processInfo
¡¡ 
.
¡¡ $
RedirectStandardOutput
¡¡ .
=
¡¡/ 0
true
¡¡1 5
;
¡¡5 6
processInfo
¢¢ 
.
¢¢ #
RedirectStandardError
¢¢ -
=
¢¢. /
false
¢¢0 5
;
¢¢5 6
_in
££ 
=
££ 
_process
££ 
.
££ 
StandardInput
££ (
;
££( )
_out
¤¤ 
=
¤¤ 
_process
¤¤ 
.
¤¤ 
StandardOutput
¤¤ *
;
¤¤* +
_writer
¦¦ 
=
¦¦ 
new
¦¦ 

WaveWriter
¦¦ $
(
¦¦$ %
_in
¦¦% (
.
¦¦( )

BaseStream
¦¦) 3
)
¦¦3 4
;
¦¦4 5
_writer
§§ 
.
§§ 
Input
§§ 
=
§§ 
_input
§§ "
;
§§" #
_writer
¨¨ 
.
¨¨ 
BitsPerSample
¨¨ !
=
¨¨" #
$num
¨¨$ &
;
¨¨& '
_process
ªª 
.
ªª 
	StartInfo
ªª 
=
ªª  
processInfo
ªª! ,
;
ªª, -
try
«« 
{
¬¬ 
_process
­­ 
.
­­ 
Start
­­ 
(
­­ 
)
­­  
;
­­  !
}
®® 
catch
¯¯ 
(
¯¯ 
	Exception
¯¯ 
e
¯¯ 
)
¯¯ 
{
°° 
Trace
±± 
.
±± 
	WriteLine
±± 
(
±±  
$str
±±  ?
,
±±? @
e
±±A B
.
±±B C
Message
±±C J
)
±±J K
;
±±K L
_process
²² 
=
²² 
null
²² 
;
²²  
}
³³ 
}
´´ 	
private
¶¶ 
void
¶¶ 
Stop
¶¶ 
(
¶¶ 
)
¶¶ 
{
·· 	
}
¸¸ 	
}
¹¹ 
}ºº ¤¤
8E:\GitHub\inguz-DSPUtil\InguzDSPUtilNew\FilterImpulse.cs
	namespace 	
DSPUtil
 
{ 
[ 
Serializable 
] 
public 

struct 
FreqGain 
{ 
private 
double 
_freq 
; 
public 
double 
Freq 
{ 	
get 
{ 
return 
_freq 
; 
}  !
set 
{ 
_freq 
= 
value 
;  
}! "
} 	
private 
double 
_gain 
; 
public 
double 
Gain 
{ 	
get 
{ 
return 
_gain 
; 
}  !
set 
{ 
_gain 
= 
value 
;  
}! "
}   	
public'' 
FreqGain'' 
('' 
double'' 
freq'' #
,''# $
double''% +
gain'', 0
)''0 1
{(( 	
_freq)) 
=)) 
freq)) 
;)) 
_gain** 
=** 
gain** 
;** 
}++ 	
},, 
public.. 

class.. 
FilterProfile.. 
:..  
List..! %
<..% &
FreqGain..& .
>... /
{// 
public00 
FilterProfile00 
(00 
)00 
:11 
base11 
(11 
)11 
{22 	
}33 	
public99 
FilterProfile99 
(99 
FilterProfile99 *
lfg99+ .
)99. /
::: 
base:: 
(:: 
lfg:: 
):: 
{;; 	
}<< 	
publicDD 
FilterProfileDD 
(DD 
	ISoundObjDD &
impulseDD' .
,DD. /
doubleDD0 6
fractionsOfERBDD7 E
)DDE F
:EE 
baseEE 
(EE 
)EE 
{FF 	
FilterProfilePP 
lfgPP 
=PP 
	SmoothingPP  )
.PP) *
ProfilePP* 1
(PP1 2
impulsePP2 9
,PP9 :
SmoothingTypePP; H
.PPH I
OCTAVEPPI O
,PPO P
fractionsOfERBPPQ _
)PP_ `
;PP` a
AddRangeQQ 
(QQ 
lfgQQ 
)QQ 
;QQ 
}RR 	
privateUU 
staticUU 
doubleUU 
[UU 
]UU 
magbandsUU  (
(UU( )
	ISoundObjUU) 2
impulseUU3 :
,UU: ;
doubleUU< B
binsUUC G
)UUG H
{VV 	
uintWW 
nSRWW 
=WW 
impulseWW 
.WW 

SampleRateWW )
;WW) *
uintXX 
nSR2XX 
=XX 
nSRXX 
/XX 
$numXX 
;XX  
intZZ 
nnZZ 
=ZZ 
(ZZ 
intZZ 
)ZZ 
binsZZ 
+ZZ  
$numZZ! "
;ZZ" #
double[[ 
[[[ 
][[ 
muff[[ 
=[[ 
new[[ 
double[[  &
[[[& '
nn[[' )
][[) *
;[[* +
ushort]] 
	nChannels]] 
=]] 
impulse]] &
.]]& '
NumChannels]]' 2
;]]2 3
for^^ 
(^^ 
ushort^^ 
c^^ 
=^^ 
$num^^ 
;^^ 
c^^  
<^^! "
	nChannels^^# ,
;^^, -
c^^. /
++^^/ 1
)^^1 2
{__ 
SingleChannelaa 
channelaa %
=aa& '
impulseaa( /
.aa/ 0
Channelaa0 7
(aa7 8
caa8 9
)aa9 :
;aa: ;
SoundBufferbb 
buffbb  
=bb! "
newbb# &
SoundBufferbb' 2
(bb2 3
channelbb3 :
)bb: ;
;bb; <
buffcc 
.cc 
ReadAllcc 
(cc 
)cc 
;cc 
buffff 
.ff 
PadToff 
(ff 
buffff 
.ff  
Countff  %
*ff& '
$numff( )
)ff) *
;ff* +
buffhh 
.hh 
PadToPowerOfTwohh $
(hh$ %
)hh% &
;hh& '
Complexjj 
[jj 
]jj 
[jj 
]jj 
datajj  
=jj! "
buffjj# '
.jj' (
ToComplexArrayjj( 6
(jj6 7
)jj7 8
;jj8 9
Complexkk 
[kk 
]kk 
cdatakk 
=kk  !
datakk" &
[kk& '
$numkk' (
]kk( )
;kk) *
buffnn 
=nn 
nullnn 
;nn 
GCoo 
.oo 
Collectoo 
(oo 
)oo 
;oo 
Fourierrr 
.rr 
FFTrr 
(rr 
cdatarr !
.rr! "
Lengthrr" (
,rr( )
cdatarr* /
)rr/ 0
;rr0 1
inttt 
ntt 
=tt 
cdatatt 
.tt 
Lengthtt $
/tt% &
$numtt' (
;tt( )
doubleyy 
binwyy 
=yy 
(yy 
nSR2yy #
/yy$ %
(yy& '
doubleyy' -
)yy- .
nyy. /
)yy/ 0
;yy0 1
intzz 
prevbinzz 
=zz 
$numzz 
;zz  
int{{ 
nbin{{ 
={{ 
$num{{ 
;{{ 
double|| 
v|| 
=|| 
$num|| 
;|| 
for}} 
(}} 
int}} 
j}} 
=}} 
$num}} 
;}} 
j}}  !
<}}" #
n}}$ %
;}}% &
j}}' (
++}}( *
)}}* +
{~~ 
double 
f 
= 
(  
double  &
)& '
j' (
*) *
binw+ /
;/ 0
int
 
bin
 
=
 
(
 
int
 "
)
" #
ERB
# &
.
& '
f2bin
' ,
(
, -
f
- .
,
. /
nSR
0 3
,
3 4
bins
5 9
)
9 :
;
: ;
v
 
+=
 
cdata
 
[
 
j
  
]
  !
.
! "
	Magnitude
" +
;
+ ,
nbin
 
++
 
;
 
if
 
(
 
(
 
bin
 
>
 
prevbin
 &
)
& '
||
( *
(
+ ,
j
, -
==
. 0
n
1 2
-
3 4
$num
5 6
)
6 7
)
7 8
{
 
muff
 
[
 
prevbin
 $
]
$ %
+=
& (
(
) *
v
* +
/
, -
nbin
. 2
)
2 3
;
3 4
v
 
=
 
$num
 
;
 
nbin
 
=
 
$num
  
;
  !
prevbin
 
=
  !
bin
" %
;
% &
}
 
}
 
}
 
for
 
(
 
int
 
j
 
=
 
$num
 
;
 
j
 
<
 
muff
  $
.
$ %
Length
% +
;
+ ,
j
- .
++
. 0
)
0 1
{
 
muff
 
[
 
j
 
]
 
=
 
muff
 
[
 
j
  
]
  !
/
" #
	nChannels
$ -
;
- .
}
 
return
 
muff
 
;
 
}
 	
public
 
double
 
MaxGain
 
(
 
)
 
{
 	
double
 
g
 
=
 
double
 
.
 
MinValue
 &
;
& '
foreach
   
(
   
FreqGain
   
fg
    
in
  ! #
this
  $ (
)
  ( )
{
¡¡ 
if
¢¢ 
(
¢¢ 
fg
¢¢ 
.
¢¢ 
Gain
¢¢ 
>
¢¢ 
g
¢¢ 
)
¢¢  
{
££ 
g
¤¤ 
=
¤¤ 
fg
¤¤ 
.
¤¤ 
Gain
¤¤ 
;
¤¤  
}
¥¥ 
}
¦¦ 
return
§§ 
g
§§ 
;
§§ 
}
¨¨ 	
public
®® 
double
®® 
MinGain
®® 
(
®® 
)
®® 
{
¯¯ 	
double
°° 
g
°° 
=
°° 
double
°° 
.
°° 
MaxValue
°° &
;
°°& '
foreach
±± 
(
±± 
FreqGain
±± 
fg
±±  
in
±±! #
this
±±$ (
)
±±( )
{
²² 
if
³³ 
(
³³ 
fg
³³ 
.
³³ 
Gain
³³ 
<
³³ 
g
³³ 
)
³³  
{
´´ 
g
µµ 
=
µµ 
fg
µµ 
.
µµ 
Gain
µµ 
;
µµ  
}
¶¶ 
}
·· 
return
¸¸ 
g
¸¸ 
;
¸¸ 
}
¹¹ 	
public
ÁÁ 
FilterProfile
ÁÁ 
	FreqRange
ÁÁ &
(
ÁÁ& '
double
ÁÁ' -
fMin
ÁÁ. 2
,
ÁÁ2 3
double
ÁÁ4 :
fMax
ÁÁ; ?
)
ÁÁ? @
{
ÂÂ 	
FilterProfile
ÃÃ 
lfg
ÃÃ 
=
ÃÃ 
new
ÃÃ  #
FilterProfile
ÃÃ$ 1
(
ÃÃ1 2
)
ÃÃ2 3
;
ÃÃ3 4
foreach
ÄÄ 
(
ÄÄ 
FreqGain
ÄÄ 
fg
ÄÄ  
in
ÄÄ! #
this
ÄÄ$ (
)
ÄÄ( )
{
ÅÅ 
if
ÆÆ 
(
ÆÆ 
fg
ÆÆ 
.
ÆÆ 
Freq
ÆÆ 
>=
ÆÆ 
fMin
ÆÆ #
&&
ÆÆ$ &
fg
ÆÆ' )
.
ÆÆ) *
Freq
ÆÆ* .
<=
ÆÆ/ 1
fMax
ÆÆ2 6
)
ÆÆ6 7
{
ÇÇ 
lfg
ÈÈ 
.
ÈÈ 
Add
ÈÈ 
(
ÈÈ 
fg
ÈÈ 
)
ÈÈ 
;
ÈÈ  
}
ÉÉ 
}
ÊÊ 
return
ËË 
lfg
ËË 
;
ËË 
}
ÌÌ 	
public
ÓÓ 
FilterProfile
ÓÓ 
Inverse
ÓÓ $
(
ÓÓ$ %
)
ÓÓ% &
{
ÔÔ 	
return
ÕÕ 
Inverse
ÕÕ 
(
ÕÕ 
$num
ÕÕ 
)
ÕÕ 
;
ÕÕ 
}
ÖÖ 	
public
ØØ 
FilterProfile
ØØ 
Inverse
ØØ $
(
ØØ$ %
double
ØØ% +
maxGain
ØØ, 3
)
ØØ3 4
{
ÙÙ 	
FilterProfile
ÚÚ 
lfg
ÚÚ 
=
ÚÚ 
new
ÚÚ  #
FilterProfile
ÚÚ$ 1
(
ÚÚ1 2
)
ÚÚ2 3
;
ÚÚ3 4
foreach
ÛÛ 
(
ÛÛ 
FreqGain
ÛÛ 
fg
ÛÛ  
in
ÛÛ! #
this
ÛÛ$ (
)
ÛÛ( )
{
ÜÜ 
double
ÝÝ 
newGain
ÝÝ 
=
ÝÝ  
-
ÝÝ! "
fg
ÝÝ" $
.
ÝÝ$ %
Gain
ÝÝ% )
;
ÝÝ) *
if
ÞÞ 
(
ÞÞ 
maxGain
ÞÞ 
!=
ÞÞ 
$num
ÞÞ  
)
ÞÞ  !
{
ßß 
newGain
áá 
=
áá 
Math
áá "
.
áá" #
Min
áá# &
(
áá& '
newGain
áá' .
,
áá. /
maxGain
áá0 7
)
áá7 8
;
áá8 9
newGain
ââ 
=
ââ 
Math
ââ "
.
ââ" #
Max
ââ# &
(
ââ& '
newGain
ââ' .
,
ââ. /
-
ââ0 1
maxGain
ââ1 8
)
ââ8 9
;
ââ9 :
lfg
ãã 
.
ãã 
Add
ãã 
(
ãã 
new
ãã 
FreqGain
ãã  (
(
ãã( )
fg
ãã) +
.
ãã+ ,
Freq
ãã, 0
,
ãã0 1
newGain
ãã2 9
)
ãã9 :
)
ãã: ;
;
ãã; <
}
ää 
}
åå 
return
ææ 
lfg
ææ 
;
ææ 
}
çç 	
public
îî 
FilterProfile
îî 
Scale
îî "
(
îî" #
double
îî# )
scale
îî* /
)
îî/ 0
{
ïï 	
FilterProfile
ðð 
lfg
ðð 
=
ðð 
new
ðð  #
FilterProfile
ðð$ 1
(
ðð1 2
)
ðð2 3
;
ðð3 4
for
ññ 
(
ññ 
int
ññ 
j
ññ 
=
ññ 
$num
ññ 
;
ññ 
j
ññ 
<
ññ 
lfg
ññ  #
.
ññ# $
Count
ññ$ )
;
ññ) *
j
ññ+ ,
++
ññ, .
)
ññ. /
{
òò 
FreqGain
óó 
fg
óó 
=
óó 
lfg
óó !
[
óó! "
j
óó" #
]
óó# $
;
óó$ %
lfg
ôô 
.
ôô 
Add
ôô 
(
ôô 
new
ôô 
FreqGain
ôô $
(
ôô$ %
fg
ôô% '
.
ôô' (
Freq
ôô( ,
,
ôô, -
fg
ôô. 0
.
ôô0 1
Gain
ôô1 5
*
ôô6 7
scale
ôô8 =
)
ôô= >
)
ôô> ?
;
ôô? @
}
õõ 
return
öö 
lfg
öö 
;
öö 
}
÷÷ 	
public
ùù 
static
ùù 
FilterProfile
ùù #
operator
ùù$ ,
*
ùù- .
(
ùù. /
FilterProfile
ùù/ <
c1
ùù= ?
,
ùù? @
double
ùùA G
num
ùùH K
)
ùùK L
{
úú 	
return
ûû 
c1
ûû 
.
ûû 
Scale
ûû 
(
ûû 
num
ûû 
)
ûû  
;
ûû  !
}
üü 	
public
þþ 
static
þþ 
FilterProfile
þþ #
operator
þþ$ ,
*
þþ- .
(
þþ. /
double
þþ/ 5
num
þþ6 9
,
þþ9 :
FilterProfile
þþ; H
c1
þþI K
)
þþK L
{
ÿÿ 	
return
 
c1
 
.
 
Scale
 
(
 
num
 
)
  
;
  !
}
 	
public
 
static
 
FilterProfile
 #
operator
$ ,
-
- .
(
. /
FilterProfile
/ <
c1
= ?
,
? @
FilterProfile
A N
c2
O Q
)
Q R
{
 	
if
 
(
 
c1
 
.
 
Count
 
!=
 
c2
 
.
 
Count
 $
)
$ %
{
 
return
 
null
 
;
 
}
 
FilterProfile
 

newProfile
 $
=
% &
new
' *
FilterProfile
+ 8
(
8 9
)
9 :
;
: ;
for
 
(
 
int
 
j
 
=
 
$num
 
;
 
j
 
<
 
c1
  "
.
" #
Count
# (
;
( )
j
* +
++
+ -
)
- .
{
 
if
 
(
 
c1
 
[
 
j
 
]
 
.
 
Freq
 
!=
 !
c2
" $
[
$ %
j
% &
]
& '
.
' (
Freq
( ,
)
, -
{
 
return
 
null
 
;
  
}
 
double
 
g1
 
=
 
c1
 
[
 
j
  
]
  !
.
! "
Gain
" &
;
& '
double
 
g2
 
=
 
c2
 
[
 
j
  
]
  !
.
! "
Gain
" &
;
& '

newProfile
 
.
 
Add
 
(
 
new
 "
FreqGain
# +
(
+ ,
c1
, .
[
. /
j
/ 0
]
0 1
.
1 2
Freq
2 6
,
6 7
g1
8 :
-
; <
g2
= ?
)
? @
)
@ A
;
A B
}
 
return
 

newProfile
 
;
 
}
 	
public
¤¤ 
string
¤¤ 
ToJSONString
¤¤ "
(
¤¤" #
string
¤¤# )
name
¤¤* .
,
¤¤. /
string
¤¤0 6
description
¤¤7 B
)
¤¤B C
{
¥¥ 	
StringBuilder
¦¦ 
sb
¦¦ 
=
¦¦ 
new
¦¦ "
StringBuilder
¦¦# 0
(
¦¦0 1
)
¦¦1 2
;
¦¦2 3
sb
§§ 
.
§§ 

AppendLine
§§ 
(
§§ 
$str
§§ 
+
§§  
name
§§! %
+
§§& '
$str
§§( 0
+
§§1 2
description
§§3 >
+
§§? @
$str
§§A F
)
§§F G
;
§§G H
sb
¨¨ 
.
¨¨ 
Append
¨¨ 
(
¨¨ 
$str
¨¨ 
+
¨¨ 
name
¨¨ !
+
¨¨" #
$str
¨¨$ 0
)
¨¨0 1
;
¨¨1 2
bool
©© 
first
©© 
=
©© 
true
©© 
;
©© 
foreach
ªª 
(
ªª 
FreqGain
ªª 
fg
ªª  
in
ªª! #
this
ªª$ (
)
ªª( )
{
«« 
double
¬¬ 
gain
¬¬ 
=
¬¬ 
fg
¬¬  
.
¬¬  !
Gain
¬¬! %
;
¬¬% &
if
­­ 
(
­­ 
!
­­ 
Double
­­ 
.
­­ 
IsNaN
­­ !
(
­­! "
gain
­­" &
)
­­& '
&&
­­( *
!
­­+ ,
Double
­­, 2
.
­­2 3

IsInfinity
­­3 =
(
­­= >
gain
­­> B
)
­­B C
)
­­C D
{
®® 
if
¯¯ 
(
¯¯ 
first
¯¯ 
)
¯¯ 
{
°° 
first
±± 
=
±± 
false
±±  %
;
±±% &
}
²² 
else
³³ 
{
´´ 
sb
µµ 
.
µµ 
Append
µµ !
(
µµ! "
$str
µµ" &
)
µµ& '
;
µµ' (
}
¶¶ 
sb
·· 
.
·· 
Append
·· 
(
·· 
$str
·· #
)
··# $
;
··$ %
sb
¸¸ 
.
¸¸ 
AppendFormat
¸¸ #
(
¸¸# $
$str
¸¸$ ,
,
¸¸, -
fg
¸¸. 0
.
¸¸0 1
Freq
¸¸1 5
)
¸¸5 6
;
¸¸6 7
sb
¹¹ 
.
¹¹ 
Append
¹¹ 
(
¹¹ 
$str
¹¹ #
)
¹¹# $
;
¹¹$ %
sb
ºº 
.
ºº 
AppendFormat
ºº #
(
ºº# $
$str
ºº$ ,
,
ºº, -
gain
ºº. 2
)
ºº2 3
;
ºº3 4
sb
»» 
.
»» 
Append
»» 
(
»» 
$str
»» !
)
»»! "
;
»»" #
}
¼¼ 
}
½½ 
sb
¾¾ 
.
¾¾ 

AppendLine
¾¾ 
(
¾¾ 
$str
¾¾ 
)
¾¾ 
;
¾¾  
return
¿¿ 
sb
¿¿ 
.
¿¿ 
ToString
¿¿ 
(
¿¿ 
)
¿¿  
;
¿¿  !
}
ÀÀ 	
}
ÁÁ 
public
ÄÄ 

class
ÄÄ 
FreqGainComparer
ÄÄ !
:
ÄÄ" #
Comparer
ÄÄ$ ,
<
ÄÄ, -
FreqGain
ÄÄ- 5
>
ÄÄ5 6
{
ÅÅ 
public
ÆÆ 
override
ÆÆ 
int
ÆÆ 
Compare
ÆÆ #
(
ÆÆ# $
FreqGain
ÆÆ$ ,
x
ÆÆ- .
,
ÆÆ. /
FreqGain
ÆÆ0 8
y
ÆÆ9 :
)
ÆÆ: ;
{
ÇÇ 	
return
ÈÈ 
x
ÈÈ 
.
ÈÈ 
Freq
ÈÈ 
.
ÈÈ 
	CompareTo
ÈÈ #
(
ÈÈ# $
y
ÈÈ$ %
.
ÈÈ% &
Freq
ÈÈ& *
)
ÈÈ* +
;
ÈÈ+ ,
}
ÉÉ 	
}
ÊÊ 
public
ÌÌ 

enum
ÌÌ !
FilterInterpolation
ÌÌ #
{
ÍÍ 
COSINE
ÎÎ 
=
ÎÎ 
$num
ÎÎ 
,
ÎÎ 
SPLINE
ÏÏ 
=
ÏÏ 
$num
ÏÏ 
}
ÐÐ 
[
ÒÒ 
Serializable
ÒÒ 
]
ÒÒ 
public
ÓÓ 

class
ÓÓ 
FilterImpulse
ÓÓ 
:
ÓÓ  
SoundObj
ÓÓ! )
{
ÔÔ 
int
ÕÕ 
	_nSamples
ÕÕ 
;
ÕÕ 
FilterProfile
ÖÖ 
_coeffs
ÖÖ 
;
ÖÖ 
bool
×× 
_allZero
×× 
;
×× !
FilterInterpolation
ØØ 
_int
ØØ  
;
ØØ  !
public
àà 
FilterImpulse
àà 
(
àà 
int
àà  
nSize
àà! &
,
àà& '
FilterProfile
àà( 5
coefficients
àà6 B
,
ààB C!
FilterInterpolation
ààD W
interpolation
ààX e
,
ààe f
uint
ààg k

sampleRate
ààl v
)
ààv w
{
áá 	
if
ââ 
(
ââ 

sampleRate
ââ 
==
ââ 
$num
ââ 
)
ââ  
{
ãã 
throw
ää 
new
ää 
	Exception
ää #
(
ää# $
$str
ää$ @
)
ää@ A
;
ääA B
}
åå 
	_nSamples
çç 
=
çç 
nSize
çç 
;
çç 
_coeffs
èè 
=
èè 
coefficients
èè "
;
èè" #
_int
éé 
=
éé 
interpolation
éé  
;
éé  !

SampleRate
êê 
=
êê 

sampleRate
êê #
;
êê# $
_coeffs
íí 
.
íí 
Sort
íí 
(
íí 
new
íí 
FreqGainComparer
íí -
(
íí- .
)
íí. /
)
íí/ 0
;
íí0 1
FilterProfile
îî 
co
îî 
=
îî 
new
îî "
FilterProfile
îî# 0
(
îî0 1
)
îî1 2
;
îî2 3
_allZero
ïï 
=
ïï 
true
ïï 
;
ïï 
double
ðð 
prevFreq
ðð 
=
ðð 
-
ðð 
$num
ðð  
;
ðð  !
double
ññ 
freqDiff
ññ 
=
ññ 
double
ññ $
.
ññ$ %
MaxValue
ññ% -
;
ññ- .
foreach
òò 
(
òò 
FreqGain
òò 
fg
òò  
in
òò! #
_coeffs
òò$ +
)
òò+ ,
{
óó 
if
ôô 
(
ôô 
fg
ôô 
.
ôô 
Freq
ôô 
>
ôô 
prevFreq
ôô &
&&
ôô' )
fg
ôô* ,
.
ôô, -
Freq
ôô- 1
>=
ôô2 4
$num
ôô5 6
)
ôô6 7
{
õõ 
co
öö 
.
öö 
Add
öö 
(
öö 
fg
öö 
)
öö 
;
öö 
freqDiff
÷÷ 
=
÷÷ 
Math
÷÷ #
.
÷÷# $
Min
÷÷$ '
(
÷÷' (
freqDiff
÷÷( 0
,
÷÷0 1
fg
÷÷2 4
.
÷÷4 5
Freq
÷÷5 9
-
÷÷: ;
prevFreq
÷÷< D
)
÷÷D E
;
÷÷E F
prevFreq
øø 
=
øø 
fg
øø !
.
øø! "
Freq
øø" &
;
øø& '
}
ùù 
if
úú 
(
úú 
fg
úú 
.
úú 
Gain
úú 
!=
úú 
$num
úú  
)
úú  !
{
ûû 
_allZero
üü 
=
üü 
false
üü $
;
üü$ %
}
ýý 
}
þþ 
_coeffs
ÿÿ 
=
ÿÿ 
co
ÿÿ 
;
ÿÿ 
if
 
(
 
	_nSamples
 
==
 
$num
 
)
 
{
 
	_nSamples
 
=
 
_allZero
 $
?
% &
$num
' +
:
, -
Math
. 2
.
2 3
Max
3 6
(
6 7
$num
7 ;
,
; <
(
= >
int
> A
)
A B
Math
B F
.
F G
Min
G J
(
J K
$num
K R
,
R S
$num
T Z
/
[ \
freqDiff
] e
)
e f
)
f g
;
g h
}
 
	_nSamples
 
=
 
MathUtil
  
.
  !
NextPowerOfTwo
! /
(
/ 0
	_nSamples
0 9
)
9 :
;
: ;
}
 	
public
 
override
 
int
 

Iterations
 &
{
 	
get
 
{
 
return
 
	_nSamples
 "
;
" #
}
$ %
}
 	
public
 
override
 
ushort
 
NumChannels
 *
{
 	
get
 
{
 
ushort
 
nc
 
=
 
base
  
.
  !
NumChannels
! ,
;
, -
if
 
(
 
nc
 
==
 
$num
 
)
 
return
 #
$num
$ %
;
% &
return
 
nc
 
;
 
}
 
set
 
{
 
base
 
.
 
NumChannels
  
=
! "
value
# (
;
( )
}
 
}
 	
public
   
override
   
IEnumerator
   #
<
  # $
ISample
  $ +
>
  + ,
Samples
  - 4
{
¡¡ 	
get
¢¢ 
{
££ 
int
¤¤ 
j
¤¤ 
;
¤¤ 
Complex
§§ 
[
§§ 
]
§§ 
data
§§ 
=
§§  
new
§§! $
Complex
§§% ,
[
§§, -
	_nSamples
§§- 6
]
§§6 7
;
§§7 8
int
¨¨ 
centerpoint
¨¨ 
=
¨¨  !
(
¨¨" #
	_nSamples
¨¨# ,
/
¨¨- .
$num
¨¨/ 0
)
¨¨0 1
-
¨¨2 3
$num
¨¨3 4
;
¨¨4 5
data
©© 
[
©© 
centerpoint
©©  
]
©©  !
=
©©" #
new
©©$ '
Complex
©©( /
(
©©/ 0
$num
©©0 1
,
©©1 2
$num
©©3 4
)
©©4 5
;
©©5 6
Complex
«« 
[
«« 
]
«« 
[
«« 
]
«« 
ddata
«« !
=
««" #
new
««$ '
Complex
««( /
[
««/ 0
$num
««0 1
]
««1 2
[
««2 3
]
««3 4
;
««4 5
ddata
¬¬ 
[
¬¬ 
$num
¬¬ 
]
¬¬ 
=
¬¬ 
data
¬¬ 
;
¬¬  
	ISoundObj
®® 
cbr
®® 
;
®® 
if
¯¯ 
(
¯¯ 
!
¯¯ 
_allZero
¯¯ 
)
¯¯ 
{
°° 
Fourier
²² 
.
²² 
FFT
²² 
(
²²  
(
²²  !
int
²²! $
)
²²$ %
	_nSamples
²²% .
,
²². /
data
²²0 4
)
²²4 5
;
²²5 6
cbr
µµ 
=
µµ 
new
µµ !
ComplexBufferReader
µµ 1
(
µµ1 2
ddata
µµ2 7
,
µµ7 8
$num
µµ9 :
,
µµ: ;
$num
µµ< =
,
µµ= >
	_nSamples
µµ? H
/
µµI J
$num
µµK L
,
µµL M 
ComplexBufferFlags
µµN `
.
µµ` a
Both
µµa e
)
µµe f
;
µµf g
	ISoundObj
¶¶ 
shape
¶¶ #
=
¶¶$ %
cbr
¶¶& )
;
¶¶) *
cbr
¸¸ 
=
¸¸ 
new
¸¸ 
CallbackSource
¸¸ ,
(
¸¸, -
$num
¸¸- .
,
¸¸. /

SampleRate
¸¸0 :
,
¸¸: ;
delegate
¸¸< D
(
¸¸D E
long
¸¸E I
i
¸¸J K
)
¸¸K L
{
¸¸L M
if
¹¹ 
(
¹¹ 
i
¹¹ 
>
¹¹ 
	_nSamples
¹¹  )
/
¹¹* +
$num
¹¹, -
)
¹¹- .
{
ºº 
return
»» "
null
»»# '
;
»»' (
}
¼¼ 
return
½½ 
new
½½ "
Sample
½½# )
(
½½) *
$num
½½* -
)
½½- .
;
½½. /
}
¾¾ 
)
¾¾ 
;
¾¾ 
if
ÀÀ 
(
ÀÀ 
_int
ÀÀ 
==
ÀÀ !
FilterInterpolation
ÀÀ  3
.
ÀÀ3 4
COSINE
ÀÀ4 :
)
ÀÀ: ;
{
ÁÁ #
LogBasisShelfEnvelope
ÇÇ -
rcsePrev
ÇÇ. 6
=
ÇÇ7 8
null
ÇÇ9 =
;
ÇÇ= >
for
ÈÈ 
(
ÈÈ 
j
ÈÈ 
=
ÈÈ  
$num
ÈÈ! "
;
ÈÈ" #
j
ÈÈ$ %
<
ÈÈ& '
_coeffs
ÈÈ( /
.
ÈÈ/ 0
Count
ÈÈ0 5
;
ÈÈ5 6
j
ÈÈ7 8
++
ÈÈ8 :
)
ÈÈ: ;
{
ÉÉ 
double
ÊÊ "
freq1
ÊÊ# (
=
ÊÊ) *
_coeffs
ÊÊ+ 2
[
ÊÊ2 3
j
ÊÊ3 4
-
ÊÊ5 6
$num
ÊÊ7 8
]
ÊÊ8 9
.
ÊÊ9 :
Freq
ÊÊ: >
;
ÊÊ> ?
double
ËË "
freq2
ËË# (
=
ËË) *
_coeffs
ËË+ 2
[
ËË2 3
j
ËË3 4
]
ËË4 5
.
ËË5 6
Freq
ËË6 :
;
ËË: ;
double
ÎÎ "
gain1
ÎÎ# (
=
ÎÎ) *
_coeffs
ÎÎ+ 2
[
ÎÎ2 3
j
ÎÎ3 4
-
ÎÎ5 6
$num
ÎÎ7 8
]
ÎÎ8 9
.
ÎÎ9 :
Gain
ÎÎ: >
;
ÎÎ> ?
double
ÏÏ "
gain2
ÏÏ# (
=
ÏÏ) *
_coeffs
ÏÏ+ 2
[
ÏÏ2 3
j
ÏÏ3 4
]
ÏÏ4 5
.
ÏÏ5 6
Gain
ÏÏ6 :
;
ÏÏ: ;
double
ÓÓ "
gainEnd
ÓÓ# *
=
ÓÓ+ ,
gain2
ÓÓ- 2
-
ÓÓ3 4
gain1
ÓÓ5 :
;
ÓÓ: ;
int
ÕÕ 
startSample
ÕÕ  +
=
ÕÕ, -
(
ÕÕ. /
int
ÕÕ/ 2
)
ÕÕ2 3
Math
ÕÕ3 7
.
ÕÕ7 8
Round
ÕÕ8 =
(
ÕÕ= >
freq1
ÕÕ> C
*
ÕÕD E
	_nSamples
ÕÕF O
/
ÕÕP Q

SampleRate
ÕÕR \
)
ÕÕ\ ]
;
ÕÕ] ^
int
ÖÖ 
	endSample
ÖÖ  )
=
ÖÖ* +
(
ÖÖ, -
int
ÖÖ- 0
)
ÖÖ0 1
Math
ÖÖ1 5
.
ÖÖ5 6
Round
ÖÖ6 ;
(
ÖÖ; <
freq2
ÖÖ< A
*
ÖÖB C
	_nSamples
ÖÖD M
/
ÖÖN O

SampleRate
ÖÖP Z
)
ÖÖZ [
;
ÖÖ[ \
if
×× 
(
××  
	endSample
××  )
<=
××* ,
startSample
××- 8
)
××8 9
{
ØØ 
	endSample
ÙÙ  )
=
ÙÙ* +
startSample
ÙÙ, 7
+
ÙÙ8 9
$num
ÙÙ: ;
;
ÙÙ; <
}
ÚÚ #
LogBasisShelfEnvelope
ÜÜ 1
rcse
ÜÜ2 6
=
ÜÜ7 8
new
ÜÜ9 <#
LogBasisShelfEnvelope
ÜÜ= R
(
ÜÜR S
(
ÜÜS T
j
ÜÜT U
==
ÜÜV X
$num
ÜÜY Z
)
ÜÜZ [
?
ÜÜ\ ]
gain1
ÜÜ^ c
:
ÜÜd e
$num
ÜÜf g
,
ÜÜg h
(
ÜÜi j
j
ÜÜj k
==
ÜÜl n
$num
ÜÜo p
)
ÜÜp q
?
ÜÜr s
gain2
ÜÜt y
:
ÜÜz {
gainEndÜÜ| 
,ÜÜ 
startSampleÜÜ 
,ÜÜ 
	endSampleÜÜ 
)ÜÜ 
;ÜÜ 
if
àà 
(
àà  
rcsePrev
àà  (
==
àà) +
null
àà, 0
)
àà0 1
{
áá 
rcse
ââ  $
.
ââ$ %
Input
ââ% *
=
ââ+ ,
cbr
ââ- 0
;
ââ0 1
}
ãã 
else
ää  
{
åå 
rcse
ææ  $
.
ææ$ %
Input
ææ% *
=
ææ+ ,
rcsePrev
ææ- 5
;
ææ5 6
}
çç 
rcsePrev
èè $
=
èè% &
rcse
èè' +
;
èè+ ,
}
éé 
shape
êê 
=
êê 
(
êê  !
rcsePrev
êê! )
==
êê* ,
null
êê- 1
)
êê1 2
?
êê3 4
cbr
êê5 8
:
êê9 :
rcsePrev
êê; C
as
êêD F
	ISoundObj
êêG P
;
êêP Q
}
ëë 
else
ìì 
if
ìì 
(
ìì 
_int
ìì !
==
ìì" $!
FilterInterpolation
ìì% 8
.
ìì8 9
SPLINE
ìì9 ?
)
ìì? @
{
íí 
throw
îî 
new
îî !
	Exception
îî" +
(
îî+ ,
$str
îî, =
)
îî= >
;
îî> ?
}
ïï 
j
òò 
=
òò 
$num
òò 
;
òò 
foreach
óó 
(
óó 
ISample
óó $
sample
óó% +
in
óó, .
shape
óó/ 4
)
óó4 5
{
ôô 
if
õõ 
(
õõ 
j
õõ 
+
õõ 
j
õõ  !
<
õõ" #
	_nSamples
õõ$ -
)
õõ- .
{
öö 
double
÷÷ "
val
÷÷# &
=
÷÷' (
sample
÷÷) /
[
÷÷/ 0
$num
÷÷0 1
]
÷÷1 2
;
÷÷2 3
data
øø  
[
øø  !
j
øø! "
]
øø" #
.
øø# $
mul
øø$ '
(
øø' (
val
øø( +
)
øø+ ,
;
øø, -
data
ùù  
[
ùù  !
	_nSamples
ùù! *
-
ùù+ ,
j
ùù- .
-
ùù/ 0
$num
ùù1 2
]
ùù2 3
.
ùù3 4
mul
ùù4 7
(
ùù7 8
val
ùù8 ;
)
ùù; <
;
ùù< =
}
úú 
j
ûû 
++
ûû 
;
ûû 
}
üü 
Fourier
ÿÿ 
.
ÿÿ 
IFFT
ÿÿ  
(
ÿÿ  !
(
ÿÿ! "
int
ÿÿ" %
)
ÿÿ% &
	_nSamples
ÿÿ& /
,
ÿÿ/ 0
data
ÿÿ1 5
)
ÿÿ5 6
;
ÿÿ6 7
double
 
mul
 
=
  
$num
! "
;
" #
for
 
(
 
j
 
=
 
$num
 
;
 
j
  !
<
" #
	_nSamples
$ -
;
- .
j
/ 0
++
0 2
)
2 3
{
 
data
 
[
 
j
 
]
 
.
  
mul
  #
(
# $
mul
$ '
)
' (
;
( )
}
 
}
 
cbr
 
=
 
new
 !
ComplexBufferReader
 -
(
- .
ddata
. 3
,
3 4
$num
5 6
,
6 7
$num
8 9
,
9 :
	_nSamples
; D
,
D E 
ComplexBufferFlags
F X
.
X Y
RealOnly
Y a
)
a b
;
b c
ushort
 
nc
 
=
 
NumChannels
 '
;
' (
if
 
(
 
nc
 
<=
 
$num
 
)
 
{
 
foreach
 
(
 
ISample
 $
sample
% +
in
, .
cbr
/ 2
)
A B
{
 
yield
 
return
 $
sample
% +
;
+ ,
}
 
}
 
else
 
{
 
foreach
 
(
 
ISample
 $
sample
% +
in
, .
cbr
/ 2
)
A B
{
 
ISample
 
s
  !
=
" #
(
$ %
nc
% '
==
( *
$num
+ ,
)
, -
?
. /
new
0 3
Sample2
4 ;
(
; <
)
< =
:
> ?
new
@ C
Sample
D J
(
J K
nc
K M
)
M N
as
O Q
ISample
R Y
;
Y Z
for
 
(
 
int
  
c
! "
=
# $
$num
% &
;
& '
c
( )
<
* +
nc
, .
;
. /
c
0 1
++
1 3
)
3 4
{
   
s
¡¡ 
[
¡¡ 
c
¡¡ 
]
¡¡  
=
¡¡! "
sample
¡¡# )
[
¡¡) *
$num
¡¡* +
]
¡¡+ ,
;
¡¡, -
}
¢¢ 
yield
££ 
return
££ $
s
££% &
;
££& '
}
¤¤ 
}
¥¥ 
}
¦¦ 
}
§§ 	
}
¨¨ 
}©© ÛÐ
2E:\GitHub\inguz-DSPUtil\InguzDSPUtilNew\Fourier.cs
	namespace 	
DSPUtil
 
{ 
public 

unsafe 
class 
Fourier 
{ 
const 
double 
M_PI_2 
= 
$num P
;P Q
const 
double 
WR5000 
= 
$num P
;P Q
const 
double 
WR2500 
= 
$num P
;P Q
const 
double 
WI2500 
= 
$num P
;P Q
const 
double 
WR1250 
= 
$num P
;P Q
const 
double 
WI1250 
= 
$num P
;P Q
const 
double 
WR3750 
= 
$num P
;P Q
const 
double 
WI3750 
= 
$num P
;P Q
const 
int 
CDFT_LOOP_DIV 
=  !
$num" $
;$ %
const!! 
int!! 
RDFT_LOOP_DIV!! 
=!!  !
$num!!" $
;!!$ %
const## 
int## 
DCST_LOOP_DIV## 
=##  !
$num##" $
;##$ %
const%% 
int%%  
CDFT_THREADS_BEGIN_N%% &
=%%' (
$num%%) -
;%%- .
const&& 
int&& !
CDFT_4THREADS_BEGIN_N&& '
=&&( )
$num&&* 0
;&&0 1
public// 
static// 
void// 
FFT// 
(// 
int// "
n//# $
,//$ %
Complex//& -
[//- .
]//. /
data//0 4
)//4 5
{00 	
fixed11 
(11 
Complex11 
*11 
cdata11 !
=11" #
data11$ (
)11( )
{22 
double33 
*33 
rawdata33 
=33  !
(33" #
double33# )
*33) *
)33* +
cdata33+ 0
;330 1
cfft44 
(44 
$num44 
*44 
n44 
,44 
rawdata44 #
)44# $
;44$ %
}55 
}66 	
public>> 
static>> 
void>> 
IFFT>> 
(>>  
int>>  #
n>>$ %
,>>% &
Complex>>' .
[>>. /
]>>/ 0
data>>1 5
,>>5 6
double>>7 =
gain>>> B
)>>B C
{?? 	
fixed@@ 
(@@ 
Complex@@ 
*@@ 
cdata@@ !
=@@" #
data@@$ (
)@@( )
{AA 
doubleBB 
*BB 
rawdataBB 
=BB  !
(BB" #
doubleBB# )
*BB) *
)BB* +
cdataBB+ 0
;BB0 1
cifftCC 
(CC 
nCC 
*CC 
$numCC 
,CC 
rawdataCC "
,CC" #
gainCC$ (
)CC( )
;CC) *
}DD 
}EE 	
publicLL 
staticLL 
voidLL 
IFFTLL 
(LL  
intLL  #
nLL$ %
,LL% &
ComplexLL' .
[LL. /
]LL/ 0
dataLL1 5
)LL5 6
{MM 	
IFFTNN 
(NN 
nNN 
,NN 
dataNN 
,NN 
$numNN 
)NN 
;NN 
}OO 	
publicQQ 
staticQQ 
voidQQ 
ConvolveQQ #
(QQ# $
intQQ$ '
nQQ( )
,QQ) *
ComplexQQ+ 2
[QQ2 3
]QQ3 4
impulseQQ5 <
,QQ< =
ComplexQQ> E
[QQE F
]QQF G
dataQQH L
,QQL M
boolQQN R
divideQQS Y
)QQY Z
{RR 	
fixedSS 
(SS 
ComplexSS 
*SS 
coutSS  
=SS! "
dataSS# '
,SS' (
cimpulseSS) 1
=SS2 3
impulseSS4 ;
)SS; <
{TT 
doubleUU 
*UU 
aUU 
=UU 
(UU 
doubleUU #
*UU# $
)UU$ %
coutUU% )
;UU) *
doubleVV 
*VV 
iVV 
=VV 
(VV 
doubleVV #
*VV# $
)VV$ %
cimpulseVV% -
;VV- .
intXX 
jXX 
,XX 
kXX 
;XX 
doubleYY 
gemYY 
,YY 
divYY 
;YY  
intZZ 
n2ZZ 
=ZZ 
nZZ 
<<ZZ 
$numZZ 
;ZZ  
cdft]] 
(]] 
n2]] 
,]] 
$num]] 
,]] 
a]] 
)]] 
;]] 
if__ 
(__ 
divide__ 
)__ 
{`` 
forbb 
(bb 
jbb 
=bb 
$numbb 
,bb 
kbb  !
=bb" #
$numbb$ %
;bb% &
jbb' (
<bb) *
n2bb+ -
;bb- .
jbb/ 0
+=bb1 3
$numbb4 5
,bb5 6
kbb7 8
+=bb9 ;
$numbb< =
)bb= >
{cc 
divdd 
=dd 
idd 
[dd  
jdd  !
]dd! "
*dd# $
idd% &
[dd& '
jdd' (
]dd( )
+dd* +
idd, -
[dd- .
kdd. /
]dd/ 0
*dd1 2
idd3 4
[dd4 5
kdd5 6
]dd6 7
;dd7 8
ifee 
(ee 
divee 
==ee  "
$numee# $
)ee$ %
{ff 
agg 
[gg 
jgg 
]gg  
=gg! "
$numgg# $
;gg$ %
ahh 
[hh 
khh 
]hh  
=hh! "
$numhh# $
;hh$ %
}ii 
elsejj 
{kk 
gemll 
=ll  !
(ll" #
all# $
[ll$ %
jll% &
]ll& '
*ll( )
ill* +
[ll+ ,
jll, -
]ll- .
+ll/ 0
all1 2
[ll2 3
kll3 4
]ll4 5
*ll6 7
ill8 9
[ll9 :
kll: ;
]ll; <
)ll< =
/ll> ?
divll@ C
;llC D
amm 
[mm 
kmm 
]mm  
=mm! "
(mm# $
amm$ %
[mm% &
kmm& '
]mm' (
*mm) *
imm+ ,
[mm, -
jmm- .
]mm. /
-mm0 1
amm2 3
[mm3 4
jmm4 5
]mm5 6
*mm7 8
imm9 :
[mm: ;
kmm; <
]mm< =
)mm= >
/mm? @
divmmA D
;mmD E
ann 
[nn 
jnn 
]nn  
=nn! "
gemnn# &
;nn& '
}oo 
}pp 
}qq 
elserr 
{ss 
foruu 
(uu 
juu 
=uu 
$numuu 
,uu 
kuu  !
=uu" #
$numuu$ %
;uu% &
juu' (
<uu) *
n2uu+ -
;uu- .
juu/ 0
+=uu1 3
$numuu4 5
,uu5 6
kuu7 8
+=uu9 ;
$numuu< =
)uu= >
{vv 
gemww 
=ww 
aww 
[ww  
jww  !
]ww! "
*ww# $
iww% &
[ww& '
jww' (
]ww( )
-ww* +
aww, -
[ww- .
kww. /
]ww/ 0
*ww1 2
iww3 4
[ww4 5
kww5 6
]ww6 7
;ww7 8
axx 
[xx 
kxx 
]xx 
=xx 
axx  
[xx  !
jxx! "
]xx" #
*xx$ %
ixx& '
[xx' (
kxx( )
]xx) *
+xx+ ,
axx- .
[xx. /
kxx/ 0
]xx0 1
*xx2 3
ixx4 5
[xx5 6
jxx6 7
]xx7 8
;xx8 9
ayy 
[yy 
jyy 
]yy 
=yy 
gemyy "
;yy" #
}zz 
}{{ 
cifft~~ 
(~~ 
n2~~ 
,~~ 
a~~ 
,~~ 
$num~~  
)~~  !
;~~! "
} 
}
 	
public
 
static
 
void
 
ConvolvePart
 '
(
' (
int
( +
n
, -
,
- .
int
/ 2
p
3 4
,
4 5
int
6 9
P
: ;
,
; <
Complex
= D
[
D E
]
E F
[
F G
]
G H
impulse
I P
,
P Q
Complex
R Y
[
Y Z
]
Z [
src
\ _
,
_ `
Complex
a h
[
h i
]
i j
[
j k
]
k l
accum
m r
,
r s
Complex
t {
[
{ |
]
| }
output~ 
, 
bool 
divide 
) 
{
 	
int
 
n2
 
=
 
n
 
<<
 
$num
 
;
 
fixed
 
(
 
Complex
 
*
 
csrc
  
=
! "
src
# &
,
& '
cout
( ,
=
- .
output
/ 5
)
5 6
{
 
double
 
*
 
dd
 
=
 
(
 
double
 $
*
$ %
)
% &
csrc
& *
;
* +
cfft
 
(
 
n2
 
,
 
dd
 
)
 
;
 
if
 
(
 
divide
 
)
 
{
 
for
 
(
 
int
 

impulToUse
 '
=
( )
$num
* +
;
+ ,

impulToUse
- 7
<
8 9
P
: ;
;
; <

impulToUse
= G
++
G I
)
I J
{
 
int
 

accumToUse
 &
=
' (
(
) *
p
* +
+
, -

impulToUse
. 8
)
8 9
%
: ;
P
< =
;
= >
bool
 

accumulate
 '
=
( )
(
* +

impulToUse
+ 5
+
6 7
$num
8 9
!=
: <
P
= >
)
> ?
;
? @
fixed
 
(
 
Complex
 &
*
& '
cimpulse
( 0
=
1 2
impulse
3 :
[
: ;

impulToUse
; E
]
E F
,
F G
caccum
H N
=
O P
accum
Q V
[
V W

accumToUse
W a
]
a b
)
b c
{
 
	carraydiv
 %
(
% &
n2
& (
,
( )

accumulate
* 4
,
4 5
(
6 7
double
7 =
*
= >
)
> ?
cimpulse
? G
,
G H
dd
I K
,
K L
(
M N
double
N T
*
T U
)
U V
caccum
V \
)
\ ]
;
] ^
}
 
}
 
}
 
else
 
{
 
for
 
(
 
int
 

impulToUse
 '
=
( )
$num
* +
;
+ ,

impulToUse
- 7
<
8 9
P
: ;
;
; <

impulToUse
= G
++
G I
)
I J
{
 
int
 

accumToUse
 &
=
' (
(
) *
p
* +
+
, -

impulToUse
. 8
)
8 9
%
: ;
P
< =
;
= >
bool
   

accumulate
   '
=
  ( )
(
  * +

impulToUse
  + 5
+
  6 7
$num
  8 9
!=
  : <
P
  = >
)
  > ?
;
  ? @
fixed
¢¢ 
(
¢¢ 
Complex
¢¢ &
*
¢¢& '
cimpulse
¢¢( 0
=
¢¢1 2
impulse
¢¢3 :
[
¢¢: ;

impulToUse
¢¢; E
]
¢¢E F
,
¢¢F G
caccum
¢¢H N
=
¢¢O P
accum
¢¢Q V
[
¢¢V W

accumToUse
¢¢W a
]
¢¢a b
)
¢¢b c
{
££ 
double
¤¤ "
*
¤¤" #
id
¤¤$ &
=
¤¤' (
(
¤¤) *
double
¤¤* 0
*
¤¤0 1
)
¤¤1 2
cimpulse
¤¤2 :
;
¤¤: ;
double
¥¥ "
*
¥¥" #
ad
¥¥$ &
=
¥¥' (
(
¥¥) *
double
¥¥* 0
*
¥¥0 1
)
¥¥1 2
caccum
¥¥2 8
;
¥¥8 9
if
¦¦ 
(
¦¦  

accumulate
¦¦  *
)
¦¦* +
{
§§ 
for
¨¨  #
(
¨¨$ %
int
¨¨% (
j
¨¨) *
=
¨¨+ ,
$num
¨¨- .
,
¨¨. /
k
¨¨0 1
=
¨¨2 3
$num
¨¨4 5
;
¨¨5 6
j
¨¨7 8
<
¨¨9 :
n2
¨¨; =
;
¨¨= >
j
¨¨? @
+=
¨¨A C
$num
¨¨D E
,
¨¨E F
k
¨¨G H
+=
¨¨I K
$num
¨¨L M
)
¨¨M N
{
©©  !
ad
ªª$ &
[
ªª& '
j
ªª' (
]
ªª( )
+=
ªª* ,
id
ªª- /
[
ªª/ 0
j
ªª0 1
]
ªª1 2
*
ªª3 4
dd
ªª5 7
[
ªª7 8
j
ªª8 9
]
ªª9 :
-
ªª; <
id
ªª= ?
[
ªª? @
k
ªª@ A
]
ªªA B
*
ªªC D
dd
ªªE G
[
ªªG H
k
ªªH I
]
ªªI J
;
ªªJ K
ad
««$ &
[
««& '
k
««' (
]
««( )
+=
««* ,
id
««- /
[
««/ 0
k
««0 1
]
««1 2
*
««3 4
dd
««5 7
[
««7 8
j
««8 9
]
««9 :
+
««; <
id
««= ?
[
««? @
j
««@ A
]
««A B
*
««C D
dd
««E G
[
««G H
k
««H I
]
««I J
;
««J K
}
¬¬  !
}
­­ 
else
®®  
{
¯¯ 
for
°°  #
(
°°$ %
int
°°% (
j
°°) *
=
°°+ ,
$num
°°- .
,
°°. /
k
°°0 1
=
°°2 3
$num
°°4 5
;
°°5 6
j
°°7 8
<
°°9 :
n2
°°; =
;
°°= >
j
°°? @
+=
°°A C
$num
°°D E
,
°°E F
k
°°G H
+=
°°I K
$num
°°L M
)
°°M N
{
±±  !
ad
²²$ &
[
²²& '
j
²²' (
]
²²( )
=
²²* +
id
²², .
[
²². /
j
²²/ 0
]
²²0 1
*
²²2 3
dd
²²4 6
[
²²6 7
j
²²7 8
]
²²8 9
-
²²: ;
id
²²< >
[
²²> ?
k
²²? @
]
²²@ A
*
²²B C
dd
²²D F
[
²²F G
k
²²G H
]
²²H I
;
²²I J
ad
³³$ &
[
³³& '
k
³³' (
]
³³( )
=
³³* +
id
³³, .
[
³³. /
k
³³/ 0
]
³³0 1
*
³³2 3
dd
³³4 6
[
³³6 7
j
³³7 8
]
³³8 9
+
³³: ;
id
³³< >
[
³³> ?
j
³³? @
]
³³@ A
*
³³B C
dd
³³D F
[
³³F G
k
³³G H
]
³³H I
;
³³I J
}
´´  !
}
µµ 
}
¶¶ 
}
·· 
}
¸¸ 
Array
»» 
.
»» 
Copy
»» 
(
»» 
accum
»»  
[
»»  !
p
»»! "
]
»»" #
,
»»# $
output
»»% +
,
»»+ ,
n
»»- .
)
»». /
;
»»/ 0
cifft
¼¼ 
(
¼¼ 
n2
¼¼ 
,
¼¼ 
(
¼¼ 
double
¼¼ !
*
¼¼! "
)
¼¼" #
cout
¼¼# '
,
¼¼' (
$num
¼¼) ,
)
¼¼, -
;
¼¼- .
}
½½ 
}
¾¾ 	
static
ÁÁ 
void
ÁÁ 
cfft
ÁÁ 
(
ÁÁ 
int
ÁÁ 
n
ÁÁ 
,
ÁÁ 
double
ÁÁ  &
*
ÁÁ& '
a
ÁÁ( )
)
ÁÁ) *
{
ÂÂ 	
cdft
ÃÃ 
(
ÃÃ 
n
ÃÃ 
,
ÃÃ 
$num
ÃÃ 
,
ÃÃ 
a
ÃÃ 
)
ÃÃ 
;
ÃÃ 
}
ÄÄ 	
static
ÆÆ 
void
ÆÆ 
cifft
ÆÆ 
(
ÆÆ 
int
ÆÆ 
n
ÆÆ 
,
ÆÆ  
double
ÆÆ! '
*
ÆÆ' (
a
ÆÆ) *
,
ÆÆ* +
double
ÆÆ, 2
gain
ÆÆ3 7
)
ÆÆ7 8
{
ÇÇ 	
double
ÈÈ 
inv
ÈÈ 
=
ÈÈ 
gain
ÈÈ 
/
ÈÈ 
(
ÈÈ  !
n
ÈÈ! "
>>
ÈÈ" $
$num
ÈÈ$ %
)
ÈÈ% &
;
ÈÈ& '
cdft
ÉÉ 
(
ÉÉ 
n
ÉÉ 
,
ÉÉ 
-
ÉÉ 
$num
ÉÉ 
,
ÉÉ 
a
ÉÉ 
)
ÉÉ 
;
ÉÉ 
for
ÊÊ 
(
ÊÊ 
int
ÊÊ 
j
ÊÊ 
=
ÊÊ 
$num
ÊÊ 
;
ÊÊ 
j
ÊÊ 
<
ÊÊ 
n
ÊÊ  !
;
ÊÊ! "
j
ÊÊ# $
++
ÊÊ$ &
)
ÊÊ& '
{
ËË 
a
ÌÌ 
[
ÌÌ 
j
ÌÌ 
]
ÌÌ 
*=
ÌÌ 
inv
ÌÌ 
;
ÌÌ 
}
ÍÍ 
}
ÎÎ 	
static
ÐÐ 
void
ÐÐ 
	carraydiv
ÐÐ 
(
ÐÐ 
int
ÐÐ !
n
ÐÐ" #
,
ÐÐ# $
bool
ÐÐ% )

accumulate
ÐÐ* 4
,
ÐÐ4 5
double
ÐÐ6 <
*
ÐÐ< =
a
ÐÐ> ?
,
ÐÐ? @
double
ÐÐA G
*
ÐÐG H
b
ÐÐI J
,
ÐÐJ K
double
ÐÐL R
*
ÐÐR S
o
ÐÐT U
)
ÐÐU V
{
ÑÑ 	
double
ÒÒ 
re
ÒÒ 
,
ÒÒ 
im
ÒÒ 
,
ÒÒ 
div
ÒÒ 
;
ÒÒ 
for
ÙÙ 
(
ÙÙ 
int
ÙÙ 
j
ÙÙ 
=
ÙÙ 
$num
ÙÙ 
;
ÙÙ 
j
ÙÙ 
<
ÙÙ 
n
ÙÙ  !
;
ÙÙ! "
j
ÙÙ# $
+=
ÙÙ% '
$num
ÙÙ( )
)
ÙÙ) *
{
ÚÚ 
div
ÛÛ 
=
ÛÛ 
b
ÛÛ 
[
ÛÛ 
j
ÛÛ 
]
ÛÛ 
*
ÛÛ 
b
ÛÛ 
[
ÛÛ 
j
ÛÛ  
]
ÛÛ  !
+
ÛÛ" #
b
ÛÛ$ %
[
ÛÛ% &
j
ÛÛ& '
+
ÛÛ( )
$num
ÛÛ* +
]
ÛÛ+ ,
*
ÛÛ- .
b
ÛÛ/ 0
[
ÛÛ0 1
j
ÛÛ1 2
+
ÛÛ3 4
$num
ÛÛ5 6
]
ÛÛ6 7
;
ÛÛ7 8
if
ÜÜ 
(
ÜÜ 
div
ÜÜ 
==
ÜÜ 
$num
ÜÜ 
)
ÜÜ 
{
ÝÝ 
if
ÞÞ 
(
ÞÞ 
!
ÞÞ 

accumulate
ÞÞ #
)
ÞÞ# $
{
ßß 
o
àà 
[
àà 
j
àà 
]
àà 
=
àà 
$num
àà  
;
àà  !
o
áá 
[
áá 
j
áá 
+
áá 
$num
áá 
]
áá  
=
áá! "
$num
áá# $
;
áá$ %
}
ââ 
}
ãã 
else
ää 
{
åå 
re
ææ 
=
ææ 
a
ææ 
[
ææ 
j
ææ 
]
ææ 
*
ææ 
b
ææ  !
[
ææ! "
j
ææ" #
]
ææ# $
+
ææ% &
a
ææ' (
[
ææ( )
j
ææ) *
+
ææ+ ,
$num
ææ- .
]
ææ. /
*
ææ0 1
b
ææ2 3
[
ææ3 4
j
ææ4 5
+
ææ6 7
$num
ææ8 9
]
ææ9 :
;
ææ: ;
im
çç 
=
çç 
a
çç 
[
çç 
j
çç 
+
çç 
$num
çç  
]
çç  !
*
çç" #
b
çç$ %
[
çç% &
j
çç& '
]
çç' (
-
çç) *
a
çç+ ,
[
çç, -
j
çç- .
]
çç. /
*
çç0 1
b
çç2 3
[
çç3 4
j
çç4 5
+
çç6 7
$num
çç8 9
]
çç9 :
;
çç: ;
if
èè 
(
èè 

accumulate
èè "
)
èè" #
{
éé 
o
êê 
[
êê 
j
êê 
]
êê 
+=
êê 
re
êê  "
/
êê# $
div
êê% (
;
êê( )
o
ëë 
[
ëë 
j
ëë 
+
ëë 
$num
ëë 
]
ëë  
+=
ëë! #
im
ëë$ &
/
ëë' (
div
ëë) ,
;
ëë, -
}
ìì 
else
íí 
{
îî 
o
ïï 
[
ïï 
j
ïï 
]
ïï 
=
ïï 
re
ïï !
/
ïï" #
div
ïï$ '
;
ïï' (
o
ðð 
[
ðð 
j
ðð 
+
ðð 
$num
ðð 
]
ðð  
=
ðð! "
im
ðð# %
/
ðð& '
div
ðð( +
;
ðð+ ,
}
ññ 
}
òò 
}
óó 
}
ôô 	
static
ùù 
void
ùù 
cdft
ùù 
(
ùù 
int
ùù 
n
ùù 
,
ùù 
int
ùù  #
isgn
ùù$ (
,
ùù( )
double
ùù* 0
*
ùù0 1
a
ùù2 3
)
ùù3 4
{
úú 	
if
ûû 
(
ûû 
isgn
ûû 
>=
ûû 
$num
ûû 
)
ûû 
{
üü 
cftfsub
ýý 
(
ýý 
n
ýý 
,
ýý 
a
ýý 
)
ýý 
;
ýý 
}
þþ 
else
ÿÿ 
{
 
cftbsub
 
(
 
n
 
,
 
a
 
)
 
;
 
}
 
}
 	
static
 
void
 
cftfsub
 
(
 
int
 
n
  !
,
! "
double
# )
*
) *
a
+ ,
)
, -
{
 	
if
 
(
 
n
 
>
 
$num
 
)
 
{
 
if
 
(
 
n
 
>
 
$num
 
)
 
{
 
cftmdl1
 
(
 
n
 
,
 
a
  
)
  !
;
! "
if
 
(
 
n
 
>
 "
CDFT_THREADS_BEGIN_N
 0
)
0 1
{
 

cftrec4_th
 "
(
" #
n
# $
,
$ %
a
& '
)
' (
;
( )
}
 
else
 
if
 
(
 
n
 
>
  
$num
! $
)
$ %
{
 
cftrec4
 
(
  
n
  !
,
! "
a
# $
)
$ %
;
% &
}
 
else
 
if
 
(
 
n
 
>
  
$num
! $
)
$ %
{
 
cftleaf
 
(
  
n
  !
,
! "
$num
# $
,
$ %
a
& '
)
' (
;
( )
}
 
else
 
{
 
cftfx41
 
(
  
n
  !
,
! "
a
# $
)
$ %
;
% &
}
 
bitrv2
 
(
 
n
 
,
 
a
 
)
  
;
  !
}
 
else
 
if
 
(
 
n
 
==
 
$num
  
)
  !
{
 
cftf161
 
(
 
a
 
)
 
;
 
bitrv216
 
(
 
a
 
)
 
;
  
}
   
else
¡¡ 
{
¢¢ 
cftf081
££ 
(
££ 
a
££ 
)
££ 
;
££ 
bitrv208
¤¤ 
(
¤¤ 
a
¤¤ 
)
¤¤ 
;
¤¤  
}
¥¥ 
}
¦¦ 
else
§§ 
if
§§ 
(
§§ 
n
§§ 
==
§§ 
$num
§§ 
)
§§ 
{
¨¨ 
cftf040
©© 
(
©© 
a
©© 
)
©© 
;
©© 
}
ªª 
else
«« 
if
«« 
(
«« 
n
«« 
==
«« 
$num
«« 
)
«« 
{
¬¬ 
cftx020
­­ 
(
­­ 
a
­­ 
)
­­ 
;
­­ 
}
®® 
}
¯¯ 	
static
²² 
void
²² 
cftbsub
²² 
(
²² 
int
²² 
n
²²  !
,
²²! "
double
²²# )
*
²²) *
a
²²+ ,
)
²², -
{
³³ 	
if
´´ 
(
´´ 
n
´´ 
>
´´ 
$num
´´ 
)
´´ 
{
µµ 
if
¶¶ 
(
¶¶ 
n
¶¶ 
>
¶¶ 
$num
¶¶ 
)
¶¶ 
{
·· 
cftb1st
¸¸ 
(
¸¸ 
n
¸¸ 
,
¸¸ 
a
¸¸  
)
¸¸  !
;
¸¸! "
if
¹¹ 
(
¹¹ 
n
¹¹ 
>
¹¹ "
CDFT_THREADS_BEGIN_N
¹¹ 0
)
¹¹0 1
{
ºº 

cftrec4_th
»» "
(
»»" #
n
»»# $
,
»»$ %
a
»»& '
)
»»' (
;
»»( )
}
¼¼ 
else
½½ 
if
½½ 
(
½½ 
n
½½ 
>
½½  
$num
½½! $
)
½½$ %
{
¾¾ 
cftrec4
¿¿ 
(
¿¿  
n
¿¿  !
,
¿¿! "
a
¿¿# $
)
¿¿$ %
;
¿¿% &
}
ÀÀ 
else
ÁÁ 
if
ÁÁ 
(
ÁÁ 
n
ÁÁ 
>
ÁÁ  
$num
ÁÁ! $
)
ÁÁ$ %
{
ÂÂ 
cftleaf
ÃÃ 
(
ÃÃ  
n
ÃÃ  !
,
ÃÃ! "
$num
ÃÃ# $
,
ÃÃ$ %
a
ÃÃ& '
)
ÃÃ' (
;
ÃÃ( )
}
ÄÄ 
else
ÅÅ 
{
ÆÆ 
cftfx41
ÇÇ 
(
ÇÇ  
n
ÇÇ  !
,
ÇÇ! "
a
ÇÇ# $
)
ÇÇ$ %
;
ÇÇ% &
}
ÈÈ 

bitrv2conj
ÉÉ 
(
ÉÉ 
n
ÉÉ  
,
ÉÉ  !
a
ÉÉ" #
)
ÉÉ# $
;
ÉÉ$ %
}
ÊÊ 
else
ËË 
if
ËË 
(
ËË 
n
ËË 
==
ËË 
$num
ËË  
)
ËË  !
{
ÌÌ 
cftf161
ÍÍ 
(
ÍÍ 
a
ÍÍ 
)
ÍÍ 
;
ÍÍ 
bitrv216neg
ÎÎ 
(
ÎÎ  
a
ÎÎ  !
)
ÎÎ! "
;
ÎÎ" #
}
ÏÏ 
else
ÐÐ 
{
ÑÑ 
cftf081
ÒÒ 
(
ÒÒ 
a
ÒÒ 
)
ÒÒ 
;
ÒÒ 
bitrv208neg
ÓÓ 
(
ÓÓ  
a
ÓÓ  !
)
ÓÓ! "
;
ÓÓ" #
}
ÔÔ 
}
ÕÕ 
else
ÖÖ 
if
ÖÖ 
(
ÖÖ 
n
ÖÖ 
==
ÖÖ 
$num
ÖÖ 
)
ÖÖ 
{
×× 
cftb040
ØØ 
(
ØØ 
a
ØØ 
)
ØØ 
;
ØØ 
}
ÙÙ 
else
ÚÚ 
if
ÚÚ 
(
ÚÚ 
n
ÚÚ 
==
ÚÚ 
$num
ÚÚ 
)
ÚÚ 
{
ÛÛ 
cftx020
ÜÜ 
(
ÜÜ 
a
ÜÜ 
)
ÜÜ 
;
ÜÜ 
}
ÝÝ 
}
ÞÞ 	
static
áá 
void
áá 
bitrv2
áá 
(
áá 
int
áá 
n
áá  
,
áá  !
double
áá" (
*
áá( )
a
áá* +
)
áá+ ,
{
ââ 	
int
ãã 
j0
ãã 
,
ãã 
k0
ãã 
,
ãã 
j1
ãã 
,
ãã 
k1
ãã 
,
ãã 
l
ãã  !
,
ãã! "
m
ãã# $
,
ãã$ %
i
ãã& '
,
ãã' (
j
ãã) *
,
ãã* +
k
ãã, -
,
ãã- .
nh
ãã/ 1
;
ãã1 2
double
ää 
xr
ää 
,
ää 
xi
ää 
,
ää 
yr
ää 
,
ää 
yi
ää !
;
ää! "
m
ææ 
=
ææ 
$num
ææ 
;
ææ 
for
çç 
(
çç 
l
çç 
=
çç 
n
çç 
>>
çç 
$num
çç 
;
çç 
l
çç 
>
çç  
$num
çç! "
;
çç" #
l
çç$ %
>>=
çç& )
$num
çç* +
)
çç+ ,
{
èè 
m
éé 
<<=
éé 
$num
éé 
;
éé 
}
êê 
nh
ëë 
=
ëë 
n
ëë 
>>
ëë 
$num
ëë 
;
ëë 
if
ìì 
(
ìì 
l
ìì 
==
ìì 
$num
ìì 
)
ìì 
{
íí 
j0
îî 
=
îî 
$num
îî 
;
îî 
for
ïï 
(
ïï 
k0
ïï 
=
ïï 
$num
ïï 
;
ïï 
k0
ïï 
<
ïï  !
m
ïï" #
;
ïï# $
k0
ïï% '
+=
ïï( *
$num
ïï+ ,
)
ïï, -
{
ðð 
k
ññ 
=
ññ 
k0
ññ 
;
ññ 
for
òò 
(
òò 
j
òò 
=
òò 
j0
òò 
;
òò  
j
òò! "
<
òò# $
j0
òò% '
+
òò( )
k0
òò* ,
;
òò, -
j
òò. /
+=
òò0 2
$num
òò3 4
)
òò4 5
{
óó 
xr
ôô 
=
ôô 
a
ôô 
[
ôô 
j
ôô  
]
ôô  !
;
ôô! "
xi
õõ 
=
õõ 
a
õõ 
[
õõ 
j
õõ  
+
õõ! "
$num
õõ# $
]
õõ$ %
;
õõ% &
yr
öö 
=
öö 
a
öö 
[
öö 
k
öö  
]
öö  !
;
öö! "
yi
÷÷ 
=
÷÷ 
a
÷÷ 
[
÷÷ 
k
÷÷  
+
÷÷! "
$num
÷÷# $
]
÷÷$ %
;
÷÷% &
a
øø 
[
øø 
j
øø 
]
øø 
=
øø 
yr
øø !
;
øø! "
a
ùù 
[
ùù 
j
ùù 
+
ùù 
$num
ùù 
]
ùù  
=
ùù! "
yi
ùù# %
;
ùù% &
a
úú 
[
úú 
k
úú 
]
úú 
=
úú 
xr
úú !
;
úú! "
a
ûû 
[
ûû 
k
ûû 
+
ûû 
$num
ûû 
]
ûû  
=
ûû! "
xi
ûû# %
;
ûû% &
j1
üü 
=
üü 
j
üü 
+
üü  
m
üü! "
;
üü" #
k1
ýý 
=
ýý 
k
ýý 
+
ýý  
$num
ýý! "
*
ýý# $
m
ýý% &
;
ýý& '
xr
þþ 
=
þþ 
a
þþ 
[
þþ 
j1
þþ !
]
þþ! "
;
þþ" #
xi
ÿÿ 
=
ÿÿ 
a
ÿÿ 
[
ÿÿ 
j1
ÿÿ !
+
ÿÿ" #
$num
ÿÿ$ %
]
ÿÿ% &
;
ÿÿ& '
yr
 
=
 
a
 
[
 
k1
 !
]
! "
;
" #
yi
 
=
 
a
 
[
 
k1
 !
+
" #
$num
$ %
]
% &
;
& '
a
 
[
 
j1
 
]
 
=
 
yr
  "
;
" #
a
 
[
 
j1
 
+
 
$num
  
]
  !
=
" #
yi
$ &
;
& '
a
 
[
 
k1
 
]
 
=
 
xr
  "
;
" #
a
 
[
 
k1
 
+
 
$num
  
]
  !
=
" #
xi
$ &
;
& '
j1
 
+=
 
m
 
;
  
k1
 
-=
 
m
 
;
  
xr
 
=
 
a
 
[
 
j1
 !
]
! "
;
" #
xi
 
=
 
a
 
[
 
j1
 !
+
" #
$num
$ %
]
% &
;
& '
yr
 
=
 
a
 
[
 
k1
 !
]
! "
;
" #
yi
 
=
 
a
 
[
 
k1
 !
+
" #
$num
$ %
]
% &
;
& '
a
 
[
 
j1
 
]
 
=
 
yr
  "
;
" #
a
 
[
 
j1
 
+
 
$num
  
]
  !
=
" #
yi
$ &
;
& '
a
 
[
 
k1
 
]
 
=
 
xr
  "
;
" #
a
 
[
 
k1
 
+
 
$num
  
]
  !
=
" #
xi
$ &
;
& '
j1
 
+=
 
m
 
;
  
k1
 
+=
 
$num
 
*
  !
m
" #
;
# $
xr
 
=
 
a
 
[
 
j1
 !
]
! "
;
" #
xi
 
=
 
a
 
[
 
j1
 !
+
" #
$num
$ %
]
% &
;
& '
yr
 
=
 
a
 
[
 
k1
 !
]
! "
;
" #
yi
 
=
 
a
 
[
 
k1
 !
+
" #
$num
$ %
]
% &
;
& '
a
 
[
 
j1
 
]
 
=
 
yr
  "
;
" #
a
 
[
 
j1
 
+
 
$num
  
]
  !
=
" #
yi
$ &
;
& '
a
 
[
 
k1
 
]
 
=
 
xr
  "
;
" #
a
 
[
 
k1
 
+
 
$num
  
]
  !
=
" #
xi
$ &
;
& '
j1
 
+=
 
nh
  
;
  !
k1
 
+=
 
$num
 
;
  
xr
 
=
 
a
 
[
 
j1
 !
]
! "
;
" #
xi
 
=
 
a
 
[
 
j1
 !
+
" #
$num
$ %
]
% &
;
& '
yr
 
=
 
a
 
[
 
k1
 !
]
! "
;
" #
yi
 
=
 
a
 
[
 
k1
 !
+
" #
$num
$ %
]
% &
;
& '
a
   
[
   
j1
   
]
   
=
   
yr
    "
;
  " #
a
¡¡ 
[
¡¡ 
j1
¡¡ 
+
¡¡ 
$num
¡¡  
]
¡¡  !
=
¡¡" #
yi
¡¡$ &
;
¡¡& '
a
¢¢ 
[
¢¢ 
k1
¢¢ 
]
¢¢ 
=
¢¢ 
xr
¢¢  "
;
¢¢" #
a
££ 
[
££ 
k1
££ 
+
££ 
$num
££  
]
££  !
=
££" #
xi
££$ &
;
££& '
j1
¤¤ 
-=
¤¤ 
m
¤¤ 
;
¤¤  
k1
¥¥ 
-=
¥¥ 
$num
¥¥ 
*
¥¥  !
m
¥¥" #
;
¥¥# $
xr
¦¦ 
=
¦¦ 
a
¦¦ 
[
¦¦ 
j1
¦¦ !
]
¦¦! "
;
¦¦" #
xi
§§ 
=
§§ 
a
§§ 
[
§§ 
j1
§§ !
+
§§" #
$num
§§$ %
]
§§% &
;
§§& '
yr
¨¨ 
=
¨¨ 
a
¨¨ 
[
¨¨ 
k1
¨¨ !
]
¨¨! "
;
¨¨" #
yi
©© 
=
©© 
a
©© 
[
©© 
k1
©© !
+
©©" #
$num
©©$ %
]
©©% &
;
©©& '
a
ªª 
[
ªª 
j1
ªª 
]
ªª 
=
ªª 
yr
ªª  "
;
ªª" #
a
«« 
[
«« 
j1
«« 
+
«« 
$num
««  
]
««  !
=
««" #
yi
««$ &
;
««& '
a
¬¬ 
[
¬¬ 
k1
¬¬ 
]
¬¬ 
=
¬¬ 
xr
¬¬  "
;
¬¬" #
a
­­ 
[
­­ 
k1
­­ 
+
­­ 
$num
­­  
]
­­  !
=
­­" #
xi
­­$ &
;
­­& '
j1
®® 
-=
®® 
m
®® 
;
®®  
k1
¯¯ 
+=
¯¯ 
m
¯¯ 
;
¯¯  
xr
°° 
=
°° 
a
°° 
[
°° 
j1
°° !
]
°°! "
;
°°" #
xi
±± 
=
±± 
a
±± 
[
±± 
j1
±± !
+
±±" #
$num
±±$ %
]
±±% &
;
±±& '
yr
²² 
=
²² 
a
²² 
[
²² 
k1
²² !
]
²²! "
;
²²" #
yi
³³ 
=
³³ 
a
³³ 
[
³³ 
k1
³³ !
+
³³" #
$num
³³$ %
]
³³% &
;
³³& '
a
´´ 
[
´´ 
j1
´´ 
]
´´ 
=
´´ 
yr
´´  "
;
´´" #
a
µµ 
[
µµ 
j1
µµ 
+
µµ 
$num
µµ  
]
µµ  !
=
µµ" #
yi
µµ$ &
;
µµ& '
a
¶¶ 
[
¶¶ 
k1
¶¶ 
]
¶¶ 
=
¶¶ 
xr
¶¶  "
;
¶¶" #
a
·· 
[
·· 
k1
·· 
+
·· 
$num
··  
]
··  !
=
··" #
xi
··$ &
;
··& '
j1
¸¸ 
-=
¸¸ 
m
¸¸ 
;
¸¸  
k1
¹¹ 
-=
¹¹ 
$num
¹¹ 
*
¹¹  !
m
¹¹" #
;
¹¹# $
xr
ºº 
=
ºº 
a
ºº 
[
ºº 
j1
ºº !
]
ºº! "
;
ºº" #
xi
»» 
=
»» 
a
»» 
[
»» 
j1
»» !
+
»»" #
$num
»»$ %
]
»»% &
;
»»& '
yr
¼¼ 
=
¼¼ 
a
¼¼ 
[
¼¼ 
k1
¼¼ !
]
¼¼! "
;
¼¼" #
yi
½½ 
=
½½ 
a
½½ 
[
½½ 
k1
½½ !
+
½½" #
$num
½½$ %
]
½½% &
;
½½& '
a
¾¾ 
[
¾¾ 
j1
¾¾ 
]
¾¾ 
=
¾¾ 
yr
¾¾  "
;
¾¾" #
a
¿¿ 
[
¿¿ 
j1
¿¿ 
+
¿¿ 
$num
¿¿  
]
¿¿  !
=
¿¿" #
yi
¿¿$ &
;
¿¿& '
a
ÀÀ 
[
ÀÀ 
k1
ÀÀ 
]
ÀÀ 
=
ÀÀ 
xr
ÀÀ  "
;
ÀÀ" #
a
ÁÁ 
[
ÁÁ 
k1
ÁÁ 
+
ÁÁ 
$num
ÁÁ  
]
ÁÁ  !
=
ÁÁ" #
xi
ÁÁ$ &
;
ÁÁ& '
j1
ÂÂ 
+=
ÂÂ 
$num
ÂÂ 
;
ÂÂ  
k1
ÃÃ 
+=
ÃÃ 
nh
ÃÃ  
;
ÃÃ  !
xr
ÄÄ 
=
ÄÄ 
a
ÄÄ 
[
ÄÄ 
j1
ÄÄ !
]
ÄÄ! "
;
ÄÄ" #
xi
ÅÅ 
=
ÅÅ 
a
ÅÅ 
[
ÅÅ 
j1
ÅÅ !
+
ÅÅ" #
$num
ÅÅ$ %
]
ÅÅ% &
;
ÅÅ& '
yr
ÆÆ 
=
ÆÆ 
a
ÆÆ 
[
ÆÆ 
k1
ÆÆ !
]
ÆÆ! "
;
ÆÆ" #
yi
ÇÇ 
=
ÇÇ 
a
ÇÇ 
[
ÇÇ 
k1
ÇÇ !
+
ÇÇ" #
$num
ÇÇ$ %
]
ÇÇ% &
;
ÇÇ& '
a
ÈÈ 
[
ÈÈ 
j1
ÈÈ 
]
ÈÈ 
=
ÈÈ 
yr
ÈÈ  "
;
ÈÈ" #
a
ÉÉ 
[
ÉÉ 
j1
ÉÉ 
+
ÉÉ 
$num
ÉÉ  
]
ÉÉ  !
=
ÉÉ" #
yi
ÉÉ$ &
;
ÉÉ& '
a
ÊÊ 
[
ÊÊ 
k1
ÊÊ 
]
ÊÊ 
=
ÊÊ 
xr
ÊÊ  "
;
ÊÊ" #
a
ËË 
[
ËË 
k1
ËË 
+
ËË 
$num
ËË  
]
ËË  !
=
ËË" #
xi
ËË$ &
;
ËË& '
j1
ÌÌ 
+=
ÌÌ 
m
ÌÌ 
;
ÌÌ  
k1
ÍÍ 
+=
ÍÍ 
$num
ÍÍ 
*
ÍÍ  !
m
ÍÍ" #
;
ÍÍ# $
xr
ÎÎ 
=
ÎÎ 
a
ÎÎ 
[
ÎÎ 
j1
ÎÎ !
]
ÎÎ! "
;
ÎÎ" #
xi
ÏÏ 
=
ÏÏ 
a
ÏÏ 
[
ÏÏ 
j1
ÏÏ !
+
ÏÏ" #
$num
ÏÏ$ %
]
ÏÏ% &
;
ÏÏ& '
yr
ÐÐ 
=
ÐÐ 
a
ÐÐ 
[
ÐÐ 
k1
ÐÐ !
]
ÐÐ! "
;
ÐÐ" #
yi
ÑÑ 
=
ÑÑ 
a
ÑÑ 
[
ÑÑ 
k1
ÑÑ !
+
ÑÑ" #
$num
ÑÑ$ %
]
ÑÑ% &
;
ÑÑ& '
a
ÒÒ 
[
ÒÒ 
j1
ÒÒ 
]
ÒÒ 
=
ÒÒ 
yr
ÒÒ  "
;
ÒÒ" #
a
ÓÓ 
[
ÓÓ 
j1
ÓÓ 
+
ÓÓ 
$num
ÓÓ  
]
ÓÓ  !
=
ÓÓ" #
yi
ÓÓ$ &
;
ÓÓ& '
a
ÔÔ 
[
ÔÔ 
k1
ÔÔ 
]
ÔÔ 
=
ÔÔ 
xr
ÔÔ  "
;
ÔÔ" #
a
ÕÕ 
[
ÕÕ 
k1
ÕÕ 
+
ÕÕ 
$num
ÕÕ  
]
ÕÕ  !
=
ÕÕ" #
xi
ÕÕ$ &
;
ÕÕ& '
j1
ÖÖ 
+=
ÖÖ 
m
ÖÖ 
;
ÖÖ  
k1
×× 
-=
×× 
m
×× 
;
××  
xr
ØØ 
=
ØØ 
a
ØØ 
[
ØØ 
j1
ØØ !
]
ØØ! "
;
ØØ" #
xi
ÙÙ 
=
ÙÙ 
a
ÙÙ 
[
ÙÙ 
j1
ÙÙ !
+
ÙÙ" #
$num
ÙÙ$ %
]
ÙÙ% &
;
ÙÙ& '
yr
ÚÚ 
=
ÚÚ 
a
ÚÚ 
[
ÚÚ 
k1
ÚÚ !
]
ÚÚ! "
;
ÚÚ" #
yi
ÛÛ 
=
ÛÛ 
a
ÛÛ 
[
ÛÛ 
k1
ÛÛ !
+
ÛÛ" #
$num
ÛÛ$ %
]
ÛÛ% &
;
ÛÛ& '
a
ÜÜ 
[
ÜÜ 
j1
ÜÜ 
]
ÜÜ 
=
ÜÜ 
yr
ÜÜ  "
;
ÜÜ" #
a
ÝÝ 
[
ÝÝ 
j1
ÝÝ 
+
ÝÝ 
$num
ÝÝ  
]
ÝÝ  !
=
ÝÝ" #
yi
ÝÝ$ &
;
ÝÝ& '
a
ÞÞ 
[
ÞÞ 
k1
ÞÞ 
]
ÞÞ 
=
ÞÞ 
xr
ÞÞ  "
;
ÞÞ" #
a
ßß 
[
ßß 
k1
ßß 
+
ßß 
$num
ßß  
]
ßß  !
=
ßß" #
xi
ßß$ &
;
ßß& '
j1
àà 
+=
àà 
m
àà 
;
àà  
k1
áá 
+=
áá 
$num
áá 
*
áá  !
m
áá" #
;
áá# $
xr
ââ 
=
ââ 
a
ââ 
[
ââ 
j1
ââ !
]
ââ! "
;
ââ" #
xi
ãã 
=
ãã 
a
ãã 
[
ãã 
j1
ãã !
+
ãã" #
$num
ãã$ %
]
ãã% &
;
ãã& '
yr
ää 
=
ää 
a
ää 
[
ää 
k1
ää !
]
ää! "
;
ää" #
yi
åå 
=
åå 
a
åå 
[
åå 
k1
åå !
+
åå" #
$num
åå$ %
]
åå% &
;
åå& '
a
ææ 
[
ææ 
j1
ææ 
]
ææ 
=
ææ 
yr
ææ  "
;
ææ" #
a
çç 
[
çç 
j1
çç 
+
çç 
$num
çç  
]
çç  !
=
çç" #
yi
çç$ &
;
çç& '
a
èè 
[
èè 
k1
èè 
]
èè 
=
èè 
xr
èè  "
;
èè" #
a
éé 
[
éé 
k1
éé 
+
éé 
$num
éé  
]
éé  !
=
éé" #
xi
éé$ &
;
éé& '
j1
êê 
-=
êê 
nh
êê  
;
êê  !
k1
ëë 
-=
ëë 
$num
ëë 
;
ëë  
xr
ìì 
=
ìì 
a
ìì 
[
ìì 
j1
ìì !
]
ìì! "
;
ìì" #
xi
íí 
=
íí 
a
íí 
[
íí 
j1
íí !
+
íí" #
$num
íí$ %
]
íí% &
;
íí& '
yr
îî 
=
îî 
a
îî 
[
îî 
k1
îî !
]
îî! "
;
îî" #
yi
ïï 
=
ïï 
a
ïï 
[
ïï 
k1
ïï !
+
ïï" #
$num
ïï$ %
]
ïï% &
;
ïï& '
a
ðð 
[
ðð 
j1
ðð 
]
ðð 
=
ðð 
yr
ðð  "
;
ðð" #
a
ññ 
[
ññ 
j1
ññ 
+
ññ 
$num
ññ  
]
ññ  !
=
ññ" #
yi
ññ$ &
;
ññ& '
a
òò 
[
òò 
k1
òò 
]
òò 
=
òò 
xr
òò  "
;
òò" #
a
óó 
[
óó 
k1
óó 
+
óó 
$num
óó  
]
óó  !
=
óó" #
xi
óó$ &
;
óó& '
j1
ôô 
-=
ôô 
m
ôô 
;
ôô  
k1
õõ 
-=
õõ 
$num
õõ 
*
õõ  !
m
õõ" #
;
õõ# $
xr
öö 
=
öö 
a
öö 
[
öö 
j1
öö !
]
öö! "
;
öö" #
xi
÷÷ 
=
÷÷ 
a
÷÷ 
[
÷÷ 
j1
÷÷ !
+
÷÷" #
$num
÷÷$ %
]
÷÷% &
;
÷÷& '
yr
øø 
=
øø 
a
øø 
[
øø 
k1
øø !
]
øø! "
;
øø" #
yi
ùù 
=
ùù 
a
ùù 
[
ùù 
k1
ùù !
+
ùù" #
$num
ùù$ %
]
ùù% &
;
ùù& '
a
úú 
[
úú 
j1
úú 
]
úú 
=
úú 
yr
úú  "
;
úú" #
a
ûû 
[
ûû 
j1
ûû 
+
ûû 
$num
ûû  
]
ûû  !
=
ûû" #
yi
ûû$ &
;
ûû& '
a
üü 
[
üü 
k1
üü 
]
üü 
=
üü 
xr
üü  "
;
üü" #
a
ýý 
[
ýý 
k1
ýý 
+
ýý 
$num
ýý  
]
ýý  !
=
ýý" #
xi
ýý$ &
;
ýý& '
j1
þþ 
-=
þþ 
m
þþ 
;
þþ  
k1
ÿÿ 
+=
ÿÿ 
m
ÿÿ 
;
ÿÿ  
xr
 
=
 
a
 
[
 
j1
 !
]
! "
;
" #
xi
 
=
 
a
 
[
 
j1
 !
+
" #
$num
$ %
]
% &
;
& '
yr
 
=
 
a
 
[
 
k1
 !
]
! "
;
" #
yi
 
=
 
a
 
[
 
k1
 !
+
" #
$num
$ %
]
% &
;
& '
a
 
[
 
j1
 
]
 
=
 
yr
  "
;
" #
a
 
[
 
j1
 
+
 
$num
  
]
  !
=
" #
yi
$ &
;
& '
a
 
[
 
k1
 
]
 
=
 
xr
  "
;
" #
a
 
[
 
k1
 
+
 
$num
  
]
  !
=
" #
xi
$ &
;
& '
j1
 
-=
 
m
 
;
  
k1
 
-=
 
$num
 
*
  !
m
" #
;
# $
xr
 
=
 
a
 
[
 
j1
 !
]
! "
;
" #
xi
 
=
 
a
 
[
 
j1
 !
+
" #
$num
$ %
]
% &
;
& '
yr
 
=
 
a
 
[
 
k1
 !
]
! "
;
" #
yi
 
=
 
a
 
[
 
k1
 !
+
" #
$num
$ %
]
% &
;
& '
a
 
[
 
j1
 
]
 
=
 
yr
  "
;
" #
a
 
[
 
j1
 
+
 
$num
  
]
  !
=
" #
yi
$ &
;
& '
a
 
[
 
k1
 
]
 
=
 
xr
  "
;
" #
a
 
[
 
k1
 
+
 
$num
  
]
  !
=
" #
xi
$ &
;
& '
for
 
(
 
i
 
=
  
nh
! #
>>
$ &
$num
' (
;
( )
i
* +
>
, -
(
. /
k
/ 0
^=
1 3
i
4 5
)
5 6
;
6 7
i
8 9
>>=
: =
$num
> ?
)
? @
;
A B
}
 
k1
 
=
 
j0
 
+
 
k0
  
;
  !
j1
 
=
 
k1
 
+
 
$num
 
;
  
k1
 
+=
 
nh
 
;
 
xr
 
=
 
a
 
[
 
j1
 
]
 
;
 
xi
 
=
 
a
 
[
 
j1
 
+
 
$num
  !
]
! "
;
" #
yr
 
=
 
a
 
[
 
k1
 
]
 
;
 
yi
 
=
 
a
 
[
 
k1
 
+
 
$num
  !
]
! "
;
" #
a
 
[
 
j1
 
]
 
=
 
yr
 
;
 
a
 
[
 
j1
 
+
 
$num
 
]
 
=
 
yi
  "
;
" #
a
 
[
 
k1
 
]
 
=
 
xr
 
;
 
a
 
[
 
k1
 
+
 
$num
 
]
 
=
 
xi
  "
;
" #
j1
 
+=
 
m
 
;
 
k1
   
+=
   
$num
   
*
   
m
   
;
    
xr
¡¡ 
=
¡¡ 
a
¡¡ 
[
¡¡ 
j1
¡¡ 
]
¡¡ 
;
¡¡ 
xi
¢¢ 
=
¢¢ 
a
¢¢ 
[
¢¢ 
j1
¢¢ 
+
¢¢ 
$num
¢¢  !
]
¢¢! "
;
¢¢" #
yr
££ 
=
££ 
a
££ 
[
££ 
k1
££ 
]
££ 
;
££ 
yi
¤¤ 
=
¤¤ 
a
¤¤ 
[
¤¤ 
k1
¤¤ 
+
¤¤ 
$num
¤¤  !
]
¤¤! "
;
¤¤" #
a
¥¥ 
[
¥¥ 
j1
¥¥ 
]
¥¥ 
=
¥¥ 
yr
¥¥ 
;
¥¥ 
a
¦¦ 
[
¦¦ 
j1
¦¦ 
+
¦¦ 
$num
¦¦ 
]
¦¦ 
=
¦¦ 
yi
¦¦  "
;
¦¦" #
a
§§ 
[
§§ 
k1
§§ 
]
§§ 
=
§§ 
xr
§§ 
;
§§ 
a
¨¨ 
[
¨¨ 
k1
¨¨ 
+
¨¨ 
$num
¨¨ 
]
¨¨ 
=
¨¨ 
xi
¨¨  "
;
¨¨" #
j1
©© 
+=
©© 
m
©© 
;
©© 
k1
ªª 
-=
ªª 
m
ªª 
;
ªª 
xr
«« 
=
«« 
a
«« 
[
«« 
j1
«« 
]
«« 
;
«« 
xi
¬¬ 
=
¬¬ 
a
¬¬ 
[
¬¬ 
j1
¬¬ 
+
¬¬ 
$num
¬¬  !
]
¬¬! "
;
¬¬" #
yr
­­ 
=
­­ 
a
­­ 
[
­­ 
k1
­­ 
]
­­ 
;
­­ 
yi
®® 
=
®® 
a
®® 
[
®® 
k1
®® 
+
®® 
$num
®®  !
]
®®! "
;
®®" #
a
¯¯ 
[
¯¯ 
j1
¯¯ 
]
¯¯ 
=
¯¯ 
yr
¯¯ 
;
¯¯ 
a
°° 
[
°° 
j1
°° 
+
°° 
$num
°° 
]
°° 
=
°° 
yi
°°  "
;
°°" #
a
±± 
[
±± 
k1
±± 
]
±± 
=
±± 
xr
±± 
;
±± 
a
²² 
[
²² 
k1
²² 
+
²² 
$num
²² 
]
²² 
=
²² 
xi
²²  "
;
²²" #
j1
³³ 
-=
³³ 
$num
³³ 
;
³³ 
k1
´´ 
-=
´´ 
nh
´´ 
;
´´ 
xr
µµ 
=
µµ 
a
µµ 
[
µµ 
j1
µµ 
]
µµ 
;
µµ 
xi
¶¶ 
=
¶¶ 
a
¶¶ 
[
¶¶ 
j1
¶¶ 
+
¶¶ 
$num
¶¶  !
]
¶¶! "
;
¶¶" #
yr
·· 
=
·· 
a
·· 
[
·· 
k1
·· 
]
·· 
;
·· 
yi
¸¸ 
=
¸¸ 
a
¸¸ 
[
¸¸ 
k1
¸¸ 
+
¸¸ 
$num
¸¸  !
]
¸¸! "
;
¸¸" #
a
¹¹ 
[
¹¹ 
j1
¹¹ 
]
¹¹ 
=
¹¹ 
yr
¹¹ 
;
¹¹ 
a
ºº 
[
ºº 
j1
ºº 
+
ºº 
$num
ºº 
]
ºº 
=
ºº 
yi
ºº  "
;
ºº" #
a
»» 
[
»» 
k1
»» 
]
»» 
=
»» 
xr
»» 
;
»» 
a
¼¼ 
[
¼¼ 
k1
¼¼ 
+
¼¼ 
$num
¼¼ 
]
¼¼ 
=
¼¼ 
xi
¼¼  "
;
¼¼" #
j1
½½ 
+=
½½ 
nh
½½ 
+
½½ 
$num
½½  
;
½½  !
k1
¾¾ 
+=
¾¾ 
nh
¾¾ 
+
¾¾ 
$num
¾¾  
;
¾¾  !
xr
¿¿ 
=
¿¿ 
a
¿¿ 
[
¿¿ 
j1
¿¿ 
]
¿¿ 
;
¿¿ 
xi
ÀÀ 
=
ÀÀ 
a
ÀÀ 
[
ÀÀ 
j1
ÀÀ 
+
ÀÀ 
$num
ÀÀ  !
]
ÀÀ! "
;
ÀÀ" #
yr
ÁÁ 
=
ÁÁ 
a
ÁÁ 
[
ÁÁ 
k1
ÁÁ 
]
ÁÁ 
;
ÁÁ 
yi
ÂÂ 
=
ÂÂ 
a
ÂÂ 
[
ÂÂ 
k1
ÂÂ 
+
ÂÂ 
$num
ÂÂ  !
]
ÂÂ! "
;
ÂÂ" #
a
ÃÃ 
[
ÃÃ 
j1
ÃÃ 
]
ÃÃ 
=
ÃÃ 
yr
ÃÃ 
;
ÃÃ 
a
ÄÄ 
[
ÄÄ 
j1
ÄÄ 
+
ÄÄ 
$num
ÄÄ 
]
ÄÄ 
=
ÄÄ 
yi
ÄÄ  "
;
ÄÄ" #
a
ÅÅ 
[
ÅÅ 
k1
ÅÅ 
]
ÅÅ 
=
ÅÅ 
xr
ÅÅ 
;
ÅÅ 
a
ÆÆ 
[
ÆÆ 
k1
ÆÆ 
+
ÆÆ 
$num
ÆÆ 
]
ÆÆ 
=
ÆÆ 
xi
ÆÆ  "
;
ÆÆ" #
j1
ÇÇ 
-=
ÇÇ 
nh
ÇÇ 
-
ÇÇ 
m
ÇÇ  
;
ÇÇ  !
k1
ÈÈ 
+=
ÈÈ 
$num
ÈÈ 
*
ÈÈ 
m
ÈÈ 
-
ÈÈ  !
$num
ÈÈ" #
;
ÈÈ# $
xr
ÉÉ 
=
ÉÉ 
a
ÉÉ 
[
ÉÉ 
j1
ÉÉ 
]
ÉÉ 
;
ÉÉ 
xi
ÊÊ 
=
ÊÊ 
a
ÊÊ 
[
ÊÊ 
j1
ÊÊ 
+
ÊÊ 
$num
ÊÊ  !
]
ÊÊ! "
;
ÊÊ" #
yr
ËË 
=
ËË 
a
ËË 
[
ËË 
k1
ËË 
]
ËË 
;
ËË 
yi
ÌÌ 
=
ÌÌ 
a
ÌÌ 
[
ÌÌ 
k1
ÌÌ 
+
ÌÌ 
$num
ÌÌ  !
]
ÌÌ! "
;
ÌÌ" #
a
ÍÍ 
[
ÍÍ 
j1
ÍÍ 
]
ÍÍ 
=
ÍÍ 
yr
ÍÍ 
;
ÍÍ 
a
ÎÎ 
[
ÎÎ 
j1
ÎÎ 
+
ÎÎ 
$num
ÎÎ 
]
ÎÎ 
=
ÎÎ 
yi
ÎÎ  "
;
ÎÎ" #
a
ÏÏ 
[
ÏÏ 
k1
ÏÏ 
]
ÏÏ 
=
ÏÏ 
xr
ÏÏ 
;
ÏÏ 
a
ÐÐ 
[
ÐÐ 
k1
ÐÐ 
+
ÐÐ 
$num
ÐÐ 
]
ÐÐ 
=
ÐÐ 
xi
ÐÐ  "
;
ÐÐ" #
for
ÑÑ 
(
ÑÑ 
i
ÑÑ 
=
ÑÑ 
nh
ÑÑ 
>>
ÑÑ  "
$num
ÑÑ# $
;
ÑÑ$ %
i
ÑÑ& '
>
ÑÑ( )
(
ÑÑ* +
j0
ÑÑ+ -
^=
ÑÑ. 0
i
ÑÑ1 2
)
ÑÑ2 3
;
ÑÑ3 4
i
ÑÑ5 6
>>=
ÑÑ7 :
$num
ÑÑ; <
)
ÑÑ< =
;
ÑÑ> ?
}
ÒÒ 
}
ÓÓ 
else
ÔÔ 
{
ÕÕ 
j0
ÖÖ 
=
ÖÖ 
$num
ÖÖ 
;
ÖÖ 
for
×× 
(
×× 
k0
×× 
=
×× 
$num
×× 
;
×× 
k0
×× 
<
××  !
m
××" #
;
××# $
k0
××% '
+=
××( *
$num
××+ ,
)
××, -
{
ØØ 
k
ÙÙ 
=
ÙÙ 
k0
ÙÙ 
;
ÙÙ 
for
ÚÚ 
(
ÚÚ 
j
ÚÚ 
=
ÚÚ 
j0
ÚÚ 
;
ÚÚ  
j
ÚÚ! "
<
ÚÚ# $
j0
ÚÚ% '
+
ÚÚ( )
k0
ÚÚ* ,
;
ÚÚ, -
j
ÚÚ. /
+=
ÚÚ0 2
$num
ÚÚ3 4
)
ÚÚ4 5
{
ÛÛ 
xr
ÜÜ 
=
ÜÜ 
a
ÜÜ 
[
ÜÜ 
j
ÜÜ  
]
ÜÜ  !
;
ÜÜ! "
xi
ÝÝ 
=
ÝÝ 
a
ÝÝ 
[
ÝÝ 
j
ÝÝ  
+
ÝÝ! "
$num
ÝÝ# $
]
ÝÝ$ %
;
ÝÝ% &
yr
ÞÞ 
=
ÞÞ 
a
ÞÞ 
[
ÞÞ 
k
ÞÞ  
]
ÞÞ  !
;
ÞÞ! "
yi
ßß 
=
ßß 
a
ßß 
[
ßß 
k
ßß  
+
ßß! "
$num
ßß# $
]
ßß$ %
;
ßß% &
a
àà 
[
àà 
j
àà 
]
àà 
=
àà 
yr
àà !
;
àà! "
a
áá 
[
áá 
j
áá 
+
áá 
$num
áá 
]
áá  
=
áá! "
yi
áá# %
;
áá% &
a
ââ 
[
ââ 
k
ââ 
]
ââ 
=
ââ 
xr
ââ !
;
ââ! "
a
ãã 
[
ãã 
k
ãã 
+
ãã 
$num
ãã 
]
ãã  
=
ãã! "
xi
ãã# %
;
ãã% &
j1
ää 
=
ää 
j
ää 
+
ää  
m
ää! "
;
ää" #
k1
åå 
=
åå 
k
åå 
+
åå  
m
åå! "
;
åå" #
xr
ææ 
=
ææ 
a
ææ 
[
ææ 
j1
ææ !
]
ææ! "
;
ææ" #
xi
çç 
=
çç 
a
çç 
[
çç 
j1
çç !
+
çç" #
$num
çç$ %
]
çç% &
;
çç& '
yr
èè 
=
èè 
a
èè 
[
èè 
k1
èè !
]
èè! "
;
èè" #
yi
éé 
=
éé 
a
éé 
[
éé 
k1
éé !
+
éé" #
$num
éé$ %
]
éé% &
;
éé& '
a
êê 
[
êê 
j1
êê 
]
êê 
=
êê 
yr
êê  "
;
êê" #
a
ëë 
[
ëë 
j1
ëë 
+
ëë 
$num
ëë  
]
ëë  !
=
ëë" #
yi
ëë$ &
;
ëë& '
a
ìì 
[
ìì 
k1
ìì 
]
ìì 
=
ìì 
xr
ìì  "
;
ìì" #
a
íí 
[
íí 
k1
íí 
+
íí 
$num
íí  
]
íí  !
=
íí" #
xi
íí$ &
;
íí& '
j1
îî 
+=
îî 
nh
îî  
;
îî  !
k1
ïï 
+=
ïï 
$num
ïï 
;
ïï  
xr
ðð 
=
ðð 
a
ðð 
[
ðð 
j1
ðð !
]
ðð! "
;
ðð" #
xi
ññ 
=
ññ 
a
ññ 
[
ññ 
j1
ññ !
+
ññ" #
$num
ññ$ %
]
ññ% &
;
ññ& '
yr
òò 
=
òò 
a
òò 
[
òò 
k1
òò !
]
òò! "
;
òò" #
yi
óó 
=
óó 
a
óó 
[
óó 
k1
óó !
+
óó" #
$num
óó$ %
]
óó% &
;
óó& '
a
ôô 
[
ôô 
j1
ôô 
]
ôô 
=
ôô 
yr
ôô  "
;
ôô" #
a
õõ 
[
õõ 
j1
õõ 
+
õõ 
$num
õõ  
]
õõ  !
=
õõ" #
yi
õõ$ &
;
õõ& '
a
öö 
[
öö 
k1
öö 
]
öö 
=
öö 
xr
öö  "
;
öö" #
a
÷÷ 
[
÷÷ 
k1
÷÷ 
+
÷÷ 
$num
÷÷  
]
÷÷  !
=
÷÷" #
xi
÷÷$ &
;
÷÷& '
j1
øø 
-=
øø 
m
øø 
;
øø  
k1
ùù 
-=
ùù 
m
ùù 
;
ùù  
xr
úú 
=
úú 
a
úú 
[
úú 
j1
úú !
]
úú! "
;
úú" #
xi
ûû 
=
ûû 
a
ûû 
[
ûû 
j1
ûû !
+
ûû" #
$num
ûû$ %
]
ûû% &
;
ûû& '
yr
üü 
=
üü 
a
üü 
[
üü 
k1
üü !
]
üü! "
;
üü" #
yi
ýý 
=
ýý 
a
ýý 
[
ýý 
k1
ýý !
+
ýý" #
$num
ýý$ %
]
ýý% &
;
ýý& '
a
þþ 
[
þþ 
j1
þþ 
]
þþ 
=
þþ 
yr
þþ  "
;
þþ" #
a
ÿÿ 
[
ÿÿ 
j1
ÿÿ 
+
ÿÿ 
$num
ÿÿ  
]
ÿÿ  !
=
ÿÿ" #
yi
ÿÿ$ &
;
ÿÿ& '
a
 
[
 
k1
 
]
 
=
 
xr
  "
;
" #
a
 
[
 
k1
 
+
 
$num
  
]
  !
=
" #
xi
$ &
;
& '
j1
 
+=
 
$num
 
;
  
k1
 
+=
 
nh
  
;
  !
xr
 
=
 
a
 
[
 
j1
 !
]
! "
;
" #
xi
 
=
 
a
 
[
 
j1
 !
+
" #
$num
$ %
]
% &
;
& '
yr
 
=
 
a
 
[
 
k1
 !
]
! "
;
" #
yi
 
=
 
a
 
[
 
k1
 !
+
" #
$num
$ %
]
% &
;
& '
a
 
[
 
j1
 
]
 
=
 
yr
  "
;
" #
a
 
[
 
j1
 
+
 
$num
  
]
  !
=
" #
yi
$ &
;
& '
a
 
[
 
k1
 
]
 
=
 
xr
  "
;
" #
a
 
[
 
k1
 
+
 
$num
  
]
  !
=
" #
xi
$ &
;
& '
j1
 
+=
 
m
 
;
  
k1
 
+=
 
m
 
;
  
xr
 
=
 
a
 
[
 
j1
 !
]
! "
;
" #
xi
 
=
 
a
 
[
 
j1
 !
+
" #
$num
$ %
]
% &
;
& '
yr
 
=
 
a
 
[
 
k1
 !
]
! "
;
" #
yi
 
=
 
a
 
[
 
k1
 !
+
" #
$num
$ %
]
% &
;
& '
a
 
[
 
j1
 
]
 
=
 
yr
  "
;
" #
a
 
[
 
j1
 
+
 
$num
  
]
  !
=
" #
yi
$ &
;
& '
a
 
[
 
k1
 
]
 
=
 
xr
  "
;
" #
a
 
[
 
k1
 
+
 
$num
  
]
  !
=
" #
xi
$ &
;
& '
j1
 
-=
 
nh
  
;
  !
k1
 
-=
 
$num
 
;
  
xr
 
=
 
a
 
[
 
j1
 !
]
! "
;
" #
xi
 
=
 
a
 
[
 
j1
 !
+
" #
$num
$ %
]
% &
;
& '
yr
 
=
 
a
 
[
 
k1
 !
]
! "
;
" #
yi
 
=
 
a
 
[
 
k1
 !
+
" #
$num
$ %
]
% &
;
& '
a
 
[
 
j1
 
]
 
=
 
yr
  "
;
" #
a
 
[
 
j1
 
+
 
$num
  
]
  !
=
" #
yi
$ &
;
& '
a
 
[
 
k1
 
]
 
=
 
xr
  "
;
" #
a
 
[
 
k1
 
+
 
$num
  
]
  !
=
" #
xi
$ &
;
& '
j1
   
-=
   
m
   
;
    
k1
¡¡ 
-=
¡¡ 
m
¡¡ 
;
¡¡  
xr
¢¢ 
=
¢¢ 
a
¢¢ 
[
¢¢ 
j1
¢¢ !
]
¢¢! "
;
¢¢" #
xi
££ 
=
££ 
a
££ 
[
££ 
j1
££ !
+
££" #
$num
££$ %
]
££% &
;
££& '
yr
¤¤ 
=
¤¤ 
a
¤¤ 
[
¤¤ 
k1
¤¤ !
]
¤¤! "
;
¤¤" #
yi
¥¥ 
=
¥¥ 
a
¥¥ 
[
¥¥ 
k1
¥¥ !
+
¥¥" #
$num
¥¥$ %
]
¥¥% &
;
¥¥& '
a
¦¦ 
[
¦¦ 
j1
¦¦ 
]
¦¦ 
=
¦¦ 
yr
¦¦  "
;
¦¦" #
a
§§ 
[
§§ 
j1
§§ 
+
§§ 
$num
§§  
]
§§  !
=
§§" #
yi
§§$ &
;
§§& '
a
¨¨ 
[
¨¨ 
k1
¨¨ 
]
¨¨ 
=
¨¨ 
xr
¨¨  "
;
¨¨" #
a
©© 
[
©© 
k1
©© 
+
©© 
$num
©©  
]
©©  !
=
©©" #
xi
©©$ &
;
©©& '
for
ªª 
(
ªª 
i
ªª 
=
ªª  
nh
ªª! #
>>
ªª$ &
$num
ªª' (
;
ªª( )
i
ªª* +
>
ªª, -
(
ªª. /
k
ªª/ 0
^=
ªª1 3
i
ªª4 5
)
ªª5 6
;
ªª6 7
i
ªª8 9
>>=
ªª: =
$num
ªª> ?
)
ªª? @
;
ªªA B
}
«« 
k1
¬¬ 
=
¬¬ 
j0
¬¬ 
+
¬¬ 
k0
¬¬  
;
¬¬  !
j1
­­ 
=
­­ 
k1
­­ 
+
­­ 
$num
­­ 
;
­­  
k1
®® 
+=
®® 
nh
®® 
;
®® 
xr
¯¯ 
=
¯¯ 
a
¯¯ 
[
¯¯ 
j1
¯¯ 
]
¯¯ 
;
¯¯ 
xi
°° 
=
°° 
a
°° 
[
°° 
j1
°° 
+
°° 
$num
°°  !
]
°°! "
;
°°" #
yr
±± 
=
±± 
a
±± 
[
±± 
k1
±± 
]
±± 
;
±± 
yi
²² 
=
²² 
a
²² 
[
²² 
k1
²² 
+
²² 
$num
²²  !
]
²²! "
;
²²" #
a
³³ 
[
³³ 
j1
³³ 
]
³³ 
=
³³ 
yr
³³ 
;
³³ 
a
´´ 
[
´´ 
j1
´´ 
+
´´ 
$num
´´ 
]
´´ 
=
´´ 
yi
´´  "
;
´´" #
a
µµ 
[
µµ 
k1
µµ 
]
µµ 
=
µµ 
xr
µµ 
;
µµ 
a
¶¶ 
[
¶¶ 
k1
¶¶ 
+
¶¶ 
$num
¶¶ 
]
¶¶ 
=
¶¶ 
xi
¶¶  "
;
¶¶" #
j1
·· 
+=
·· 
m
·· 
;
·· 
k1
¸¸ 
+=
¸¸ 
m
¸¸ 
;
¸¸ 
xr
¹¹ 
=
¹¹ 
a
¹¹ 
[
¹¹ 
j1
¹¹ 
]
¹¹ 
;
¹¹ 
xi
ºº 
=
ºº 
a
ºº 
[
ºº 
j1
ºº 
+
ºº 
$num
ºº  !
]
ºº! "
;
ºº" #
yr
»» 
=
»» 
a
»» 
[
»» 
k1
»» 
]
»» 
;
»» 
yi
¼¼ 
=
¼¼ 
a
¼¼ 
[
¼¼ 
k1
¼¼ 
+
¼¼ 
$num
¼¼  !
]
¼¼! "
;
¼¼" #
a
½½ 
[
½½ 
j1
½½ 
]
½½ 
=
½½ 
yr
½½ 
;
½½ 
a
¾¾ 
[
¾¾ 
j1
¾¾ 
+
¾¾ 
$num
¾¾ 
]
¾¾ 
=
¾¾ 
yi
¾¾  "
;
¾¾" #
a
¿¿ 
[
¿¿ 
k1
¿¿ 
]
¿¿ 
=
¿¿ 
xr
¿¿ 
;
¿¿ 
a
ÀÀ 
[
ÀÀ 
k1
ÀÀ 
+
ÀÀ 
$num
ÀÀ 
]
ÀÀ 
=
ÀÀ 
xi
ÀÀ  "
;
ÀÀ" #
for
ÁÁ 
(
ÁÁ 
i
ÁÁ 
=
ÁÁ 
nh
ÁÁ 
>>
ÁÁ  "
$num
ÁÁ# $
;
ÁÁ$ %
i
ÁÁ& '
>
ÁÁ( )
(
ÁÁ* +
j0
ÁÁ+ -
^=
ÁÁ. 0
i
ÁÁ1 2
)
ÁÁ2 3
;
ÁÁ3 4
i
ÁÁ5 6
>>=
ÁÁ7 :
$num
ÁÁ; <
)
ÁÁ< =
;
ÁÁ> ?
}
ÂÂ 
}
ÃÃ 
}
ÄÄ 	
static
ÇÇ 
void
ÇÇ 

bitrv2conj
ÇÇ 
(
ÇÇ 
int
ÇÇ "
n
ÇÇ# $
,
ÇÇ$ %
double
ÇÇ& ,
*
ÇÇ, -
a
ÇÇ. /
)
ÇÇ/ 0
{
ÈÈ 	
int
ÉÉ 
j0
ÉÉ 
,
ÉÉ 
k0
ÉÉ 
,
ÉÉ 
j1
ÉÉ 
,
ÉÉ 
k1
ÉÉ 
,
ÉÉ 
l
ÉÉ  !
,
ÉÉ! "
m
ÉÉ# $
,
ÉÉ$ %
i
ÉÉ& '
,
ÉÉ' (
j
ÉÉ) *
,
ÉÉ* +
k
ÉÉ, -
,
ÉÉ- .
nh
ÉÉ/ 1
;
ÉÉ1 2
double
ÊÊ 
xr
ÊÊ 
,
ÊÊ 
xi
ÊÊ 
,
ÊÊ 
yr
ÊÊ 
,
ÊÊ 
yi
ÊÊ !
;
ÊÊ! "
m
ÌÌ 
=
ÌÌ 
$num
ÌÌ 
;
ÌÌ 
for
ÍÍ 
(
ÍÍ 
l
ÍÍ 
=
ÍÍ 
n
ÍÍ 
>>
ÍÍ 
$num
ÍÍ 
;
ÍÍ 
l
ÍÍ 
>
ÍÍ  
$num
ÍÍ! "
;
ÍÍ" #
l
ÍÍ$ %
>>=
ÍÍ& )
$num
ÍÍ* +
)
ÍÍ+ ,
{
ÎÎ 
m
ÏÏ 
<<=
ÏÏ 
$num
ÏÏ 
;
ÏÏ 
}
ÐÐ 
nh
ÑÑ 
=
ÑÑ 
n
ÑÑ 
>>
ÑÑ 
$num
ÑÑ 
;
ÑÑ 
if
ÒÒ 
(
ÒÒ 
l
ÒÒ 
==
ÒÒ 
$num
ÒÒ 
)
ÒÒ 
{
ÓÓ 
j0
ÔÔ 
=
ÔÔ 
$num
ÔÔ 
;
ÔÔ 
for
ÕÕ 
(
ÕÕ 
k0
ÕÕ 
=
ÕÕ 
$num
ÕÕ 
;
ÕÕ 
k0
ÕÕ 
<
ÕÕ  !
m
ÕÕ" #
;
ÕÕ# $
k0
ÕÕ% '
+=
ÕÕ( *
$num
ÕÕ+ ,
)
ÕÕ, -
{
ÖÖ 
k
×× 
=
×× 
k0
×× 
;
×× 
for
ØØ 
(
ØØ 
j
ØØ 
=
ØØ 
j0
ØØ 
;
ØØ  
j
ØØ! "
<
ØØ# $
j0
ØØ% '
+
ØØ( )
k0
ØØ* ,
;
ØØ, -
j
ØØ. /
+=
ØØ0 2
$num
ØØ3 4
)
ØØ4 5
{
ÙÙ 
xr
ÚÚ 
=
ÚÚ 
a
ÚÚ 
[
ÚÚ 
j
ÚÚ  
]
ÚÚ  !
;
ÚÚ! "
xi
ÛÛ 
=
ÛÛ 
-
ÛÛ 
a
ÛÛ 
[
ÛÛ  
j
ÛÛ  !
+
ÛÛ" #
$num
ÛÛ$ %
]
ÛÛ% &
;
ÛÛ& '
yr
ÜÜ 
=
ÜÜ 
a
ÜÜ 
[
ÜÜ 
k
ÜÜ  
]
ÜÜ  !
;
ÜÜ! "
yi
ÝÝ 
=
ÝÝ 
-
ÝÝ 
a
ÝÝ 
[
ÝÝ  
k
ÝÝ  !
+
ÝÝ" #
$num
ÝÝ$ %
]
ÝÝ% &
;
ÝÝ& '
a
ÞÞ 
[
ÞÞ 
j
ÞÞ 
]
ÞÞ 
=
ÞÞ 
yr
ÞÞ !
;
ÞÞ! "
a
ßß 
[
ßß 
j
ßß 
+
ßß 
$num
ßß 
]
ßß  
=
ßß! "
yi
ßß# %
;
ßß% &
a
àà 
[
àà 
k
àà 
]
àà 
=
àà 
xr
àà !
;
àà! "
a
áá 
[
áá 
k
áá 
+
áá 
$num
áá 
]
áá  
=
áá! "
xi
áá# %
;
áá% &
j1
ââ 
=
ââ 
j
ââ 
+
ââ  
m
ââ! "
;
ââ" #
k1
ãã 
=
ãã 
k
ãã 
+
ãã  
$num
ãã! "
*
ãã# $
m
ãã% &
;
ãã& '
xr
ää 
=
ää 
a
ää 
[
ää 
j1
ää !
]
ää! "
;
ää" #
xi
åå 
=
åå 
-
åå 
a
åå 
[
åå  
j1
åå  "
+
åå# $
$num
åå% &
]
åå& '
;
åå' (
yr
ææ 
=
ææ 
a
ææ 
[
ææ 
k1
ææ !
]
ææ! "
;
ææ" #
yi
çç 
=
çç 
-
çç 
a
çç 
[
çç  
k1
çç  "
+
çç# $
$num
çç% &
]
çç& '
;
çç' (
a
èè 
[
èè 
j1
èè 
]
èè 
=
èè 
yr
èè  "
;
èè" #
a
éé 
[
éé 
j1
éé 
+
éé 
$num
éé  
]
éé  !
=
éé" #
yi
éé$ &
;
éé& '
a
êê 
[
êê 
k1
êê 
]
êê 
=
êê 
xr
êê  "
;
êê" #
a
ëë 
[
ëë 
k1
ëë 
+
ëë 
$num
ëë  
]
ëë  !
=
ëë" #
xi
ëë$ &
;
ëë& '
j1
ìì 
+=
ìì 
m
ìì 
;
ìì  
k1
íí 
-=
íí 
m
íí 
;
íí  
xr
îî 
=
îî 
a
îî 
[
îî 
j1
îî !
]
îî! "
;
îî" #
xi
ïï 
=
ïï 
-
ïï 
a
ïï 
[
ïï  
j1
ïï  "
+
ïï# $
$num
ïï% &
]
ïï& '
;
ïï' (
yr
ðð 
=
ðð 
a
ðð 
[
ðð 
k1
ðð !
]
ðð! "
;
ðð" #
yi
ññ 
=
ññ 
-
ññ 
a
ññ 
[
ññ  
k1
ññ  "
+
ññ# $
$num
ññ% &
]
ññ& '
;
ññ' (
a
òò 
[
òò 
j1
òò 
]
òò 
=
òò 
yr
òò  "
;
òò" #
a
óó 
[
óó 
j1
óó 
+
óó 
$num
óó  
]
óó  !
=
óó" #
yi
óó$ &
;
óó& '
a
ôô 
[
ôô 
k1
ôô 
]
ôô 
=
ôô 
xr
ôô  "
;
ôô" #
a
õõ 
[
õõ 
k1
õõ 
+
õõ 
$num
õõ  
]
õõ  !
=
õõ" #
xi
õõ$ &
;
õõ& '
j1
öö 
+=
öö 
m
öö 
;
öö  
k1
÷÷ 
+=
÷÷ 
$num
÷÷ 
*
÷÷  !
m
÷÷" #
;
÷÷# $
xr
øø 
=
øø 
a
øø 
[
øø 
j1
øø !
]
øø! "
;
øø" #
xi
ùù 
=
ùù 
-
ùù 
a
ùù 
[
ùù  
j1
ùù  "
+
ùù# $
$num
ùù% &
]
ùù& '
;
ùù' (
yr
úú 
=
úú 
a
úú 
[
úú 
k1
úú !
]
úú! "
;
úú" #
yi
ûû 
=
ûû 
-
ûû 
a
ûû 
[
ûû  
k1
ûû  "
+
ûû# $
$num
ûû% &
]
ûû& '
;
ûû' (
a
üü 
[
üü 
j1
üü 
]
üü 
=
üü 
yr
üü  "
;
üü" #
a
ýý 
[
ýý 
j1
ýý 
+
ýý 
$num
ýý  
]
ýý  !
=
ýý" #
yi
ýý$ &
;
ýý& '
a
þþ 
[
þþ 
k1
þþ 
]
þþ 
=
þþ 
xr
þþ  "
;
þþ" #
a
ÿÿ 
[
ÿÿ 
k1
ÿÿ 
+
ÿÿ 
$num
ÿÿ  
]
ÿÿ  !
=
ÿÿ" #
xi
ÿÿ$ &
;
ÿÿ& '
j1
 
+=
 
nh
  
;
  !
k1
 
+=
 
$num
 
;
  
xr
 
=
 
a
 
[
 
j1
 !
]
! "
;
" #
xi
 
=
 
-
 
a
 
[
  
j1
  "
+
# $
$num
% &
]
& '
;
' (
yr
 
=
 
a
 
[
 
k1
 !
]
! "
;
" #
yi
 
=
 
-
 
a
 
[
  
k1
  "
+
# $
$num
% &
]
& '
;
' (
a
 
[
 
j1
 
]
 
=
 
yr
  "
;
" #
a
 
[
 
j1
 
+
 
$num
  
]
  !
=
" #
yi
$ &
;
& '
a
 
[
 
k1
 
]
 
=
 
xr
  "
;
" #
a
 
[
 
k1
 
+
 
$num
  
]
  !
=
" #
xi
$ &
;
& '
j1
 
-=
 
m
 
;
  
k1
 
-=
 
$num
 
*
  !
m
" #
;
# $
xr
 
=
 
a
 
[
 
j1
 !
]
! "
;
" #
xi
 
=
 
-
 
a
 
[
  
j1
  "
+
# $
$num
% &
]
& '
;
' (
yr
 
=
 
a
 
[
 
k1
 !
]
! "
;
" #
yi
 
=
 
-
 
a
 
[
  
k1
  "
+
# $
$num
% &
]
& '
;
' (
a
 
[
 
j1
 
]
 
=
 
yr
  "
;
" #
a
 
[
 
j1
 
+
 
$num
  
]
  !
=
" #
yi
$ &
;
& '
a
 
[
 
k1
 
]
 
=
 
xr
  "
;
" #
a
 
[
 
k1
 
+
 
$num
  
]
  !
=
" #
xi
$ &
;
& '
j1
 
-=
 
m
 
;
  
k1
 
+=
 
m
 
;
  
xr
 
=
 
a
 
[
 
j1
 !
]
! "
;
" #
xi
 
=
 
-
 
a
 
[
  
j1
  "
+
# $
$num
% &
]
& '
;
' (
yr
 
=
 
a
 
[
 
k1
 !
]
! "
;
" #
yi
 
=
 
-
 
a
 
[
  
k1
  "
+
# $
$num
% &
]
& '
;
' (
a
 
[
 
j1
 
]
 
=
 
yr
  "
;
" #
a
 
[
 
j1
 
+
 
$num
  
]
  !
=
" #
yi
$ &
;
& '
a
 
[
 
k1
 
]
 
=
 
xr
  "
;
" #
a
 
[
 
k1
 
+
 
$num
  
]
  !
=
" #
xi
$ &
;
& '
j1
 
-=
 
m
 
;
  
k1
 
-=
 
$num
 
*
  !
m
" #
;
# $
xr
   
=
   
a
   
[
   
j1
   !
]
  ! "
;
  " #
xi
¡¡ 
=
¡¡ 
-
¡¡ 
a
¡¡ 
[
¡¡  
j1
¡¡  "
+
¡¡# $
$num
¡¡% &
]
¡¡& '
;
¡¡' (
yr
¢¢ 
=
¢¢ 
a
¢¢ 
[
¢¢ 
k1
¢¢ !
]
¢¢! "
;
¢¢" #
yi
££ 
=
££ 
-
££ 
a
££ 
[
££  
k1
££  "
+
££# $
$num
££% &
]
££& '
;
££' (
a
¤¤ 
[
¤¤ 
j1
¤¤ 
]
¤¤ 
=
¤¤ 
yr
¤¤  "
;
¤¤" #
a
¥¥ 
[
¥¥ 
j1
¥¥ 
+
¥¥ 
$num
¥¥  
]
¥¥  !
=
¥¥" #
yi
¥¥$ &
;
¥¥& '
a
¦¦ 
[
¦¦ 
k1
¦¦ 
]
¦¦ 
=
¦¦ 
xr
¦¦  "
;
¦¦" #
a
§§ 
[
§§ 
k1
§§ 
+
§§ 
$num
§§  
]
§§  !
=
§§" #
xi
§§$ &
;
§§& '
j1
¨¨ 
+=
¨¨ 
$num
¨¨ 
;
¨¨  
k1
©© 
+=
©© 
nh
©©  
;
©©  !
xr
ªª 
=
ªª 
a
ªª 
[
ªª 
j1
ªª !
]
ªª! "
;
ªª" #
xi
«« 
=
«« 
-
«« 
a
«« 
[
««  
j1
««  "
+
««# $
$num
««% &
]
««& '
;
««' (
yr
¬¬ 
=
¬¬ 
a
¬¬ 
[
¬¬ 
k1
¬¬ !
]
¬¬! "
;
¬¬" #
yi
­­ 
=
­­ 
-
­­ 
a
­­ 
[
­­  
k1
­­  "
+
­­# $
$num
­­% &
]
­­& '
;
­­' (
a
®® 
[
®® 
j1
®® 
]
®® 
=
®® 
yr
®®  "
;
®®" #
a
¯¯ 
[
¯¯ 
j1
¯¯ 
+
¯¯ 
$num
¯¯  
]
¯¯  !
=
¯¯" #
yi
¯¯$ &
;
¯¯& '
a
°° 
[
°° 
k1
°° 
]
°° 
=
°° 
xr
°°  "
;
°°" #
a
±± 
[
±± 
k1
±± 
+
±± 
$num
±±  
]
±±  !
=
±±" #
xi
±±$ &
;
±±& '
j1
²² 
+=
²² 
m
²² 
;
²²  
k1
³³ 
+=
³³ 
$num
³³ 
*
³³  !
m
³³" #
;
³³# $
xr
´´ 
=
´´ 
a
´´ 
[
´´ 
j1
´´ !
]
´´! "
;
´´" #
xi
µµ 
=
µµ 
-
µµ 
a
µµ 
[
µµ  
j1
µµ  "
+
µµ# $
$num
µµ% &
]
µµ& '
;
µµ' (
yr
¶¶ 
=
¶¶ 
a
¶¶ 
[
¶¶ 
k1
¶¶ !
]
¶¶! "
;
¶¶" #
yi
·· 
=
·· 
-
·· 
a
·· 
[
··  
k1
··  "
+
··# $
$num
··% &
]
··& '
;
··' (
a
¸¸ 
[
¸¸ 
j1
¸¸ 
]
¸¸ 
=
¸¸ 
yr
¸¸  "
;
¸¸" #
a
¹¹ 
[
¹¹ 
j1
¹¹ 
+
¹¹ 
$num
¹¹  
]
¹¹  !
=
¹¹" #
yi
¹¹$ &
;
¹¹& '
a
ºº 
[
ºº 
k1
ºº 
]
ºº 
=
ºº 
xr
ºº  "
;
ºº" #
a
»» 
[
»» 
k1
»» 
+
»» 
$num
»»  
]
»»  !
=
»»" #
xi
»»$ &
;
»»& '
j1
¼¼ 
+=
¼¼ 
m
¼¼ 
;
¼¼  
k1
½½ 
-=
½½ 
m
½½ 
;
½½  
xr
¾¾ 
=
¾¾ 
a
¾¾ 
[
¾¾ 
j1
¾¾ !
]
¾¾! "
;
¾¾" #
xi
¿¿ 
=
¿¿ 
-
¿¿ 
a
¿¿ 
[
¿¿  
j1
¿¿  "
+
¿¿# $
$num
¿¿% &
]
¿¿& '
;
¿¿' (
yr
ÀÀ 
=
ÀÀ 
a
ÀÀ 
[
ÀÀ 
k1
ÀÀ !
]
ÀÀ! "
;
ÀÀ" #
yi
ÁÁ 
=
ÁÁ 
-
ÁÁ 
a
ÁÁ 
[
ÁÁ  
k1
ÁÁ  "
+
ÁÁ# $
$num
ÁÁ% &
]
ÁÁ& '
;
ÁÁ' (
a
ÂÂ 
[
ÂÂ 
j1
ÂÂ 
]
ÂÂ 
=
ÂÂ 
yr
ÂÂ  "
;
ÂÂ" #
a
ÃÃ 
[
ÃÃ 
j1
ÃÃ 
+
ÃÃ 
$num
ÃÃ  
]
ÃÃ  !
=
ÃÃ" #
yi
ÃÃ$ &
;
ÃÃ& '
a
ÄÄ 
[
ÄÄ 
k1
ÄÄ 
]
ÄÄ 
=
ÄÄ 
xr
ÄÄ  "
;
ÄÄ" #
a
ÅÅ 
[
ÅÅ 
k1
ÅÅ 
+
ÅÅ 
$num
ÅÅ  
]
ÅÅ  !
=
ÅÅ" #
xi
ÅÅ$ &
;
ÅÅ& '
j1
ÆÆ 
+=
ÆÆ 
m
ÆÆ 
;
ÆÆ  
k1
ÇÇ 
+=
ÇÇ 
$num
ÇÇ 
*
ÇÇ  !
m
ÇÇ" #
;
ÇÇ# $
xr
ÈÈ 
=
ÈÈ 
a
ÈÈ 
[
ÈÈ 
j1
ÈÈ !
]
ÈÈ! "
;
ÈÈ" #
xi
ÉÉ 
=
ÉÉ 
-
ÉÉ 
a
ÉÉ 
[
ÉÉ  
j1
ÉÉ  "
+
ÉÉ# $
$num
ÉÉ% &
]
ÉÉ& '
;
ÉÉ' (
yr
ÊÊ 
=
ÊÊ 
a
ÊÊ 
[
ÊÊ 
k1
ÊÊ !
]
ÊÊ! "
;
ÊÊ" #
yi
ËË 
=
ËË 
-
ËË 
a
ËË 
[
ËË  
k1
ËË  "
+
ËË# $
$num
ËË% &
]
ËË& '
;
ËË' (
a
ÌÌ 
[
ÌÌ 
j1
ÌÌ 
]
ÌÌ 
=
ÌÌ 
yr
ÌÌ  "
;
ÌÌ" #
a
ÍÍ 
[
ÍÍ 
j1
ÍÍ 
+
ÍÍ 
$num
ÍÍ  
]
ÍÍ  !
=
ÍÍ" #
yi
ÍÍ$ &
;
ÍÍ& '
a
ÎÎ 
[
ÎÎ 
k1
ÎÎ 
]
ÎÎ 
=
ÎÎ 
xr
ÎÎ  "
;
ÎÎ" #
a
ÏÏ 
[
ÏÏ 
k1
ÏÏ 
+
ÏÏ 
$num
ÏÏ  
]
ÏÏ  !
=
ÏÏ" #
xi
ÏÏ$ &
;
ÏÏ& '
j1
ÐÐ 
-=
ÐÐ 
nh
ÐÐ  
;
ÐÐ  !
k1
ÑÑ 
-=
ÑÑ 
$num
ÑÑ 
;
ÑÑ  
xr
ÒÒ 
=
ÒÒ 
a
ÒÒ 
[
ÒÒ 
j1
ÒÒ !
]
ÒÒ! "
;
ÒÒ" #
xi
ÓÓ 
=
ÓÓ 
-
ÓÓ 
a
ÓÓ 
[
ÓÓ  
j1
ÓÓ  "
+
ÓÓ# $
$num
ÓÓ% &
]
ÓÓ& '
;
ÓÓ' (
yr
ÔÔ 
=
ÔÔ 
a
ÔÔ 
[
ÔÔ 
k1
ÔÔ !
]
ÔÔ! "
;
ÔÔ" #
yi
ÕÕ 
=
ÕÕ 
-
ÕÕ 
a
ÕÕ 
[
ÕÕ  
k1
ÕÕ  "
+
ÕÕ# $
$num
ÕÕ% &
]
ÕÕ& '
;
ÕÕ' (
a
ÖÖ 
[
ÖÖ 
j1
ÖÖ 
]
ÖÖ 
=
ÖÖ 
yr
ÖÖ  "
;
ÖÖ" #
a
×× 
[
×× 
j1
×× 
+
×× 
$num
××  
]
××  !
=
××" #
yi
××$ &
;
××& '
a
ØØ 
[
ØØ 
k1
ØØ 
]
ØØ 
=
ØØ 
xr
ØØ  "
;
ØØ" #
a
ÙÙ 
[
ÙÙ 
k1
ÙÙ 
+
ÙÙ 
$num
ÙÙ  
]
ÙÙ  !
=
ÙÙ" #
xi
ÙÙ$ &
;
ÙÙ& '
j1
ÚÚ 
-=
ÚÚ 
m
ÚÚ 
;
ÚÚ  
k1
ÛÛ 
-=
ÛÛ 
$num
ÛÛ 
*
ÛÛ  !
m
ÛÛ" #
;
ÛÛ# $
xr
ÜÜ 
=
ÜÜ 
a
ÜÜ 
[
ÜÜ 
j1
ÜÜ !
]
ÜÜ! "
;
ÜÜ" #
xi
ÝÝ 
=
ÝÝ 
-
ÝÝ 
a
ÝÝ 
[
ÝÝ  
j1
ÝÝ  "
+
ÝÝ# $
$num
ÝÝ% &
]
ÝÝ& '
;
ÝÝ' (
yr
ÞÞ 
=
ÞÞ 
a
ÞÞ 
[
ÞÞ 
k1
ÞÞ !
]
ÞÞ! "
;
ÞÞ" #
yi
ßß 
=
ßß 
-
ßß 
a
ßß 
[
ßß  
k1
ßß  "
+
ßß# $
$num
ßß% &
]
ßß& '
;
ßß' (
a
àà 
[
àà 
j1
àà 
]
àà 
=
àà 
yr
àà  "
;
àà" #
a
áá 
[
áá 
j1
áá 
+
áá 
$num
áá  
]
áá  !
=
áá" #
yi
áá$ &
;
áá& '
a
ââ 
[
ââ 
k1
ââ 
]
ââ 
=
ââ 
xr
ââ  "
;
ââ" #
a
ãã 
[
ãã 
k1
ãã 
+
ãã 
$num
ãã  
]
ãã  !
=
ãã" #
xi
ãã$ &
;
ãã& '
j1
ää 
-=
ää 
m
ää 
;
ää  
k1
åå 
+=
åå 
m
åå 
;
åå  
xr
ææ 
=
ææ 
a
ææ 
[
ææ 
j1
ææ !
]
ææ! "
;
ææ" #
xi
çç 
=
çç 
-
çç 
a
çç 
[
çç  
j1
çç  "
+
çç# $
$num
çç% &
]
çç& '
;
çç' (
yr
èè 
=
èè 
a
èè 
[
èè 
k1
èè !
]
èè! "
;
èè" #
yi
éé 
=
éé 
-
éé 
a
éé 
[
éé  
k1
éé  "
+
éé# $
$num
éé% &
]
éé& '
;
éé' (
a
êê 
[
êê 
j1
êê 
]
êê 
=
êê 
yr
êê  "
;
êê" #
a
ëë 
[
ëë 
j1
ëë 
+
ëë 
$num
ëë  
]
ëë  !
=
ëë" #
yi
ëë$ &
;
ëë& '
a
ìì 
[
ìì 
k1
ìì 
]
ìì 
=
ìì 
xr
ìì  "
;
ìì" #
a
íí 
[
íí 
k1
íí 
+
íí 
$num
íí  
]
íí  !
=
íí" #
xi
íí$ &
;
íí& '
j1
îî 
-=
îî 
m
îî 
;
îî  
k1
ïï 
-=
ïï 
$num
ïï 
*
ïï  !
m
ïï" #
;
ïï# $
xr
ðð 
=
ðð 
a
ðð 
[
ðð 
j1
ðð !
]
ðð! "
;
ðð" #
xi
ññ 
=
ññ 
-
ññ 
a
ññ 
[
ññ  
j1
ññ  "
+
ññ# $
$num
ññ% &
]
ññ& '
;
ññ' (
yr
òò 
=
òò 
a
òò 
[
òò 
k1
òò !
]
òò! "
;
òò" #
yi
óó 
=
óó 
-
óó 
a
óó 
[
óó  
k1
óó  "
+
óó# $
$num
óó% &
]
óó& '
;
óó' (
a
ôô 
[
ôô 
j1
ôô 
]
ôô 
=
ôô 
yr
ôô  "
;
ôô" #
a
õõ 
[
õõ 
j1
õõ 
+
õõ 
$num
õõ  
]
õõ  !
=
õõ" #
yi
õõ$ &
;
õõ& '
a
öö 
[
öö 
k1
öö 
]
öö 
=
öö 
xr
öö  "
;
öö" #
a
÷÷ 
[
÷÷ 
k1
÷÷ 
+
÷÷ 
$num
÷÷  
]
÷÷  !
=
÷÷" #
xi
÷÷$ &
;
÷÷& '
for
øø 
(
øø 
i
øø 
=
øø  
nh
øø! #
>>
øø$ &
$num
øø' (
;
øø( )
i
øø* +
>
øø, -
(
øø. /
k
øø/ 0
^=
øø1 3
i
øø4 5
)
øø5 6
;
øø6 7
i
øø8 9
>>=
øø: =
$num
øø> ?
)
øø? @
;
øøA B
}
ùù 
k1
úú 
=
úú 
j0
úú 
+
úú 
k0
úú  
;
úú  !
j1
ûû 
=
ûû 
k1
ûû 
+
ûû 
$num
ûû 
;
ûû  
k1
üü 
+=
üü 
nh
üü 
;
üü 
a
ýý 
[
ýý 
j1
ýý 
-
ýý 
$num
ýý 
]
ýý 
=
ýý 
-
ýý  !
a
ýý! "
[
ýý" #
j1
ýý# %
-
ýý& '
$num
ýý( )
]
ýý) *
;
ýý* +
xr
þþ 
=
þþ 
a
þþ 
[
þþ 
j1
þþ 
]
þþ 
;
þþ 
xi
ÿÿ 
=
ÿÿ 
-
ÿÿ 
a
ÿÿ 
[
ÿÿ 
j1
ÿÿ 
+
ÿÿ  
$num
ÿÿ! "
]
ÿÿ" #
;
ÿÿ# $
yr
		 
=
		 
a
		 
[
		 
k1
		 
]
		 
;
		 
yi
		 
=
		 
-
		 
a
		 
[
		 
k1
		 
+
		  
$num
		! "
]
		" #
;
		# $
a
		 
[
		 
j1
		 
]
		 
=
		 
yr
		 
;
		 
a
		 
[
		 
j1
		 
+
		 
$num
		 
]
		 
=
		 
yi
		  "
;
		" #
a
		 
[
		 
k1
		 
]
		 
=
		 
xr
		 
;
		 
a
		 
[
		 
k1
		 
+
		 
$num
		 
]
		 
=
		 
xi
		  "
;
		" #
a
		 
[
		 
k1
		 
+
		 
$num
		 
]
		 
=
		 
-
		  !
a
		! "
[
		" #
k1
		# %
+
		& '
$num
		( )
]
		) *
;
		* +
j1
		 
+=
		 
m
		 
;
		 
k1
		 
+=
		 
$num
		 
*
		 
m
		 
;
		  
xr
		 
=
		 
a
		 
[
		 
j1
		 
]
		 
;
		 
xi
		 
=
		 
-
		 
a
		 
[
		 
j1
		 
+
		  
$num
		! "
]
		" #
;
		# $
yr
		 
=
		 
a
		 
[
		 
k1
		 
]
		 
;
		 
yi
		 
=
		 
-
		 
a
		 
[
		 
k1
		 
+
		  
$num
		! "
]
		" #
;
		# $
a
		 
[
		 
j1
		 
]
		 
=
		 
yr
		 
;
		 
a
		 
[
		 
j1
		 
+
		 
$num
		 
]
		 
=
		 
yi
		  "
;
		" #
a
		 
[
		 
k1
		 
]
		 
=
		 
xr
		 
;
		 
a
		 
[
		 
k1
		 
+
		 
$num
		 
]
		 
=
		 
xi
		  "
;
		" #
j1
		 
+=
		 
m
		 
;
		 
k1
		 
-=
		 
m
		 
;
		 
xr
		 
=
		 
a
		 
[
		 
j1
		 
]
		 
;
		 
xi
		 
=
		 
-
		 
a
		 
[
		 
j1
		 
+
		  
$num
		! "
]
		" #
;
		# $
yr
		 
=
		 
a
		 
[
		 
k1
		 
]
		 
;
		 
yi
		 
=
		 
-
		 
a
		 
[
		 
k1
		 
+
		  
$num
		! "
]
		" #
;
		# $
a
		 
[
		 
j1
		 
]
		 
=
		 
yr
		 
;
		 
a
		 
[
		 
j1
		 
+
		 
$num
		 
]
		 
=
		 
yi
		  "
;
		" #
a
		 
[
		 
k1
		 
]
		 
=
		 
xr
		 
;
		 
a
		 
[
		 
k1
		 
+
		 
$num
		 
]
		 
=
		 
xi
		  "
;
		" #
j1
		 
-=
		 
$num
		 
;
		 
k1
		 
-=
		 
nh
		 
;
		 
xr
		 
=
		 
a
		 
[
		 
j1
		 
]
		 
;
		 
xi
		 
=
		 
-
		 
a
		 
[
		 
j1
		 
+
		  
$num
		! "
]
		" #
;
		# $
yr
		 
=
		 
a
		 
[
		 
k1
		 
]
		 
;
		 
yi
 	 	 
=
 	 	 
-
 	 	 
a
 	 	 
[
 	 	 
k1
 	 	 
+
 	 	  
$num
 	 	! "
]
 	 	" #
;
 	 	# $
a
¡	¡	 
[
¡	¡	 
j1
¡	¡	 
]
¡	¡	 
=
¡	¡	 
yr
¡	¡	 
;
¡	¡	 
a
¢	¢	 
[
¢	¢	 
j1
¢	¢	 
+
¢	¢	 
$num
¢	¢	 
]
¢	¢	 
=
¢	¢	 
yi
¢	¢	  "
;
¢	¢	" #
a
£	£	 
[
£	£	 
k1
£	£	 
]
£	£	 
=
£	£	 
xr
£	£	 
;
£	£	 
a
¤	¤	 
[
¤	¤	 
k1
¤	¤	 
+
¤	¤	 
$num
¤	¤	 
]
¤	¤	 
=
¤	¤	 
xi
¤	¤	  "
;
¤	¤	" #
j1
¥	¥	 
+=
¥	¥	 
nh
¥	¥	 
+
¥	¥	 
$num
¥	¥	  
;
¥	¥	  !
k1
¦	¦	 
+=
¦	¦	 
nh
¦	¦	 
+
¦	¦	 
$num
¦	¦	  
;
¦	¦	  !
xr
§	§	 
=
§	§	 
a
§	§	 
[
§	§	 
j1
§	§	 
]
§	§	 
;
§	§	 
xi
¨	¨	 
=
¨	¨	 
-
¨	¨	 
a
¨	¨	 
[
¨	¨	 
j1
¨	¨	 
+
¨	¨	  
$num
¨	¨	! "
]
¨	¨	" #
;
¨	¨	# $
yr
©	©	 
=
©	©	 
a
©	©	 
[
©	©	 
k1
©	©	 
]
©	©	 
;
©	©	 
yi
ª	ª	 
=
ª	ª	 
-
ª	ª	 
a
ª	ª	 
[
ª	ª	 
k1
ª	ª	 
+
ª	ª	  
$num
ª	ª	! "
]
ª	ª	" #
;
ª	ª	# $
a
«	«	 
[
«	«	 
j1
«	«	 
]
«	«	 
=
«	«	 
yr
«	«	 
;
«	«	 
a
¬	¬	 
[
¬	¬	 
j1
¬	¬	 
+
¬	¬	 
$num
¬	¬	 
]
¬	¬	 
=
¬	¬	 
yi
¬	¬	  "
;
¬	¬	" #
a
­	­	 
[
­	­	 
k1
­	­	 
]
­	­	 
=
­	­	 
xr
­	­	 
;
­	­	 
a
®	®	 
[
®	®	 
k1
®	®	 
+
®	®	 
$num
®	®	 
]
®	®	 
=
®	®	 
xi
®	®	  "
;
®	®	" #
j1
¯	¯	 
-=
¯	¯	 
nh
¯	¯	 
-
¯	¯	 
m
¯	¯	  
;
¯	¯	  !
k1
°	°	 
+=
°	°	 
$num
°	°	 
*
°	°	 
m
°	°	 
-
°	°	  !
$num
°	°	" #
;
°	°	# $
a
±	±	 
[
±	±	 
j1
±	±	 
-
±	±	 
$num
±	±	 
]
±	±	 
=
±	±	 
-
±	±	  !
a
±	±	! "
[
±	±	" #
j1
±	±	# %
-
±	±	& '
$num
±	±	( )
]
±	±	) *
;
±	±	* +
xr
²	²	 
=
²	²	 
a
²	²	 
[
²	²	 
j1
²	²	 
]
²	²	 
;
²	²	 
xi
³	³	 
=
³	³	 
-
³	³	 
a
³	³	 
[
³	³	 
j1
³	³	 
+
³	³	  
$num
³	³	! "
]
³	³	" #
;
³	³	# $
yr
´	´	 
=
´	´	 
a
´	´	 
[
´	´	 
k1
´	´	 
]
´	´	 
;
´	´	 
yi
µ	µ	 
=
µ	µ	 
-
µ	µ	 
a
µ	µ	 
[
µ	µ	 
k1
µ	µ	 
+
µ	µ	  
$num
µ	µ	! "
]
µ	µ	" #
;
µ	µ	# $
a
¶	¶	 
[
¶	¶	 
j1
¶	¶	 
]
¶	¶	 
=
¶	¶	 
yr
¶	¶	 
;
¶	¶	 
a
·	·	 
[
·	·	 
j1
·	·	 
+
·	·	 
$num
·	·	 
]
·	·	 
=
·	·	 
yi
·	·	  "
;
·	·	" #
a
¸	¸	 
[
¸	¸	 
k1
¸	¸	 
]
¸	¸	 
=
¸	¸	 
xr
¸	¸	 
;
¸	¸	 
a
¹	¹	 
[
¹	¹	 
k1
¹	¹	 
+
¹	¹	 
$num
¹	¹	 
]
¹	¹	 
=
¹	¹	 
xi
¹	¹	  "
;
¹	¹	" #
a
º	º	 
[
º	º	 
k1
º	º	 
+
º	º	 
$num
º	º	 
]
º	º	 
=
º	º	 
-
º	º	  !
a
º	º	! "
[
º	º	" #
k1
º	º	# %
+
º	º	& '
$num
º	º	( )
]
º	º	) *
;
º	º	* +
for
»	»	 
(
»	»	 
i
»	»	 
=
»	»	 
nh
»	»	 
>>
»	»	  "
$num
»	»	# $
;
»	»	$ %
i
»	»	& '
>
»	»	( )
(
»	»	* +
j0
»	»	+ -
^=
»	»	. 0
i
»	»	1 2
)
»	»	2 3
;
»	»	3 4
i
»	»	5 6
>>=
»	»	7 :
$num
»	»	; <
)
»	»	< =
;
»	»	> ?
}
¼	¼	 
}
½	½	 
else
¾	¾	 
{
¿	¿	 
j0
À	À	 
=
À	À	 
$num
À	À	 
;
À	À	 
for
Á	Á	 
(
Á	Á	 
k0
Á	Á	 
=
Á	Á	 
$num
Á	Á	 
;
Á	Á	 
k0
Á	Á	 
<
Á	Á	  !
m
Á	Á	" #
;
Á	Á	# $
k0
Á	Á	% '
+=
Á	Á	( *
$num
Á	Á	+ ,
)
Á	Á	, -
{
Â	Â	 
k
Ã	Ã	 
=
Ã	Ã	 
k0
Ã	Ã	 
;
Ã	Ã	 
for
Ä	Ä	 
(
Ä	Ä	 
j
Ä	Ä	 
=
Ä	Ä	 
j0
Ä	Ä	 
;
Ä	Ä	  
j
Ä	Ä	! "
<
Ä	Ä	# $
j0
Ä	Ä	% '
+
Ä	Ä	( )
k0
Ä	Ä	* ,
;
Ä	Ä	, -
j
Ä	Ä	. /
+=
Ä	Ä	0 2
$num
Ä	Ä	3 4
)
Ä	Ä	4 5
{
Å	Å	 
xr
Æ	Æ	 
=
Æ	Æ	 
a
Æ	Æ	 
[
Æ	Æ	 
j
Æ	Æ	  
]
Æ	Æ	  !
;
Æ	Æ	! "
xi
Ç	Ç	 
=
Ç	Ç	 
-
Ç	Ç	 
a
Ç	Ç	 
[
Ç	Ç	  
j
Ç	Ç	  !
+
Ç	Ç	" #
$num
Ç	Ç	$ %
]
Ç	Ç	% &
;
Ç	Ç	& '
yr
È	È	 
=
È	È	 
a
È	È	 
[
È	È	 
k
È	È	  
]
È	È	  !
;
È	È	! "
yi
É	É	 
=
É	É	 
-
É	É	 
a
É	É	 
[
É	É	  
k
É	É	  !
+
É	É	" #
$num
É	É	$ %
]
É	É	% &
;
É	É	& '
a
Ê	Ê	 
[
Ê	Ê	 
j
Ê	Ê	 
]
Ê	Ê	 
=
Ê	Ê	 
yr
Ê	Ê	 !
;
Ê	Ê	! "
a
Ë	Ë	 
[
Ë	Ë	 
j
Ë	Ë	 
+
Ë	Ë	 
$num
Ë	Ë	 
]
Ë	Ë	  
=
Ë	Ë	! "
yi
Ë	Ë	# %
;
Ë	Ë	% &
a
Ì	Ì	 
[
Ì	Ì	 
k
Ì	Ì	 
]
Ì	Ì	 
=
Ì	Ì	 
xr
Ì	Ì	 !
;
Ì	Ì	! "
a
Í	Í	 
[
Í	Í	 
k
Í	Í	 
+
Í	Í	 
$num
Í	Í	 
]
Í	Í	  
=
Í	Í	! "
xi
Í	Í	# %
;
Í	Í	% &
j1
Î	Î	 
=
Î	Î	 
j
Î	Î	 
+
Î	Î	  
m
Î	Î	! "
;
Î	Î	" #
k1
Ï	Ï	 
=
Ï	Ï	 
k
Ï	Ï	 
+
Ï	Ï	  
m
Ï	Ï	! "
;
Ï	Ï	" #
xr
Ð	Ð	 
=
Ð	Ð	 
a
Ð	Ð	 
[
Ð	Ð	 
j1
Ð	Ð	 !
]
Ð	Ð	! "
;
Ð	Ð	" #
xi
Ñ	Ñ	 
=
Ñ	Ñ	 
-
Ñ	Ñ	 
a
Ñ	Ñ	 
[
Ñ	Ñ	  
j1
Ñ	Ñ	  "
+
Ñ	Ñ	# $
$num
Ñ	Ñ	% &
]
Ñ	Ñ	& '
;
Ñ	Ñ	' (
yr
Ò	Ò	 
=
Ò	Ò	 
a
Ò	Ò	 
[
Ò	Ò	 
k1
Ò	Ò	 !
]
Ò	Ò	! "
;
Ò	Ò	" #
yi
Ó	Ó	 
=
Ó	Ó	 
-
Ó	Ó	 
a
Ó	Ó	 
[
Ó	Ó	  
k1
Ó	Ó	  "
+
Ó	Ó	# $
$num
Ó	Ó	% &
]
Ó	Ó	& '
;
Ó	Ó	' (
a
Ô	Ô	 
[
Ô	Ô	 
j1
Ô	Ô	 
]
Ô	Ô	 
=
Ô	Ô	 
yr
Ô	Ô	  "
;
Ô	Ô	" #
a
Õ	Õ	 
[
Õ	Õ	 
j1
Õ	Õ	 
+
Õ	Õ	 
$num
Õ	Õ	  
]
Õ	Õ	  !
=
Õ	Õ	" #
yi
Õ	Õ	$ &
;
Õ	Õ	& '
a
Ö	Ö	 
[
Ö	Ö	 
k1
Ö	Ö	 
]
Ö	Ö	 
=
Ö	Ö	 
xr
Ö	Ö	  "
;
Ö	Ö	" #
a
×	×	 
[
×	×	 
k1
×	×	 
+
×	×	 
$num
×	×	  
]
×	×	  !
=
×	×	" #
xi
×	×	$ &
;
×	×	& '
j1
Ø	Ø	 
+=
Ø	Ø	 
nh
Ø	Ø	  
;
Ø	Ø	  !
k1
Ù	Ù	 
+=
Ù	Ù	 
$num
Ù	Ù	 
;
Ù	Ù	  
xr
Ú	Ú	 
=
Ú	Ú	 
a
Ú	Ú	 
[
Ú	Ú	 
j1
Ú	Ú	 !
]
Ú	Ú	! "
;
Ú	Ú	" #
xi
Û	Û	 
=
Û	Û	 
-
Û	Û	 
a
Û	Û	 
[
Û	Û	  
j1
Û	Û	  "
+
Û	Û	# $
$num
Û	Û	% &
]
Û	Û	& '
;
Û	Û	' (
yr
Ü	Ü	 
=
Ü	Ü	 
a
Ü	Ü	 
[
Ü	Ü	 
k1
Ü	Ü	 !
]
Ü	Ü	! "
;
Ü	Ü	" #
yi
Ý	Ý	 
=
Ý	Ý	 
-
Ý	Ý	 
a
Ý	Ý	 
[
Ý	Ý	  
k1
Ý	Ý	  "
+
Ý	Ý	# $
$num
Ý	Ý	% &
]
Ý	Ý	& '
;
Ý	Ý	' (
a
Þ	Þ	 
[
Þ	Þ	 
j1
Þ	Þ	 
]
Þ	Þ	 
=
Þ	Þ	 
yr
Þ	Þ	  "
;
Þ	Þ	" #
a
ß	ß	 
[
ß	ß	 
j1
ß	ß	 
+
ß	ß	 
$num
ß	ß	  
]
ß	ß	  !
=
ß	ß	" #
yi
ß	ß	$ &
;
ß	ß	& '
a
à	à	 
[
à	à	 
k1
à	à	 
]
à	à	 
=
à	à	 
xr
à	à	  "
;
à	à	" #
a
á	á	 
[
á	á	 
k1
á	á	 
+
á	á	 
$num
á	á	  
]
á	á	  !
=
á	á	" #
xi
á	á	$ &
;
á	á	& '
j1
â	â	 
-=
â	â	 
m
â	â	 
;
â	â	  
k1
ã	ã	 
-=
ã	ã	 
m
ã	ã	 
;
ã	ã	  
xr
ä	ä	 
=
ä	ä	 
a
ä	ä	 
[
ä	ä	 
j1
ä	ä	 !
]
ä	ä	! "
;
ä	ä	" #
xi
å	å	 
=
å	å	 
-
å	å	 
a
å	å	 
[
å	å	  
j1
å	å	  "
+
å	å	# $
$num
å	å	% &
]
å	å	& '
;
å	å	' (
yr
æ	æ	 
=
æ	æ	 
a
æ	æ	 
[
æ	æ	 
k1
æ	æ	 !
]
æ	æ	! "
;
æ	æ	" #
yi
ç	ç	 
=
ç	ç	 
-
ç	ç	 
a
ç	ç	 
[
ç	ç	  
k1
ç	ç	  "
+
ç	ç	# $
$num
ç	ç	% &
]
ç	ç	& '
;
ç	ç	' (
a
è	è	 
[
è	è	 
j1
è	è	 
]
è	è	 
=
è	è	 
yr
è	è	  "
;
è	è	" #
a
é	é	 
[
é	é	 
j1
é	é	 
+
é	é	 
$num
é	é	  
]
é	é	  !
=
é	é	" #
yi
é	é	$ &
;
é	é	& '
a
ê	ê	 
[
ê	ê	 
k1
ê	ê	 
]
ê	ê	 
=
ê	ê	 
xr
ê	ê	  "
;
ê	ê	" #
a
ë	ë	 
[
ë	ë	 
k1
ë	ë	 
+
ë	ë	 
$num
ë	ë	  
]
ë	ë	  !
=
ë	ë	" #
xi
ë	ë	$ &
;
ë	ë	& '
j1
ì	ì	 
+=
ì	ì	 
$num
ì	ì	 
;
ì	ì	  
k1
í	í	 
+=
í	í	 
nh
í	í	  
;
í	í	  !
xr
î	î	 
=
î	î	 
a
î	î	 
[
î	î	 
j1
î	î	 !
]
î	î	! "
;
î	î	" #
xi
ï	ï	 
=
ï	ï	 
-
ï	ï	 
a
ï	ï	 
[
ï	ï	  
j1
ï	ï	  "
+
ï	ï	# $
$num
ï	ï	% &
]
ï	ï	& '
;
ï	ï	' (
yr
ð	ð	 
=
ð	ð	 
a
ð	ð	 
[
ð	ð	 
k1
ð	ð	 !
]
ð	ð	! "
;
ð	ð	" #
yi
ñ	ñ	 
=
ñ	ñ	 
-
ñ	ñ	 
a
ñ	ñ	 
[
ñ	ñ	  
k1
ñ	ñ	  "
+
ñ	ñ	# $
$num
ñ	ñ	% &
]
ñ	ñ	& '
;
ñ	ñ	' (
a
ò	ò	 
[
ò	ò	 
j1
ò	ò	 
]
ò	ò	 
=
ò	ò	 
yr
ò	ò	  "
;
ò	ò	" #
a
ó	ó	 
[
ó	ó	 
j1
ó	ó	 
+
ó	ó	 
$num
ó	ó	  
]
ó	ó	  !
=
ó	ó	" #
yi
ó	ó	$ &
;
ó	ó	& '
a
ô	ô	 
[
ô	ô	 
k1
ô	ô	 
]
ô	ô	 
=
ô	ô	 
xr
ô	ô	  "
;
ô	ô	" #
a
õ	õ	 
[
õ	õ	 
k1
õ	õ	 
+
õ	õ	 
$num
õ	õ	  
]
õ	õ	  !
=
õ	õ	" #
xi
õ	õ	$ &
;
õ	õ	& '
j1
ö	ö	 
+=
ö	ö	 
m
ö	ö	 
;
ö	ö	  
k1
÷	÷	 
+=
÷	÷	 
m
÷	÷	 
;
÷	÷	  
xr
ø	ø	 
=
ø	ø	 
a
ø	ø	 
[
ø	ø	 
j1
ø	ø	 !
]
ø	ø	! "
;
ø	ø	" #
xi
ù	ù	 
=
ù	ù	 
-
ù	ù	 
a
ù	ù	 
[
ù	ù	  
j1
ù	ù	  "
+
ù	ù	# $
$num
ù	ù	% &
]
ù	ù	& '
;
ù	ù	' (
yr
ú	ú	 
=
ú	ú	 
a
ú	ú	 
[
ú	ú	 
k1
ú	ú	 !
]
ú	ú	! "
;
ú	ú	" #
yi
û	û	 
=
û	û	 
-
û	û	 
a
û	û	 
[
û	û	  
k1
û	û	  "
+
û	û	# $
$num
û	û	% &
]
û	û	& '
;
û	û	' (
a
ü	ü	 
[
ü	ü	 
j1
ü	ü	 
]
ü	ü	 
=
ü	ü	 
yr
ü	ü	  "
;
ü	ü	" #
a
ý	ý	 
[
ý	ý	 
j1
ý	ý	 
+
ý	ý	 
$num
ý	ý	  
]
ý	ý	  !
=
ý	ý	" #
yi
ý	ý	$ &
;
ý	ý	& '
a
þ	þ	 
[
þ	þ	 
k1
þ	þ	 
]
þ	þ	 
=
þ	þ	 
xr
þ	þ	  "
;
þ	þ	" #
a
ÿ	ÿ	 
[
ÿ	ÿ	 
k1
ÿ	ÿ	 
+
ÿ	ÿ	 
$num
ÿ	ÿ	  
]
ÿ	ÿ	  !
=
ÿ	ÿ	" #
xi
ÿ	ÿ	$ &
;
ÿ	ÿ	& '
j1


 
-=


 
nh


  
;


  !
k1


 
-=


 
$num


 
;


  
xr


 
=


 
a


 
[


 
j1


 !
]


! "
;


" #
xi


 
=


 
-


 
a


 
[


  
j1


  "
+


# $
$num


% &
]


& '
;


' (
yr


 
=


 
a


 
[


 
k1


 !
]


! "
;


" #
yi


 
=


 
-


 
a


 
[


  
k1


  "
+


# $
$num


% &
]


& '
;


' (
a


 
[


 
j1


 
]


 
=


 
yr


  "
;


" #
a


 
[


 
j1


 
+


 
$num


  
]


  !
=


" #
yi


$ &
;


& '
a


 
[


 
k1


 
]


 
=


 
xr


  "
;


" #
a


 
[


 
k1


 
+


 
$num


  
]


  !
=


" #
xi


$ &
;


& '
j1


 
-=


 
m


 
;


  
k1


 
-=


 
m


 
;


  
xr


 
=


 
a


 
[


 
j1


 !
]


! "
;


" #
xi


 
=


 
-


 
a


 
[


  
j1


  "
+


# $
$num


% &
]


& '
;


' (
yr


 
=


 
a


 
[


 
k1


 !
]


! "
;


" #
yi


 
=


 
-


 
a


 
[


  
k1


  "
+


# $
$num


% &
]


& '
;


' (
a


 
[


 
j1


 
]


 
=


 
yr


  "
;


" #
a


 
[


 
j1


 
+


 
$num


  
]


  !
=


" #
yi


$ &
;


& '
a


 
[


 
k1


 
]


 
=


 
xr


  "
;


" #
a


 
[


 
k1


 
+


 
$num


  
]


  !
=


" #
xi


$ &
;


& '
for


 
(


 
i


 
=


  
nh


! #
>>


$ &
$num


' (
;


( )
i


* +
>


, -
(


. /
k


/ 0
^=


1 3
i


4 5
)


5 6
;


6 7
i


8 9
>>=


: =
$num


> ?
)


? @
;


A B
}


 
k1


 
=


 
j0


 
+


 
k0


  
;


  !
j1


 
=


 
k1


 
+


 
$num


 
;


  
k1


 
+=


 
nh


 
;


 
a


 
[


 
j1


 
-


 
$num


 
]


 
=


 
-


  !
a


! "
[


" #
j1


# %
-


& '
$num


( )
]


) *
;


* +
xr


 
=


 
a


 
[


 
j1


 
]


 
;


 
xi


 
=


 
-


 
a


 
[


 
j1


 
+


  
$num


! "
]


" #
;


# $
yr


 
=


 
a


 
[


 
k1


 
]


 
;


 
yi


 
=


 
-


 
a


 
[


 
k1


 
+


  
$num


! "
]


" #
;


# $
a


 
[


 
j1


 
]


 
=


 
yr


 
;


 
a


 
[


 
j1


 
+


 
$num


 
]


 
=


 
yi


  "
;


" #
a
 
 
 
[
 
 
 
k1
 
 
 
]
 
 
 
=
 
 
 
xr
 
 
 
;
 
 
 
a
¡
¡
 
[
¡
¡
 
k1
¡
¡
 
+
¡
¡
 
$num
¡
¡
 
]
¡
¡
 
=
¡
¡
 
xi
¡
¡
  "
;
¡
¡
" #
a
¢
¢
 
[
¢
¢
 
k1
¢
¢
 
+
¢
¢
 
$num
¢
¢
 
]
¢
¢
 
=
¢
¢
 
-
¢
¢
  !
a
¢
¢
! "
[
¢
¢
" #
k1
¢
¢
# %
+
¢
¢
& '
$num
¢
¢
( )
]
¢
¢
) *
;
¢
¢
* +
j1
£
£
 
+=
£
£
 
m
£
£
 
;
£
£
 
k1
¤
¤
 
+=
¤
¤
 
m
¤
¤
 
;
¤
¤
 
a
¥
¥
 
[
¥
¥
 
j1
¥
¥
 
-
¥
¥
 
$num
¥
¥
 
]
¥
¥
 
=
¥
¥
 
-
¥
¥
  !
a
¥
¥
! "
[
¥
¥
" #
j1
¥
¥
# %
-
¥
¥
& '
$num
¥
¥
( )
]
¥
¥
) *
;
¥
¥
* +
xr
¦
¦
 
=
¦
¦
 
a
¦
¦
 
[
¦
¦
 
j1
¦
¦
 
]
¦
¦
 
;
¦
¦
 
xi
§
§
 
=
§
§
 
-
§
§
 
a
§
§
 
[
§
§
 
j1
§
§
 
+
§
§
  
$num
§
§
! "
]
§
§
" #
;
§
§
# $
yr
¨
¨
 
=
¨
¨
 
a
¨
¨
 
[
¨
¨
 
k1
¨
¨
 
]
¨
¨
 
;
¨
¨
 
yi
©
©
 
=
©
©
 
-
©
©
 
a
©
©
 
[
©
©
 
k1
©
©
 
+
©
©
  
$num
©
©
! "
]
©
©
" #
;
©
©
# $
a
ª
ª
 
[
ª
ª
 
j1
ª
ª
 
]
ª
ª
 
=
ª
ª
 
yr
ª
ª
 
;
ª
ª
 
a
«
«
 
[
«
«
 
j1
«
«
 
+
«
«
 
$num
«
«
 
]
«
«
 
=
«
«
 
yi
«
«
  "
;
«
«
" #
a
¬
¬
 
[
¬
¬
 
k1
¬
¬
 
]
¬
¬
 
=
¬
¬
 
xr
¬
¬
 
;
¬
¬
 
a
­
­
 
[
­
­
 
k1
­
­
 
+
­
­
 
$num
­
­
 
]
­
­
 
=
­
­
 
xi
­
­
  "
;
­
­
" #
a
®
®
 
[
®
®
 
k1
®
®
 
+
®
®
 
$num
®
®
 
]
®
®
 
=
®
®
 
-
®
®
  !
a
®
®
! "
[
®
®
" #
k1
®
®
# %
+
®
®
& '
$num
®
®
( )
]
®
®
) *
;
®
®
* +
for
¯
¯
 
(
¯
¯
 
i
¯
¯
 
=
¯
¯
 
nh
¯
¯
 
>>
¯
¯
  "
$num
¯
¯
# $
;
¯
¯
$ %
i
¯
¯
& '
>
¯
¯
( )
(
¯
¯
* +
j0
¯
¯
+ -
^=
¯
¯
. 0
i
¯
¯
1 2
)
¯
¯
2 3
;
¯
¯
3 4
i
¯
¯
5 6
>>=
¯
¯
7 :
$num
¯
¯
; <
)
¯
¯
< =
;
¯
¯
> ?
}
°
°
 
}
±
±
 
}
²
²
 	
static
µ
µ
 
void
µ
µ
 
bitrv216
µ
µ
 
(
µ
µ
 
double
µ
µ
 #
*
µ
µ
# $
a
µ
µ
% &
)
µ
µ
& '
{
¶
¶
 	
double
·
·
 
x1r
·
·
 
,
·
·
 
x1i
·
·
 
,
·
·
 
x2r
·
·
  
,
·
·
  !
x2i
·
·
" %
,
·
·
% &
x3r
·
·
' *
,
·
·
* +
x3i
·
·
, /
,
·
·
/ 0
x4r
·
·
1 4
,
·
·
4 5
x4i
·
·
6 9
,
·
·
9 :
x5r
¸
¸
 
,
¸
¸
 
x5i
¸
¸
 
,
¸
¸
 
x7r
¸
¸
 
,
¸
¸
 
x7i
¸
¸
 "
,
¸
¸
" #
x8r
¸
¸
$ '
,
¸
¸
' (
x8i
¸
¸
) ,
,
¸
¸
, -
x10r
¸
¸
. 2
,
¸
¸
2 3
x10i
¸
¸
4 8
,
¸
¸
8 9
x11r
¹
¹
 
,
¹
¹
 
x11i
¹
¹
 
,
¹
¹
 
x12r
¹
¹
  
,
¹
¹
  !
x12i
¹
¹
" &
,
¹
¹
& '
x13r
¹
¹
( ,
,
¹
¹
, -
x13i
¹
¹
. 2
,
¹
¹
2 3
x14r
¹
¹
4 8
,
¹
¹
8 9
x14i
¹
¹
: >
;
¹
¹
> ?
x1r
»
»
 
=
»
»
 
a
»
»
 
[
»
»
 
$num
»
»
 
]
»
»
 
;
»
»
 
x1i
¼
¼
 
=
¼
¼
 
a
¼
¼
 
[
¼
¼
 
$num
¼
¼
 
]
¼
¼
 
;
¼
¼
 
x2r
½
½
 
=
½
½
 
a
½
½
 
[
½
½
 
$num
½
½
 
]
½
½
 
;
½
½
 
x2i
¾
¾
 
=
¾
¾
 
a
¾
¾
 
[
¾
¾
 
$num
¾
¾
 
]
¾
¾
 
;
¾
¾
 
x3r
¿
¿
 
=
¿
¿
 
a
¿
¿
 
[
¿
¿
 
$num
¿
¿
 
]
¿
¿
 
;
¿
¿
 
x3i
À
À
 
=
À
À
 
a
À
À
 
[
À
À
 
$num
À
À
 
]
À
À
 
;
À
À
 
x4r
Á
Á
 
=
Á
Á
 
a
Á
Á
 
[
Á
Á
 
$num
Á
Á
 
]
Á
Á
 
;
Á
Á
 
x4i
Â
Â
 
=
Â
Â
 
a
Â
Â
 
[
Â
Â
 
$num
Â
Â
 
]
Â
Â
 
;
Â
Â
 
x5r
Ã
Ã
 
=
Ã
Ã
 
a
Ã
Ã
 
[
Ã
Ã
 
$num
Ã
Ã
 
]
Ã
Ã
 
;
Ã
Ã
 
x5i
Ä
Ä
 
=
Ä
Ä
 
a
Ä
Ä
 
[
Ä
Ä
 
$num
Ä
Ä
 
]
Ä
Ä
 
;
Ä
Ä
 
x7r
Å
Å
 
=
Å
Å
 
a
Å
Å
 
[
Å
Å
 
$num
Å
Å
 
]
Å
Å
 
;
Å
Å
 
x7i
Æ
Æ
 
=
Æ
Æ
 
a
Æ
Æ
 
[
Æ
Æ
 
$num
Æ
Æ
 
]
Æ
Æ
 
;
Æ
Æ
 
x8r
Ç
Ç
 
=
Ç
Ç
 
a
Ç
Ç
 
[
Ç
Ç
 
$num
Ç
Ç
 
]
Ç
Ç
 
;
Ç
Ç
 
x8i
È
È
 
=
È
È
 
a
È
È
 
[
È
È
 
$num
È
È
 
]
È
È
 
;
È
È
 
x10r
É
É
 
=
É
É
 
a
É
É
 
[
É
É
 
$num
É
É
 
]
É
É
 
;
É
É
 
x10i
Ê
Ê
 
=
Ê
Ê
 
a
Ê
Ê
 
[
Ê
Ê
 
$num
Ê
Ê
 
]
Ê
Ê
 
;
Ê
Ê
 
x11r
Ë
Ë
 
=
Ë
Ë
 
a
Ë
Ë
 
[
Ë
Ë
 
$num
Ë
Ë
 
]
Ë
Ë
 
;
Ë
Ë
 
x11i
Ì
Ì
 
=
Ì
Ì
 
a
Ì
Ì
 
[
Ì
Ì
 
$num
Ì
Ì
 
]
Ì
Ì
 
;
Ì
Ì
 
x12r
Í
Í
 
=
Í
Í
 
a
Í
Í
 
[
Í
Í
 
$num
Í
Í
 
]
Í
Í
 
;
Í
Í
 
x12i
Î
Î
 
=
Î
Î
 
a
Î
Î
 
[
Î
Î
 
$num
Î
Î
 
]
Î
Î
 
;
Î
Î
 
x13r
Ï
Ï
 
=
Ï
Ï
 
a
Ï
Ï
 
[
Ï
Ï
 
$num
Ï
Ï
 
]
Ï
Ï
 
;
Ï
Ï
 
x13i
Ð
Ð
 
=
Ð
Ð
 
a
Ð
Ð
 
[
Ð
Ð
 
$num
Ð
Ð
 
]
Ð
Ð
 
;
Ð
Ð
 
x14r
Ñ
Ñ
 
=
Ñ
Ñ
 
a
Ñ
Ñ
 
[
Ñ
Ñ
 
$num
Ñ
Ñ
 
]
Ñ
Ñ
 
;
Ñ
Ñ
 
x14i
Ò
Ò
 
=
Ò
Ò
 
a
Ò
Ò
 
[
Ò
Ò
 
$num
Ò
Ò
 
]
Ò
Ò
 
;
Ò
Ò
 
a
Ó
Ó
 
[
Ó
Ó
 
$num
Ó
Ó
 
]
Ó
Ó
 
=
Ó
Ó
 
x8r
Ó
Ó
 
;
Ó
Ó
 
a
Ô
Ô
 
[
Ô
Ô
 
$num
Ô
Ô
 
]
Ô
Ô
 
=
Ô
Ô
 
x8i
Ô
Ô
 
;
Ô
Ô
 
a
Õ
Õ
 
[
Õ
Õ
 
$num
Õ
Õ
 
]
Õ
Õ
 
=
Õ
Õ
 
x4r
Õ
Õ
 
;
Õ
Õ
 
a
Ö
Ö
 
[
Ö
Ö
 
$num
Ö
Ö
 
]
Ö
Ö
 
=
Ö
Ö
 
x4i
Ö
Ö
 
;
Ö
Ö
 
a
×
×
 
[
×
×
 
$num
×
×
 
]
×
×
 
=
×
×
 
x12r
×
×
 
;
×
×
 
a
Ø
Ø
 
[
Ø
Ø
 
$num
Ø
Ø
 
]
Ø
Ø
 
=
Ø
Ø
 
x12i
Ø
Ø
 
;
Ø
Ø
 
a
Ù
Ù
 
[
Ù
Ù
 
$num
Ù
Ù
 
]
Ù
Ù
 
=
Ù
Ù
 
x2r
Ù
Ù
 
;
Ù
Ù
 
a
Ú
Ú
 
[
Ú
Ú
 
$num
Ú
Ú
 
]
Ú
Ú
 
=
Ú
Ú
 
x2i
Ú
Ú
 
;
Ú
Ú
 
a
Û
Û
 
[
Û
Û
 
$num
Û
Û
 
]
Û
Û
 
=
Û
Û
 
x10r
Û
Û
 
;
Û
Û
 
a
Ü
Ü
 
[
Ü
Ü
 
$num
Ü
Ü
 
]
Ü
Ü
 
=
Ü
Ü
 
x10i
Ü
Ü
 
;
Ü
Ü
 
a
Ý
Ý
 
[
Ý
Ý
 
$num
Ý
Ý
 
]
Ý
Ý
 
=
Ý
Ý
 
x14r
Ý
Ý
 
;
Ý
Ý
 
a
Þ
Þ
 
[
Þ
Þ
 
$num
Þ
Þ
 
]
Þ
Þ
 
=
Þ
Þ
 
x14i
Þ
Þ
 
;
Þ
Þ
 
a
ß
ß
 
[
ß
ß
 
$num
ß
ß
 
]
ß
ß
 
=
ß
ß
 
x1r
ß
ß
 
;
ß
ß
 
a
à
à
 
[
à
à
 
$num
à
à
 
]
à
à
 
=
à
à
 
x1i
à
à
 
;
à
à
 
a
á
á
 
[
á
á
 
$num
á
á
 
]
á
á
 
=
á
á
 
x5r
á
á
 
;
á
á
 
a
â
â
 
[
â
â
 
$num
â
â
 
]
â
â
 
=
â
â
 
x5i
â
â
 
;
â
â
 
a
ã
ã
 
[
ã
ã
 
$num
ã
ã
 
]
ã
ã
 
=
ã
ã
 
x13r
ã
ã
 
;
ã
ã
 
a
ä
ä
 
[
ä
ä
 
$num
ä
ä
 
]
ä
ä
 
=
ä
ä
 
x13i
ä
ä
 
;
ä
ä
 
a
å
å
 
[
å
å
 
$num
å
å
 
]
å
å
 
=
å
å
 
x3r
å
å
 
;
å
å
 
a
æ
æ
 
[
æ
æ
 
$num
æ
æ
 
]
æ
æ
 
=
æ
æ
 
x3i
æ
æ
 
;
æ
æ
 
a
ç
ç
 
[
ç
ç
 
$num
ç
ç
 
]
ç
ç
 
=
ç
ç
 
x11r
ç
ç
 
;
ç
ç
 
a
è
è
 
[
è
è
 
$num
è
è
 
]
è
è
 
=
è
è
 
x11i
è
è
 
;
è
è
 
a
é
é
 
[
é
é
 
$num
é
é
 
]
é
é
 
=
é
é
 
x7r
é
é
 
;
é
é
 
a
ê
ê
 
[
ê
ê
 
$num
ê
ê
 
]
ê
ê
 
=
ê
ê
 
x7i
ê
ê
 
;
ê
ê
 
}
ë
ë
 	
static
î
î
 
void
î
î
 
bitrv216neg
î
î
 
(
î
î
  
double
î
î
  &
*
î
î
& '
a
î
î
( )
)
î
î
) *
{
ï
ï
 	
double
ð
ð
 
x1r
ð
ð
 
,
ð
ð
 
x1i
ð
ð
 
,
ð
ð
 
x2r
ð
ð
  
,
ð
ð
  !
x2i
ð
ð
" %
,
ð
ð
% &
x3r
ð
ð
' *
,
ð
ð
* +
x3i
ð
ð
, /
,
ð
ð
/ 0
x4r
ð
ð
1 4
,
ð
ð
4 5
x4i
ð
ð
6 9
,
ð
ð
9 :
x5r
ñ
ñ
 
,
ñ
ñ
 
x5i
ñ
ñ
 
,
ñ
ñ
 
x6r
ñ
ñ
 
,
ñ
ñ
 
x6i
ñ
ñ
 "
,
ñ
ñ
" #
x7r
ñ
ñ
$ '
,
ñ
ñ
' (
x7i
ñ
ñ
) ,
,
ñ
ñ
, -
x8r
ñ
ñ
. 1
,
ñ
ñ
1 2
x8i
ñ
ñ
3 6
,
ñ
ñ
6 7
x9r
ò
ò
 
,
ò
ò
 
x9i
ò
ò
 
,
ò
ò
 
x10r
ò
ò
 
,
ò
ò
 
x10i
ò
ò
  $
,
ò
ò
$ %
x11r
ò
ò
& *
,
ò
ò
* +
x11i
ò
ò
, 0
,
ò
ò
0 1
x12r
ò
ò
2 6
,
ò
ò
6 7
x12i
ò
ò
8 <
,
ò
ò
< =
x13r
ó
ó
 
,
ó
ó
 
x13i
ó
ó
 
,
ó
ó
 
x14r
ó
ó
  
,
ó
ó
  !
x14i
ó
ó
" &
,
ó
ó
& '
x15r
ó
ó
( ,
,
ó
ó
, -
x15i
ó
ó
. 2
;
ó
ó
2 3
x1r
õ
õ
 
=
õ
õ
 
a
õ
õ
 
[
õ
õ
 
$num
õ
õ
 
]
õ
õ
 
;
õ
õ
 
x1i
ö
ö
 
=
ö
ö
 
a
ö
ö
 
[
ö
ö
 
$num
ö
ö
 
]
ö
ö
 
;
ö
ö
 
x2r
÷
÷
 
=
÷
÷
 
a
÷
÷
 
[
÷
÷
 
$num
÷
÷
 
]
÷
÷
 
;
÷
÷
 
x2i
ø
ø
 
=
ø
ø
 
a
ø
ø
 
[
ø
ø
 
$num
ø
ø
 
]
ø
ø
 
;
ø
ø
 
x3r
ù
ù
 
=
ù
ù
 
a
ù
ù
 
[
ù
ù
 
$num
ù
ù
 
]
ù
ù
 
;
ù
ù
 
x3i
ú
ú
 
=
ú
ú
 
a
ú
ú
 
[
ú
ú
 
$num
ú
ú
 
]
ú
ú
 
;
ú
ú
 
x4r
û
û
 
=
û
û
 
a
û
û
 
[
û
û
 
$num
û
û
 
]
û
û
 
;
û
û
 
x4i
ü
ü
 
=
ü
ü
 
a
ü
ü
 
[
ü
ü
 
$num
ü
ü
 
]
ü
ü
 
;
ü
ü
 
x5r
ý
ý
 
=
ý
ý
 
a
ý
ý
 
[
ý
ý
 
$num
ý
ý
 
]
ý
ý
 
;
ý
ý
 
x5i
þ
þ
 
=
þ
þ
 
a
þ
þ
 
[
þ
þ
 
$num
þ
þ
 
]
þ
þ
 
;
þ
þ
 
x6r
ÿ
ÿ
 
=
ÿ
ÿ
 
a
ÿ
ÿ
 
[
ÿ
ÿ
 
$num
ÿ
ÿ
 
]
ÿ
ÿ
 
;
ÿ
ÿ
 
x6i
 
=
 
a
 
[
 
$num
 
]
 
;
 
x7r
 
=
 
a
 
[
 
$num
 
]
 
;
 
x7i
 
=
 
a
 
[
 
$num
 
]
 
;
 
x8r
 
=
 
a
 
[
 
$num
 
]
 
;
 
x8i
 
=
 
a
 
[
 
$num
 
]
 
;
 
x9r
 
=
 
a
 
[
 
$num
 
]
 
;
 
x9i
 
=
 
a
 
[
 
$num
 
]
 
;
 
x10r
 
=
 
a
 
[
 
$num
 
]
 
;
 
x10i
 
=
 
a
 
[
 
$num
 
]
 
;
 
x11r
 
=
 
a
 
[
 
$num
 
]
 
;
 
x11i
 
=
 
a
 
[
 
$num
 
]
 
;
 
x12r
 
=
 
a
 
[
 
$num
 
]
 
;
 
x12i
 
=
 
a
 
[
 
$num
 
]
 
;
 
x13r
 
=
 
a
 
[
 
$num
 
]
 
;
 
x13i
 
=
 
a
 
[
 
$num
 
]
 
;
 
x14r
 
=
 
a
 
[
 
$num
 
]
 
;
 
x14i
 
=
 
a
 
[
 
$num
 
]
 
;
 
x15r
 
=
 
a
 
[
 
$num
 
]
 
;
 
x15i
 
=
 
a
 
[
 
$num
 
]
 
;
 
a
 
[
 
$num
 
]
 
=
 
x15r
 
;
 
a
 
[
 
$num
 
]
 
=
 
x15i
 
;
 
a
 
[
 
$num
 
]
 
=
 
x7r
 
;
 
a
 
[
 
$num
 
]
 
=
 
x7i
 
;
 
a
 
[
 
$num
 
]
 
=
 
x11r
 
;
 
a
 
[
 
$num
 
]
 
=
 
x11i
 
;
 
a
 
[
 
$num
 
]
 
=
 
x3r
 
;
 
a
 
[
 
$num
 
]
 
=
 
x3i
 
;
 
a
 
[
 
$num
 
]
 
=
 
x13r
 
;
 
a
 
[
 
$num
 
]
 
=
 
x13i
 
;
 
a
 
[
 
$num
 
]
 
=
 
x5r
 
;
 
a
 
[
 
$num
 
]
 
=
 
x5i
 
;
 
a
 
[
 
$num
 
]
 
=
 
x9r
 
;
 
a
   
[
   
$num
   
]
   
=
   
x9i
   
;
   
a
¡¡ 
[
¡¡ 
$num
¡¡ 
]
¡¡ 
=
¡¡ 
x1r
¡¡ 
;
¡¡ 
a
¢¢ 
[
¢¢ 
$num
¢¢ 
]
¢¢ 
=
¢¢ 
x1i
¢¢ 
;
¢¢ 
a
££ 
[
££ 
$num
££ 
]
££ 
=
££ 
x14r
££ 
;
££ 
a
¤¤ 
[
¤¤ 
$num
¤¤ 
]
¤¤ 
=
¤¤ 
x14i
¤¤ 
;
¤¤ 
a
¥¥ 
[
¥¥ 
$num
¥¥ 
]
¥¥ 
=
¥¥ 
x6r
¥¥ 
;
¥¥ 
a
¦¦ 
[
¦¦ 
$num
¦¦ 
]
¦¦ 
=
¦¦ 
x6i
¦¦ 
;
¦¦ 
a
§§ 
[
§§ 
$num
§§ 
]
§§ 
=
§§ 
x10r
§§ 
;
§§ 
a
¨¨ 
[
¨¨ 
$num
¨¨ 
]
¨¨ 
=
¨¨ 
x10i
¨¨ 
;
¨¨ 
a
©© 
[
©© 
$num
©© 
]
©© 
=
©© 
x2r
©© 
;
©© 
a
ªª 
[
ªª 
$num
ªª 
]
ªª 
=
ªª 
x2i
ªª 
;
ªª 
a
«« 
[
«« 
$num
«« 
]
«« 
=
«« 
x12r
«« 
;
«« 
a
¬¬ 
[
¬¬ 
$num
¬¬ 
]
¬¬ 
=
¬¬ 
x12i
¬¬ 
;
¬¬ 
a
­­ 
[
­­ 
$num
­­ 
]
­­ 
=
­­ 
x4r
­­ 
;
­­ 
a
®® 
[
®® 
$num
®® 
]
®® 
=
®® 
x4i
®® 
;
®® 
a
¯¯ 
[
¯¯ 
$num
¯¯ 
]
¯¯ 
=
¯¯ 
x8r
¯¯ 
;
¯¯ 
a
°° 
[
°° 
$num
°° 
]
°° 
=
°° 
x8i
°° 
;
°° 
}
±± 	
static
´´ 
void
´´ 
bitrv208
´´ 
(
´´ 
double
´´ #
*
´´# $
a
´´% &
)
´´& '
{
µµ 	
double
¶¶ 
x1r
¶¶ 
,
¶¶ 
x1i
¶¶ 
,
¶¶ 
x3r
¶¶  
,
¶¶  !
x3i
¶¶" %
,
¶¶% &
x4r
¶¶' *
,
¶¶* +
x4i
¶¶, /
,
¶¶/ 0
x6r
¶¶1 4
,
¶¶4 5
x6i
¶¶6 9
;
¶¶9 :
x1r
¸¸ 
=
¸¸ 
a
¸¸ 
[
¸¸ 
$num
¸¸ 
]
¸¸ 
;
¸¸ 
x1i
¹¹ 
=
¹¹ 
a
¹¹ 
[
¹¹ 
$num
¹¹ 
]
¹¹ 
;
¹¹ 
x3r
ºº 
=
ºº 
a
ºº 
[
ºº 
$num
ºº 
]
ºº 
;
ºº 
x3i
»» 
=
»» 
a
»» 
[
»» 
$num
»» 
]
»» 
;
»» 
x4r
¼¼ 
=
¼¼ 
a
¼¼ 
[
¼¼ 
$num
¼¼ 
]
¼¼ 
;
¼¼ 
x4i
½½ 
=
½½ 
a
½½ 
[
½½ 
$num
½½ 
]
½½ 
;
½½ 
x6r
¾¾ 
=
¾¾ 
a
¾¾ 
[
¾¾ 
$num
¾¾ 
]
¾¾ 
;
¾¾ 
x6i
¿¿ 
=
¿¿ 
a
¿¿ 
[
¿¿ 
$num
¿¿ 
]
¿¿ 
;
¿¿ 
a
ÀÀ 
[
ÀÀ 
$num
ÀÀ 
]
ÀÀ 
=
ÀÀ 
x4r
ÀÀ 
;
ÀÀ 
a
ÁÁ 
[
ÁÁ 
$num
ÁÁ 
]
ÁÁ 
=
ÁÁ 
x4i
ÁÁ 
;
ÁÁ 
a
ÂÂ 
[
ÂÂ 
$num
ÂÂ 
]
ÂÂ 
=
ÂÂ 
x6r
ÂÂ 
;
ÂÂ 
a
ÃÃ 
[
ÃÃ 
$num
ÃÃ 
]
ÃÃ 
=
ÃÃ 
x6i
ÃÃ 
;
ÃÃ 
a
ÄÄ 
[
ÄÄ 
$num
ÄÄ 
]
ÄÄ 
=
ÄÄ 
x1r
ÄÄ 
;
ÄÄ 
a
ÅÅ 
[
ÅÅ 
$num
ÅÅ 
]
ÅÅ 
=
ÅÅ 
x1i
ÅÅ 
;
ÅÅ 
a
ÆÆ 
[
ÆÆ 
$num
ÆÆ 
]
ÆÆ 
=
ÆÆ 
x3r
ÆÆ 
;
ÆÆ 
a
ÇÇ 
[
ÇÇ 
$num
ÇÇ 
]
ÇÇ 
=
ÇÇ 
x3i
ÇÇ 
;
ÇÇ 
}
ÈÈ 	
static
ËË 
void
ËË 
bitrv208neg
ËË 
(
ËË  
double
ËË  &
*
ËË& '
a
ËË( )
)
ËË) *
{
ÌÌ 	
double
ÍÍ 
x1r
ÍÍ 
,
ÍÍ 
x1i
ÍÍ 
,
ÍÍ 
x2r
ÍÍ  
,
ÍÍ  !
x2i
ÍÍ" %
,
ÍÍ% &
x3r
ÍÍ' *
,
ÍÍ* +
x3i
ÍÍ, /
,
ÍÍ/ 0
x4r
ÍÍ1 4
,
ÍÍ4 5
x4i
ÍÍ6 9
,
ÍÍ9 :
x5r
ÎÎ 
,
ÎÎ 
x5i
ÎÎ 
,
ÎÎ 
x6r
ÎÎ 
,
ÎÎ 
x6i
ÎÎ "
,
ÎÎ" #
x7r
ÎÎ$ '
,
ÎÎ' (
x7i
ÎÎ) ,
;
ÎÎ, -
x1r
ÐÐ 
=
ÐÐ 
a
ÐÐ 
[
ÐÐ 
$num
ÐÐ 
]
ÐÐ 
;
ÐÐ 
x1i
ÑÑ 
=
ÑÑ 
a
ÑÑ 
[
ÑÑ 
$num
ÑÑ 
]
ÑÑ 
;
ÑÑ 
x2r
ÒÒ 
=
ÒÒ 
a
ÒÒ 
[
ÒÒ 
$num
ÒÒ 
]
ÒÒ 
;
ÒÒ 
x2i
ÓÓ 
=
ÓÓ 
a
ÓÓ 
[
ÓÓ 
$num
ÓÓ 
]
ÓÓ 
;
ÓÓ 
x3r
ÔÔ 
=
ÔÔ 
a
ÔÔ 
[
ÔÔ 
$num
ÔÔ 
]
ÔÔ 
;
ÔÔ 
x3i
ÕÕ 
=
ÕÕ 
a
ÕÕ 
[
ÕÕ 
$num
ÕÕ 
]
ÕÕ 
;
ÕÕ 
x4r
ÖÖ 
=
ÖÖ 
a
ÖÖ 
[
ÖÖ 
$num
ÖÖ 
]
ÖÖ 
;
ÖÖ 
x4i
×× 
=
×× 
a
×× 
[
×× 
$num
×× 
]
×× 
;
×× 
x5r
ØØ 
=
ØØ 
a
ØØ 
[
ØØ 
$num
ØØ 
]
ØØ 
;
ØØ 
x5i
ÙÙ 
=
ÙÙ 
a
ÙÙ 
[
ÙÙ 
$num
ÙÙ 
]
ÙÙ 
;
ÙÙ 
x6r
ÚÚ 
=
ÚÚ 
a
ÚÚ 
[
ÚÚ 
$num
ÚÚ 
]
ÚÚ 
;
ÚÚ 
x6i
ÛÛ 
=
ÛÛ 
a
ÛÛ 
[
ÛÛ 
$num
ÛÛ 
]
ÛÛ 
;
ÛÛ 
x7r
ÜÜ 
=
ÜÜ 
a
ÜÜ 
[
ÜÜ 
$num
ÜÜ 
]
ÜÜ 
;
ÜÜ 
x7i
ÝÝ 
=
ÝÝ 
a
ÝÝ 
[
ÝÝ 
$num
ÝÝ 
]
ÝÝ 
;
ÝÝ 
a
ÞÞ 
[
ÞÞ 
$num
ÞÞ 
]
ÞÞ 
=
ÞÞ 
x7r
ÞÞ 
;
ÞÞ 
a
ßß 
[
ßß 
$num
ßß 
]
ßß 
=
ßß 
x7i
ßß 
;
ßß 
a
àà 
[
àà 
$num
àà 
]
àà 
=
àà 
x3r
àà 
;
àà 
a
áá 
[
áá 
$num
áá 
]
áá 
=
áá 
x3i
áá 
;
áá 
a
ââ 
[
ââ 
$num
ââ 
]
ââ 
=
ââ 
x5r
ââ 
;
ââ 
a
ãã 
[
ãã 
$num
ãã 
]
ãã 
=
ãã 
x5i
ãã 
;
ãã 
a
ää 
[
ää 
$num
ää 
]
ää 
=
ää 
x1r
ää 
;
ää 
a
åå 
[
åå 
$num
åå 
]
åå 
=
åå 
x1i
åå 
;
åå 
a
ææ 
[
ææ 
$num
ææ 
]
ææ 
=
ææ 
x6r
ææ 
;
ææ 
a
çç 
[
çç 
$num
çç 
]
çç 
=
çç 
x6i
çç 
;
çç 
a
èè 
[
èè 
$num
èè 
]
èè 
=
èè 
x2r
èè 
;
èè 
a
éé 
[
éé 
$num
éé 
]
éé 
=
éé 
x2i
éé 
;
éé 
a
êê 
[
êê 
$num
êê 
]
êê 
=
êê 
x4r
êê 
;
êê 
a
ëë 
[
ëë 
$num
ëë 
]
ëë 
=
ëë 
x4i
ëë 
;
ëë 
}
ìì 	
static
èè 
void
èè 
cftb1st
èè 
(
èè 
int
èè 
n
èè  !
,
èè! "
double
èè# )
*
èè) *
a
èè+ ,
)
èè, -
{
éé 	
int
êê 
i
êê 
,
êê 
i0
êê 
,
êê 
j
êê 
,
êê 
j0
êê 
,
êê 
j1
êê  
,
êê  !
j2
êê" $
,
êê$ %
j3
êê& (
,
êê( )
m
êê* +
,
êê+ ,
mh
êê- /
;
êê/ 0
double
ëë 
ew
ëë 
,
ëë 
w1r
ëë 
,
ëë 
w1i
ëë 
,
ëë  
wk1r
ëë! %
,
ëë% &
wk1i
ëë' +
,
ëë+ ,
wk3r
ëë- 1
,
ëë1 2
wk3i
ëë3 7
,
ëë7 8
wd1r
ìì 
,
ìì 
wd1i
ìì 
,
ìì 
wd3r
ìì  
,
ìì  !
wd3i
ìì" &
,
ìì& '
ss1
ìì( +
,
ìì+ ,
ss3
ìì- 0
;
ìì0 1
double
íí 
x0r
íí 
,
íí 
x0i
íí 
,
íí 
x1r
íí  
,
íí  !
x1i
íí" %
,
íí% &
x2r
íí' *
,
íí* +
x2i
íí, /
,
íí/ 0
x3r
íí1 4
,
íí4 5
x3i
íí6 9
;
íí9 :
mh
ïï 
=
ïï 
n
ïï 
>>
ïï 
$num
ïï 
;
ïï 
m
ðð 
=
ðð 
$num
ðð 
*
ðð 
mh
ðð 
;
ðð 
j1
ññ 
=
ññ 
m
ññ 
;
ññ 
j2
òò 
=
òò 
j1
òò 
+
òò 
m
òò 
;
òò 
j3
óó 
=
óó 
j2
óó 
+
óó 
m
óó 
;
óó 
x0r
ôô 
=
ôô 
a
ôô 
[
ôô 
$num
ôô 
]
ôô 
+
ôô 
a
ôô 
[
ôô 
j2
ôô 
]
ôô 
;
ôô 
x0i
õõ 
=
õõ 
-
õõ 
a
õõ 
[
õõ 
$num
õõ 
]
õõ 
-
õõ 
a
õõ 
[
õõ 
j2
õõ 
+
õõ  
$num
õõ! "
]
õõ" #
;
õõ# $
x1r
öö 
=
öö 
a
öö 
[
öö 
$num
öö 
]
öö 
-
öö 
a
öö 
[
öö 
j2
öö 
]
öö 
;
öö 
x1i
÷÷ 
=
÷÷ 
-
÷÷ 
a
÷÷ 
[
÷÷ 
$num
÷÷ 
]
÷÷ 
+
÷÷ 
a
÷÷ 
[
÷÷ 
j2
÷÷ 
+
÷÷  
$num
÷÷! "
]
÷÷" #
;
÷÷# $
x2r
øø 
=
øø 
a
øø 
[
øø 
j1
øø 
]
øø 
+
øø 
a
øø 
[
øø 
j3
øø 
]
øø 
;
øø  
x2i
ùù 
=
ùù 
a
ùù 
[
ùù 
j1
ùù 
+
ùù 
$num
ùù 
]
ùù 
+
ùù 
a
ùù 
[
ùù  
j3
ùù  "
+
ùù# $
$num
ùù% &
]
ùù& '
;
ùù' (
x3r
úú 
=
úú 
a
úú 
[
úú 
j1
úú 
]
úú 
-
úú 
a
úú 
[
úú 
j3
úú 
]
úú 
;
úú  
x3i
ûû 
=
ûû 
a
ûû 
[
ûû 
j1
ûû 
+
ûû 
$num
ûû 
]
ûû 
-
ûû 
a
ûû 
[
ûû  
j3
ûû  "
+
ûû# $
$num
ûû% &
]
ûû& '
;
ûû' (
a
üü 
[
üü 
$num
üü 
]
üü 
=
üü 
x0r
üü 
+
üü 
x2r
üü 
;
üü 
a
ýý 
[
ýý 
$num
ýý 
]
ýý 
=
ýý 
x0i
ýý 
-
ýý 
x2i
ýý 
;
ýý 
a
þþ 
[
þþ 
j1
þþ 
]
þþ 
=
þþ 
x0r
þþ 
-
þþ 
x2r
þþ 
;
þþ 
a
ÿÿ 
[
ÿÿ 
j1
ÿÿ 
+
ÿÿ 
$num
ÿÿ 
]
ÿÿ 
=
ÿÿ 
x0i
ÿÿ 
+
ÿÿ 
x2i
ÿÿ !
;
ÿÿ! "
a
 
[
 
j2
 
]
 
=
 
x1r
 
+
 
x3i
 
;
 
a
 
[
 
j2
 
+
 
$num
 
]
 
=
 
x1i
 
+
 
x3r
 !
;
! "
a
 
[
 
j3
 
]
 
=
 
x1r
 
-
 
x3i
 
;
 
a
 
[
 
j3
 
+
 
$num
 
]
 
=
 
x1i
 
-
 
x3r
 !
;
! "
wd1r
 
=
 
$num
 
;
 
wd1i
 
=
 
$num
 
;
 
wd3r
 
=
 
$num
 
;
 
wd3i
 
=
 
$num
 
;
 
ew
 
=
 
M_PI_2
 
/
 
m
 
;
 
w1r
 
=
 
Math
 
.
 
Cos
 
(
 
$num
 
*
 
ew
 !
)
! "
;
" #
w1i
 
=
 
Math
 
.
 
Sin
 
(
 
$num
 
*
 
ew
 !
)
! "
;
" #
wk1r
 
=
 
w1r
 
;
 
wk1i
 
=
 
w1i
 
;
 
ss1
 
=
 
$num
 
*
 
w1i
 
;
 
wk3i
 
=
 
$num
 
*
 
ss1
 
*
 
wk1r
 !
;
! "
wk3r
 
=
 
wk1r
 
-
 
wk3i
 
*
  
wk1i
! %
;
% &
wk3i
 
=
 
wk1i
 
-
 
wk3i
 
*
  
wk1r
! %
;
% &
ss3
 
=
 
$num
 
*
 
wk3i
 
;
 
i
 
=
 
$num
 
;
 
for
 
(
 
;
 
;
 
)
 
{
 
i0
 
=
 
i
 
+
 
$num
 
*
 
CDFT_LOOP_DIV
 *
;
* +
if
 
(
 
i0
 
>
 
mh
 
-
 
$num
 
)
  
{
 
i0
 
=
 
mh
 
-
 
$num
 
;
  
}
 
for
 
(
 
j
 
=
 
i
 
+
 
$num
 
;
 
j
  !
<
" #
i0
$ &
;
& '
j
( )
+=
* ,
$num
- .
)
. /
{
 
wd1r
 
-=
 
ss1
 
*
  !
wk1i
" &
;
& '
wd1i
 
+=
 
ss1
 
*
  !
wk1r
" &
;
& '
wd3r
 
-=
 
ss3
 
*
  !
wk3i
" &
;
& '
wd3i
 
+=
 
ss3
 
*
  !
wk3r
" &
;
& '
j1
   
=
   
j
   
+
   
m
   
;
   
j2
¡¡ 
=
¡¡ 
j1
¡¡ 
+
¡¡ 
m
¡¡ 
;
¡¡  
j3
¢¢ 
=
¢¢ 
j2
¢¢ 
+
¢¢ 
m
¢¢ 
;
¢¢  
x0r
££ 
=
££ 
a
££ 
[
££ 
j
££ 
]
££ 
+
££  
a
££! "
[
££" #
j2
££# %
]
££% &
;
££& '
x0i
¤¤ 
=
¤¤ 
-
¤¤ 
a
¤¤ 
[
¤¤ 
j
¤¤ 
+
¤¤  
$num
¤¤! "
]
¤¤" #
-
¤¤$ %
a
¤¤& '
[
¤¤' (
j2
¤¤( *
+
¤¤+ ,
$num
¤¤- .
]
¤¤. /
;
¤¤/ 0
x1r
¥¥ 
=
¥¥ 
a
¥¥ 
[
¥¥ 
j
¥¥ 
]
¥¥ 
-
¥¥  
a
¥¥! "
[
¥¥" #
j2
¥¥# %
]
¥¥% &
;
¥¥& '
x1i
¦¦ 
=
¦¦ 
-
¦¦ 
a
¦¦ 
[
¦¦ 
j
¦¦ 
+
¦¦  
$num
¦¦! "
]
¦¦" #
+
¦¦$ %
a
¦¦& '
[
¦¦' (
j2
¦¦( *
+
¦¦+ ,
$num
¦¦- .
]
¦¦. /
;
¦¦/ 0
x2r
§§ 
=
§§ 
a
§§ 
[
§§ 
j1
§§ 
]
§§ 
+
§§  !
a
§§" #
[
§§# $
j3
§§$ &
]
§§& '
;
§§' (
x2i
¨¨ 
=
¨¨ 
a
¨¨ 
[
¨¨ 
j1
¨¨ 
+
¨¨  
$num
¨¨! "
]
¨¨" #
+
¨¨$ %
a
¨¨& '
[
¨¨' (
j3
¨¨( *
+
¨¨+ ,
$num
¨¨- .
]
¨¨. /
;
¨¨/ 0
x3r
©© 
=
©© 
a
©© 
[
©© 
j1
©© 
]
©© 
-
©©  !
a
©©" #
[
©©# $
j3
©©$ &
]
©©& '
;
©©' (
x3i
ªª 
=
ªª 
a
ªª 
[
ªª 
j1
ªª 
+
ªª  
$num
ªª! "
]
ªª" #
-
ªª$ %
a
ªª& '
[
ªª' (
j3
ªª( *
+
ªª+ ,
$num
ªª- .
]
ªª. /
;
ªª/ 0
a
«« 
[
«« 
j
«« 
]
«« 
=
«« 
x0r
«« 
+
««  
x2r
««! $
;
««$ %
a
¬¬ 
[
¬¬ 
j
¬¬ 
+
¬¬ 
$num
¬¬ 
]
¬¬ 
=
¬¬ 
x0i
¬¬ "
-
¬¬# $
x2i
¬¬% (
;
¬¬( )
a
­­ 
[
­­ 
j1
­­ 
]
­­ 
=
­­ 
x0r
­­ 
-
­­  !
x2r
­­" %
;
­­% &
a
®® 
[
®® 
j1
®® 
+
®® 
$num
®® 
]
®® 
=
®® 
x0i
®®  #
+
®®$ %
x2i
®®& )
;
®®) *
x0r
¯¯ 
=
¯¯ 
x1r
¯¯ 
+
¯¯ 
x3i
¯¯  #
;
¯¯# $
x0i
°° 
=
°° 
x1i
°° 
+
°° 
x3r
°°  #
;
°°# $
a
±± 
[
±± 
j2
±± 
]
±± 
=
±± 
wk1r
±±  
*
±±! "
x0r
±±# &
-
±±' (
wk1i
±±) -
*
±±. /
x0i
±±0 3
;
±±3 4
a
²² 
[
²² 
j2
²² 
+
²² 
$num
²² 
]
²² 
=
²² 
wk1r
²²  $
*
²²% &
x0i
²²' *
+
²²+ ,
wk1i
²²- 1
*
²²2 3
x0r
²²4 7
;
²²7 8
x0r
³³ 
=
³³ 
x1r
³³ 
-
³³ 
x3i
³³  #
;
³³# $
x0i
´´ 
=
´´ 
x1i
´´ 
-
´´ 
x3r
´´  #
;
´´# $
a
µµ 
[
µµ 
j3
µµ 
]
µµ 
=
µµ 
wk3r
µµ  
*
µµ! "
x0r
µµ# &
+
µµ' (
wk3i
µµ) -
*
µµ. /
x0i
µµ0 3
;
µµ3 4
a
¶¶ 
[
¶¶ 
j3
¶¶ 
+
¶¶ 
$num
¶¶ 
]
¶¶ 
=
¶¶ 
wk3r
¶¶  $
*
¶¶% &
x0i
¶¶' *
-
¶¶+ ,
wk3i
¶¶- 1
*
¶¶2 3
x0r
¶¶4 7
;
¶¶7 8
x0r
·· 
=
·· 
a
·· 
[
·· 
j
·· 
+
·· 
$num
··  !
]
··! "
+
··# $
a
··% &
[
··& '
j2
··' )
+
··* +
$num
··, -
]
··- .
;
··. /
x0i
¸¸ 
=
¸¸ 
-
¸¸ 
a
¸¸ 
[
¸¸ 
j
¸¸ 
+
¸¸  
$num
¸¸! "
]
¸¸" #
-
¸¸$ %
a
¸¸& '
[
¸¸' (
j2
¸¸( *
+
¸¸+ ,
$num
¸¸- .
]
¸¸. /
;
¸¸/ 0
x1r
¹¹ 
=
¹¹ 
a
¹¹ 
[
¹¹ 
j
¹¹ 
+
¹¹ 
$num
¹¹  !
]
¹¹! "
-
¹¹# $
a
¹¹% &
[
¹¹& '
j2
¹¹' )
+
¹¹* +
$num
¹¹, -
]
¹¹- .
;
¹¹. /
x1i
ºº 
=
ºº 
-
ºº 
a
ºº 
[
ºº 
j
ºº 
+
ºº  
$num
ºº! "
]
ºº" #
+
ºº$ %
a
ºº& '
[
ºº' (
j2
ºº( *
+
ºº+ ,
$num
ºº- .
]
ºº. /
;
ºº/ 0
x2r
»» 
=
»» 
a
»» 
[
»» 
j1
»» 
+
»»  
$num
»»! "
]
»»" #
+
»»$ %
a
»»& '
[
»»' (
j3
»»( *
+
»»+ ,
$num
»»- .
]
»». /
;
»»/ 0
x2i
¼¼ 
=
¼¼ 
a
¼¼ 
[
¼¼ 
j1
¼¼ 
+
¼¼  
$num
¼¼! "
]
¼¼" #
+
¼¼$ %
a
¼¼& '
[
¼¼' (
j3
¼¼( *
+
¼¼+ ,
$num
¼¼- .
]
¼¼. /
;
¼¼/ 0
x3r
½½ 
=
½½ 
a
½½ 
[
½½ 
j1
½½ 
+
½½  
$num
½½! "
]
½½" #
-
½½$ %
a
½½& '
[
½½' (
j3
½½( *
+
½½+ ,
$num
½½- .
]
½½. /
;
½½/ 0
x3i
¾¾ 
=
¾¾ 
a
¾¾ 
[
¾¾ 
j1
¾¾ 
+
¾¾  
$num
¾¾! "
]
¾¾" #
-
¾¾$ %
a
¾¾& '
[
¾¾' (
j3
¾¾( *
+
¾¾+ ,
$num
¾¾- .
]
¾¾. /
;
¾¾/ 0
a
¿¿ 
[
¿¿ 
j
¿¿ 
+
¿¿ 
$num
¿¿ 
]
¿¿ 
=
¿¿ 
x0r
¿¿ "
+
¿¿# $
x2r
¿¿% (
;
¿¿( )
a
ÀÀ 
[
ÀÀ 
j
ÀÀ 
+
ÀÀ 
$num
ÀÀ 
]
ÀÀ 
=
ÀÀ 
x0i
ÀÀ "
-
ÀÀ# $
x2i
ÀÀ% (
;
ÀÀ( )
a
ÁÁ 
[
ÁÁ 
j1
ÁÁ 
+
ÁÁ 
$num
ÁÁ 
]
ÁÁ 
=
ÁÁ 
x0r
ÁÁ  #
-
ÁÁ$ %
x2r
ÁÁ& )
;
ÁÁ) *
a
ÂÂ 
[
ÂÂ 
j1
ÂÂ 
+
ÂÂ 
$num
ÂÂ 
]
ÂÂ 
=
ÂÂ 
x0i
ÂÂ  #
+
ÂÂ$ %
x2i
ÂÂ& )
;
ÂÂ) *
x0r
ÃÃ 
=
ÃÃ 
x1r
ÃÃ 
+
ÃÃ 
x3i
ÃÃ  #
;
ÃÃ# $
x0i
ÄÄ 
=
ÄÄ 
x1i
ÄÄ 
+
ÄÄ 
x3r
ÄÄ  #
;
ÄÄ# $
a
ÅÅ 
[
ÅÅ 
j2
ÅÅ 
+
ÅÅ 
$num
ÅÅ 
]
ÅÅ 
=
ÅÅ 
wd1r
ÅÅ  $
*
ÅÅ% &
x0r
ÅÅ' *
-
ÅÅ+ ,
wd1i
ÅÅ- 1
*
ÅÅ2 3
x0i
ÅÅ4 7
;
ÅÅ7 8
a
ÆÆ 
[
ÆÆ 
j2
ÆÆ 
+
ÆÆ 
$num
ÆÆ 
]
ÆÆ 
=
ÆÆ 
wd1r
ÆÆ  $
*
ÆÆ% &
x0i
ÆÆ' *
+
ÆÆ+ ,
wd1i
ÆÆ- 1
*
ÆÆ2 3
x0r
ÆÆ4 7
;
ÆÆ7 8
x0r
ÇÇ 
=
ÇÇ 
x1r
ÇÇ 
-
ÇÇ 
x3i
ÇÇ  #
;
ÇÇ# $
x0i
ÈÈ 
=
ÈÈ 
x1i
ÈÈ 
-
ÈÈ 
x3r
ÈÈ  #
;
ÈÈ# $
a
ÉÉ 
[
ÉÉ 
j3
ÉÉ 
+
ÉÉ 
$num
ÉÉ 
]
ÉÉ 
=
ÉÉ 
wd3r
ÉÉ  $
*
ÉÉ% &
x0r
ÉÉ' *
+
ÉÉ+ ,
wd3i
ÉÉ- 1
*
ÉÉ2 3
x0i
ÉÉ4 7
;
ÉÉ7 8
a
ÊÊ 
[
ÊÊ 
j3
ÊÊ 
+
ÊÊ 
$num
ÊÊ 
]
ÊÊ 
=
ÊÊ 
wd3r
ÊÊ  $
*
ÊÊ% &
x0i
ÊÊ' *
-
ÊÊ+ ,
wd3i
ÊÊ- 1
*
ÊÊ2 3
x0r
ÊÊ4 7
;
ÊÊ7 8
j0
ËË 
=
ËË 
m
ËË 
-
ËË 
j
ËË 
;
ËË 
j1
ÌÌ 
=
ÌÌ 
j0
ÌÌ 
+
ÌÌ 
m
ÌÌ 
;
ÌÌ  
j2
ÍÍ 
=
ÍÍ 
j1
ÍÍ 
+
ÍÍ 
m
ÍÍ 
;
ÍÍ  
j3
ÎÎ 
=
ÎÎ 
j2
ÎÎ 
+
ÎÎ 
m
ÎÎ 
;
ÎÎ  
x0r
ÏÏ 
=
ÏÏ 
a
ÏÏ 
[
ÏÏ 
j0
ÏÏ 
]
ÏÏ 
+
ÏÏ  !
a
ÏÏ" #
[
ÏÏ# $
j2
ÏÏ$ &
]
ÏÏ& '
;
ÏÏ' (
x0i
ÐÐ 
=
ÐÐ 
-
ÐÐ 
a
ÐÐ 
[
ÐÐ 
j0
ÐÐ 
+
ÐÐ  !
$num
ÐÐ" #
]
ÐÐ# $
-
ÐÐ% &
a
ÐÐ' (
[
ÐÐ( )
j2
ÐÐ) +
+
ÐÐ, -
$num
ÐÐ. /
]
ÐÐ/ 0
;
ÐÐ0 1
x1r
ÑÑ 
=
ÑÑ 
a
ÑÑ 
[
ÑÑ 
j0
ÑÑ 
]
ÑÑ 
-
ÑÑ  !
a
ÑÑ" #
[
ÑÑ# $
j2
ÑÑ$ &
]
ÑÑ& '
;
ÑÑ' (
x1i
ÒÒ 
=
ÒÒ 
-
ÒÒ 
a
ÒÒ 
[
ÒÒ 
j0
ÒÒ 
+
ÒÒ  !
$num
ÒÒ" #
]
ÒÒ# $
+
ÒÒ% &
a
ÒÒ' (
[
ÒÒ( )
j2
ÒÒ) +
+
ÒÒ, -
$num
ÒÒ. /
]
ÒÒ/ 0
;
ÒÒ0 1
x2r
ÓÓ 
=
ÓÓ 
a
ÓÓ 
[
ÓÓ 
j1
ÓÓ 
]
ÓÓ 
+
ÓÓ  !
a
ÓÓ" #
[
ÓÓ# $
j3
ÓÓ$ &
]
ÓÓ& '
;
ÓÓ' (
x2i
ÔÔ 
=
ÔÔ 
a
ÔÔ 
[
ÔÔ 
j1
ÔÔ 
+
ÔÔ  
$num
ÔÔ! "
]
ÔÔ" #
+
ÔÔ$ %
a
ÔÔ& '
[
ÔÔ' (
j3
ÔÔ( *
+
ÔÔ+ ,
$num
ÔÔ- .
]
ÔÔ. /
;
ÔÔ/ 0
x3r
ÕÕ 
=
ÕÕ 
a
ÕÕ 
[
ÕÕ 
j1
ÕÕ 
]
ÕÕ 
-
ÕÕ  !
a
ÕÕ" #
[
ÕÕ# $
j3
ÕÕ$ &
]
ÕÕ& '
;
ÕÕ' (
x3i
ÖÖ 
=
ÖÖ 
a
ÖÖ 
[
ÖÖ 
j1
ÖÖ 
+
ÖÖ  
$num
ÖÖ! "
]
ÖÖ" #
-
ÖÖ$ %
a
ÖÖ& '
[
ÖÖ' (
j3
ÖÖ( *
+
ÖÖ+ ,
$num
ÖÖ- .
]
ÖÖ. /
;
ÖÖ/ 0
a
×× 
[
×× 
j0
×× 
]
×× 
=
×× 
x0r
×× 
+
××  !
x2r
××" %
;
××% &
a
ØØ 
[
ØØ 
j0
ØØ 
+
ØØ 
$num
ØØ 
]
ØØ 
=
ØØ 
x0i
ØØ  #
-
ØØ$ %
x2i
ØØ& )
;
ØØ) *
a
ÙÙ 
[
ÙÙ 
j1
ÙÙ 
]
ÙÙ 
=
ÙÙ 
x0r
ÙÙ 
-
ÙÙ  !
x2r
ÙÙ" %
;
ÙÙ% &
a
ÚÚ 
[
ÚÚ 
j1
ÚÚ 
+
ÚÚ 
$num
ÚÚ 
]
ÚÚ 
=
ÚÚ 
x0i
ÚÚ  #
+
ÚÚ$ %
x2i
ÚÚ& )
;
ÚÚ) *
x0r
ÛÛ 
=
ÛÛ 
x1r
ÛÛ 
+
ÛÛ 
x3i
ÛÛ  #
;
ÛÛ# $
x0i
ÜÜ 
=
ÜÜ 
x1i
ÜÜ 
+
ÜÜ 
x3r
ÜÜ  #
;
ÜÜ# $
a
ÝÝ 
[
ÝÝ 
j2
ÝÝ 
]
ÝÝ 
=
ÝÝ 
wk1i
ÝÝ  
*
ÝÝ! "
x0r
ÝÝ# &
-
ÝÝ' (
wk1r
ÝÝ) -
*
ÝÝ. /
x0i
ÝÝ0 3
;
ÝÝ3 4
a
ÞÞ 
[
ÞÞ 
j2
ÞÞ 
+
ÞÞ 
$num
ÞÞ 
]
ÞÞ 
=
ÞÞ 
wk1i
ÞÞ  $
*
ÞÞ% &
x0i
ÞÞ' *
+
ÞÞ+ ,
wk1r
ÞÞ- 1
*
ÞÞ2 3
x0r
ÞÞ4 7
;
ÞÞ7 8
x0r
ßß 
=
ßß 
x1r
ßß 
-
ßß 
x3i
ßß  #
;
ßß# $
x0i
àà 
=
àà 
x1i
àà 
-
àà 
x3r
àà  #
;
àà# $
a
áá 
[
áá 
j3
áá 
]
áá 
=
áá 
wk3i
áá  
*
áá! "
x0r
áá# &
+
áá' (
wk3r
áá) -
*
áá. /
x0i
áá0 3
;
áá3 4
a
ââ 
[
ââ 
j3
ââ 
+
ââ 
$num
ââ 
]
ââ 
=
ââ 
wk3i
ââ  $
*
ââ% &
x0i
ââ' *
-
ââ+ ,
wk3r
ââ- 1
*
ââ2 3
x0r
ââ4 7
;
ââ7 8
x0r
ãã 
=
ãã 
a
ãã 
[
ãã 
j0
ãã 
-
ãã  
$num
ãã! "
]
ãã" #
+
ãã$ %
a
ãã& '
[
ãã' (
j2
ãã( *
-
ãã+ ,
$num
ãã- .
]
ãã. /
;
ãã/ 0
x0i
ää 
=
ää 
-
ää 
a
ää 
[
ää 
j0
ää 
-
ää  !
$num
ää" #
]
ää# $
-
ää% &
a
ää' (
[
ää( )
j2
ää) +
-
ää, -
$num
ää. /
]
ää/ 0
;
ää0 1
x1r
åå 
=
åå 
a
åå 
[
åå 
j0
åå 
-
åå  
$num
åå! "
]
åå" #
-
åå$ %
a
åå& '
[
åå' (
j2
åå( *
-
åå+ ,
$num
åå- .
]
åå. /
;
åå/ 0
x1i
ææ 
=
ææ 
-
ææ 
a
ææ 
[
ææ 
j0
ææ 
-
ææ  !
$num
ææ" #
]
ææ# $
+
ææ% &
a
ææ' (
[
ææ( )
j2
ææ) +
-
ææ, -
$num
ææ. /
]
ææ/ 0
;
ææ0 1
x2r
çç 
=
çç 
a
çç 
[
çç 
j1
çç 
-
çç  
$num
çç! "
]
çç" #
+
çç$ %
a
çç& '
[
çç' (
j3
çç( *
-
çç+ ,
$num
çç- .
]
çç. /
;
çç/ 0
x2i
èè 
=
èè 
a
èè 
[
èè 
j1
èè 
-
èè  
$num
èè! "
]
èè" #
+
èè$ %
a
èè& '
[
èè' (
j3
èè( *
-
èè+ ,
$num
èè- .
]
èè. /
;
èè/ 0
x3r
éé 
=
éé 
a
éé 
[
éé 
j1
éé 
-
éé  
$num
éé! "
]
éé" #
-
éé$ %
a
éé& '
[
éé' (
j3
éé( *
-
éé+ ,
$num
éé- .
]
éé. /
;
éé/ 0
x3i
êê 
=
êê 
a
êê 
[
êê 
j1
êê 
-
êê  
$num
êê! "
]
êê" #
-
êê$ %
a
êê& '
[
êê' (
j3
êê( *
-
êê+ ,
$num
êê- .
]
êê. /
;
êê/ 0
a
ëë 
[
ëë 
j0
ëë 
-
ëë 
$num
ëë 
]
ëë 
=
ëë 
x0r
ëë  #
+
ëë$ %
x2r
ëë& )
;
ëë) *
a
ìì 
[
ìì 
j0
ìì 
-
ìì 
$num
ìì 
]
ìì 
=
ìì 
x0i
ìì  #
-
ìì$ %
x2i
ìì& )
;
ìì) *
a
íí 
[
íí 
j1
íí 
-
íí 
$num
íí 
]
íí 
=
íí 
x0r
íí  #
-
íí$ %
x2r
íí& )
;
íí) *
a
îî 
[
îî 
j1
îî 
-
îî 
$num
îî 
]
îî 
=
îî 
x0i
îî  #
+
îî$ %
x2i
îî& )
;
îî) *
x0r
ïï 
=
ïï 
x1r
ïï 
+
ïï 
x3i
ïï  #
;
ïï# $
x0i
ðð 
=
ðð 
x1i
ðð 
+
ðð 
x3r
ðð  #
;
ðð# $
a
ññ 
[
ññ 
j2
ññ 
-
ññ 
$num
ññ 
]
ññ 
=
ññ 
wd1i
ññ  $
*
ññ% &
x0r
ññ' *
-
ññ+ ,
wd1r
ññ- 1
*
ññ2 3
x0i
ññ4 7
;
ññ7 8
a
òò 
[
òò 
j2
òò 
-
òò 
$num
òò 
]
òò 
=
òò 
wd1i
òò  $
*
òò% &
x0i
òò' *
+
òò+ ,
wd1r
òò- 1
*
òò2 3
x0r
òò4 7
;
òò7 8
x0r
óó 
=
óó 
x1r
óó 
-
óó 
x3i
óó  #
;
óó# $
x0i
ôô 
=
ôô 
x1i
ôô 
-
ôô 
x3r
ôô  #
;
ôô# $
a
õõ 
[
õõ 
j3
õõ 
-
õõ 
$num
õõ 
]
õõ 
=
õõ 
wd3i
õõ  $
*
õõ% &
x0r
õõ' *
+
õõ+ ,
wd3r
õõ- 1
*
õõ2 3
x0i
õõ4 7
;
õõ7 8
a
öö 
[
öö 
j3
öö 
-
öö 
$num
öö 
]
öö 
=
öö 
wd3i
öö  $
*
öö% &
x0i
öö' *
-
öö+ ,
wd3r
öö- 1
*
öö2 3
x0r
öö4 7
;
öö7 8
wk1r
÷÷ 
-=
÷÷ 
ss1
÷÷ 
*
÷÷  !
wd1i
÷÷" &
;
÷÷& '
wk1i
øø 
+=
øø 
ss1
øø 
*
øø  !
wd1r
øø" &
;
øø& '
wk3r
ùù 
-=
ùù 
ss3
ùù 
*
ùù  !
wd3i
ùù" &
;
ùù& '
wk3i
úú 
+=
úú 
ss3
úú 
*
úú  !
wd3r
úú" &
;
úú& '
}
ûû 
if
üü 
(
üü 
i0
üü 
==
üü 
mh
üü 
-
üü 
$num
üü  
)
üü  !
{
ýý 
break
þþ 
;
þþ 
}
ÿÿ 
wd1r
 
=
 
Math
 
.
 
Cos
 
(
  
ew
  "
*
# $
i0
% '
)
' (
;
( )
wd1i
 
=
 
Math
 
.
 
Sin
 
(
  
ew
  "
*
# $
i0
% '
)
' (
;
( )
wd3i
 
=
 
$num
 
*
 
wd1i
 
*
  !
wd1r
" &
;
& '
wd3r
 
=
 
wd1r
 
-
 
wd3i
 "
*
# $
wd1i
% )
;
) *
wd3i
 
=
 
wd1i
 
-
 
wd3i
 "
*
# $
wd1r
% )
;
) *
wk1r
 
=
 
w1r
 
*
 
wd1r
 !
-
" #
w1i
$ '
*
( )
wd1i
* .
;
. /
wk1i
 
=
 
w1r
 
*
 
wd1i
 !
+
" #
w1i
$ '
*
( )
wd1r
* .
;
. /
wk3i
 
=
 
$num
 
*
 
wk1i
 
*
  !
wk1r
" &
;
& '
wk3r
 
=
 
wk1r
 
-
 
wk3i
 "
*
# $
wk1i
% )
;
) *
wk3i
 
=
 
wk1i
 
-
 
wk3i
 "
*
# $
wk1r
% )
;
) *
i
 
=
 
i0
 
;
 
}
 
wd1r
 
=
 
WR5000
 
;
 
j0
 
=
 
mh
 
;
 
j1
 
=
 
j0
 
+
 
m
 
;
 
j2
 
=
 
j1
 
+
 
m
 
;
 
j3
 
=
 
j2
 
+
 
m
 
;
 
x0r
 
=
 
a
 
[
 
j0
 
-
 
$num
 
]
 
+
 
a
 
[
  
j2
  "
-
# $
$num
% &
]
& '
;
' (
x0i
 
=
 
-
 
a
 
[
 
j0
 
-
 
$num
 
]
 
-
 
a
  
[
  !
j2
! #
-
$ %
$num
& '
]
' (
;
( )
x1r
 
=
 
a
 
[
 
j0
 
-
 
$num
 
]
 
-
 
a
 
[
  
j2
  "
-
# $
$num
% &
]
& '
;
' (
x1i
 
=
 
-
 
a
 
[
 
j0
 
-
 
$num
 
]
 
+
 
a
  
[
  !
j2
! #
-
$ %
$num
& '
]
' (
;
( )
x2r
 
=
 
a
 
[
 
j1
 
-
 
$num
 
]
 
+
 
a
 
[
  
j3
  "
-
# $
$num
% &
]
& '
;
' (
x2i
 
=
 
a
 
[
 
j1
 
-
 
$num
 
]
 
+
 
a
 
[
  
j3
  "
-
# $
$num
% &
]
& '
;
' (
x3r
 
=
 
a
 
[
 
j1
 
-
 
$num
 
]
 
-
 
a
 
[
  
j3
  "
-
# $
$num
% &
]
& '
;
' (
x3i
 
=
 
a
 
[
 
j1
 
-
 
$num
 
]
 
-
 
a
 
[
  
j3
  "
-
# $
$num
% &
]
& '
;
' (
a
 
[
 
j0
 
-
 
$num
 
]
 
=
 
x0r
 
+
 
x2r
 !
;
! "
a
 
[
 
j0
 
-
 
$num
 
]
 
=
 
x0i
 
-
 
x2i
 !
;
! "
a
 
[
 
j1
 
-
 
$num
 
]
 
=
 
x0r
 
-
 
x2r
 !
;
! "
a
 
[
 
j1
 
-
 
$num
 
]
 
=
 
x0i
 
+
 
x2i
 !
;
! "
x0r
 
=
 
x1r
 
+
 
x3i
 
;
 
x0i
 
=
 
x1i
 
+
 
x3r
 
;
 
a
 
[
 
j2
 
-
 
$num
 
]
 
=
 
wk1r
 
*
 
x0r
 "
-
# $
wk1i
% )
*
* +
x0i
, /
;
/ 0
a
   
[
   
j2
   
-
   
$num
   
]
   
=
   
wk1r
   
*
   
x0i
   "
+
  # $
wk1i
  % )
*
  * +
x0r
  , /
;
  / 0
x0r
¡¡ 
=
¡¡ 
x1r
¡¡ 
-
¡¡ 
x3i
¡¡ 
;
¡¡ 
x0i
¢¢ 
=
¢¢ 
x1i
¢¢ 
-
¢¢ 
x3r
¢¢ 
;
¢¢ 
a
££ 
[
££ 
j3
££ 
-
££ 
$num
££ 
]
££ 
=
££ 
wk3r
££ 
*
££ 
x0r
££ "
+
££# $
wk3i
££% )
*
££* +
x0i
££, /
;
££/ 0
a
¤¤ 
[
¤¤ 
j3
¤¤ 
-
¤¤ 
$num
¤¤ 
]
¤¤ 
=
¤¤ 
wk3r
¤¤ 
*
¤¤ 
x0i
¤¤ "
-
¤¤# $
wk3i
¤¤% )
*
¤¤* +
x0r
¤¤, /
;
¤¤/ 0
x0r
¥¥ 
=
¥¥ 
a
¥¥ 
[
¥¥ 
j0
¥¥ 
]
¥¥ 
+
¥¥ 
a
¥¥ 
[
¥¥ 
j2
¥¥ 
]
¥¥ 
;
¥¥  
x0i
¦¦ 
=
¦¦ 
-
¦¦ 
a
¦¦ 
[
¦¦ 
j0
¦¦ 
+
¦¦ 
$num
¦¦ 
]
¦¦ 
-
¦¦ 
a
¦¦  
[
¦¦  !
j2
¦¦! #
+
¦¦$ %
$num
¦¦& '
]
¦¦' (
;
¦¦( )
x1r
§§ 
=
§§ 
a
§§ 
[
§§ 
j0
§§ 
]
§§ 
-
§§ 
a
§§ 
[
§§ 
j2
§§ 
]
§§ 
;
§§  
x1i
¨¨ 
=
¨¨ 
-
¨¨ 
a
¨¨ 
[
¨¨ 
j0
¨¨ 
+
¨¨ 
$num
¨¨ 
]
¨¨ 
+
¨¨ 
a
¨¨  
[
¨¨  !
j2
¨¨! #
+
¨¨$ %
$num
¨¨& '
]
¨¨' (
;
¨¨( )
x2r
©© 
=
©© 
a
©© 
[
©© 
j1
©© 
]
©© 
+
©© 
a
©© 
[
©© 
j3
©© 
]
©© 
;
©©  
x2i
ªª 
=
ªª 
a
ªª 
[
ªª 
j1
ªª 
+
ªª 
$num
ªª 
]
ªª 
+
ªª 
a
ªª 
[
ªª  
j3
ªª  "
+
ªª# $
$num
ªª% &
]
ªª& '
;
ªª' (
x3r
«« 
=
«« 
a
«« 
[
«« 
j1
«« 
]
«« 
-
«« 
a
«« 
[
«« 
j3
«« 
]
«« 
;
««  
x3i
¬¬ 
=
¬¬ 
a
¬¬ 
[
¬¬ 
j1
¬¬ 
+
¬¬ 
$num
¬¬ 
]
¬¬ 
-
¬¬ 
a
¬¬ 
[
¬¬  
j3
¬¬  "
+
¬¬# $
$num
¬¬% &
]
¬¬& '
;
¬¬' (
a
­­ 
[
­­ 
j0
­­ 
]
­­ 
=
­­ 
x0r
­­ 
+
­­ 
x2r
­­ 
;
­­ 
a
®® 
[
®® 
j0
®® 
+
®® 
$num
®® 
]
®® 
=
®® 
x0i
®® 
-
®® 
x2i
®® !
;
®®! "
a
¯¯ 
[
¯¯ 
j1
¯¯ 
]
¯¯ 
=
¯¯ 
x0r
¯¯ 
-
¯¯ 
x2r
¯¯ 
;
¯¯ 
a
°° 
[
°° 
j1
°° 
+
°° 
$num
°° 
]
°° 
=
°° 
x0i
°° 
+
°° 
x2i
°° !
;
°°! "
x0r
±± 
=
±± 
x1r
±± 
+
±± 
x3i
±± 
;
±± 
x0i
²² 
=
²² 
x1i
²² 
+
²² 
x3r
²² 
;
²² 
a
³³ 
[
³³ 
j2
³³ 
]
³³ 
=
³³ 
wd1r
³³ 
*
³³ 
(
³³ 
x0r
³³ 
-
³³  !
x0i
³³" %
)
³³% &
;
³³& '
a
´´ 
[
´´ 
j2
´´ 
+
´´ 
$num
´´ 
]
´´ 
=
´´ 
wd1r
´´ 
*
´´ 
(
´´  
x0i
´´  #
+
´´$ %
x0r
´´& )
)
´´) *
;
´´* +
x0r
µµ 
=
µµ 
x1r
µµ 
-
µµ 
x3i
µµ 
;
µµ 
x0i
¶¶ 
=
¶¶ 
x1i
¶¶ 
-
¶¶ 
x3r
¶¶ 
;
¶¶ 
a
·· 
[
·· 
j3
·· 
]
·· 
=
·· 
-
·· 
wd1r
·· 
*
·· 
(
·· 
x0r
··  
+
··! "
x0i
··# &
)
··& '
;
··' (
a
¸¸ 
[
¸¸ 
j3
¸¸ 
+
¸¸ 
$num
¸¸ 
]
¸¸ 
=
¸¸ 
-
¸¸ 
wd1r
¸¸ 
*
¸¸ 
(
¸¸  !
x0i
¸¸! $
-
¸¸% &
x0r
¸¸' *
)
¸¸* +
;
¸¸+ ,
x0r
¹¹ 
=
¹¹ 
a
¹¹ 
[
¹¹ 
j0
¹¹ 
+
¹¹ 
$num
¹¹ 
]
¹¹ 
+
¹¹ 
a
¹¹ 
[
¹¹  
j2
¹¹  "
+
¹¹# $
$num
¹¹% &
]
¹¹& '
;
¹¹' (
x0i
ºº 
=
ºº 
-
ºº 
a
ºº 
[
ºº 
j0
ºº 
+
ºº 
$num
ºº 
]
ºº 
-
ºº 
a
ºº  
[
ºº  !
j2
ºº! #
+
ºº$ %
$num
ºº& '
]
ºº' (
;
ºº( )
x1r
»» 
=
»» 
a
»» 
[
»» 
j0
»» 
+
»» 
$num
»» 
]
»» 
-
»» 
a
»» 
[
»»  
j2
»»  "
+
»»# $
$num
»»% &
]
»»& '
;
»»' (
x1i
¼¼ 
=
¼¼ 
-
¼¼ 
a
¼¼ 
[
¼¼ 
j0
¼¼ 
+
¼¼ 
$num
¼¼ 
]
¼¼ 
+
¼¼ 
a
¼¼  
[
¼¼  !
j2
¼¼! #
+
¼¼$ %
$num
¼¼& '
]
¼¼' (
;
¼¼( )
x2r
½½ 
=
½½ 
a
½½ 
[
½½ 
j1
½½ 
+
½½ 
$num
½½ 
]
½½ 
+
½½ 
a
½½ 
[
½½  
j3
½½  "
+
½½# $
$num
½½% &
]
½½& '
;
½½' (
x2i
¾¾ 
=
¾¾ 
a
¾¾ 
[
¾¾ 
j1
¾¾ 
+
¾¾ 
$num
¾¾ 
]
¾¾ 
+
¾¾ 
a
¾¾ 
[
¾¾  
j3
¾¾  "
+
¾¾# $
$num
¾¾% &
]
¾¾& '
;
¾¾' (
x3r
¿¿ 
=
¿¿ 
a
¿¿ 
[
¿¿ 
j1
¿¿ 
+
¿¿ 
$num
¿¿ 
]
¿¿ 
-
¿¿ 
a
¿¿ 
[
¿¿  
j3
¿¿  "
+
¿¿# $
$num
¿¿% &
]
¿¿& '
;
¿¿' (
x3i
ÀÀ 
=
ÀÀ 
a
ÀÀ 
[
ÀÀ 
j1
ÀÀ 
+
ÀÀ 
$num
ÀÀ 
]
ÀÀ 
-
ÀÀ 
a
ÀÀ 
[
ÀÀ  
j3
ÀÀ  "
+
ÀÀ# $
$num
ÀÀ% &
]
ÀÀ& '
;
ÀÀ' (
a
ÁÁ 
[
ÁÁ 
j0
ÁÁ 
+
ÁÁ 
$num
ÁÁ 
]
ÁÁ 
=
ÁÁ 
x0r
ÁÁ 
+
ÁÁ 
x2r
ÁÁ !
;
ÁÁ! "
a
ÂÂ 
[
ÂÂ 
j0
ÂÂ 
+
ÂÂ 
$num
ÂÂ 
]
ÂÂ 
=
ÂÂ 
x0i
ÂÂ 
-
ÂÂ 
x2i
ÂÂ !
;
ÂÂ! "
a
ÃÃ 
[
ÃÃ 
j1
ÃÃ 
+
ÃÃ 
$num
ÃÃ 
]
ÃÃ 
=
ÃÃ 
x0r
ÃÃ 
-
ÃÃ 
x2r
ÃÃ !
;
ÃÃ! "
a
ÄÄ 
[
ÄÄ 
j1
ÄÄ 
+
ÄÄ 
$num
ÄÄ 
]
ÄÄ 
=
ÄÄ 
x0i
ÄÄ 
+
ÄÄ 
x2i
ÄÄ !
;
ÄÄ! "
x0r
ÅÅ 
=
ÅÅ 
x1r
ÅÅ 
+
ÅÅ 
x3i
ÅÅ 
;
ÅÅ 
x0i
ÆÆ 
=
ÆÆ 
x1i
ÆÆ 
+
ÆÆ 
x3r
ÆÆ 
;
ÆÆ 
a
ÇÇ 
[
ÇÇ 
j2
ÇÇ 
+
ÇÇ 
$num
ÇÇ 
]
ÇÇ 
=
ÇÇ 
wk1i
ÇÇ 
*
ÇÇ 
x0r
ÇÇ "
-
ÇÇ# $
wk1r
ÇÇ% )
*
ÇÇ* +
x0i
ÇÇ, /
;
ÇÇ/ 0
a
ÈÈ 
[
ÈÈ 
j2
ÈÈ 
+
ÈÈ 
$num
ÈÈ 
]
ÈÈ 
=
ÈÈ 
wk1i
ÈÈ 
*
ÈÈ 
x0i
ÈÈ "
+
ÈÈ# $
wk1r
ÈÈ% )
*
ÈÈ* +
x0r
ÈÈ, /
;
ÈÈ/ 0
x0r
ÉÉ 
=
ÉÉ 
x1r
ÉÉ 
-
ÉÉ 
x3i
ÉÉ 
;
ÉÉ 
x0i
ÊÊ 
=
ÊÊ 
x1i
ÊÊ 
-
ÊÊ 
x3r
ÊÊ 
;
ÊÊ 
a
ËË 
[
ËË 
j3
ËË 
+
ËË 
$num
ËË 
]
ËË 
=
ËË 
wk3i
ËË 
*
ËË 
x0r
ËË "
+
ËË# $
wk3r
ËË% )
*
ËË* +
x0i
ËË, /
;
ËË/ 0
a
ÌÌ 
[
ÌÌ 
j3
ÌÌ 
+
ÌÌ 
$num
ÌÌ 
]
ÌÌ 
=
ÌÌ 
wk3i
ÌÌ 
*
ÌÌ 
x0i
ÌÌ "
-
ÌÌ# $
wk3r
ÌÌ% )
*
ÌÌ* +
x0r
ÌÌ, /
;
ÌÌ/ 0
}
ÍÍ 	
struct
ÐÐ 
cdft_arg_st
ÐÐ 
{
ÑÑ 	
public
ÒÒ 
int
ÒÒ 
n0
ÒÒ 
;
ÒÒ 
public
ÓÓ 
int
ÓÓ 
n
ÓÓ 
;
ÓÓ 
public
ÔÔ 
double
ÔÔ 
*
ÔÔ 
a
ÔÔ 
;
ÔÔ 
public
ÕÕ 
ManualResetEvent
ÕÕ #
e
ÕÕ$ %
;
ÕÕ% &
}
ÖÖ 	
;
ÖÖ	 

static
ØØ 
void
ØØ 

cftrec4_th
ØØ 
(
ØØ 
int
ØØ "
n
ØØ# $
,
ØØ$ %
double
ØØ& ,
*
ØØ, -
a
ØØ. /
)
ØØ/ 0
{
ÙÙ 	
int
ÚÚ 
i
ÚÚ 
,
ÚÚ 
idiv4
ÚÚ 
,
ÚÚ 
m
ÚÚ 
,
ÚÚ 
nthread
ÚÚ $
;
ÚÚ$ %
cdft_arg_st
ÜÜ 
[
ÜÜ 
]
ÜÜ 
ag
ÜÜ 
=
ÜÜ 
new
ÜÜ "
cdft_arg_st
ÜÜ# .
[
ÜÜ. /
$num
ÜÜ/ 0
]
ÜÜ0 1
;
ÜÜ1 2
nthread
ÞÞ 
=
ÞÞ 
$num
ÞÞ 
;
ÞÞ 
idiv4
ßß 
=
ßß 
$num
ßß 
;
ßß 
m
àà 
=
àà 
n
àà 
>>
àà 
$num
àà 
;
àà 
if
áá 
(
áá 
n
áá 
>
áá #
CDFT_4THREADS_BEGIN_N
áá )
)
áá) *
{
ââ 
nthread
ãã 
=
ãã 
$num
ãã 
;
ãã 
idiv4
ää 
=
ää 
$num
ää 
;
ää 
m
åå 
>>=
åå 
$num
åå 
;
åå 
}
ææ 
ManualResetEvent
çç 
[
çç 
]
çç 
ev
çç !
=
çç" #
new
çç$ '
ManualResetEvent
çç( 8
[
çç8 9
nthread
çç9 @
]
çç@ A
;
ççA B
for
éé 
(
éé 
i
éé 
=
éé 
$num
éé 
;
éé 
i
éé 
<
éé 
nthread
éé #
;
éé# $
i
éé% &
++
éé& (
)
éé( )
{
êê 
ev
ëë 
[
ëë 
i
ëë 
]
ëë 
=
ëë 
new
ëë 
ManualResetEvent
ëë ,
(
ëë, -
false
ëë- 2
)
ëë2 3
;
ëë3 4
ag
ìì 
[
ìì 
i
ìì 
]
ìì 
.
ìì 
n0
ìì 
=
ìì 
n
ìì 
;
ìì 
ag
íí 
[
íí 
i
íí 
]
íí 
.
íí 
n
íí 
=
íí 
m
íí 
;
íí 
ag
îî 
[
îî 
i
îî 
]
îî 
.
îî 
a
îî 
=
îî 
&
îî 
a
îî 
[
îî 
i
îî 
*
îî  
m
îî! "
]
îî" #
;
îî# $
ag
ïï 
[
ïï 
i
ïï 
]
ïï 
.
ïï 
e
ïï 
=
ïï 
ev
ïï 
[
ïï 
i
ïï 
]
ïï 
;
ïï  
if
ðð 
(
ðð 
i
ðð 
!=
ðð 
idiv4
ðð 
)
ðð 
{
ññ 

ThreadPool
òò 
.
òò 
QueueUserWorkItem
òò 0
(
òò0 1

cftrec1_th
òò1 ;
,
òò; <
ag
òò= ?
[
òò? @
i
òò@ A
]
òòA B
)
òòB C
;
òòC D
}
óó 
else
ôô 
{
õõ 

ThreadPool
öö 
.
öö 
QueueUserWorkItem
öö 0
(
öö0 1

cftrec2_th
öö1 ;
,
öö; <
ag
öö= ?
[
öö? @
i
öö@ A
]
ööA B
)
ööB C
;
ööC D
}
÷÷ 
}
øø 

WaitHandle
ùù 
.
ùù 
WaitAll
ùù 
(
ùù 
ev
ùù !
)
ùù! "
;
ùù" #
}
úú 	
public
ýý 
static
ýý 
void
ýý 

cftrec1_th
ýý %
(
ýý% &
object
ýý& ,
p
ýý- .
)
ýý. /
{
þþ 	
int
ÿÿ 
isplt
ÿÿ 
,
ÿÿ 
j
ÿÿ 
,
ÿÿ 
k
ÿÿ 
,
ÿÿ 
m
ÿÿ 
,
ÿÿ 
n
ÿÿ  !
,
ÿÿ! "
n0
ÿÿ# %
;
ÿÿ% &
double
 
*
 
a
 
;
 
n0
 
=
 
(
 
(
 
cdft_arg_st
 
)
 
p
  
)
  !
.
! "
n0
" $
;
$ %
n
 
=
 
(
 
(
 
cdft_arg_st
 
)
 
p
 
)
  
.
  !
n
! "
;
" #
a
 
=
 
(
 
(
 
cdft_arg_st
 
)
 
p
 
)
  
.
  !
a
! "
;
" #
m
 
=
 
n0
 
;
 
while
 
(
 
m
 
>
 
$num
 
)
 
{
 
m
 
>>=
 
$num
 
;
 
cftmdl1
 
(
 
m
 
,
 
&
 
a
 
[
 
n
 
-
  !
m
" #
]
# $
)
$ %
;
% &
}
 
cftleaf
 
(
 
m
 
,
 
$num
 
,
 
&
 
a
 
[
 
n
 
-
  
m
! "
]
" #
)
# $
;
$ %
k
 
=
 
$num
 
;
 
for
 
(
 
j
 
=
 
n
 
-
 
m
 
;
 
j
 
>
 
$num
  !
;
! "
j
# $
-=
% '
m
( )
)
) *
{
 
k
 
++
 
;
 
isplt
 
=
 
cfttree
 
(
  
m
  !
,
! "
j
# $
,
$ %
k
& '
,
' (
a
) *
)
* +
;
+ ,
cftleaf
 
(
 
m
 
,
 
isplt
  
,
  !
&
" #
a
# $
[
$ %
j
% &
-
' (
m
) *
]
* +
)
+ ,
;
, -
}
 
(
 
(
 
cdft_arg_st
 
)
 
p
 
)
 
.
 
e
 
.
 
Set
 "
(
" #
)
# $
;
$ %
}
 	
public
 
static
 
void
 

cftrec2_th
 %
(
% &
object
& ,
p
- .
)
. /
{
 	
int
 
isplt
 
,
 
j
 
,
 
k
 
,
 
m
 
,
 
n
  !
,
! "
n0
# %
;
% &
double
 
*
 
a
 
;
 
n0
 
=
 
(
 
(
 
cdft_arg_st
 
)
 
p
  
)
  !
.
! "
n0
" $
;
$ %
n
 
=
 
(
 
(
 
cdft_arg_st
 
)
 
p
 
)
  
.
  !
n
! "
;
" #
a
 
=
 
(
 
(
 
cdft_arg_st
 
)
 
p
 
)
  
.
  !
a
! "
;
" #
k
 
=
 
$num
 
;
 
m
   
=
   
n0
   
;
   
while
¡¡ 
(
¡¡ 
m
¡¡ 
>
¡¡ 
$num
¡¡ 
)
¡¡ 
{
¢¢ 
m
££ 
>>=
££ 
$num
££ 
;
££ 
k
¤¤ 
<<=
¤¤ 
$num
¤¤ 
;
¤¤ 
cftmdl2
¥¥ 
(
¥¥ 
m
¥¥ 
,
¥¥ 
&
¥¥ 
a
¥¥ 
[
¥¥ 
n
¥¥ 
-
¥¥  !
m
¥¥" #
]
¥¥# $
)
¥¥$ %
;
¥¥% &
}
¦¦ 
cftleaf
§§ 
(
§§ 
m
§§ 
,
§§ 
$num
§§ 
,
§§ 
&
§§ 
a
§§ 
[
§§ 
n
§§ 
-
§§  
m
§§! "
]
§§" #
)
§§# $
;
§§$ %
k
¨¨ 
>>=
¨¨ 
$num
¨¨ 
;
¨¨ 
for
©© 
(
©© 
j
©© 
=
©© 
n
©© 
-
©© 
m
©© 
;
©© 
j
©© 
>
©© 
$num
©©  !
;
©©! "
j
©©# $
-=
©©% '
m
©©( )
)
©©) *
{
ªª 
k
«« 
++
«« 
;
«« 
isplt
¬¬ 
=
¬¬ 
cfttree
¬¬ 
(
¬¬  
m
¬¬  !
,
¬¬! "
j
¬¬# $
,
¬¬$ %
k
¬¬& '
,
¬¬' (
a
¬¬) *
)
¬¬* +
;
¬¬+ ,
cftleaf
­­ 
(
­­ 
m
­­ 
,
­­ 
isplt
­­  
,
­­  !
&
­­" #
a
­­# $
[
­­$ %
j
­­% &
-
­­' (
m
­­) *
]
­­* +
)
­­+ ,
;
­­, -
}
®® 
(
¯¯ 
(
¯¯ 
cdft_arg_st
¯¯ 
)
¯¯ 
p
¯¯ 
)
¯¯ 
.
¯¯ 
e
¯¯ 
.
¯¯ 
Set
¯¯ "
(
¯¯" #
)
¯¯# $
;
¯¯$ %
}
°° 	
static
²² 
void
²² 
cftrec4
²² 
(
²² 
int
²² 
n
²²  !
,
²²! "
double
²²# )
*
²²) *
a
²²+ ,
)
²², -
{
³³ 	
int
´´ 
isplt
´´ 
,
´´ 
j
´´ 
,
´´ 
k
´´ 
,
´´ 
m
´´ 
;
´´ 
m
¶¶ 
=
¶¶ 
n
¶¶ 
;
¶¶ 
while
·· 
(
·· 
m
·· 
>
·· 
$num
·· 
)
·· 
{
¸¸ 
m
¹¹ 
>>=
¹¹ 
$num
¹¹ 
;
¹¹ 
cftmdl1
ºº 
(
ºº 
m
ºº 
,
ºº 
&
ºº 
a
ºº 
[
ºº 
n
ºº 
-
ºº  !
m
ºº" #
]
ºº# $
)
ºº$ %
;
ºº% &
}
»» 
cftleaf
¼¼ 
(
¼¼ 
m
¼¼ 
,
¼¼ 
$num
¼¼ 
,
¼¼ 
&
¼¼ 
a
¼¼ 
[
¼¼ 
n
¼¼ 
-
¼¼  
m
¼¼! "
]
¼¼" #
)
¼¼# $
;
¼¼$ %
k
½½ 
=
½½ 
$num
½½ 
;
½½ 
for
¾¾ 
(
¾¾ 
j
¾¾ 
=
¾¾ 
n
¾¾ 
-
¾¾ 
m
¾¾ 
;
¾¾ 
j
¾¾ 
>
¾¾ 
$num
¾¾  !
;
¾¾! "
j
¾¾# $
-=
¾¾% '
m
¾¾( )
)
¾¾) *
{
¿¿ 
k
ÀÀ 
++
ÀÀ 
;
ÀÀ 
isplt
ÁÁ 
=
ÁÁ 
cfttree
ÁÁ 
(
ÁÁ  
m
ÁÁ  !
,
ÁÁ! "
j
ÁÁ# $
,
ÁÁ$ %
k
ÁÁ& '
,
ÁÁ' (
a
ÁÁ) *
)
ÁÁ* +
;
ÁÁ+ ,
cftleaf
ÂÂ 
(
ÂÂ 
m
ÂÂ 
,
ÂÂ 
isplt
ÂÂ  
,
ÂÂ  !
&
ÂÂ" #
a
ÂÂ# $
[
ÂÂ$ %
j
ÂÂ% &
-
ÂÂ' (
m
ÂÂ) *
]
ÂÂ* +
)
ÂÂ+ ,
;
ÂÂ, -
}
ÃÃ 
}
ÄÄ 	
static
ÇÇ 
int
ÇÇ 
cfttree
ÇÇ 
(
ÇÇ 
int
ÇÇ 
n
ÇÇ  
,
ÇÇ  !
int
ÇÇ" %
j
ÇÇ& '
,
ÇÇ' (
int
ÇÇ) ,
k
ÇÇ- .
,
ÇÇ. /
double
ÇÇ0 6
*
ÇÇ6 7
a
ÇÇ8 9
)
ÇÇ9 :
{
ÈÈ 	
int
ÉÉ 
i
ÉÉ 
,
ÉÉ 
isplt
ÉÉ 
,
ÉÉ 
m
ÉÉ 
;
ÉÉ 
if
ËË 
(
ËË 
(
ËË 
k
ËË 
&
ËË 
$num
ËË 
)
ËË 
!=
ËË 
$num
ËË 
)
ËË 
{
ÌÌ 
isplt
ÍÍ 
=
ÍÍ 
k
ÍÍ 
&
ÍÍ 
$num
ÍÍ 
;
ÍÍ 
if
ÎÎ 
(
ÎÎ 
isplt
ÎÎ 
!=
ÎÎ 
$num
ÎÎ 
)
ÎÎ 
{
ÏÏ 
cftmdl1
ÐÐ 
(
ÐÐ 
n
ÐÐ 
,
ÐÐ 
&
ÐÐ  
a
ÐÐ  !
[
ÐÐ! "
j
ÐÐ" #
-
ÐÐ$ %
n
ÐÐ& '
]
ÐÐ' (
)
ÐÐ( )
;
ÐÐ) *
}
ÑÑ 
else
ÒÒ 
{
ÓÓ 
cftmdl2
ÔÔ 
(
ÔÔ 
n
ÔÔ 
,
ÔÔ 
&
ÔÔ  
a
ÔÔ  !
[
ÔÔ! "
j
ÔÔ" #
-
ÔÔ$ %
n
ÔÔ& '
]
ÔÔ' (
)
ÔÔ( )
;
ÔÔ) *
}
ÕÕ 
}
ÖÖ 
else
×× 
{
ØØ 
m
ÙÙ 
=
ÙÙ 
n
ÙÙ 
;
ÙÙ 
for
ÚÚ 
(
ÚÚ 
i
ÚÚ 
=
ÚÚ 
k
ÚÚ 
;
ÚÚ 
(
ÚÚ 
i
ÚÚ 
&
ÚÚ  
$num
ÚÚ! "
)
ÚÚ" #
==
ÚÚ$ &
$num
ÚÚ' (
;
ÚÚ( )
i
ÚÚ* +
>>=
ÚÚ, /
$num
ÚÚ0 1
)
ÚÚ1 2
{
ÛÛ 
m
ÜÜ 
<<=
ÜÜ 
$num
ÜÜ 
;
ÜÜ 
}
ÝÝ 
isplt
ÞÞ 
=
ÞÞ 
i
ÞÞ 
&
ÞÞ 
$num
ÞÞ 
;
ÞÞ 
if
ßß 
(
ßß 
isplt
ßß 
!=
ßß 
$num
ßß 
)
ßß 
{
àà 
while
áá 
(
áá 
m
áá 
>
áá 
$num
áá "
)
áá" #
{
ââ 
cftmdl1
ãã 
(
ãã  
m
ãã  !
,
ãã! "
&
ãã# $
a
ãã$ %
[
ãã% &
j
ãã& '
-
ãã( )
m
ãã* +
]
ãã+ ,
)
ãã, -
;
ãã- .
m
ää 
>>=
ää 
$num
ää 
;
ää  
}
åå 
}
ææ 
else
çç 
{
èè 
while
éé 
(
éé 
m
éé 
>
éé 
$num
éé "
)
éé" #
{
êê 
cftmdl2
ëë 
(
ëë  
m
ëë  !
,
ëë! "
&
ëë# $
a
ëë$ %
[
ëë% &
j
ëë& '
-
ëë( )
m
ëë* +
]
ëë+ ,
)
ëë, -
;
ëë- .
m
ìì 
>>=
ìì 
$num
ìì 
;
ìì  
}
íí 
}
îî 
}
ïï 
return
ðð 
isplt
ðð 
;
ðð 
}
ññ 	
static
ôô 
void
ôô 
cftleaf
ôô 
(
ôô 
int
ôô 
n
ôô  !
,
ôô! "
int
ôô# &
isplt
ôô' ,
,
ôô, -
double
ôô. 4
*
ôô4 5
a
ôô6 7
)
ôô7 8
{
õõ 	
if
öö 
(
öö 
n
öö 
==
öö 
$num
öö 
)
öö 
{
÷÷ 
cftmdl1
øø 
(
øø 
$num
øø 
,
øø 
a
øø 
)
øø 
;
øø  
cftf161
ùù 
(
ùù 
a
ùù 
)
ùù 
;
ùù 
cftf162
úú 
(
úú 
&
úú 
a
úú 
[
úú 
$num
úú 
]
úú 
)
úú 
;
úú  
cftf161
ûû 
(
ûû 
&
ûû 
a
ûû 
[
ûû 
$num
ûû 
]
ûû 
)
ûû 
;
ûû  
cftf161
üü 
(
üü 
&
üü 
a
üü 
[
üü 
$num
üü 
]
üü 
)
üü 
;
üü  
cftmdl2
ýý 
(
ýý 
$num
ýý 
,
ýý 
&
ýý 
a
ýý 
[
ýý  
$num
ýý  #
]
ýý# $
)
ýý$ %
;
ýý% &
cftf161
þþ 
(
þþ 
&
þþ 
a
þþ 
[
þþ 
$num
þþ 
]
þþ 
)
þþ  
;
þþ  !
cftf162
ÿÿ 
(
ÿÿ 
&
ÿÿ 
a
ÿÿ 
[
ÿÿ 
$num
ÿÿ 
]
ÿÿ 
)
ÿÿ  
;
ÿÿ  !
cftf161
 
(
 
&
 
a
 
[
 
$num
 
]
 
)
  
;
  !
cftf162
 
(
 
&
 
a
 
[
 
$num
 
]
 
)
  
;
  !
cftmdl1
 
(
 
$num
 
,
 
&
 
a
 
[
  
$num
  #
]
# $
)
$ %
;
% &
cftf161
 
(
 
&
 
a
 
[
 
$num
 
]
 
)
  
;
  !
cftf162
 
(
 
&
 
a
 
[
 
$num
 
]
 
)
  
;
  !
cftf161
 
(
 
&
 
a
 
[
 
$num
 
]
 
)
  
;
  !
cftf161
 
(
 
&
 
a
 
[
 
$num
 
]
 
)
  
;
  !
if
 
(
 
isplt
 
!=
 
$num
 
)
 
{
 
cftmdl1
 
(
 
$num
 
,
  
&
! "
a
" #
[
# $
$num
$ '
]
' (
)
( )
;
) *
cftf161
 
(
 
&
 
a
 
[
 
$num
 "
]
" #
)
# $
;
$ %
}
 
else
 
{
 
cftmdl2
 
(
 
$num
 
,
  
&
! "
a
" #
[
# $
$num
$ '
]
' (
)
( )
;
) *
cftf162
 
(
 
&
 
a
 
[
 
$num
 "
]
" #
)
# $
;
$ %
}
 
cftf161
 
(
 
&
 
a
 
[
 
$num
 
]
 
)
  
;
  !
cftf162
 
(
 
&
 
a
 
[
 
$num
 
]
 
)
  
;
  !
cftf161
 
(
 
&
 
a
 
[
 
$num
 
]
 
)
  
;
  !
}
 
else
 
{
 
cftmdl1
 
(
 
$num
 
,
 
a
 
)
 
;
 
cftf081
 
(
 
a
 
)
 
;
 
cftf082
 
(
 
&
 
a
 
[
 
$num
 
]
 
)
 
;
  
cftf081
 
(
 
&
 
a
 
[
 
$num
 
]
 
)
 
;
  
cftf081
 
(
 
&
 
a
 
[
 
$num
 
]
 
)
 
;
  
cftmdl2
 
(
 
$num
 
,
 
&
 
a
 
[
 
$num
 !
]
! "
)
" #
;
# $
cftf081
 
(
 
&
 
a
 
[
 
$num
 
]
 
)
 
;
  
cftf082
 
(
 
&
 
a
 
[
 
$num
 
]
 
)
 
;
  
cftf081
 
(
 
&
 
a
 
[
 
$num
 
]
 
)
 
;
  
cftf082
   
(
   
&
   
a
   
[
   
$num
   
]
   
)
    
;
    !
cftmdl1
¡¡ 
(
¡¡ 
$num
¡¡ 
,
¡¡ 
&
¡¡ 
a
¡¡ 
[
¡¡ 
$num
¡¡ "
]
¡¡" #
)
¡¡# $
;
¡¡$ %
cftf081
¢¢ 
(
¢¢ 
&
¢¢ 
a
¢¢ 
[
¢¢ 
$num
¢¢ 
]
¢¢ 
)
¢¢  
;
¢¢  !
cftf082
££ 
(
££ 
&
££ 
a
££ 
[
££ 
$num
££ 
]
££ 
)
££  
;
££  !
cftf081
¤¤ 
(
¤¤ 
&
¤¤ 
a
¤¤ 
[
¤¤ 
$num
¤¤ 
]
¤¤ 
)
¤¤  
;
¤¤  !
cftf081
¥¥ 
(
¥¥ 
&
¥¥ 
a
¥¥ 
[
¥¥ 
$num
¥¥ 
]
¥¥ 
)
¥¥  
;
¥¥  !
if
¦¦ 
(
¦¦ 
isplt
¦¦ 
!=
¦¦ 
$num
¦¦ 
)
¦¦ 
{
§§ 
cftmdl1
¨¨ 
(
¨¨ 
$num
¨¨ 
,
¨¨ 
&
¨¨  !
a
¨¨! "
[
¨¨" #
$num
¨¨# &
]
¨¨& '
)
¨¨' (
;
¨¨( )
cftf081
©© 
(
©© 
&
©© 
a
©© 
[
©© 
$num
©© "
]
©©" #
)
©©# $
;
©©$ %
}
ªª 
else
«« 
{
¬¬ 
cftmdl2
­­ 
(
­­ 
$num
­­ 
,
­­ 
&
­­  !
a
­­! "
[
­­" #
$num
­­# &
]
­­& '
)
­­' (
;
­­( )
cftf082
®® 
(
®® 
&
®® 
a
®® 
[
®® 
$num
®® "
]
®®" #
)
®®# $
;
®®$ %
}
¯¯ 
cftf081
°° 
(
°° 
&
°° 
a
°° 
[
°° 
$num
°° 
]
°° 
)
°°  
;
°°  !
cftf082
±± 
(
±± 
&
±± 
a
±± 
[
±± 
$num
±± 
]
±± 
)
±±  
;
±±  !
cftf081
²² 
(
²² 
&
²² 
a
²² 
[
²² 
$num
²² 
]
²² 
)
²²  
;
²²  !
}
³³ 
}
´´ 	
static
·· 
void
·· 
cftmdl1
·· 
(
·· 
int
·· 
n
··  !
,
··! "
double
··# )
*
··) *
a
··+ ,
)
··, -
{
¸¸ 	
int
¹¹ 
i
¹¹ 
,
¹¹ 
i0
¹¹ 
,
¹¹ 
j
¹¹ 
,
¹¹ 
j0
¹¹ 
,
¹¹ 
j1
¹¹  
,
¹¹  !
j2
¹¹" $
,
¹¹$ %
j3
¹¹& (
,
¹¹( )
m
¹¹* +
,
¹¹+ ,
mh
¹¹- /
;
¹¹/ 0
double
ºº 
ew
ºº 
,
ºº 
w1r
ºº 
,
ºº 
w1i
ºº 
,
ºº  
wk1r
ºº! %
,
ºº% &
wk1i
ºº' +
,
ºº+ ,
wk3r
ºº- 1
,
ºº1 2
wk3i
ºº3 7
,
ºº7 8
wd1r
»» 
,
»» 
wd1i
»» 
,
»» 
wd3r
»»  
,
»»  !
wd3i
»»" &
,
»»& '
ss1
»»( +
,
»»+ ,
ss3
»»- 0
;
»»0 1
double
¼¼ 
x0r
¼¼ 
,
¼¼ 
x0i
¼¼ 
,
¼¼ 
x1r
¼¼  
,
¼¼  !
x1i
¼¼" %
,
¼¼% &
x2r
¼¼' *
,
¼¼* +
x2i
¼¼, /
,
¼¼/ 0
x3r
¼¼1 4
,
¼¼4 5
x3i
¼¼6 9
;
¼¼9 :
mh
¾¾ 
=
¾¾ 
n
¾¾ 
>>
¾¾ 
$num
¾¾ 
;
¾¾ 
m
¿¿ 
=
¿¿ 
$num
¿¿ 
*
¿¿ 
mh
¿¿ 
;
¿¿ 
j1
ÀÀ 
=
ÀÀ 
m
ÀÀ 
;
ÀÀ 
j2
ÁÁ 
=
ÁÁ 
j1
ÁÁ 
+
ÁÁ 
m
ÁÁ 
;
ÁÁ 
j3
ÂÂ 
=
ÂÂ 
j2
ÂÂ 
+
ÂÂ 
m
ÂÂ 
;
ÂÂ 
x0r
ÃÃ 
=
ÃÃ 
a
ÃÃ 
[
ÃÃ 
$num
ÃÃ 
]
ÃÃ 
+
ÃÃ 
a
ÃÃ 
[
ÃÃ 
j2
ÃÃ 
]
ÃÃ 
;
ÃÃ 
x0i
ÄÄ 
=
ÄÄ 
a
ÄÄ 
[
ÄÄ 
$num
ÄÄ 
]
ÄÄ 
+
ÄÄ 
a
ÄÄ 
[
ÄÄ 
j2
ÄÄ 
+
ÄÄ 
$num
ÄÄ  !
]
ÄÄ! "
;
ÄÄ" #
x1r
ÅÅ 
=
ÅÅ 
a
ÅÅ 
[
ÅÅ 
$num
ÅÅ 
]
ÅÅ 
-
ÅÅ 
a
ÅÅ 
[
ÅÅ 
j2
ÅÅ 
]
ÅÅ 
;
ÅÅ 
x1i
ÆÆ 
=
ÆÆ 
a
ÆÆ 
[
ÆÆ 
$num
ÆÆ 
]
ÆÆ 
-
ÆÆ 
a
ÆÆ 
[
ÆÆ 
j2
ÆÆ 
+
ÆÆ 
$num
ÆÆ  !
]
ÆÆ! "
;
ÆÆ" #
x2r
ÇÇ 
=
ÇÇ 
a
ÇÇ 
[
ÇÇ 
j1
ÇÇ 
]
ÇÇ 
+
ÇÇ 
a
ÇÇ 
[
ÇÇ 
j3
ÇÇ 
]
ÇÇ 
;
ÇÇ  
x2i
ÈÈ 
=
ÈÈ 
a
ÈÈ 
[
ÈÈ 
j1
ÈÈ 
+
ÈÈ 
$num
ÈÈ 
]
ÈÈ 
+
ÈÈ 
a
ÈÈ 
[
ÈÈ  
j3
ÈÈ  "
+
ÈÈ# $
$num
ÈÈ% &
]
ÈÈ& '
;
ÈÈ' (
x3r
ÉÉ 
=
ÉÉ 
a
ÉÉ 
[
ÉÉ 
j1
ÉÉ 
]
ÉÉ 
-
ÉÉ 
a
ÉÉ 
[
ÉÉ 
j3
ÉÉ 
]
ÉÉ 
;
ÉÉ  
x3i
ÊÊ 
=
ÊÊ 
a
ÊÊ 
[
ÊÊ 
j1
ÊÊ 
+
ÊÊ 
$num
ÊÊ 
]
ÊÊ 
-
ÊÊ 
a
ÊÊ 
[
ÊÊ  
j3
ÊÊ  "
+
ÊÊ# $
$num
ÊÊ% &
]
ÊÊ& '
;
ÊÊ' (
a
ËË 
[
ËË 
$num
ËË 
]
ËË 
=
ËË 
x0r
ËË 
+
ËË 
x2r
ËË 
;
ËË 
a
ÌÌ 
[
ÌÌ 
$num
ÌÌ 
]
ÌÌ 
=
ÌÌ 
x0i
ÌÌ 
+
ÌÌ 
x2i
ÌÌ 
;
ÌÌ 
a
ÍÍ 
[
ÍÍ 
j1
ÍÍ 
]
ÍÍ 
=
ÍÍ 
x0r
ÍÍ 
-
ÍÍ 
x2r
ÍÍ 
;
ÍÍ 
a
ÎÎ 
[
ÎÎ 
j1
ÎÎ 
+
ÎÎ 
$num
ÎÎ 
]
ÎÎ 
=
ÎÎ 
x0i
ÎÎ 
-
ÎÎ 
x2i
ÎÎ !
;
ÎÎ! "
a
ÏÏ 
[
ÏÏ 
j2
ÏÏ 
]
ÏÏ 
=
ÏÏ 
x1r
ÏÏ 
-
ÏÏ 
x3i
ÏÏ 
;
ÏÏ 
a
ÐÐ 
[
ÐÐ 
j2
ÐÐ 
+
ÐÐ 
$num
ÐÐ 
]
ÐÐ 
=
ÐÐ 
x1i
ÐÐ 
+
ÐÐ 
x3r
ÐÐ !
;
ÐÐ! "
a
ÑÑ 
[
ÑÑ 
j3
ÑÑ 
]
ÑÑ 
=
ÑÑ 
x1r
ÑÑ 
+
ÑÑ 
x3i
ÑÑ 
;
ÑÑ 
a
ÒÒ 
[
ÒÒ 
j3
ÒÒ 
+
ÒÒ 
$num
ÒÒ 
]
ÒÒ 
=
ÒÒ 
x1i
ÒÒ 
-
ÒÒ 
x3r
ÒÒ !
;
ÒÒ! "
wd1r
ÓÓ 
=
ÓÓ 
$num
ÓÓ 
;
ÓÓ 
wd1i
ÔÔ 
=
ÔÔ 
$num
ÔÔ 
;
ÔÔ 
wd3r
ÕÕ 
=
ÕÕ 
$num
ÕÕ 
;
ÕÕ 
wd3i
ÖÖ 
=
ÖÖ 
$num
ÖÖ 
;
ÖÖ 
ew
×× 
=
×× 
M_PI_2
×× 
/
×× 
m
×× 
;
×× 
w1r
ØØ 
=
ØØ 
Math
ØØ 
.
ØØ 
Cos
ØØ 
(
ØØ 
$num
ØØ 
*
ØØ 
ew
ØØ !
)
ØØ! "
;
ØØ" #
w1i
ÙÙ 
=
ÙÙ 
Math
ÙÙ 
.
ÙÙ 
Sin
ÙÙ 
(
ÙÙ 
$num
ÙÙ 
*
ÙÙ 
ew
ÙÙ !
)
ÙÙ! "
;
ÙÙ" #
wk1r
ÚÚ 
=
ÚÚ 
w1r
ÚÚ 
;
ÚÚ 
wk1i
ÛÛ 
=
ÛÛ 
w1i
ÛÛ 
;
ÛÛ 
ss1
ÜÜ 
=
ÜÜ 
$num
ÜÜ 
*
ÜÜ 
w1i
ÜÜ 
;
ÜÜ 
wk3i
ÝÝ 
=
ÝÝ 
$num
ÝÝ 
*
ÝÝ 
ss1
ÝÝ 
*
ÝÝ 
wk1r
ÝÝ !
;
ÝÝ! "
wk3r
ÞÞ 
=
ÞÞ 
wk1r
ÞÞ 
-
ÞÞ 
wk3i
ÞÞ 
*
ÞÞ  
wk1i
ÞÞ! %
;
ÞÞ% &
wk3i
ßß 
=
ßß 
wk1i
ßß 
-
ßß 
wk3i
ßß 
*
ßß  
wk1r
ßß! %
;
ßß% &
ss3
àà 
=
àà 
$num
àà 
*
àà 
wk3i
àà 
;
àà 
i
áá 
=
áá 
$num
áá 
;
áá 
for
ââ 
(
ââ 
;
ââ 
;
ââ 
)
ââ 
{
ãã 
i0
ää 
=
ää 
i
ää 
+
ää 
$num
ää 
*
ää 
CDFT_LOOP_DIV
ää *
;
ää* +
if
åå 
(
åå 
i0
åå 
>
åå 
mh
åå 
-
åå 
$num
åå 
)
åå  
{
ææ 
i0
çç 
=
çç 
mh
çç 
-
çç 
$num
çç 
;
çç  
}
èè 
for
éé 
(
éé 
j
éé 
=
éé 
i
éé 
+
éé 
$num
éé 
;
éé 
j
éé  !
<
éé" #
i0
éé$ &
;
éé& '
j
éé( )
+=
éé* ,
$num
éé- .
)
éé. /
{
êê 
wd1r
ëë 
-=
ëë 
ss1
ëë 
*
ëë  !
wk1i
ëë" &
;
ëë& '
wd1i
ìì 
+=
ìì 
ss1
ìì 
*
ìì  !
wk1r
ìì" &
;
ìì& '
wd3r
íí 
-=
íí 
ss3
íí 
*
íí  !
wk3i
íí" &
;
íí& '
wd3i
îî 
+=
îî 
ss3
îî 
*
îî  !
wk3r
îî" &
;
îî& '
j1
ïï 
=
ïï 
j
ïï 
+
ïï 
m
ïï 
;
ïï 
j2
ðð 
=
ðð 
j1
ðð 
+
ðð 
m
ðð 
;
ðð  
j3
ññ 
=
ññ 
j2
ññ 
+
ññ 
m
ññ 
;
ññ  
x0r
òò 
=
òò 
a
òò 
[
òò 
j
òò 
]
òò 
+
òò  
a
òò! "
[
òò" #
j2
òò# %
]
òò% &
;
òò& '
x0i
óó 
=
óó 
a
óó 
[
óó 
j
óó 
+
óó 
$num
óó  !
]
óó! "
+
óó# $
a
óó% &
[
óó& '
j2
óó' )
+
óó* +
$num
óó, -
]
óó- .
;
óó. /
x1r
ôô 
=
ôô 
a
ôô 
[
ôô 
j
ôô 
]
ôô 
-
ôô  
a
ôô! "
[
ôô" #
j2
ôô# %
]
ôô% &
;
ôô& '
x1i
õõ 
=
õõ 
a
õõ 
[
õõ 
j
õõ 
+
õõ 
$num
õõ  !
]
õõ! "
-
õõ# $
a
õõ% &
[
õõ& '
j2
õõ' )
+
õõ* +
$num
õõ, -
]
õõ- .
;
õõ. /
x2r
öö 
=
öö 
a
öö 
[
öö 
j1
öö 
]
öö 
+
öö  !
a
öö" #
[
öö# $
j3
öö$ &
]
öö& '
;
öö' (
x2i
÷÷ 
=
÷÷ 
a
÷÷ 
[
÷÷ 
j1
÷÷ 
+
÷÷  
$num
÷÷! "
]
÷÷" #
+
÷÷$ %
a
÷÷& '
[
÷÷' (
j3
÷÷( *
+
÷÷+ ,
$num
÷÷- .
]
÷÷. /
;
÷÷/ 0
x3r
øø 
=
øø 
a
øø 
[
øø 
j1
øø 
]
øø 
-
øø  !
a
øø" #
[
øø# $
j3
øø$ &
]
øø& '
;
øø' (
x3i
ùù 
=
ùù 
a
ùù 
[
ùù 
j1
ùù 
+
ùù  
$num
ùù! "
]
ùù" #
-
ùù$ %
a
ùù& '
[
ùù' (
j3
ùù( *
+
ùù+ ,
$num
ùù- .
]
ùù. /
;
ùù/ 0
a
úú 
[
úú 
j
úú 
]
úú 
=
úú 
x0r
úú 
+
úú  
x2r
úú! $
;
úú$ %
a
ûû 
[
ûû 
j
ûû 
+
ûû 
$num
ûû 
]
ûû 
=
ûû 
x0i
ûû "
+
ûû# $
x2i
ûû% (
;
ûû( )
a
üü 
[
üü 
j1
üü 
]
üü 
=
üü 
x0r
üü 
-
üü  !
x2r
üü" %
;
üü% &
a
ýý 
[
ýý 
j1
ýý 
+
ýý 
$num
ýý 
]
ýý 
=
ýý 
x0i
ýý  #
-
ýý$ %
x2i
ýý& )
;
ýý) *
x0r
þþ 
=
þþ 
x1r
þþ 
-
þþ 
x3i
þþ  #
;
þþ# $
x0i
ÿÿ 
=
ÿÿ 
x1i
ÿÿ 
+
ÿÿ 
x3r
ÿÿ  #
;
ÿÿ# $
a
 
[
 
j2
 
]
 
=
 
wk1r
  
*
! "
x0r
# &
-
' (
wk1i
) -
*
. /
x0i
0 3
;
3 4
a
 
[
 
j2
 
+
 
$num
 
]
 
=
 
wk1r
  $
*
% &
x0i
' *
+
+ ,
wk1i
- 1
*
2 3
x0r
4 7
;
7 8
x0r
 
=
 
x1r
 
+
 
x3i
  #
;
# $
x0i
 
=
 
x1i
 
-
 
x3r
  #
;
# $
a
 
[
 
j3
 
]
 
=
 
wk3r
  
*
! "
x0r
# &
+
' (
wk3i
) -
*
. /
x0i
0 3
;
3 4
a
 
[
 
j3
 
+
 
$num
 
]
 
=
 
wk3r
  $
*
% &
x0i
' *
-
+ ,
wk3i
- 1
*
2 3
x0r
4 7
;
7 8
x0r
 
=
 
a
 
[
 
j
 
+
 
$num
  !
]
! "
+
# $
a
% &
[
& '
j2
' )
+
* +
$num
, -
]
- .
;
. /
x0i
 
=
 
a
 
[
 
j
 
+
 
$num
  !
]
! "
+
# $
a
% &
[
& '
j2
' )
+
* +
$num
, -
]
- .
;
. /
x1r
 
=
 
a
 
[
 
j
 
+
 
$num
  !
]
! "
-
# $
a
% &
[
& '
j2
' )
+
* +
$num
, -
]
- .
;
. /
x1i
 
=
 
a
 
[
 
j
 
+
 
$num
  !
]
! "
-
# $
a
% &
[
& '
j2
' )
+
* +
$num
, -
]
- .
;
. /
x2r
 
=
 
a
 
[
 
j1
 
+
  
$num
! "
]
" #
+
$ %
a
& '
[
' (
j3
( *
+
+ ,
$num
- .
]
. /
;
/ 0
x2i
 
=
 
a
 
[
 
j1
 
+
  
$num
! "
]
" #
+
$ %
a
& '
[
' (
j3
( *
+
+ ,
$num
- .
]
. /
;
/ 0
x3r
 
=
 
a
 
[
 
j1
 
+
  
$num
! "
]
" #
-
$ %
a
& '
[
' (
j3
( *
+
+ ,
$num
- .
]
. /
;
/ 0
x3i
 
=
 
a
 
[
 
j1
 
+
  
$num
! "
]
" #
-
$ %
a
& '
[
' (
j3
( *
+
+ ,
$num
- .
]
. /
;
/ 0
a
 
[
 
j
 
+
 
$num
 
]
 
=
 
x0r
 "
+
# $
x2r
% (
;
( )
a
 
[
 
j
 
+
 
$num
 
]
 
=
 
x0i
 "
+
# $
x2i
% (
;
( )
a
 
[
 
j1
 
+
 
$num
 
]
 
=
 
x0r
  #
-
$ %
x2r
& )
;
) *
a
 
[
 
j1
 
+
 
$num
 
]
 
=
 
x0i
  #
-
$ %
x2i
& )
;
) *
x0r
 
=
 
x1r
 
-
 
x3i
  #
;
# $
x0i
 
=
 
x1i
 
+
 
x3r
  #
;
# $
a
 
[
 
j2
 
+
 
$num
 
]
 
=
 
wd1r
  $
*
% &
x0r
' *
-
+ ,
wd1i
- 1
*
2 3
x0i
4 7
;
7 8
a
 
[
 
j2
 
+
 
$num
 
]
 
=
 
wd1r
  $
*
% &
x0i
' *
+
+ ,
wd1i
- 1
*
2 3
x0r
4 7
;
7 8
x0r
 
=
 
x1r
 
+
 
x3i
  #
;
# $
x0i
 
=
 
x1i
 
-
 
x3r
  #
;
# $
a
 
[
 
j3
 
+
 
$num
 
]
 
=
 
wd3r
  $
*
% &
x0r
' *
+
+ ,
wd3i
- 1
*
2 3
x0i
4 7
;
7 8
a
 
[
 
j3
 
+
 
$num
 
]
 
=
 
wd3r
  $
*
% &
x0i
' *
-
+ ,
wd3i
- 1
*
2 3
x0r
4 7
;
7 8
j0
 
=
 
m
 
-
 
j
 
;
 
j1
 
=
 
j0
 
+
 
m
 
;
  
j2
 
=
 
j1
 
+
 
m
 
;
  
j3
 
=
 
j2
 
+
 
m
 
;
  
x0r
 
=
 
a
 
[
 
j0
 
]
 
+
  !
a
" #
[
# $
j2
$ &
]
& '
;
' (
x0i
 
=
 
a
 
[
 
j0
 
+
  
$num
! "
]
" #
+
$ %
a
& '
[
' (
j2
( *
+
+ ,
$num
- .
]
. /
;
/ 0
x1r
   
=
   
a
   
[
   
j0
   
]
   
-
    !
a
  " #
[
  # $
j2
  $ &
]
  & '
;
  ' (
x1i
¡¡ 
=
¡¡ 
a
¡¡ 
[
¡¡ 
j0
¡¡ 
+
¡¡  
$num
¡¡! "
]
¡¡" #
-
¡¡$ %
a
¡¡& '
[
¡¡' (
j2
¡¡( *
+
¡¡+ ,
$num
¡¡- .
]
¡¡. /
;
¡¡/ 0
x2r
¢¢ 
=
¢¢ 
a
¢¢ 
[
¢¢ 
j1
¢¢ 
]
¢¢ 
+
¢¢  !
a
¢¢" #
[
¢¢# $
j3
¢¢$ &
]
¢¢& '
;
¢¢' (
x2i
££ 
=
££ 
a
££ 
[
££ 
j1
££ 
+
££  
$num
££! "
]
££" #
+
££$ %
a
££& '
[
££' (
j3
££( *
+
££+ ,
$num
££- .
]
££. /
;
££/ 0
x3r
¤¤ 
=
¤¤ 
a
¤¤ 
[
¤¤ 
j1
¤¤ 
]
¤¤ 
-
¤¤  !
a
¤¤" #
[
¤¤# $
j3
¤¤$ &
]
¤¤& '
;
¤¤' (
x3i
¥¥ 
=
¥¥ 
a
¥¥ 
[
¥¥ 
j1
¥¥ 
+
¥¥  
$num
¥¥! "
]
¥¥" #
-
¥¥$ %
a
¥¥& '
[
¥¥' (
j3
¥¥( *
+
¥¥+ ,
$num
¥¥- .
]
¥¥. /
;
¥¥/ 0
a
¦¦ 
[
¦¦ 
j0
¦¦ 
]
¦¦ 
=
¦¦ 
x0r
¦¦ 
+
¦¦  !
x2r
¦¦" %
;
¦¦% &
a
§§ 
[
§§ 
j0
§§ 
+
§§ 
$num
§§ 
]
§§ 
=
§§ 
x0i
§§  #
+
§§$ %
x2i
§§& )
;
§§) *
a
¨¨ 
[
¨¨ 
j1
¨¨ 
]
¨¨ 
=
¨¨ 
x0r
¨¨ 
-
¨¨  !
x2r
¨¨" %
;
¨¨% &
a
©© 
[
©© 
j1
©© 
+
©© 
$num
©© 
]
©© 
=
©© 
x0i
©©  #
-
©©$ %
x2i
©©& )
;
©©) *
x0r
ªª 
=
ªª 
x1r
ªª 
-
ªª 
x3i
ªª  #
;
ªª# $
x0i
«« 
=
«« 
x1i
«« 
+
«« 
x3r
««  #
;
««# $
a
¬¬ 
[
¬¬ 
j2
¬¬ 
]
¬¬ 
=
¬¬ 
wk1i
¬¬  
*
¬¬! "
x0r
¬¬# &
-
¬¬' (
wk1r
¬¬) -
*
¬¬. /
x0i
¬¬0 3
;
¬¬3 4
a
­­ 
[
­­ 
j2
­­ 
+
­­ 
$num
­­ 
]
­­ 
=
­­ 
wk1i
­­  $
*
­­% &
x0i
­­' *
+
­­+ ,
wk1r
­­- 1
*
­­2 3
x0r
­­4 7
;
­­7 8
x0r
®® 
=
®® 
x1r
®® 
+
®® 
x3i
®®  #
;
®®# $
x0i
¯¯ 
=
¯¯ 
x1i
¯¯ 
-
¯¯ 
x3r
¯¯  #
;
¯¯# $
a
°° 
[
°° 
j3
°° 
]
°° 
=
°° 
wk3i
°°  
*
°°! "
x0r
°°# &
+
°°' (
wk3r
°°) -
*
°°. /
x0i
°°0 3
;
°°3 4
a
±± 
[
±± 
j3
±± 
+
±± 
$num
±± 
]
±± 
=
±± 
wk3i
±±  $
*
±±% &
x0i
±±' *
-
±±+ ,
wk3r
±±- 1
*
±±2 3
x0r
±±4 7
;
±±7 8
x0r
²² 
=
²² 
a
²² 
[
²² 
j0
²² 
-
²²  
$num
²²! "
]
²²" #
+
²²$ %
a
²²& '
[
²²' (
j2
²²( *
-
²²+ ,
$num
²²- .
]
²². /
;
²²/ 0
x0i
³³ 
=
³³ 
a
³³ 
[
³³ 
j0
³³ 
-
³³  
$num
³³! "
]
³³" #
+
³³$ %
a
³³& '
[
³³' (
j2
³³( *
-
³³+ ,
$num
³³- .
]
³³. /
;
³³/ 0
x1r
´´ 
=
´´ 
a
´´ 
[
´´ 
j0
´´ 
-
´´  
$num
´´! "
]
´´" #
-
´´$ %
a
´´& '
[
´´' (
j2
´´( *
-
´´+ ,
$num
´´- .
]
´´. /
;
´´/ 0
x1i
µµ 
=
µµ 
a
µµ 
[
µµ 
j0
µµ 
-
µµ  
$num
µµ! "
]
µµ" #
-
µµ$ %
a
µµ& '
[
µµ' (
j2
µµ( *
-
µµ+ ,
$num
µµ- .
]
µµ. /
;
µµ/ 0
x2r
¶¶ 
=
¶¶ 
a
¶¶ 
[
¶¶ 
j1
¶¶ 
-
¶¶  
$num
¶¶! "
]
¶¶" #
+
¶¶$ %
a
¶¶& '
[
¶¶' (
j3
¶¶( *
-
¶¶+ ,
$num
¶¶- .
]
¶¶. /
;
¶¶/ 0
x2i
·· 
=
·· 
a
·· 
[
·· 
j1
·· 
-
··  
$num
··! "
]
··" #
+
··$ %
a
··& '
[
··' (
j3
··( *
-
··+ ,
$num
··- .
]
··. /
;
··/ 0
x3r
¸¸ 
=
¸¸ 
a
¸¸ 
[
¸¸ 
j1
¸¸ 
-
¸¸  
$num
¸¸! "
]
¸¸" #
-
¸¸$ %
a
¸¸& '
[
¸¸' (
j3
¸¸( *
-
¸¸+ ,
$num
¸¸- .
]
¸¸. /
;
¸¸/ 0
x3i
¹¹ 
=
¹¹ 
a
¹¹ 
[
¹¹ 
j1
¹¹ 
-
¹¹  
$num
¹¹! "
]
¹¹" #
-
¹¹$ %
a
¹¹& '
[
¹¹' (
j3
¹¹( *
-
¹¹+ ,
$num
¹¹- .
]
¹¹. /
;
¹¹/ 0
a
ºº 
[
ºº 
j0
ºº 
-
ºº 
$num
ºº 
]
ºº 
=
ºº 
x0r
ºº  #
+
ºº$ %
x2r
ºº& )
;
ºº) *
a
»» 
[
»» 
j0
»» 
-
»» 
$num
»» 
]
»» 
=
»» 
x0i
»»  #
+
»»$ %
x2i
»»& )
;
»») *
a
¼¼ 
[
¼¼ 
j1
¼¼ 
-
¼¼ 
$num
¼¼ 
]
¼¼ 
=
¼¼ 
x0r
¼¼  #
-
¼¼$ %
x2r
¼¼& )
;
¼¼) *
a
½½ 
[
½½ 
j1
½½ 
-
½½ 
$num
½½ 
]
½½ 
=
½½ 
x0i
½½  #
-
½½$ %
x2i
½½& )
;
½½) *
x0r
¾¾ 
=
¾¾ 
x1r
¾¾ 
-
¾¾ 
x3i
¾¾  #
;
¾¾# $
x0i
¿¿ 
=
¿¿ 
x1i
¿¿ 
+
¿¿ 
x3r
¿¿  #
;
¿¿# $
a
ÀÀ 
[
ÀÀ 
j2
ÀÀ 
-
ÀÀ 
$num
ÀÀ 
]
ÀÀ 
=
ÀÀ 
wd1i
ÀÀ  $
*
ÀÀ% &
x0r
ÀÀ' *
-
ÀÀ+ ,
wd1r
ÀÀ- 1
*
ÀÀ2 3
x0i
ÀÀ4 7
;
ÀÀ7 8
a
ÁÁ 
[
ÁÁ 
j2
ÁÁ 
-
ÁÁ 
$num
ÁÁ 
]
ÁÁ 
=
ÁÁ 
wd1i
ÁÁ  $
*
ÁÁ% &
x0i
ÁÁ' *
+
ÁÁ+ ,
wd1r
ÁÁ- 1
*
ÁÁ2 3
x0r
ÁÁ4 7
;
ÁÁ7 8
x0r
ÂÂ 
=
ÂÂ 
x1r
ÂÂ 
+
ÂÂ 
x3i
ÂÂ  #
;
ÂÂ# $
x0i
ÃÃ 
=
ÃÃ 
x1i
ÃÃ 
-
ÃÃ 
x3r
ÃÃ  #
;
ÃÃ# $
a
ÄÄ 
[
ÄÄ 
j3
ÄÄ 
-
ÄÄ 
$num
ÄÄ 
]
ÄÄ 
=
ÄÄ 
wd3i
ÄÄ  $
*
ÄÄ% &
x0r
ÄÄ' *
+
ÄÄ+ ,
wd3r
ÄÄ- 1
*
ÄÄ2 3
x0i
ÄÄ4 7
;
ÄÄ7 8
a
ÅÅ 
[
ÅÅ 
j3
ÅÅ 
-
ÅÅ 
$num
ÅÅ 
]
ÅÅ 
=
ÅÅ 
wd3i
ÅÅ  $
*
ÅÅ% &
x0i
ÅÅ' *
-
ÅÅ+ ,
wd3r
ÅÅ- 1
*
ÅÅ2 3
x0r
ÅÅ4 7
;
ÅÅ7 8
wk1r
ÆÆ 
-=
ÆÆ 
ss1
ÆÆ 
*
ÆÆ  !
wd1i
ÆÆ" &
;
ÆÆ& '
wk1i
ÇÇ 
+=
ÇÇ 
ss1
ÇÇ 
*
ÇÇ  !
wd1r
ÇÇ" &
;
ÇÇ& '
wk3r
ÈÈ 
-=
ÈÈ 
ss3
ÈÈ 
*
ÈÈ  !
wd3i
ÈÈ" &
;
ÈÈ& '
wk3i
ÉÉ 
+=
ÉÉ 
ss3
ÉÉ 
*
ÉÉ  !
wd3r
ÉÉ" &
;
ÉÉ& '
}
ÊÊ 
if
ËË 
(
ËË 
i0
ËË 
==
ËË 
mh
ËË 
-
ËË 
$num
ËË  
)
ËË  !
{
ÌÌ 
break
ÍÍ 
;
ÍÍ 
}
ÎÎ 
wd1r
ÏÏ 
=
ÏÏ 
Math
ÏÏ 
.
ÏÏ 
Cos
ÏÏ 
(
ÏÏ  
ew
ÏÏ  "
*
ÏÏ# $
i0
ÏÏ% '
)
ÏÏ' (
;
ÏÏ( )
wd1i
ÐÐ 
=
ÐÐ 
Math
ÐÐ 
.
ÐÐ 
Sin
ÐÐ 
(
ÐÐ  
ew
ÐÐ  "
*
ÐÐ# $
i0
ÐÐ% '
)
ÐÐ' (
;
ÐÐ( )
wd3i
ÑÑ 
=
ÑÑ 
$num
ÑÑ 
*
ÑÑ 
wd1i
ÑÑ 
*
ÑÑ  !
wd1r
ÑÑ" &
;
ÑÑ& '
wd3r
ÒÒ 
=
ÒÒ 
wd1r
ÒÒ 
-
ÒÒ 
wd3i
ÒÒ "
*
ÒÒ# $
wd1i
ÒÒ% )
;
ÒÒ) *
wd3i
ÓÓ 
=
ÓÓ 
wd1i
ÓÓ 
-
ÓÓ 
wd3i
ÓÓ "
*
ÓÓ# $
wd1r
ÓÓ% )
;
ÓÓ) *
wk1r
ÔÔ 
=
ÔÔ 
w1r
ÔÔ 
*
ÔÔ 
wd1r
ÔÔ !
-
ÔÔ" #
w1i
ÔÔ$ '
*
ÔÔ( )
wd1i
ÔÔ* .
;
ÔÔ. /
wk1i
ÕÕ 
=
ÕÕ 
w1r
ÕÕ 
*
ÕÕ 
wd1i
ÕÕ !
+
ÕÕ" #
w1i
ÕÕ$ '
*
ÕÕ( )
wd1r
ÕÕ* .
;
ÕÕ. /
wk3i
ÖÖ 
=
ÖÖ 
$num
ÖÖ 
*
ÖÖ 
wk1i
ÖÖ 
*
ÖÖ  !
wk1r
ÖÖ" &
;
ÖÖ& '
wk3r
×× 
=
×× 
wk1r
×× 
-
×× 
wk3i
×× "
*
××# $
wk1i
××% )
;
××) *
wk3i
ØØ 
=
ØØ 
wk1i
ØØ 
-
ØØ 
wk3i
ØØ "
*
ØØ# $
wk1r
ØØ% )
;
ØØ) *
i
ÙÙ 
=
ÙÙ 
i0
ÙÙ 
;
ÙÙ 
}
ÚÚ 
wd1r
ÛÛ 
=
ÛÛ 
WR5000
ÛÛ 
;
ÛÛ 
j0
ÜÜ 
=
ÜÜ 
mh
ÜÜ 
;
ÜÜ 
j1
ÝÝ 
=
ÝÝ 
j0
ÝÝ 
+
ÝÝ 
m
ÝÝ 
;
ÝÝ 
j2
ÞÞ 
=
ÞÞ 
j1
ÞÞ 
+
ÞÞ 
m
ÞÞ 
;
ÞÞ 
j3
ßß 
=
ßß 
j2
ßß 
+
ßß 
m
ßß 
;
ßß 
x0r
àà 
=
àà 
a
àà 
[
àà 
j0
àà 
-
àà 
$num
àà 
]
àà 
+
àà 
a
àà 
[
àà  
j2
àà  "
-
àà# $
$num
àà% &
]
àà& '
;
àà' (
x0i
áá 
=
áá 
a
áá 
[
áá 
j0
áá 
-
áá 
$num
áá 
]
áá 
+
áá 
a
áá 
[
áá  
j2
áá  "
-
áá# $
$num
áá% &
]
áá& '
;
áá' (
x1r
ââ 
=
ââ 
a
ââ 
[
ââ 
j0
ââ 
-
ââ 
$num
ââ 
]
ââ 
-
ââ 
a
ââ 
[
ââ  
j2
ââ  "
-
ââ# $
$num
ââ% &
]
ââ& '
;
ââ' (
x1i
ãã 
=
ãã 
a
ãã 
[
ãã 
j0
ãã 
-
ãã 
$num
ãã 
]
ãã 
-
ãã 
a
ãã 
[
ãã  
j2
ãã  "
-
ãã# $
$num
ãã% &
]
ãã& '
;
ãã' (
x2r
ää 
=
ää 
a
ää 
[
ää 
j1
ää 
-
ää 
$num
ää 
]
ää 
+
ää 
a
ää 
[
ää  
j3
ää  "
-
ää# $
$num
ää% &
]
ää& '
;
ää' (
x2i
åå 
=
åå 
a
åå 
[
åå 
j1
åå 
-
åå 
$num
åå 
]
åå 
+
åå 
a
åå 
[
åå  
j3
åå  "
-
åå# $
$num
åå% &
]
åå& '
;
åå' (
x3r
ææ 
=
ææ 
a
ææ 
[
ææ 
j1
ææ 
-
ææ 
$num
ææ 
]
ææ 
-
ææ 
a
ææ 
[
ææ  
j3
ææ  "
-
ææ# $
$num
ææ% &
]
ææ& '
;
ææ' (
x3i
çç 
=
çç 
a
çç 
[
çç 
j1
çç 
-
çç 
$num
çç 
]
çç 
-
çç 
a
çç 
[
çç  
j3
çç  "
-
çç# $
$num
çç% &
]
çç& '
;
çç' (
a
èè 
[
èè 
j0
èè 
-
èè 
$num
èè 
]
èè 
=
èè 
x0r
èè 
+
èè 
x2r
èè !
;
èè! "
a
éé 
[
éé 
j0
éé 
-
éé 
$num
éé 
]
éé 
=
éé 
x0i
éé 
+
éé 
x2i
éé !
;
éé! "
a
êê 
[
êê 
j1
êê 
-
êê 
$num
êê 
]
êê 
=
êê 
x0r
êê 
-
êê 
x2r
êê !
;
êê! "
a
ëë 
[
ëë 
j1
ëë 
-
ëë 
$num
ëë 
]
ëë 
=
ëë 
x0i
ëë 
-
ëë 
x2i
ëë !
;
ëë! "
x0r
ìì 
=
ìì 
x1r
ìì 
-
ìì 
x3i
ìì 
;
ìì 
x0i
íí 
=
íí 
x1i
íí 
+
íí 
x3r
íí 
;
íí 
a
îî 
[
îî 
j2
îî 
-
îî 
$num
îî 
]
îî 
=
îî 
wk1r
îî 
*
îî 
x0r
îî "
-
îî# $
wk1i
îî% )
*
îî* +
x0i
îî, /
;
îî/ 0
a
ïï 
[
ïï 
j2
ïï 
-
ïï 
$num
ïï 
]
ïï 
=
ïï 
wk1r
ïï 
*
ïï 
x0i
ïï "
+
ïï# $
wk1i
ïï% )
*
ïï* +
x0r
ïï, /
;
ïï/ 0
x0r
ðð 
=
ðð 
x1r
ðð 
+
ðð 
x3i
ðð 
;
ðð 
x0i
ññ 
=
ññ 
x1i
ññ 
-
ññ 
x3r
ññ 
;
ññ 
a
òò 
[
òò 
j3
òò 
-
òò 
$num
òò 
]
òò 
=
òò 
wk3r
òò 
*
òò 
x0r
òò "
+
òò# $
wk3i
òò% )
*
òò* +
x0i
òò, /
;
òò/ 0
a
óó 
[
óó 
j3
óó 
-
óó 
$num
óó 
]
óó 
=
óó 
wk3r
óó 
*
óó 
x0i
óó "
-
óó# $
wk3i
óó% )
*
óó* +
x0r
óó, /
;
óó/ 0
x0r
ôô 
=
ôô 
a
ôô 
[
ôô 
j0
ôô 
]
ôô 
+
ôô 
a
ôô 
[
ôô 
j2
ôô 
]
ôô 
;
ôô  
x0i
õõ 
=
õõ 
a
õõ 
[
õõ 
j0
õõ 
+
õõ 
$num
õõ 
]
õõ 
+
õõ 
a
õõ 
[
õõ  
j2
õõ  "
+
õõ# $
$num
õõ% &
]
õõ& '
;
õõ' (
x1r
öö 
=
öö 
a
öö 
[
öö 
j0
öö 
]
öö 
-
öö 
a
öö 
[
öö 
j2
öö 
]
öö 
;
öö  
x1i
÷÷ 
=
÷÷ 
a
÷÷ 
[
÷÷ 
j0
÷÷ 
+
÷÷ 
$num
÷÷ 
]
÷÷ 
-
÷÷ 
a
÷÷ 
[
÷÷  
j2
÷÷  "
+
÷÷# $
$num
÷÷% &
]
÷÷& '
;
÷÷' (
x2r
øø 
=
øø 
a
øø 
[
øø 
j1
øø 
]
øø 
+
øø 
a
øø 
[
øø 
j3
øø 
]
øø 
;
øø  
x2i
ùù 
=
ùù 
a
ùù 
[
ùù 
j1
ùù 
+
ùù 
$num
ùù 
]
ùù 
+
ùù 
a
ùù 
[
ùù  
j3
ùù  "
+
ùù# $
$num
ùù% &
]
ùù& '
;
ùù' (
x3r
úú 
=
úú 
a
úú 
[
úú 
j1
úú 
]
úú 
-
úú 
a
úú 
[
úú 
j3
úú 
]
úú 
;
úú  
x3i
ûû 
=
ûû 
a
ûû 
[
ûû 
j1
ûû 
+
ûû 
$num
ûû 
]
ûû 
-
ûû 
a
ûû 
[
ûû  
j3
ûû  "
+
ûû# $
$num
ûû% &
]
ûû& '
;
ûû' (
a
üü 
[
üü 
j0
üü 
]
üü 
=
üü 
x0r
üü 
+
üü 
x2r
üü 
;
üü 
a
ýý 
[
ýý 
j0
ýý 
+
ýý 
$num
ýý 
]
ýý 
=
ýý 
x0i
ýý 
+
ýý 
x2i
ýý !
;
ýý! "
a
þþ 
[
þþ 
j1
þþ 
]
þþ 
=
þþ 
x0r
þþ 
-
þþ 
x2r
þþ 
;
þþ 
a
ÿÿ 
[
ÿÿ 
j1
ÿÿ 
+
ÿÿ 
$num
ÿÿ 
]
ÿÿ 
=
ÿÿ 
x0i
ÿÿ 
-
ÿÿ 
x2i
ÿÿ !
;
ÿÿ! "
x0r
 
=
 
x1r
 
-
 
x3i
 
;
 
x0i
 
=
 
x1i
 
+
 
x3r
 
;
 
a
 
[
 
j2
 
]
 
=
 
wd1r
 
*
 
(
 
x0r
 
-
  !
x0i
" %
)
% &
;
& '
a
 
[
 
j2
 
+
 
$num
 
]
 
=
 
wd1r
 
*
 
(
  
x0i
  #
+
$ %
x0r
& )
)
) *
;
* +
x0r
 
=
 
x1r
 
+
 
x3i
 
;
 
x0i
 
=
 
x1i
 
-
 
x3r
 
;
 
a
 
[
 
j3
 
]
 
=
 
-
 
wd1r
 
*
 
(
 
x0r
  
+
! "
x0i
# &
)
& '
;
' (
a
 
[
 
j3
 
+
 
$num
 
]
 
=
 
-
 
wd1r
 
*
 
(
  !
x0i
! $
-
% &
x0r
' *
)
* +
;
+ ,
x0r
 
=
 
a
 
[
 
j0
 
+
 
$num
 
]
 
+
 
a
 
[
  
j2
  "
+
# $
$num
% &
]
& '
;
' (
x0i
 
=
 
a
 
[
 
j0
 
+
 
$num
 
]
 
+
 
a
 
[
  
j2
  "
+
# $
$num
% &
]
& '
;
' (
x1r
 
=
 
a
 
[
 
j0
 
+
 
$num
 
]
 
-
 
a
 
[
  
j2
  "
+
# $
$num
% &
]
& '
;
' (
x1i
 
=
 
a
 
[
 
j0
 
+
 
$num
 
]
 
-
 
a
 
[
  
j2
  "
+
# $
$num
% &
]
& '
;
' (
x2r
 
=
 
a
 
[
 
j1
 
+
 
$num
 
]
 
+
 
a
 
[
  
j3
  "
+
# $
$num
% &
]
& '
;
' (
x2i
 
=
 
a
 
[
 
j1
 
+
 
$num
 
]
 
+
 
a
 
[
  
j3
  "
+
# $
$num
% &
]
& '
;
' (
x3r
 
=
 
a
 
[
 
j1
 
+
 
$num
 
]
 
-
 
a
 
[
  
j3
  "
+
# $
$num
% &
]
& '
;
' (
x3i
 
=
 
a
 
[
 
j1
 
+
 
$num
 
]
 
-
 
a
 
[
  
j3
  "
+
# $
$num
% &
]
& '
;
' (
a
 
[
 
j0
 
+
 
$num
 
]
 
=
 
x0r
 
+
 
x2r
 !
;
! "
a
 
[
 
j0
 
+
 
$num
 
]
 
=
 
x0i
 
+
 
x2i
 !
;
! "
a
 
[
 
j1
 
+
 
$num
 
]
 
=
 
x0r
 
-
 
x2r
 !
;
! "
a
 
[
 
j1
 
+
 
$num
 
]
 
=
 
x0i
 
-
 
x2i
 !
;
! "
x0r
 
=
 
x1r
 
-
 
x3i
 
;
 
x0i
 
=
 
x1i
 
+
 
x3r
 
;
 
a
 
[
 
j2
 
+
 
$num
 
]
 
=
 
wk1i
 
*
 
x0r
 "
-
# $
wk1r
% )
*
* +
x0i
, /
;
/ 0
a
 
[
 
j2
 
+
 
$num
 
]
 
=
 
wk1i
 
*
 
x0i
 "
+
# $
wk1r
% )
*
* +
x0r
, /
;
/ 0
x0r
 
=
 
x1r
 
+
 
x3i
 
;
 
x0i
 
=
 
x1i
 
-
 
x3r
 
;
 
a
 
[
 
j3
 
+
 
$num
 
]
 
=
 
wk3i
 
*
 
x0r
 "
+
# $
wk3r
% )
*
* +
x0i
, /
;
/ 0
a
 
[
 
j3
 
+
 
$num
 
]
 
=
 
wk3i
 
*
 
x0i
 "
-
# $
wk3r
% )
*
* +
x0r
, /
;
/ 0
}
 	
static
 
void
 
cftmdl2
 
(
 
int
 
n
  !
,
! "
double
# )
*
) *
a
+ ,
)
, -
{
   	
int
¡¡ 
i
¡¡ 
,
¡¡ 
i0
¡¡ 
,
¡¡ 
j
¡¡ 
,
¡¡ 
j0
¡¡ 
,
¡¡ 
j1
¡¡  
,
¡¡  !
j2
¡¡" $
,
¡¡$ %
j3
¡¡& (
,
¡¡( )
m
¡¡* +
,
¡¡+ ,
mh
¡¡- /
;
¡¡/ 0
double
¢¢ 
ew
¢¢ 
,
¢¢ 
w1r
¢¢ 
,
¢¢ 
w1i
¢¢ 
,
¢¢  
wn4r
¢¢! %
,
¢¢% &
wk1r
¢¢' +
,
¢¢+ ,
wk1i
¢¢- 1
,
¢¢1 2
wk3r
¢¢3 7
,
¢¢7 8
wk3i
¢¢9 =
,
¢¢= >
wl1r
££ 
,
££ 
wl1i
££ 
,
££ 
wl3r
££  
,
££  !
wl3i
££" &
,
££& '
wd1r
££( ,
,
££, -
wd1i
££. 2
,
££2 3
wd3r
££4 8
,
££8 9
wd3i
££: >
,
££> ?
we1r
¤¤ 
,
¤¤ 
we1i
¤¤ 
,
¤¤ 
we3r
¤¤  
,
¤¤  !
we3i
¤¤" &
,
¤¤& '
ss1
¤¤( +
,
¤¤+ ,
ss3
¤¤- 0
;
¤¤0 1
double
¥¥ 
x0r
¥¥ 
,
¥¥ 
x0i
¥¥ 
,
¥¥ 
x1r
¥¥  
,
¥¥  !
x1i
¥¥" %
,
¥¥% &
x2r
¥¥' *
,
¥¥* +
x2i
¥¥, /
,
¥¥/ 0
x3r
¥¥1 4
,
¥¥4 5
x3i
¥¥6 9
,
¥¥9 :
y0r
¥¥; >
,
¥¥> ?
y0i
¥¥@ C
,
¥¥C D
y2r
¥¥E H
,
¥¥H I
y2i
¥¥J M
;
¥¥M N
mh
§§ 
=
§§ 
n
§§ 
>>
§§ 
$num
§§ 
;
§§ 
m
¨¨ 
=
¨¨ 
$num
¨¨ 
*
¨¨ 
mh
¨¨ 
;
¨¨ 
wn4r
©© 
=
©© 
WR5000
©© 
;
©© 
j1
ªª 
=
ªª 
m
ªª 
;
ªª 
j2
«« 
=
«« 
j1
«« 
+
«« 
m
«« 
;
«« 
j3
¬¬ 
=
¬¬ 
j2
¬¬ 
+
¬¬ 
m
¬¬ 
;
¬¬ 
x0r
­­ 
=
­­ 
a
­­ 
[
­­ 
$num
­­ 
]
­­ 
-
­­ 
a
­­ 
[
­­ 
j2
­­ 
+
­­ 
$num
­­  !
]
­­! "
;
­­" #
x0i
®® 
=
®® 
a
®® 
[
®® 
$num
®® 
]
®® 
+
®® 
a
®® 
[
®® 
j2
®® 
]
®® 
;
®® 
x1r
¯¯ 
=
¯¯ 
a
¯¯ 
[
¯¯ 
$num
¯¯ 
]
¯¯ 
+
¯¯ 
a
¯¯ 
[
¯¯ 
j2
¯¯ 
+
¯¯ 
$num
¯¯  !
]
¯¯! "
;
¯¯" #
x1i
°° 
=
°° 
a
°° 
[
°° 
$num
°° 
]
°° 
-
°° 
a
°° 
[
°° 
j2
°° 
]
°° 
;
°° 
x2r
±± 
=
±± 
a
±± 
[
±± 
j1
±± 
]
±± 
-
±± 
a
±± 
[
±± 
j3
±± 
+
±±  
$num
±±! "
]
±±" #
;
±±# $
x2i
²² 
=
²² 
a
²² 
[
²² 
j1
²² 
+
²² 
$num
²² 
]
²² 
+
²² 
a
²² 
[
²²  
j3
²²  "
]
²²" #
;
²²# $
x3r
³³ 
=
³³ 
a
³³ 
[
³³ 
j1
³³ 
]
³³ 
+
³³ 
a
³³ 
[
³³ 
j3
³³ 
+
³³  
$num
³³! "
]
³³" #
;
³³# $
x3i
´´ 
=
´´ 
a
´´ 
[
´´ 
j1
´´ 
+
´´ 
$num
´´ 
]
´´ 
-
´´ 
a
´´ 
[
´´  
j3
´´  "
]
´´" #
;
´´# $
y0r
µµ 
=
µµ 
wn4r
µµ 
*
µµ 
(
µµ 
x2r
µµ 
-
µµ 
x2i
µµ  #
)
µµ# $
;
µµ$ %
y0i
¶¶ 
=
¶¶ 
wn4r
¶¶ 
*
¶¶ 
(
¶¶ 
x2i
¶¶ 
+
¶¶ 
x2r
¶¶  #
)
¶¶# $
;
¶¶$ %
a
·· 
[
·· 
$num
·· 
]
·· 
=
·· 
x0r
·· 
+
·· 
y0r
·· 
;
·· 
a
¸¸ 
[
¸¸ 
$num
¸¸ 
]
¸¸ 
=
¸¸ 
x0i
¸¸ 
+
¸¸ 
y0i
¸¸ 
;
¸¸ 
a
¹¹ 
[
¹¹ 
j1
¹¹ 
]
¹¹ 
=
¹¹ 
x0r
¹¹ 
-
¹¹ 
y0r
¹¹ 
;
¹¹ 
a
ºº 
[
ºº 
j1
ºº 
+
ºº 
$num
ºº 
]
ºº 
=
ºº 
x0i
ºº 
-
ºº 
y0i
ºº !
;
ºº! "
y0r
»» 
=
»» 
wn4r
»» 
*
»» 
(
»» 
x3r
»» 
-
»» 
x3i
»»  #
)
»»# $
;
»»$ %
y0i
¼¼ 
=
¼¼ 
wn4r
¼¼ 
*
¼¼ 
(
¼¼ 
x3i
¼¼ 
+
¼¼ 
x3r
¼¼  #
)
¼¼# $
;
¼¼$ %
a
½½ 
[
½½ 
j2
½½ 
]
½½ 
=
½½ 
x1r
½½ 
-
½½ 
y0i
½½ 
;
½½ 
a
¾¾ 
[
¾¾ 
j2
¾¾ 
+
¾¾ 
$num
¾¾ 
]
¾¾ 
=
¾¾ 
x1i
¾¾ 
+
¾¾ 
y0r
¾¾ !
;
¾¾! "
a
¿¿ 
[
¿¿ 
j3
¿¿ 
]
¿¿ 
=
¿¿ 
x1r
¿¿ 
+
¿¿ 
y0i
¿¿ 
;
¿¿ 
a
ÀÀ 
[
ÀÀ 
j3
ÀÀ 
+
ÀÀ 
$num
ÀÀ 
]
ÀÀ 
=
ÀÀ 
x1i
ÀÀ 
-
ÀÀ 
y0r
ÀÀ !
;
ÀÀ! "
wl1r
ÁÁ 
=
ÁÁ 
$num
ÁÁ 
;
ÁÁ 
wl1i
ÂÂ 
=
ÂÂ 
$num
ÂÂ 
;
ÂÂ 
wl3r
ÃÃ 
=
ÃÃ 
$num
ÃÃ 
;
ÃÃ 
wl3i
ÄÄ 
=
ÄÄ 
$num
ÄÄ 
;
ÄÄ 
we1r
ÅÅ 
=
ÅÅ 
wn4r
ÅÅ 
;
ÅÅ 
we1i
ÆÆ 
=
ÆÆ 
wn4r
ÆÆ 
;
ÆÆ 
we3r
ÇÇ 
=
ÇÇ 
-
ÇÇ 
wn4r
ÇÇ 
;
ÇÇ 
we3i
ÈÈ 
=
ÈÈ 
-
ÈÈ 
wn4r
ÈÈ 
;
ÈÈ 
ew
ÉÉ 
=
ÉÉ 
M_PI_2
ÉÉ 
/
ÉÉ 
(
ÉÉ 
$num
ÉÉ 
*
ÉÉ 
m
ÉÉ  
)
ÉÉ  !
;
ÉÉ! "
w1r
ÊÊ 
=
ÊÊ 
Math
ÊÊ 
.
ÊÊ 
Cos
ÊÊ 
(
ÊÊ 
$num
ÊÊ 
*
ÊÊ 
ew
ÊÊ !
)
ÊÊ! "
;
ÊÊ" #
w1i
ËË 
=
ËË 
Math
ËË 
.
ËË 
Sin
ËË 
(
ËË 
$num
ËË 
*
ËË 
ew
ËË !
)
ËË! "
;
ËË" #
wk1r
ÌÌ 
=
ÌÌ 
w1r
ÌÌ 
;
ÌÌ 
wk1i
ÍÍ 
=
ÍÍ 
w1i
ÍÍ 
;
ÍÍ 
wd1r
ÎÎ 
=
ÎÎ 
wn4r
ÎÎ 
*
ÎÎ 
(
ÎÎ 
w1r
ÎÎ 
-
ÎÎ  
w1i
ÎÎ! $
)
ÎÎ$ %
;
ÎÎ% &
wd1i
ÏÏ 
=
ÏÏ 
wn4r
ÏÏ 
*
ÏÏ 
(
ÏÏ 
w1i
ÏÏ 
+
ÏÏ  
w1r
ÏÏ! $
)
ÏÏ$ %
;
ÏÏ% &
ss1
ÐÐ 
=
ÐÐ 
$num
ÐÐ 
*
ÐÐ 
w1i
ÐÐ 
;
ÐÐ 
wk3i
ÑÑ 
=
ÑÑ 
$num
ÑÑ 
*
ÑÑ 
ss1
ÑÑ 
*
ÑÑ 
wk1r
ÑÑ !
;
ÑÑ! "
wk3r
ÒÒ 
=
ÒÒ 
wk1r
ÒÒ 
-
ÒÒ 
wk3i
ÒÒ 
*
ÒÒ  
wk1i
ÒÒ! %
;
ÒÒ% &
wk3i
ÓÓ 
=
ÓÓ 
wk1i
ÓÓ 
-
ÓÓ 
wk3i
ÓÓ 
*
ÓÓ  
wk1r
ÓÓ! %
;
ÓÓ% &
ss3
ÔÔ 
=
ÔÔ 
$num
ÔÔ 
*
ÔÔ 
wk3i
ÔÔ 
;
ÔÔ 
wd3r
ÕÕ 
=
ÕÕ 
-
ÕÕ 
wn4r
ÕÕ 
*
ÕÕ 
(
ÕÕ 
wk3r
ÕÕ  
-
ÕÕ! "
wk3i
ÕÕ# '
)
ÕÕ' (
;
ÕÕ( )
wd3i
ÖÖ 
=
ÖÖ 
-
ÖÖ 
wn4r
ÖÖ 
*
ÖÖ 
(
ÖÖ 
wk3i
ÖÖ  
+
ÖÖ! "
wk3r
ÖÖ# '
)
ÖÖ' (
;
ÖÖ( )
i
×× 
=
×× 
$num
×× 
;
×× 
for
ØØ 
(
ØØ 
;
ØØ 
;
ØØ 
)
ØØ 
{
ÙÙ 
i0
ÚÚ 
=
ÚÚ 
i
ÚÚ 
+
ÚÚ 
$num
ÚÚ 
*
ÚÚ 
CDFT_LOOP_DIV
ÚÚ *
;
ÚÚ* +
if
ÛÛ 
(
ÛÛ 
i0
ÛÛ 
>
ÛÛ 
mh
ÛÛ 
-
ÛÛ 
$num
ÛÛ 
)
ÛÛ  
{
ÜÜ 
i0
ÝÝ 
=
ÝÝ 
mh
ÝÝ 
-
ÝÝ 
$num
ÝÝ 
;
ÝÝ  
}
ÞÞ 
for
ßß 
(
ßß 
j
ßß 
=
ßß 
i
ßß 
+
ßß 
$num
ßß 
;
ßß 
j
ßß  !
<
ßß" #
i0
ßß$ &
;
ßß& '
j
ßß( )
+=
ßß* ,
$num
ßß- .
)
ßß. /
{
àà 
wl1r
áá 
-=
áá 
ss1
áá 
*
áá  !
wk1i
áá" &
;
áá& '
wl1i
ââ 
+=
ââ 
ss1
ââ 
*
ââ  !
wk1r
ââ" &
;
ââ& '
wl3r
ãã 
-=
ãã 
ss3
ãã 
*
ãã  !
wk3i
ãã" &
;
ãã& '
wl3i
ää 
+=
ää 
ss3
ää 
*
ää  !
wk3r
ää" &
;
ää& '
we1r
åå 
-=
åå 
ss1
åå 
*
åå  !
wd1i
åå" &
;
åå& '
we1i
ææ 
+=
ææ 
ss1
ææ 
*
ææ  !
wd1r
ææ" &
;
ææ& '
we3r
çç 
-=
çç 
ss3
çç 
*
çç  !
wd3i
çç" &
;
çç& '
we3i
èè 
+=
èè 
ss3
èè 
*
èè  !
wd3r
èè" &
;
èè& '
j1
éé 
=
éé 
j
éé 
+
éé 
m
éé 
;
éé 
j2
êê 
=
êê 
j1
êê 
+
êê 
m
êê 
;
êê  
j3
ëë 
=
ëë 
j2
ëë 
+
ëë 
m
ëë 
;
ëë  
x0r
ìì 
=
ìì 
a
ìì 
[
ìì 
j
ìì 
]
ìì 
-
ìì  
a
ìì! "
[
ìì" #
j2
ìì# %
+
ìì& '
$num
ìì( )
]
ìì) *
;
ìì* +
x0i
íí 
=
íí 
a
íí 
[
íí 
j
íí 
+
íí 
$num
íí  !
]
íí! "
+
íí# $
a
íí% &
[
íí& '
j2
íí' )
]
íí) *
;
íí* +
x1r
îî 
=
îî 
a
îî 
[
îî 
j
îî 
]
îî 
+
îî  
a
îî! "
[
îî" #
j2
îî# %
+
îî& '
$num
îî( )
]
îî) *
;
îî* +
x1i
ïï 
=
ïï 
a
ïï 
[
ïï 
j
ïï 
+
ïï 
$num
ïï  !
]
ïï! "
-
ïï# $
a
ïï% &
[
ïï& '
j2
ïï' )
]
ïï) *
;
ïï* +
x2r
ðð 
=
ðð 
a
ðð 
[
ðð 
j1
ðð 
]
ðð 
-
ðð  !
a
ðð" #
[
ðð# $
j3
ðð$ &
+
ðð' (
$num
ðð) *
]
ðð* +
;
ðð+ ,
x2i
ññ 
=
ññ 
a
ññ 
[
ññ 
j1
ññ 
+
ññ  
$num
ññ! "
]
ññ" #
+
ññ$ %
a
ññ& '
[
ññ' (
j3
ññ( *
]
ññ* +
;
ññ+ ,
x3r
òò 
=
òò 
a
òò 
[
òò 
j1
òò 
]
òò 
+
òò  !
a
òò" #
[
òò# $
j3
òò$ &
+
òò' (
$num
òò) *
]
òò* +
;
òò+ ,
x3i
óó 
=
óó 
a
óó 
[
óó 
j1
óó 
+
óó  
$num
óó! "
]
óó" #
-
óó$ %
a
óó& '
[
óó' (
j3
óó( *
]
óó* +
;
óó+ ,
y0r
ôô 
=
ôô 
wk1r
ôô 
*
ôô  
x0r
ôô! $
-
ôô% &
wk1i
ôô' +
*
ôô, -
x0i
ôô. 1
;
ôô1 2
y0i
õõ 
=
õõ 
wk1r
õõ 
*
õõ  
x0i
õõ! $
+
õõ% &
wk1i
õõ' +
*
õõ, -
x0r
õõ. 1
;
õõ1 2
y2r
öö 
=
öö 
wd1r
öö 
*
öö  
x2r
öö! $
-
öö% &
wd1i
öö' +
*
öö, -
x2i
öö. 1
;
öö1 2
y2i
÷÷ 
=
÷÷ 
wd1r
÷÷ 
*
÷÷  
x2i
÷÷! $
+
÷÷% &
wd1i
÷÷' +
*
÷÷, -
x2r
÷÷. 1
;
÷÷1 2
a
øø 
[
øø 
j
øø 
]
øø 
=
øø 
y0r
øø 
+
øø  
y2r
øø! $
;
øø$ %
a
ùù 
[
ùù 
j
ùù 
+
ùù 
$num
ùù 
]
ùù 
=
ùù 
y0i
ùù "
+
ùù# $
y2i
ùù% (
;
ùù( )
a
úú 
[
úú 
j1
úú 
]
úú 
=
úú 
y0r
úú 
-
úú  !
y2r
úú" %
;
úú% &
a
ûû 
[
ûû 
j1
ûû 
+
ûû 
$num
ûû 
]
ûû 
=
ûû 
y0i
ûû  #
-
ûû$ %
y2i
ûû& )
;
ûû) *
y0r
üü 
=
üü 
wk3r
üü 
*
üü  
x1r
üü! $
+
üü% &
wk3i
üü' +
*
üü, -
x1i
üü. 1
;
üü1 2
y0i
ýý 
=
ýý 
wk3r
ýý 
*
ýý  
x1i
ýý! $
-
ýý% &
wk3i
ýý' +
*
ýý, -
x1r
ýý. 1
;
ýý1 2
y2r
þþ 
=
þþ 
wd3r
þþ 
*
þþ  
x3r
þþ! $
+
þþ% &
wd3i
þþ' +
*
þþ, -
x3i
þþ. 1
;
þþ1 2
y2i
ÿÿ 
=
ÿÿ 
wd3r
ÿÿ 
*
ÿÿ  
x3i
ÿÿ! $
-
ÿÿ% &
wd3i
ÿÿ' +
*
ÿÿ, -
x3r
ÿÿ. 1
;
ÿÿ1 2
a
 
[
 
j2
 
]
 
=
 
y0r
 
+
  !
y2r
" %
;
% &
a
 
[
 
j2
 
+
 
$num
 
]
 
=
 
y0i
  #
+
$ %
y2i
& )
;
) *
a
 
[
 
j3
 
]
 
=
 
y0r
 
-
  !
y2r
" %
;
% &
a
 
[
 
j3
 
+
 
$num
 
]
 
=
 
y0i
  #
-
$ %
y2i
& )
;
) *
x0r
 
=
 
a
 
[
 
j
 
+
 
$num
  !
]
! "
-
# $
a
% &
[
& '
j2
' )
+
* +
$num
, -
]
- .
;
. /
x0i
 
=
 
a
 
[
 
j
 
+
 
$num
  !
]
! "
+
# $
a
% &
[
& '
j2
' )
+
* +
$num
, -
]
- .
;
. /
x1r
 
=
 
a
 
[
 
j
 
+
 
$num
  !
]
! "
+
# $
a
% &
[
& '
j2
' )
+
* +
$num
, -
]
- .
;
. /
x1i
 
=
 
a
 
[
 
j
 
+
 
$num
  !
]
! "
-
# $
a
% &
[
& '
j2
' )
+
* +
$num
, -
]
- .
;
. /
x2r
 
=
 
a
 
[
 
j1
 
+
  
$num
! "
]
" #
-
$ %
a
& '
[
' (
j3
( *
+
+ ,
$num
- .
]
. /
;
/ 0
x2i
 
=
 
a
 
[
 
j1
 
+
  
$num
! "
]
" #
+
$ %
a
& '
[
' (
j3
( *
+
+ ,
$num
- .
]
. /
;
/ 0
x3r
 
=
 
a
 
[
 
j1
 
+
  
$num
! "
]
" #
+
$ %
a
& '
[
' (
j3
( *
+
+ ,
$num
- .
]
. /
;
/ 0
x3i
 
=
 
a
 
[
 
j1
 
+
  
$num
! "
]
" #
-
$ %
a
& '
[
' (
j3
( *
+
+ ,
$num
- .
]
. /
;
/ 0
y0r
 
=
 
wl1r
 
*
  
x0r
! $
-
% &
wl1i
' +
*
, -
x0i
. 1
;
1 2
y0i
 
=
 
wl1r
 
*
  
x0i
! $
+
% &
wl1i
' +
*
, -
x0r
. 1
;
1 2
y2r
 
=
 
we1r
 
*
  
x2r
! $
-
% &
we1i
' +
*
, -
x2i
. 1
;
1 2
y2i
 
=
 
we1r
 
*
  
x2i
! $
+
% &
we1i
' +
*
, -
x2r
. 1
;
1 2
a
 
[
 
j
 
+
 
$num
 
]
 
=
 
y0r
 "
+
# $
y2r
% (
;
( )
a
 
[
 
j
 
+
 
$num
 
]
 
=
 
y0i
 "
+
# $
y2i
% (
;
( )
a
 
[
 
j1
 
+
 
$num
 
]
 
=
 
y0r
  #
-
$ %
y2r
& )
;
) *
a
 
[
 
j1
 
+
 
$num
 
]
 
=
 
y0i
  #
-
$ %
y2i
& )
;
) *
y0r
 
=
 
wl3r
 
*
  
x1r
! $
+
% &
wl3i
' +
*
, -
x1i
. 1
;
1 2
y0i
 
=
 
wl3r
 
*
  
x1i
! $
-
% &
wl3i
' +
*
, -
x1r
. 1
;
1 2
y2r
 
=
 
we3r
 
*
  
x3r
! $
+
% &
we3i
' +
*
, -
x3i
. 1
;
1 2
y2i
 
=
 
we3r
 
*
  
x3i
! $
-
% &
we3i
' +
*
, -
x3r
. 1
;
1 2
a
 
[
 
j2
 
+
 
$num
 
]
 
=
 
y0r
  #
+
$ %
y2r
& )
;
) *
a
 
[
 
j2
 
+
 
$num
 
]
 
=
 
y0i
  #
+
$ %
y2i
& )
;
) *
a
 
[
 
j3
 
+
 
$num
 
]
 
=
 
y0r
  #
-
$ %
y2r
& )
;
) *
a
 
[
 
j3
 
+
 
$num
 
]
 
=
 
y0i
  #
-
$ %
y2i
& )
;
) *
j0
 
=
 
m
 
-
 
j
 
;
 
j1
 
=
 
j0
 
+
 
m
 
;
  
j2
 
=
 
j1
 
+
 
m
 
;
  
j3
 
=
 
j2
 
+
 
m
 
;
  
x0r
   
=
   
a
   
[
   
j0
   
]
   
-
    !
a
  " #
[
  # $
j2
  $ &
+
  ' (
$num
  ) *
]
  * +
;
  + ,
x0i
¡¡ 
=
¡¡ 
a
¡¡ 
[
¡¡ 
j0
¡¡ 
+
¡¡  
$num
¡¡! "
]
¡¡" #
+
¡¡$ %
a
¡¡& '
[
¡¡' (
j2
¡¡( *
]
¡¡* +
;
¡¡+ ,
x1r
¢¢ 
=
¢¢ 
a
¢¢ 
[
¢¢ 
j0
¢¢ 
]
¢¢ 
+
¢¢  !
a
¢¢" #
[
¢¢# $
j2
¢¢$ &
+
¢¢' (
$num
¢¢) *
]
¢¢* +
;
¢¢+ ,
x1i
££ 
=
££ 
a
££ 
[
££ 
j0
££ 
+
££  
$num
££! "
]
££" #
-
££$ %
a
££& '
[
££' (
j2
££( *
]
££* +
;
££+ ,
x2r
¤¤ 
=
¤¤ 
a
¤¤ 
[
¤¤ 
j1
¤¤ 
]
¤¤ 
-
¤¤  !
a
¤¤" #
[
¤¤# $
j3
¤¤$ &
+
¤¤' (
$num
¤¤) *
]
¤¤* +
;
¤¤+ ,
x2i
¥¥ 
=
¥¥ 
a
¥¥ 
[
¥¥ 
j1
¥¥ 
+
¥¥  
$num
¥¥! "
]
¥¥" #
+
¥¥$ %
a
¥¥& '
[
¥¥' (
j3
¥¥( *
]
¥¥* +
;
¥¥+ ,
x3r
¦¦ 
=
¦¦ 
a
¦¦ 
[
¦¦ 
j1
¦¦ 
]
¦¦ 
+
¦¦  !
a
¦¦" #
[
¦¦# $
j3
¦¦$ &
+
¦¦' (
$num
¦¦) *
]
¦¦* +
;
¦¦+ ,
x3i
§§ 
=
§§ 
a
§§ 
[
§§ 
j1
§§ 
+
§§  
$num
§§! "
]
§§" #
-
§§$ %
a
§§& '
[
§§' (
j3
§§( *
]
§§* +
;
§§+ ,
y0r
¨¨ 
=
¨¨ 
wd1i
¨¨ 
*
¨¨  
x0r
¨¨! $
-
¨¨% &
wd1r
¨¨' +
*
¨¨, -
x0i
¨¨. 1
;
¨¨1 2
y0i
©© 
=
©© 
wd1i
©© 
*
©©  
x0i
©©! $
+
©©% &
wd1r
©©' +
*
©©, -
x0r
©©. 1
;
©©1 2
y2r
ªª 
=
ªª 
wk1i
ªª 
*
ªª  
x2r
ªª! $
-
ªª% &
wk1r
ªª' +
*
ªª, -
x2i
ªª. 1
;
ªª1 2
y2i
«« 
=
«« 
wk1i
«« 
*
««  
x2i
««! $
+
««% &
wk1r
««' +
*
««, -
x2r
««. 1
;
««1 2
a
¬¬ 
[
¬¬ 
j0
¬¬ 
]
¬¬ 
=
¬¬ 
y0r
¬¬ 
+
¬¬  !
y2r
¬¬" %
;
¬¬% &
a
­­ 
[
­­ 
j0
­­ 
+
­­ 
$num
­­ 
]
­­ 
=
­­ 
y0i
­­  #
+
­­$ %
y2i
­­& )
;
­­) *
a
®® 
[
®® 
j1
®® 
]
®® 
=
®® 
y0r
®® 
-
®®  !
y2r
®®" %
;
®®% &
a
¯¯ 
[
¯¯ 
j1
¯¯ 
+
¯¯ 
$num
¯¯ 
]
¯¯ 
=
¯¯ 
y0i
¯¯  #
-
¯¯$ %
y2i
¯¯& )
;
¯¯) *
y0r
°° 
=
°° 
wd3i
°° 
*
°°  
x1r
°°! $
+
°°% &
wd3r
°°' +
*
°°, -
x1i
°°. 1
;
°°1 2
y0i
±± 
=
±± 
wd3i
±± 
*
±±  
x1i
±±! $
-
±±% &
wd3r
±±' +
*
±±, -
x1r
±±. 1
;
±±1 2
y2r
²² 
=
²² 
wk3i
²² 
*
²²  
x3r
²²! $
+
²²% &
wk3r
²²' +
*
²², -
x3i
²². 1
;
²²1 2
y2i
³³ 
=
³³ 
wk3i
³³ 
*
³³  
x3i
³³! $
-
³³% &
wk3r
³³' +
*
³³, -
x3r
³³. 1
;
³³1 2
a
´´ 
[
´´ 
j2
´´ 
]
´´ 
=
´´ 
y0r
´´ 
+
´´  !
y2r
´´" %
;
´´% &
a
µµ 
[
µµ 
j2
µµ 
+
µµ 
$num
µµ 
]
µµ 
=
µµ 
y0i
µµ  #
+
µµ$ %
y2i
µµ& )
;
µµ) *
a
¶¶ 
[
¶¶ 
j3
¶¶ 
]
¶¶ 
=
¶¶ 
y0r
¶¶ 
-
¶¶  !
y2r
¶¶" %
;
¶¶% &
a
·· 
[
·· 
j3
·· 
+
·· 
$num
·· 
]
·· 
=
·· 
y0i
··  #
-
··$ %
y2i
··& )
;
··) *
x0r
¸¸ 
=
¸¸ 
a
¸¸ 
[
¸¸ 
j0
¸¸ 
-
¸¸  
$num
¸¸! "
]
¸¸" #
-
¸¸$ %
a
¸¸& '
[
¸¸' (
j2
¸¸( *
-
¸¸+ ,
$num
¸¸- .
]
¸¸. /
;
¸¸/ 0
x0i
¹¹ 
=
¹¹ 
a
¹¹ 
[
¹¹ 
j0
¹¹ 
-
¹¹  
$num
¹¹! "
]
¹¹" #
+
¹¹$ %
a
¹¹& '
[
¹¹' (
j2
¹¹( *
-
¹¹+ ,
$num
¹¹- .
]
¹¹. /
;
¹¹/ 0
x1r
ºº 
=
ºº 
a
ºº 
[
ºº 
j0
ºº 
-
ºº  
$num
ºº! "
]
ºº" #
+
ºº$ %
a
ºº& '
[
ºº' (
j2
ºº( *
-
ºº+ ,
$num
ºº- .
]
ºº. /
;
ºº/ 0
x1i
»» 
=
»» 
a
»» 
[
»» 
j0
»» 
-
»»  
$num
»»! "
]
»»" #
-
»»$ %
a
»»& '
[
»»' (
j2
»»( *
-
»»+ ,
$num
»»- .
]
»». /
;
»»/ 0
x2r
¼¼ 
=
¼¼ 
a
¼¼ 
[
¼¼ 
j1
¼¼ 
-
¼¼  
$num
¼¼! "
]
¼¼" #
-
¼¼$ %
a
¼¼& '
[
¼¼' (
j3
¼¼( *
-
¼¼+ ,
$num
¼¼- .
]
¼¼. /
;
¼¼/ 0
x2i
½½ 
=
½½ 
a
½½ 
[
½½ 
j1
½½ 
-
½½  
$num
½½! "
]
½½" #
+
½½$ %
a
½½& '
[
½½' (
j3
½½( *
-
½½+ ,
$num
½½- .
]
½½. /
;
½½/ 0
x3r
¾¾ 
=
¾¾ 
a
¾¾ 
[
¾¾ 
j1
¾¾ 
-
¾¾  
$num
¾¾! "
]
¾¾" #
+
¾¾$ %
a
¾¾& '
[
¾¾' (
j3
¾¾( *
-
¾¾+ ,
$num
¾¾- .
]
¾¾. /
;
¾¾/ 0
x3i
¿¿ 
=
¿¿ 
a
¿¿ 
[
¿¿ 
j1
¿¿ 
-
¿¿  
$num
¿¿! "
]
¿¿" #
-
¿¿$ %
a
¿¿& '
[
¿¿' (
j3
¿¿( *
-
¿¿+ ,
$num
¿¿- .
]
¿¿. /
;
¿¿/ 0
y0r
ÀÀ 
=
ÀÀ 
we1i
ÀÀ 
*
ÀÀ  
x0r
ÀÀ! $
-
ÀÀ% &
we1r
ÀÀ' +
*
ÀÀ, -
x0i
ÀÀ. 1
;
ÀÀ1 2
y0i
ÁÁ 
=
ÁÁ 
we1i
ÁÁ 
*
ÁÁ  
x0i
ÁÁ! $
+
ÁÁ% &
we1r
ÁÁ' +
*
ÁÁ, -
x0r
ÁÁ. 1
;
ÁÁ1 2
y2r
ÂÂ 
=
ÂÂ 
wl1i
ÂÂ 
*
ÂÂ  
x2r
ÂÂ! $
-
ÂÂ% &
wl1r
ÂÂ' +
*
ÂÂ, -
x2i
ÂÂ. 1
;
ÂÂ1 2
y2i
ÃÃ 
=
ÃÃ 
wl1i
ÃÃ 
*
ÃÃ  
x2i
ÃÃ! $
+
ÃÃ% &
wl1r
ÃÃ' +
*
ÃÃ, -
x2r
ÃÃ. 1
;
ÃÃ1 2
a
ÄÄ 
[
ÄÄ 
j0
ÄÄ 
-
ÄÄ 
$num
ÄÄ 
]
ÄÄ 
=
ÄÄ 
y0r
ÄÄ  #
+
ÄÄ$ %
y2r
ÄÄ& )
;
ÄÄ) *
a
ÅÅ 
[
ÅÅ 
j0
ÅÅ 
-
ÅÅ 
$num
ÅÅ 
]
ÅÅ 
=
ÅÅ 
y0i
ÅÅ  #
+
ÅÅ$ %
y2i
ÅÅ& )
;
ÅÅ) *
a
ÆÆ 
[
ÆÆ 
j1
ÆÆ 
-
ÆÆ 
$num
ÆÆ 
]
ÆÆ 
=
ÆÆ 
y0r
ÆÆ  #
-
ÆÆ$ %
y2r
ÆÆ& )
;
ÆÆ) *
a
ÇÇ 
[
ÇÇ 
j1
ÇÇ 
-
ÇÇ 
$num
ÇÇ 
]
ÇÇ 
=
ÇÇ 
y0i
ÇÇ  #
-
ÇÇ$ %
y2i
ÇÇ& )
;
ÇÇ) *
y0r
ÈÈ 
=
ÈÈ 
we3i
ÈÈ 
*
ÈÈ  
x1r
ÈÈ! $
+
ÈÈ% &
we3r
ÈÈ' +
*
ÈÈ, -
x1i
ÈÈ. 1
;
ÈÈ1 2
y0i
ÉÉ 
=
ÉÉ 
we3i
ÉÉ 
*
ÉÉ  
x1i
ÉÉ! $
-
ÉÉ% &
we3r
ÉÉ' +
*
ÉÉ, -
x1r
ÉÉ. 1
;
ÉÉ1 2
y2r
ÊÊ 
=
ÊÊ 
wl3i
ÊÊ 
*
ÊÊ  
x3r
ÊÊ! $
+
ÊÊ% &
wl3r
ÊÊ' +
*
ÊÊ, -
x3i
ÊÊ. 1
;
ÊÊ1 2
y2i
ËË 
=
ËË 
wl3i
ËË 
*
ËË  
x3i
ËË! $
-
ËË% &
wl3r
ËË' +
*
ËË, -
x3r
ËË. 1
;
ËË1 2
a
ÌÌ 
[
ÌÌ 
j2
ÌÌ 
-
ÌÌ 
$num
ÌÌ 
]
ÌÌ 
=
ÌÌ 
y0r
ÌÌ  #
+
ÌÌ$ %
y2r
ÌÌ& )
;
ÌÌ) *
a
ÍÍ 
[
ÍÍ 
j2
ÍÍ 
-
ÍÍ 
$num
ÍÍ 
]
ÍÍ 
=
ÍÍ 
y0i
ÍÍ  #
+
ÍÍ$ %
y2i
ÍÍ& )
;
ÍÍ) *
a
ÎÎ 
[
ÎÎ 
j3
ÎÎ 
-
ÎÎ 
$num
ÎÎ 
]
ÎÎ 
=
ÎÎ 
y0r
ÎÎ  #
-
ÎÎ$ %
y2r
ÎÎ& )
;
ÎÎ) *
a
ÏÏ 
[
ÏÏ 
j3
ÏÏ 
-
ÏÏ 
$num
ÏÏ 
]
ÏÏ 
=
ÏÏ 
y0i
ÏÏ  #
-
ÏÏ$ %
y2i
ÏÏ& )
;
ÏÏ) *
wk1r
ÐÐ 
-=
ÐÐ 
ss1
ÐÐ 
*
ÐÐ  !
wl1i
ÐÐ" &
;
ÐÐ& '
wk1i
ÑÑ 
+=
ÑÑ 
ss1
ÑÑ 
*
ÑÑ  !
wl1r
ÑÑ" &
;
ÑÑ& '
wk3r
ÒÒ 
-=
ÒÒ 
ss3
ÒÒ 
*
ÒÒ  !
wl3i
ÒÒ" &
;
ÒÒ& '
wk3i
ÓÓ 
+=
ÓÓ 
ss3
ÓÓ 
*
ÓÓ  !
wl3r
ÓÓ" &
;
ÓÓ& '
wd1r
ÔÔ 
-=
ÔÔ 
ss1
ÔÔ 
*
ÔÔ  !
we1i
ÔÔ" &
;
ÔÔ& '
wd1i
ÕÕ 
+=
ÕÕ 
ss1
ÕÕ 
*
ÕÕ  !
we1r
ÕÕ" &
;
ÕÕ& '
wd3r
ÖÖ 
-=
ÖÖ 
ss3
ÖÖ 
*
ÖÖ  !
we3i
ÖÖ" &
;
ÖÖ& '
wd3i
×× 
+=
×× 
ss3
×× 
*
××  !
we3r
××" &
;
××& '
}
ØØ 
if
ÙÙ 
(
ÙÙ 
i0
ÙÙ 
==
ÙÙ 
mh
ÙÙ 
-
ÙÙ 
$num
ÙÙ  
)
ÙÙ  !
{
ÚÚ 
break
ÛÛ 
;
ÛÛ 
}
ÜÜ 
wl1r
ÝÝ 
=
ÝÝ 
Math
ÝÝ 
.
ÝÝ 
Cos
ÝÝ 
(
ÝÝ  
ew
ÝÝ  "
*
ÝÝ# $
i0
ÝÝ% '
)
ÝÝ' (
;
ÝÝ( )
wl1i
ÞÞ 
=
ÞÞ 
Math
ÞÞ 
.
ÞÞ 
Sin
ÞÞ 
(
ÞÞ  
ew
ÞÞ  "
*
ÞÞ# $
i0
ÞÞ% '
)
ÞÞ' (
;
ÞÞ( )
wl3i
ßß 
=
ßß 
$num
ßß 
*
ßß 
wl1i
ßß 
*
ßß  !
wl1r
ßß" &
;
ßß& '
wl3r
àà 
=
àà 
wl1r
àà 
-
àà 
wl3i
àà "
*
àà# $
wl1i
àà% )
;
àà) *
wl3i
áá 
=
áá 
wl1i
áá 
-
áá 
wl3i
áá "
*
áá# $
wl1r
áá% )
;
áá) *
we1r
ââ 
=
ââ 
wn4r
ââ 
*
ââ 
(
ââ 
wl1r
ââ #
-
ââ$ %
wl1i
ââ& *
)
ââ* +
;
ââ+ ,
we1i
ãã 
=
ãã 
wn4r
ãã 
*
ãã 
(
ãã 
wl1i
ãã #
+
ãã$ %
wl1r
ãã& *
)
ãã* +
;
ãã+ ,
we3r
ää 
=
ää 
-
ää 
wn4r
ää 
*
ää 
(
ää  
wl3r
ää  $
-
ää% &
wl3i
ää' +
)
ää+ ,
;
ää, -
we3i
åå 
=
åå 
-
åå 
wn4r
åå 
*
åå 
(
åå  
wl3i
åå  $
+
åå% &
wl3r
åå' +
)
åå+ ,
;
åå, -
wk1r
ææ 
=
ææ 
w1r
ææ 
*
ææ 
wl1r
ææ !
-
ææ" #
w1i
ææ$ '
*
ææ( )
wl1i
ææ* .
;
ææ. /
wk1i
çç 
=
çç 
w1r
çç 
*
çç 
wl1i
çç !
+
çç" #
w1i
çç$ '
*
çç( )
wl1r
çç* .
;
çç. /
wk3i
èè 
=
èè 
$num
èè 
*
èè 
wk1i
èè 
*
èè  !
wk1r
èè" &
;
èè& '
wk3r
éé 
=
éé 
wk1r
éé 
-
éé 
wk3i
éé "
*
éé# $
wk1i
éé% )
;
éé) *
wk3i
êê 
=
êê 
wk1i
êê 
-
êê 
wk3i
êê "
*
êê# $
wk1r
êê% )
;
êê) *
wd1r
ëë 
=
ëë 
wn4r
ëë 
*
ëë 
(
ëë 
wk1r
ëë #
-
ëë$ %
wk1i
ëë& *
)
ëë* +
;
ëë+ ,
wd1i
ìì 
=
ìì 
wn4r
ìì 
*
ìì 
(
ìì 
wk1i
ìì #
+
ìì$ %
wk1r
ìì& *
)
ìì* +
;
ìì+ ,
wd3r
íí 
=
íí 
-
íí 
wn4r
íí 
*
íí 
(
íí  
wk3r
íí  $
-
íí% &
wk3i
íí' +
)
íí+ ,
;
íí, -
wd3i
îî 
=
îî 
-
îî 
wn4r
îî 
*
îî 
(
îî  
wk3i
îî  $
+
îî% &
wk3r
îî' +
)
îî+ ,
;
îî, -
i
ïï 
=
ïï 
i0
ïï 
;
ïï 
}
ðð 
wl1r
ññ 
=
ññ 
WR2500
ññ 
;
ññ 
wl1i
òò 
=
òò 
WI2500
òò 
;
òò 
j0
óó 
=
óó 
mh
óó 
;
óó 
j1
ôô 
=
ôô 
j0
ôô 
+
ôô 
m
ôô 
;
ôô 
j2
õõ 
=
õõ 
j1
õõ 
+
õõ 
m
õõ 
;
õõ 
j3
öö 
=
öö 
j2
öö 
+
öö 
m
öö 
;
öö 
x0r
÷÷ 
=
÷÷ 
a
÷÷ 
[
÷÷ 
j0
÷÷ 
-
÷÷ 
$num
÷÷ 
]
÷÷ 
-
÷÷ 
a
÷÷ 
[
÷÷  
j2
÷÷  "
-
÷÷# $
$num
÷÷% &
]
÷÷& '
;
÷÷' (
x0i
øø 
=
øø 
a
øø 
[
øø 
j0
øø 
-
øø 
$num
øø 
]
øø 
+
øø 
a
øø 
[
øø  
j2
øø  "
-
øø# $
$num
øø% &
]
øø& '
;
øø' (
x1r
ùù 
=
ùù 
a
ùù 
[
ùù 
j0
ùù 
-
ùù 
$num
ùù 
]
ùù 
+
ùù 
a
ùù 
[
ùù  
j2
ùù  "
-
ùù# $
$num
ùù% &
]
ùù& '
;
ùù' (
x1i
úú 
=
úú 
a
úú 
[
úú 
j0
úú 
-
úú 
$num
úú 
]
úú 
-
úú 
a
úú 
[
úú  
j2
úú  "
-
úú# $
$num
úú% &
]
úú& '
;
úú' (
x2r
ûû 
=
ûû 
a
ûû 
[
ûû 
j1
ûû 
-
ûû 
$num
ûû 
]
ûû 
-
ûû 
a
ûû 
[
ûû  
j3
ûû  "
-
ûû# $
$num
ûû% &
]
ûû& '
;
ûû' (
x2i
üü 
=
üü 
a
üü 
[
üü 
j1
üü 
-
üü 
$num
üü 
]
üü 
+
üü 
a
üü 
[
üü  
j3
üü  "
-
üü# $
$num
üü% &
]
üü& '
;
üü' (
x3r
ýý 
=
ýý 
a
ýý 
[
ýý 
j1
ýý 
-
ýý 
$num
ýý 
]
ýý 
+
ýý 
a
ýý 
[
ýý  
j3
ýý  "
-
ýý# $
$num
ýý% &
]
ýý& '
;
ýý' (
x3i
þþ 
=
þþ 
a
þþ 
[
þþ 
j1
þþ 
-
þþ 
$num
þþ 
]
þþ 
-
þþ 
a
þþ 
[
þþ  
j3
þþ  "
-
þþ# $
$num
þþ% &
]
þþ& '
;
þþ' (
y0r
ÿÿ 
=
ÿÿ 
wk1r
ÿÿ 
*
ÿÿ 
x0r
ÿÿ 
-
ÿÿ 
wk1i
ÿÿ #
*
ÿÿ$ %
x0i
ÿÿ& )
;
ÿÿ) *
y0i
 
=
 
wk1r
 
*
 
x0i
 
+
 
wk1i
 #
*
$ %
x0r
& )
;
) *
y2r
 
=
 
wd1r
 
*
 
x2r
 
-
 
wd1i
 #
*
$ %
x2i
& )
;
) *
y2i
 
=
 
wd1r
 
*
 
x2i
 
+
 
wd1i
 #
*
$ %
x2r
& )
;
) *
a
 
[
 
j0
 
-
 
$num
 
]
 
=
 
y0r
 
+
 
y2r
 !
;
! "
a
 
[
 
j0
 
-
 
$num
 
]
 
=
 
y0i
 
+
 
y2i
 !
;
! "
a
 
[
 
j1
 
-
 
$num
 
]
 
=
 
y0r
 
-
 
y2r
 !
;
! "
a
 
[
 
j1
 
-
 
$num
 
]
 
=
 
y0i
 
-
 
y2i
 !
;
! "
y0r
 
=
 
wk3r
 
*
 
x1r
 
+
 
wk3i
 #
*
$ %
x1i
& )
;
) *
y0i
 
=
 
wk3r
 
*
 
x1i
 
-
 
wk3i
 #
*
$ %
x1r
& )
;
) *
y2r
 
=
 
wd3r
 
*
 
x3r
 
+
 
wd3i
 #
*
$ %
x3i
& )
;
) *
y2i
 
=
 
wd3r
 
*
 
x3i
 
-
 
wd3i
 #
*
$ %
x3r
& )
;
) *
a
 
[
 
j2
 
-
 
$num
 
]
 
=
 
y0r
 
+
 
y2r
 !
;
! "
a
 
[
 
j2
 
-
 
$num
 
]
 
=
 
y0i
 
+
 
y2i
 !
;
! "
a
 
[
 
j3
 
-
 
$num
 
]
 
=
 
y0r
 
-
 
y2r
 !
;
! "
a
 
[
 
j3
 
-
 
$num
 
]
 
=
 
y0i
 
-
 
y2i
 !
;
! "
x0r
 
=
 
a
 
[
 
j0
 
]
 
-
 
a
 
[
 
j2
 
+
  
$num
! "
]
" #
;
# $
x0i
 
=
 
a
 
[
 
j0
 
+
 
$num
 
]
 
+
 
a
 
[
  
j2
  "
]
" #
;
# $
x1r
 
=
 
a
 
[
 
j0
 
]
 
+
 
a
 
[
 
j2
 
+
  
$num
! "
]
" #
;
# $
x1i
 
=
 
a
 
[
 
j0
 
+
 
$num
 
]
 
-
 
a
 
[
  
j2
  "
]
" #
;
# $
x2r
 
=
 
a
 
[
 
j1
 
]
 
-
 
a
 
[
 
j3
 
+
  
$num
! "
]
" #
;
# $
x2i
 
=
 
a
 
[
 
j1
 
+
 
$num
 
]
 
+
 
a
 
[
  
j3
  "
]
" #
;
# $
x3r
 
=
 
a
 
[
 
j1
 
]
 
+
 
a
 
[
 
j3
 
+
  
$num
! "
]
" #
;
# $
x3i
 
=
 
a
 
[
 
j1
 
+
 
$num
 
]
 
-
 
a
 
[
  
j3
  "
]
" #
;
# $
y0r
 
=
 
wl1r
 
*
 
x0r
 
-
 
wl1i
 #
*
$ %
x0i
& )
;
) *
y0i
 
=
 
wl1r
 
*
 
x0i
 
+
 
wl1i
 #
*
$ %
x0r
& )
;
) *
y2r
 
=
 
wl1i
 
*
 
x2r
 
-
 
wl1r
 #
*
$ %
x2i
& )
;
) *
y2i
 
=
 
wl1i
 
*
 
x2i
 
+
 
wl1r
 #
*
$ %
x2r
& )
;
) *
a
 
[
 
j0
 
]
 
=
 
y0r
 
+
 
y2r
 
;
 
a
 
[
 
j0
 
+
 
$num
 
]
 
=
 
y0i
 
+
 
y2i
 !
;
! "
a
 
[
 
j1
 
]
 
=
 
y0r
 
-
 
y2r
 
;
 
a
 
[
 
j1
 
+
 
$num
 
]
 
=
 
y0i
 
-
 
y2i
 !
;
! "
y0r
 
=
 
wl1i
 
*
 
x1r
 
-
 
wl1r
 #
*
$ %
x1i
& )
;
) *
y0i
   
=
   
wl1i
   
*
   
x1i
   
+
   
wl1r
   #
*
  $ %
x1r
  & )
;
  ) *
y2r
¡¡ 
=
¡¡ 
wl1r
¡¡ 
*
¡¡ 
x3r
¡¡ 
-
¡¡ 
wl1i
¡¡ #
*
¡¡$ %
x3i
¡¡& )
;
¡¡) *
y2i
¢¢ 
=
¢¢ 
wl1r
¢¢ 
*
¢¢ 
x3i
¢¢ 
+
¢¢ 
wl1i
¢¢ #
*
¢¢$ %
x3r
¢¢& )
;
¢¢) *
a
££ 
[
££ 
j2
££ 
]
££ 
=
££ 
y0r
££ 
-
££ 
y2r
££ 
;
££ 
a
¤¤ 
[
¤¤ 
j2
¤¤ 
+
¤¤ 
$num
¤¤ 
]
¤¤ 
=
¤¤ 
y0i
¤¤ 
-
¤¤ 
y2i
¤¤ !
;
¤¤! "
a
¥¥ 
[
¥¥ 
j3
¥¥ 
]
¥¥ 
=
¥¥ 
y0r
¥¥ 
+
¥¥ 
y2r
¥¥ 
;
¥¥ 
a
¦¦ 
[
¦¦ 
j3
¦¦ 
+
¦¦ 
$num
¦¦ 
]
¦¦ 
=
¦¦ 
y0i
¦¦ 
+
¦¦ 
y2i
¦¦ !
;
¦¦! "
x0r
§§ 
=
§§ 
a
§§ 
[
§§ 
j0
§§ 
+
§§ 
$num
§§ 
]
§§ 
-
§§ 
a
§§ 
[
§§  
j2
§§  "
+
§§# $
$num
§§% &
]
§§& '
;
§§' (
x0i
¨¨ 
=
¨¨ 
a
¨¨ 
[
¨¨ 
j0
¨¨ 
+
¨¨ 
$num
¨¨ 
]
¨¨ 
+
¨¨ 
a
¨¨ 
[
¨¨  
j2
¨¨  "
+
¨¨# $
$num
¨¨% &
]
¨¨& '
;
¨¨' (
x1r
©© 
=
©© 
a
©© 
[
©© 
j0
©© 
+
©© 
$num
©© 
]
©© 
+
©© 
a
©© 
[
©©  
j2
©©  "
+
©©# $
$num
©©% &
]
©©& '
;
©©' (
x1i
ªª 
=
ªª 
a
ªª 
[
ªª 
j0
ªª 
+
ªª 
$num
ªª 
]
ªª 
-
ªª 
a
ªª 
[
ªª  
j2
ªª  "
+
ªª# $
$num
ªª% &
]
ªª& '
;
ªª' (
x2r
«« 
=
«« 
a
«« 
[
«« 
j1
«« 
+
«« 
$num
«« 
]
«« 
-
«« 
a
«« 
[
««  
j3
««  "
+
««# $
$num
««% &
]
««& '
;
««' (
x2i
¬¬ 
=
¬¬ 
a
¬¬ 
[
¬¬ 
j1
¬¬ 
+
¬¬ 
$num
¬¬ 
]
¬¬ 
+
¬¬ 
a
¬¬ 
[
¬¬  
j3
¬¬  "
+
¬¬# $
$num
¬¬% &
]
¬¬& '
;
¬¬' (
x3r
­­ 
=
­­ 
a
­­ 
[
­­ 
j1
­­ 
+
­­ 
$num
­­ 
]
­­ 
+
­­ 
a
­­ 
[
­­  
j3
­­  "
+
­­# $
$num
­­% &
]
­­& '
;
­­' (
x3i
®® 
=
®® 
a
®® 
[
®® 
j1
®® 
+
®® 
$num
®® 
]
®® 
-
®® 
a
®® 
[
®®  
j3
®®  "
+
®®# $
$num
®®% &
]
®®& '
;
®®' (
y0r
¯¯ 
=
¯¯ 
wd1i
¯¯ 
*
¯¯ 
x0r
¯¯ 
-
¯¯ 
wd1r
¯¯ #
*
¯¯$ %
x0i
¯¯& )
;
¯¯) *
y0i
°° 
=
°° 
wd1i
°° 
*
°° 
x0i
°° 
+
°° 
wd1r
°° #
*
°°$ %
x0r
°°& )
;
°°) *
y2r
±± 
=
±± 
wk1i
±± 
*
±± 
x2r
±± 
-
±± 
wk1r
±± #
*
±±$ %
x2i
±±& )
;
±±) *
y2i
²² 
=
²² 
wk1i
²² 
*
²² 
x2i
²² 
+
²² 
wk1r
²² #
*
²²$ %
x2r
²²& )
;
²²) *
a
³³ 
[
³³ 
j0
³³ 
+
³³ 
$num
³³ 
]
³³ 
=
³³ 
y0r
³³ 
+
³³ 
y2r
³³ !
;
³³! "
a
´´ 
[
´´ 
j0
´´ 
+
´´ 
$num
´´ 
]
´´ 
=
´´ 
y0i
´´ 
+
´´ 
y2i
´´ !
;
´´! "
a
µµ 
[
µµ 
j1
µµ 
+
µµ 
$num
µµ 
]
µµ 
=
µµ 
y0r
µµ 
-
µµ 
y2r
µµ !
;
µµ! "
a
¶¶ 
[
¶¶ 
j1
¶¶ 
+
¶¶ 
$num
¶¶ 
]
¶¶ 
=
¶¶ 
y0i
¶¶ 
-
¶¶ 
y2i
¶¶ !
;
¶¶! "
y0r
·· 
=
·· 
wd3i
·· 
*
·· 
x1r
·· 
+
·· 
wd3r
·· #
*
··$ %
x1i
··& )
;
··) *
y0i
¸¸ 
=
¸¸ 
wd3i
¸¸ 
*
¸¸ 
x1i
¸¸ 
-
¸¸ 
wd3r
¸¸ #
*
¸¸$ %
x1r
¸¸& )
;
¸¸) *
y2r
¹¹ 
=
¹¹ 
wk3i
¹¹ 
*
¹¹ 
x3r
¹¹ 
+
¹¹ 
wk3r
¹¹ #
*
¹¹$ %
x3i
¹¹& )
;
¹¹) *
y2i
ºº 
=
ºº 
wk3i
ºº 
*
ºº 
x3i
ºº 
-
ºº 
wk3r
ºº #
*
ºº$ %
x3r
ºº& )
;
ºº) *
a
»» 
[
»» 
j2
»» 
+
»» 
$num
»» 
]
»» 
=
»» 
y0r
»» 
+
»» 
y2r
»» !
;
»»! "
a
¼¼ 
[
¼¼ 
j2
¼¼ 
+
¼¼ 
$num
¼¼ 
]
¼¼ 
=
¼¼ 
y0i
¼¼ 
+
¼¼ 
y2i
¼¼ !
;
¼¼! "
a
½½ 
[
½½ 
j3
½½ 
+
½½ 
$num
½½ 
]
½½ 
=
½½ 
y0r
½½ 
-
½½ 
y2r
½½ !
;
½½! "
a
¾¾ 
[
¾¾ 
j3
¾¾ 
+
¾¾ 
$num
¾¾ 
]
¾¾ 
=
¾¾ 
y0i
¾¾ 
-
¾¾ 
y2i
¾¾ !
;
¾¾! "
}
¿¿ 	
static
ÂÂ 
void
ÂÂ 
cftfx41
ÂÂ 
(
ÂÂ 
int
ÂÂ 
n
ÂÂ  !
,
ÂÂ! "
double
ÂÂ# )
*
ÂÂ) *
a
ÂÂ+ ,
)
ÂÂ, -
{
ÃÃ 	
if
ÄÄ 
(
ÄÄ 
n
ÄÄ 
==
ÄÄ 
$num
ÄÄ 
)
ÄÄ 
{
ÅÅ 
cftf161
ÆÆ 
(
ÆÆ 
a
ÆÆ 
)
ÆÆ 
;
ÆÆ 
cftf162
ÇÇ 
(
ÇÇ 
&
ÇÇ 
a
ÇÇ 
[
ÇÇ 
$num
ÇÇ 
]
ÇÇ 
)
ÇÇ 
;
ÇÇ  
cftf161
ÈÈ 
(
ÈÈ 
&
ÈÈ 
a
ÈÈ 
[
ÈÈ 
$num
ÈÈ 
]
ÈÈ 
)
ÈÈ 
;
ÈÈ  
cftf161
ÉÉ 
(
ÉÉ 
&
ÉÉ 
a
ÉÉ 
[
ÉÉ 
$num
ÉÉ 
]
ÉÉ 
)
ÉÉ 
;
ÉÉ  
}
ÊÊ 
else
ËË 
{
ÌÌ 
cftf081
ÍÍ 
(
ÍÍ 
a
ÍÍ 
)
ÍÍ 
;
ÍÍ 
cftf082
ÎÎ 
(
ÎÎ 
&
ÎÎ 
a
ÎÎ 
[
ÎÎ 
$num
ÎÎ 
]
ÎÎ 
)
ÎÎ 
;
ÎÎ  
cftf081
ÏÏ 
(
ÏÏ 
&
ÏÏ 
a
ÏÏ 
[
ÏÏ 
$num
ÏÏ 
]
ÏÏ 
)
ÏÏ 
;
ÏÏ  
cftf081
ÐÐ 
(
ÐÐ 
&
ÐÐ 
a
ÐÐ 
[
ÐÐ 
$num
ÐÐ 
]
ÐÐ 
)
ÐÐ 
;
ÐÐ  
}
ÑÑ 
}
ÒÒ 	
static
ÕÕ 
void
ÕÕ 
cftf161
ÕÕ 
(
ÕÕ 
double
ÕÕ "
*
ÕÕ" #
a
ÕÕ$ %
)
ÕÕ% &
{
ÖÖ 	
double
×× 
wn4r
×× 
,
×× 
wk1r
×× 
,
×× 
wk1i
×× #
,
××# $
x0r
ØØ 
,
ØØ 
x0i
ØØ 
,
ØØ 
x1r
ØØ 
,
ØØ 
x1i
ØØ "
,
ØØ" #
x2r
ØØ$ '
,
ØØ' (
x2i
ØØ) ,
,
ØØ, -
x3r
ØØ. 1
,
ØØ1 2
x3i
ØØ3 6
,
ØØ6 7
y0r
ÙÙ 
,
ÙÙ 
y0i
ÙÙ 
,
ÙÙ 
y1r
ÙÙ 
,
ÙÙ 
y1i
ÙÙ "
,
ÙÙ" #
y2r
ÙÙ$ '
,
ÙÙ' (
y2i
ÙÙ) ,
,
ÙÙ, -
y3r
ÙÙ. 1
,
ÙÙ1 2
y3i
ÙÙ3 6
,
ÙÙ6 7
y4r
ÚÚ 
,
ÚÚ 
y4i
ÚÚ 
,
ÚÚ 
y5r
ÚÚ 
,
ÚÚ 
y5i
ÚÚ "
,
ÚÚ" #
y6r
ÚÚ$ '
,
ÚÚ' (
y6i
ÚÚ) ,
,
ÚÚ, -
y7r
ÚÚ. 1
,
ÚÚ1 2
y7i
ÚÚ3 6
,
ÚÚ6 7
y8r
ÛÛ 
,
ÛÛ 
y8i
ÛÛ 
,
ÛÛ 
y9r
ÛÛ 
,
ÛÛ 
y9i
ÛÛ "
,
ÛÛ" #
y10r
ÛÛ$ (
,
ÛÛ( )
y10i
ÛÛ* .
,
ÛÛ. /
y11r
ÛÛ0 4
,
ÛÛ4 5
y11i
ÛÛ6 :
,
ÛÛ: ;
y12r
ÜÜ 
,
ÜÜ 
y12i
ÜÜ 
,
ÜÜ 
y13r
ÜÜ  
,
ÜÜ  !
y13i
ÜÜ" &
,
ÜÜ& '
y14r
ÜÜ( ,
,
ÜÜ, -
y14i
ÜÜ. 2
,
ÜÜ2 3
y15r
ÜÜ4 8
,
ÜÜ8 9
y15i
ÜÜ: >
;
ÜÜ> ?
wn4r
ÞÞ 
=
ÞÞ 
WR5000
ÞÞ 
;
ÞÞ 
wk1r
ßß 
=
ßß 
WR2500
ßß 
;
ßß 
wk1i
àà 
=
àà 
WI2500
àà 
;
àà 
x0r
áá 
=
áá 
a
áá 
[
áá 
$num
áá 
]
áá 
+
áá 
a
áá 
[
áá 
$num
áá 
]
áá 
;
áá 
x0i
ââ 
=
ââ 
a
ââ 
[
ââ 
$num
ââ 
]
ââ 
+
ââ 
a
ââ 
[
ââ 
$num
ââ 
]
ââ 
;
ââ 
x1r
ãã 
=
ãã 
a
ãã 
[
ãã 
$num
ãã 
]
ãã 
-
ãã 
a
ãã 
[
ãã 
$num
ãã 
]
ãã 
;
ãã 
x1i
ää 
=
ää 
a
ää 
[
ää 
$num
ää 
]
ää 
-
ää 
a
ää 
[
ää 
$num
ää 
]
ää 
;
ää 
x2r
åå 
=
åå 
a
åå 
[
åå 
$num
åå 
]
åå 
+
åå 
a
åå 
[
åå 
$num
åå 
]
åå 
;
åå 
x2i
ææ 
=
ææ 
a
ææ 
[
ææ 
$num
ææ 
]
ææ 
+
ææ 
a
ææ 
[
ææ 
$num
ææ 
]
ææ 
;
ææ 
x3r
çç 
=
çç 
a
çç 
[
çç 
$num
çç 
]
çç 
-
çç 
a
çç 
[
çç 
$num
çç 
]
çç 
;
çç 
x3i
èè 
=
èè 
a
èè 
[
èè 
$num
èè 
]
èè 
-
èè 
a
èè 
[
èè 
$num
èè 
]
èè 
;
èè 
y0r
éé 
=
éé 
x0r
éé 
+
éé 
x2r
éé 
;
éé 
y0i
êê 
=
êê 
x0i
êê 
+
êê 
x2i
êê 
;
êê 
y4r
ëë 
=
ëë 
x0r
ëë 
-
ëë 
x2r
ëë 
;
ëë 
y4i
ìì 
=
ìì 
x0i
ìì 
-
ìì 
x2i
ìì 
;
ìì 
y8r
íí 
=
íí 
x1r
íí 
-
íí 
x3i
íí 
;
íí 
y8i
îî 
=
îî 
x1i
îî 
+
îî 
x3r
îî 
;
îî 
y12r
ïï 
=
ïï 
x1r
ïï 
+
ïï 
x3i
ïï 
;
ïï 
y12i
ðð 
=
ðð 
x1i
ðð 
-
ðð 
x3r
ðð 
;
ðð 
x0r
ññ 
=
ññ 
a
ññ 
[
ññ 
$num
ññ 
]
ññ 
+
ññ 
a
ññ 
[
ññ 
$num
ññ 
]
ññ 
;
ññ 
x0i
òò 
=
òò 
a
òò 
[
òò 
$num
òò 
]
òò 
+
òò 
a
òò 
[
òò 
$num
òò 
]
òò 
;
òò 
x1r
óó 
=
óó 
a
óó 
[
óó 
$num
óó 
]
óó 
-
óó 
a
óó 
[
óó 
$num
óó 
]
óó 
;
óó 
x1i
ôô 
=
ôô 
a
ôô 
[
ôô 
$num
ôô 
]
ôô 
-
ôô 
a
ôô 
[
ôô 
$num
ôô 
]
ôô 
;
ôô 
x2r
õõ 
=
õõ 
a
õõ 
[
õõ 
$num
õõ 
]
õõ 
+
õõ 
a
õõ 
[
õõ 
$num
õõ 
]
õõ 
;
õõ  
x2i
öö 
=
öö 
a
öö 
[
öö 
$num
öö 
]
öö 
+
öö 
a
öö 
[
öö 
$num
öö 
]
öö 
;
öö  
x3r
÷÷ 
=
÷÷ 
a
÷÷ 
[
÷÷ 
$num
÷÷ 
]
÷÷ 
-
÷÷ 
a
÷÷ 
[
÷÷ 
$num
÷÷ 
]
÷÷ 
;
÷÷  
x3i
øø 
=
øø 
a
øø 
[
øø 
$num
øø 
]
øø 
-
øø 
a
øø 
[
øø 
$num
øø 
]
øø 
;
øø  
y1r
ùù 
=
ùù 
x0r
ùù 
+
ùù 
x2r
ùù 
;
ùù 
y1i
úú 
=
úú 
x0i
úú 
+
úú 
x2i
úú 
;
úú 
y5r
ûû 
=
ûû 
x0r
ûû 
-
ûû 
x2r
ûû 
;
ûû 
y5i
üü 
=
üü 
x0i
üü 
-
üü 
x2i
üü 
;
üü 
x0r
ýý 
=
ýý 
x1r
ýý 
-
ýý 
x3i
ýý 
;
ýý 
x0i
þþ 
=
þþ 
x1i
þþ 
+
þþ 
x3r
þþ 
;
þþ 
y9r
ÿÿ 
=
ÿÿ 
wk1r
ÿÿ 
*
ÿÿ 
x0r
ÿÿ 
-
ÿÿ 
wk1i
ÿÿ #
*
ÿÿ$ %
x0i
ÿÿ& )
;
ÿÿ) *
y9i
 
=
 
wk1r
 
*
 
x0i
 
+
 
wk1i
 #
*
$ %
x0r
& )
;
) *
x0r
 
=
 
x1r
 
+
 
x3i
 
;
 
x0i
 
=
 
x1i
 
-
 
x3r
 
;
 
y13r
 
=
 
wk1i
 
*
 
x0r
 
-
 
wk1r
  $
*
% &
x0i
' *
;
* +
y13i
 
=
 
wk1i
 
*
 
x0i
 
+
 
wk1r
  $
*
% &
x0r
' *
;
* +
x0r
 
=
 
a
 
[
 
$num
 
]
 
+
 
a
 
[
 
$num
 
]
 
;
 
x0i
 
=
 
a
 
[
 
$num
 
]
 
+
 
a
 
[
 
$num
 
]
 
;
 
x1r
 
=
 
a
 
[
 
$num
 
]
 
-
 
a
 
[
 
$num
 
]
 
;
 
x1i
 
=
 
a
 
[
 
$num
 
]
 
-
 
a
 
[
 
$num
 
]
 
;
 
x2r
 
=
 
a
 
[
 
$num
 
]
 
+
 
a
 
[
 
$num
 
]
 
;
  
x2i
 
=
 
a
 
[
 
$num
 
]
 
+
 
a
 
[
 
$num
 
]
 
;
  
x3r
 
=
 
a
 
[
 
$num
 
]
 
-
 
a
 
[
 
$num
 
]
 
;
  
x3i
 
=
 
a
 
[
 
$num
 
]
 
-
 
a
 
[
 
$num
 
]
 
;
  
y2r
 
=
 
x0r
 
+
 
x2r
 
;
 
y2i
 
=
 
x0i
 
+
 
x2i
 
;
 
y6r
 
=
 
x0r
 
-
 
x2r
 
;
 
y6i
 
=
 
x0i
 
-
 
x2i
 
;
 
x0r
 
=
 
x1r
 
-
 
x3i
 
;
 
x0i
 
=
 
x1i
 
+
 
x3r
 
;
 
y10r
 
=
 
wn4r
 
*
 
(
 
x0r
 
-
  
x0i
! $
)
$ %
;
% &
y10i
 
=
 
wn4r
 
*
 
(
 
x0i
 
+
  
x0r
! $
)
$ %
;
% &
x0r
 
=
 
x1r
 
+
 
x3i
 
;
 
x0i
 
=
 
x1i
 
-
 
x3r
 
;
 
y14r
 
=
 
wn4r
 
*
 
(
 
x0r
 
+
  
x0i
! $
)
$ %
;
% &
y14i
 
=
 
wn4r
 
*
 
(
 
x0i
 
-
  
x0r
! $
)
$ %
;
% &
x0r
 
=
 
a
 
[
 
$num
 
]
 
+
 
a
 
[
 
$num
 
]
 
;
 
x0i
 
=
 
a
 
[
 
$num
 
]
 
+
 
a
 
[
 
$num
 
]
 
;
 
x1r
 
=
 
a
 
[
 
$num
 
]
 
-
 
a
 
[
 
$num
 
]
 
;
 
x1i
 
=
 
a
 
[
 
$num
 
]
 
-
 
a
 
[
 
$num
 
]
 
;
 
x2r
 
=
 
a
 
[
 
$num
 
]
 
+
 
a
 
[
 
$num
 
]
 
;
  
x2i
 
=
 
a
 
[
 
$num
 
]
 
+
 
a
 
[
 
$num
 
]
 
;
  
x3r
 
=
 
a
 
[
 
$num
 
]
 
-
 
a
 
[
 
$num
 
]
 
;
  
x3i
   
=
   
a
   
[
   
$num
   
]
   
-
   
a
   
[
   
$num
   
]
   
;
    
y3r
¡¡ 
=
¡¡ 
x0r
¡¡ 
+
¡¡ 
x2r
¡¡ 
;
¡¡ 
y3i
¢¢ 
=
¢¢ 
x0i
¢¢ 
+
¢¢ 
x2i
¢¢ 
;
¢¢ 
y7r
££ 
=
££ 
x0r
££ 
-
££ 
x2r
££ 
;
££ 
y7i
¤¤ 
=
¤¤ 
x0i
¤¤ 
-
¤¤ 
x2i
¤¤ 
;
¤¤ 
x0r
¥¥ 
=
¥¥ 
x1r
¥¥ 
-
¥¥ 
x3i
¥¥ 
;
¥¥ 
x0i
¦¦ 
=
¦¦ 
x1i
¦¦ 
+
¦¦ 
x3r
¦¦ 
;
¦¦ 
y11r
§§ 
=
§§ 
wk1i
§§ 
*
§§ 
x0r
§§ 
-
§§ 
wk1r
§§  $
*
§§% &
x0i
§§' *
;
§§* +
y11i
¨¨ 
=
¨¨ 
wk1i
¨¨ 
*
¨¨ 
x0i
¨¨ 
+
¨¨ 
wk1r
¨¨  $
*
¨¨% &
x0r
¨¨' *
;
¨¨* +
x0r
©© 
=
©© 
x1r
©© 
+
©© 
x3i
©© 
;
©© 
x0i
ªª 
=
ªª 
x1i
ªª 
-
ªª 
x3r
ªª 
;
ªª 
y15r
«« 
=
«« 
wk1r
«« 
*
«« 
x0r
«« 
-
«« 
wk1i
««  $
*
««% &
x0i
««' *
;
««* +
y15i
¬¬ 
=
¬¬ 
wk1r
¬¬ 
*
¬¬ 
x0i
¬¬ 
+
¬¬ 
wk1i
¬¬  $
*
¬¬% &
x0r
¬¬' *
;
¬¬* +
x0r
­­ 
=
­­ 
y12r
­­ 
-
­­ 
y14r
­­ 
;
­­ 
x0i
®® 
=
®® 
y12i
®® 
-
®® 
y14i
®® 
;
®® 
x1r
¯¯ 
=
¯¯ 
y12r
¯¯ 
+
¯¯ 
y14r
¯¯ 
;
¯¯ 
x1i
°° 
=
°° 
y12i
°° 
+
°° 
y14i
°° 
;
°° 
x2r
±± 
=
±± 
y13r
±± 
-
±± 
y15r
±± 
;
±± 
x2i
²² 
=
²² 
y13i
²² 
-
²² 
y15i
²² 
;
²² 
x3r
³³ 
=
³³ 
y13r
³³ 
+
³³ 
y15r
³³ 
;
³³ 
x3i
´´ 
=
´´ 
y13i
´´ 
+
´´ 
y15i
´´ 
;
´´ 
a
µµ 
[
µµ 
$num
µµ 
]
µµ 
=
µµ 
x0r
µµ 
+
µµ 
x2r
µµ 
;
µµ 
a
¶¶ 
[
¶¶ 
$num
¶¶ 
]
¶¶ 
=
¶¶ 
x0i
¶¶ 
+
¶¶ 
x2i
¶¶ 
;
¶¶ 
a
·· 
[
·· 
$num
·· 
]
·· 
=
·· 
x0r
·· 
-
·· 
x2r
·· 
;
·· 
a
¸¸ 
[
¸¸ 
$num
¸¸ 
]
¸¸ 
=
¸¸ 
x0i
¸¸ 
-
¸¸ 
x2i
¸¸ 
;
¸¸ 
a
¹¹ 
[
¹¹ 
$num
¹¹ 
]
¹¹ 
=
¹¹ 
x1r
¹¹ 
-
¹¹ 
x3i
¹¹ 
;
¹¹ 
a
ºº 
[
ºº 
$num
ºº 
]
ºº 
=
ºº 
x1i
ºº 
+
ºº 
x3r
ºº 
;
ºº 
a
»» 
[
»» 
$num
»» 
]
»» 
=
»» 
x1r
»» 
+
»» 
x3i
»» 
;
»» 
a
¼¼ 
[
¼¼ 
$num
¼¼ 
]
¼¼ 
=
¼¼ 
x1i
¼¼ 
-
¼¼ 
x3r
¼¼ 
;
¼¼ 
x0r
½½ 
=
½½ 
y8r
½½ 
+
½½ 
y10r
½½ 
;
½½ 
x0i
¾¾ 
=
¾¾ 
y8i
¾¾ 
+
¾¾ 
y10i
¾¾ 
;
¾¾ 
x1r
¿¿ 
=
¿¿ 
y8r
¿¿ 
-
¿¿ 
y10r
¿¿ 
;
¿¿ 
x1i
ÀÀ 
=
ÀÀ 
y8i
ÀÀ 
-
ÀÀ 
y10i
ÀÀ 
;
ÀÀ 
x2r
ÁÁ 
=
ÁÁ 
y9r
ÁÁ 
+
ÁÁ 
y11r
ÁÁ 
;
ÁÁ 
x2i
ÂÂ 
=
ÂÂ 
y9i
ÂÂ 
+
ÂÂ 
y11i
ÂÂ 
;
ÂÂ 
x3r
ÃÃ 
=
ÃÃ 
y9r
ÃÃ 
-
ÃÃ 
y11r
ÃÃ 
;
ÃÃ 
x3i
ÄÄ 
=
ÄÄ 
y9i
ÄÄ 
-
ÄÄ 
y11i
ÄÄ 
;
ÄÄ 
a
ÅÅ 
[
ÅÅ 
$num
ÅÅ 
]
ÅÅ 
=
ÅÅ 
x0r
ÅÅ 
+
ÅÅ 
x2r
ÅÅ 
;
ÅÅ 
a
ÆÆ 
[
ÆÆ 
$num
ÆÆ 
]
ÆÆ 
=
ÆÆ 
x0i
ÆÆ 
+
ÆÆ 
x2i
ÆÆ 
;
ÆÆ 
a
ÇÇ 
[
ÇÇ 
$num
ÇÇ 
]
ÇÇ 
=
ÇÇ 
x0r
ÇÇ 
-
ÇÇ 
x2r
ÇÇ 
;
ÇÇ 
a
ÈÈ 
[
ÈÈ 
$num
ÈÈ 
]
ÈÈ 
=
ÈÈ 
x0i
ÈÈ 
-
ÈÈ 
x2i
ÈÈ 
;
ÈÈ 
a
ÉÉ 
[
ÉÉ 
$num
ÉÉ 
]
ÉÉ 
=
ÉÉ 
x1r
ÉÉ 
-
ÉÉ 
x3i
ÉÉ 
;
ÉÉ 
a
ÊÊ 
[
ÊÊ 
$num
ÊÊ 
]
ÊÊ 
=
ÊÊ 
x1i
ÊÊ 
+
ÊÊ 
x3r
ÊÊ 
;
ÊÊ 
a
ËË 
[
ËË 
$num
ËË 
]
ËË 
=
ËË 
x1r
ËË 
+
ËË 
x3i
ËË 
;
ËË 
a
ÌÌ 
[
ÌÌ 
$num
ÌÌ 
]
ÌÌ 
=
ÌÌ 
x1i
ÌÌ 
-
ÌÌ 
x3r
ÌÌ 
;
ÌÌ 
x0r
ÍÍ 
=
ÍÍ 
y5r
ÍÍ 
-
ÍÍ 
y7i
ÍÍ 
;
ÍÍ 
x0i
ÎÎ 
=
ÎÎ 
y5i
ÎÎ 
+
ÎÎ 
y7r
ÎÎ 
;
ÎÎ 
x2r
ÏÏ 
=
ÏÏ 
wn4r
ÏÏ 
*
ÏÏ 
(
ÏÏ 
x0r
ÏÏ 
-
ÏÏ 
x0i
ÏÏ  #
)
ÏÏ# $
;
ÏÏ$ %
x2i
ÐÐ 
=
ÐÐ 
wn4r
ÐÐ 
*
ÐÐ 
(
ÐÐ 
x0i
ÐÐ 
+
ÐÐ 
x0r
ÐÐ  #
)
ÐÐ# $
;
ÐÐ$ %
x0r
ÑÑ 
=
ÑÑ 
y5r
ÑÑ 
+
ÑÑ 
y7i
ÑÑ 
;
ÑÑ 
x0i
ÒÒ 
=
ÒÒ 
y5i
ÒÒ 
-
ÒÒ 
y7r
ÒÒ 
;
ÒÒ 
x3r
ÓÓ 
=
ÓÓ 
wn4r
ÓÓ 
*
ÓÓ 
(
ÓÓ 
x0r
ÓÓ 
-
ÓÓ 
x0i
ÓÓ  #
)
ÓÓ# $
;
ÓÓ$ %
x3i
ÔÔ 
=
ÔÔ 
wn4r
ÔÔ 
*
ÔÔ 
(
ÔÔ 
x0i
ÔÔ 
+
ÔÔ 
x0r
ÔÔ  #
)
ÔÔ# $
;
ÔÔ$ %
x0r
ÕÕ 
=
ÕÕ 
y4r
ÕÕ 
-
ÕÕ 
y6i
ÕÕ 
;
ÕÕ 
x0i
ÖÖ 
=
ÖÖ 
y4i
ÖÖ 
+
ÖÖ 
y6r
ÖÖ 
;
ÖÖ 
x1r
×× 
=
×× 
y4r
×× 
+
×× 
y6i
×× 
;
×× 
x1i
ØØ 
=
ØØ 
y4i
ØØ 
-
ØØ 
y6r
ØØ 
;
ØØ 
a
ÙÙ 
[
ÙÙ 
$num
ÙÙ 
]
ÙÙ 
=
ÙÙ 
x0r
ÙÙ 
+
ÙÙ 
x2r
ÙÙ 
;
ÙÙ 
a
ÚÚ 
[
ÚÚ 
$num
ÚÚ 
]
ÚÚ 
=
ÚÚ 
x0i
ÚÚ 
+
ÚÚ 
x2i
ÚÚ 
;
ÚÚ 
a
ÛÛ 
[
ÛÛ 
$num
ÛÛ 
]
ÛÛ 
=
ÛÛ 
x0r
ÛÛ 
-
ÛÛ 
x2r
ÛÛ 
;
ÛÛ 
a
ÜÜ 
[
ÜÜ 
$num
ÜÜ 
]
ÜÜ 
=
ÜÜ 
x0i
ÜÜ 
-
ÜÜ 
x2i
ÜÜ 
;
ÜÜ 
a
ÝÝ 
[
ÝÝ 
$num
ÝÝ 
]
ÝÝ 
=
ÝÝ 
x1r
ÝÝ 
-
ÝÝ 
x3i
ÝÝ 
;
ÝÝ 
a
ÞÞ 
[
ÞÞ 
$num
ÞÞ 
]
ÞÞ 
=
ÞÞ 
x1i
ÞÞ 
+
ÞÞ 
x3r
ÞÞ 
;
ÞÞ 
a
ßß 
[
ßß 
$num
ßß 
]
ßß 
=
ßß 
x1r
ßß 
+
ßß 
x3i
ßß 
;
ßß 
a
àà 
[
àà 
$num
àà 
]
àà 
=
àà 
x1i
àà 
-
àà 
x3r
àà 
;
àà 
x0r
áá 
=
áá 
y0r
áá 
+
áá 
y2r
áá 
;
áá 
x0i
ââ 
=
ââ 
y0i
ââ 
+
ââ 
y2i
ââ 
;
ââ 
x1r
ãã 
=
ãã 
y0r
ãã 
-
ãã 
y2r
ãã 
;
ãã 
x1i
ää 
=
ää 
y0i
ää 
-
ää 
y2i
ää 
;
ää 
x2r
åå 
=
åå 
y1r
åå 
+
åå 
y3r
åå 
;
åå 
x2i
ææ 
=
ææ 
y1i
ææ 
+
ææ 
y3i
ææ 
;
ææ 
x3r
çç 
=
çç 
y1r
çç 
-
çç 
y3r
çç 
;
çç 
x3i
èè 
=
èè 
y1i
èè 
-
èè 
y3i
èè 
;
èè 
a
éé 
[
éé 
$num
éé 
]
éé 
=
éé 
x0r
éé 
+
éé 
x2r
éé 
;
éé 
a
êê 
[
êê 
$num
êê 
]
êê 
=
êê 
x0i
êê 
+
êê 
x2i
êê 
;
êê 
a
ëë 
[
ëë 
$num
ëë 
]
ëë 
=
ëë 
x0r
ëë 
-
ëë 
x2r
ëë 
;
ëë 
a
ìì 
[
ìì 
$num
ìì 
]
ìì 
=
ìì 
x0i
ìì 
-
ìì 
x2i
ìì 
;
ìì 
a
íí 
[
íí 
$num
íí 
]
íí 
=
íí 
x1r
íí 
-
íí 
x3i
íí 
;
íí 
a
îî 
[
îî 
$num
îî 
]
îî 
=
îî 
x1i
îî 
+
îî 
x3r
îî 
;
îî 
a
ïï 
[
ïï 
$num
ïï 
]
ïï 
=
ïï 
x1r
ïï 
+
ïï 
x3i
ïï 
;
ïï 
a
ðð 
[
ðð 
$num
ðð 
]
ðð 
=
ðð 
x1i
ðð 
-
ðð 
x3r
ðð 
;
ðð 
}
ññ 	
static
ôô 
void
ôô 
cftf162
ôô 
(
ôô 
double
ôô "
*
ôô" #
a
ôô$ %
)
ôô% &
{
õõ 	
double
öö 
wn4r
öö 
,
öö 
wk1r
öö 
,
öö 
wk1i
öö #
,
öö# $
wk2r
öö% )
,
öö) *
wk2i
öö+ /
,
öö/ 0
wk3r
öö1 5
,
öö5 6
wk3i
öö7 ;
,
öö; <
x0r
÷÷ 
,
÷÷ 
x0i
÷÷ 
,
÷÷ 
x1r
÷÷ 
,
÷÷ 
x1i
÷÷ "
,
÷÷" #
x2r
÷÷$ '
,
÷÷' (
x2i
÷÷) ,
,
÷÷, -
y0r
øø 
,
øø 
y0i
øø 
,
øø 
y1r
øø 
,
øø 
y1i
øø "
,
øø" #
y2r
øø$ '
,
øø' (
y2i
øø) ,
,
øø, -
y3r
øø. 1
,
øø1 2
y3i
øø3 6
,
øø6 7
y4r
ùù 
,
ùù 
y4i
ùù 
,
ùù 
y5r
ùù 
,
ùù 
y5i
ùù "
,
ùù" #
y6r
ùù$ '
,
ùù' (
y6i
ùù) ,
,
ùù, -
y7r
ùù. 1
,
ùù1 2
y7i
ùù3 6
,
ùù6 7
y8r
úú 
,
úú 
y8i
úú 
,
úú 
y9r
úú 
,
úú 
y9i
úú "
,
úú" #
y10r
úú$ (
,
úú( )
y10i
úú* .
,
úú. /
y11r
úú0 4
,
úú4 5
y11i
úú6 :
,
úú: ;
y12r
ûû 
,
ûû 
y12i
ûû 
,
ûû 
y13r
ûû  
,
ûû  !
y13i
ûû" &
,
ûû& '
y14r
ûû( ,
,
ûû, -
y14i
ûû. 2
,
ûû2 3
y15r
ûû4 8
,
ûû8 9
y15i
ûû: >
;
ûû> ?
wn4r
ýý 
=
ýý 
WR5000
ýý 
;
ýý 
wk1r
þþ 
=
þþ 
WR1250
þþ 
;
þþ 
wk1i
ÿÿ 
=
ÿÿ 
WI1250
ÿÿ 
;
ÿÿ 
wk2r
 
=
 
WR2500
 
;
 
wk2i
 
=
 
WI2500
 
;
 
wk3r
 
=
 
WR3750
 
;
 
wk3i
 
=
 
WI3750
 
;
 
x1r
 
=
 
a
 
[
 
$num
 
]
 
-
 
a
 
[
 
$num
 
]
 
;
 
x1i
 
=
 
a
 
[
 
$num
 
]
 
+
 
a
 
[
 
$num
 
]
 
;
 
x0r
 
=
 
a
 
[
 
$num
 
]
 
-
 
a
 
[
 
$num
 
]
 
;
 
x0i
 
=
 
a
 
[
 
$num
 
]
 
+
 
a
 
[
 
$num
 
]
 
;
 
x2r
 
=
 
wn4r
 
*
 
(
 
x0r
 
-
 
x0i
  #
)
# $
;
$ %
x2i
 
=
 
wn4r
 
*
 
(
 
x0i
 
+
 
x0r
  #
)
# $
;
$ %
y0r
 
=
 
x1r
 
+
 
x2r
 
;
 
y0i
 
=
 
x1i
 
+
 
x2i
 
;
 
y4r
 
=
 
x1r
 
-
 
x2r
 
;
 
y4i
 
=
 
x1i
 
-
 
x2i
 
;
 
x1r
 
=
 
a
 
[
 
$num
 
]
 
+
 
a
 
[
 
$num
 
]
 
;
 
x1i
 
=
 
a
 
[
 
$num
 
]
 
-
 
a
 
[
 
$num
 
]
 
;
 
x0r
 
=
 
a
 
[
 
$num
 
]
 
+
 
a
 
[
 
$num
 
]
 
;
 
x0i
 
=
 
a
 
[
 
$num
 
]
 
-
 
a
 
[
 
$num
 
]
 
;
 
x2r
 
=
 
wn4r
 
*
 
(
 
x0r
 
-
 
x0i
  #
)
# $
;
$ %
x2i
 
=
 
wn4r
 
*
 
(
 
x0i
 
+
 
x0r
  #
)
# $
;
$ %
y8r
 
=
 
x1r
 
-
 
x2i
 
;
 
y8i
 
=
 
x1i
 
+
 
x2r
 
;
 
y12r
 
=
 
x1r
 
+
 
x2i
 
;
 
y12i
 
=
 
x1i
 
-
 
x2r
 
;
 
x0r
 
=
 
a
 
[
 
$num
 
]
 
-
 
a
 
[
 
$num
 
]
 
;
 
x0i
 
=
 
a
 
[
 
$num
 
]
 
+
 
a
 
[
 
$num
 
]
 
;
 
x1r
 
=
 
wk1r
 
*
 
x0r
 
-
 
wk1i
 #
*
$ %
x0i
& )
;
) *
x1i
 
=
 
wk1r
 
*
 
x0i
 
+
 
wk1i
 #
*
$ %
x0r
& )
;
) *
x0r
 
=
 
a
 
[
 
$num
 
]
 
-
 
a
 
[
 
$num
 
]
 
;
  
x0i
 
=
 
a
 
[
 
$num
 
]
 
+
 
a
 
[
 
$num
 
]
 
;
  
x2r
 
=
 
wk3i
 
*
 
x0r
 
-
 
wk3r
 #
*
$ %
x0i
& )
;
) *
x2i
 
=
 
wk3i
 
*
 
x0i
 
+
 
wk3r
 #
*
$ %
x0r
& )
;
) *
y1r
   
=
   
x1r
   
+
   
x2r
   
;
   
y1i
¡¡ 
=
¡¡ 
x1i
¡¡ 
+
¡¡ 
x2i
¡¡ 
;
¡¡ 
y5r
¢¢ 
=
¢¢ 
x1r
¢¢ 
-
¢¢ 
x2r
¢¢ 
;
¢¢ 
y5i
££ 
=
££ 
x1i
££ 
-
££ 
x2i
££ 
;
££ 
x0r
¤¤ 
=
¤¤ 
a
¤¤ 
[
¤¤ 
$num
¤¤ 
]
¤¤ 
+
¤¤ 
a
¤¤ 
[
¤¤ 
$num
¤¤ 
]
¤¤ 
;
¤¤ 
x0i
¥¥ 
=
¥¥ 
a
¥¥ 
[
¥¥ 
$num
¥¥ 
]
¥¥ 
-
¥¥ 
a
¥¥ 
[
¥¥ 
$num
¥¥ 
]
¥¥ 
;
¥¥ 
x1r
¦¦ 
=
¦¦ 
wk3r
¦¦ 
*
¦¦ 
x0r
¦¦ 
-
¦¦ 
wk3i
¦¦ #
*
¦¦$ %
x0i
¦¦& )
;
¦¦) *
x1i
§§ 
=
§§ 
wk3r
§§ 
*
§§ 
x0i
§§ 
+
§§ 
wk3i
§§ #
*
§§$ %
x0r
§§& )
;
§§) *
x0r
¨¨ 
=
¨¨ 
a
¨¨ 
[
¨¨ 
$num
¨¨ 
]
¨¨ 
+
¨¨ 
a
¨¨ 
[
¨¨ 
$num
¨¨ 
]
¨¨ 
;
¨¨  
x0i
©© 
=
©© 
a
©© 
[
©© 
$num
©© 
]
©© 
-
©© 
a
©© 
[
©© 
$num
©© 
]
©© 
;
©©  
x2r
ªª 
=
ªª 
wk1r
ªª 
*
ªª 
x0r
ªª 
+
ªª 
wk1i
ªª #
*
ªª$ %
x0i
ªª& )
;
ªª) *
x2i
«« 
=
«« 
wk1r
«« 
*
«« 
x0i
«« 
-
«« 
wk1i
«« #
*
««$ %
x0r
««& )
;
««) *
y9r
¬¬ 
=
¬¬ 
x1r
¬¬ 
-
¬¬ 
x2r
¬¬ 
;
¬¬ 
y9i
­­ 
=
­­ 
x1i
­­ 
-
­­ 
x2i
­­ 
;
­­ 
y13r
®® 
=
®® 
x1r
®® 
+
®® 
x2r
®® 
;
®® 
y13i
¯¯ 
=
¯¯ 
x1i
¯¯ 
+
¯¯ 
x2i
¯¯ 
;
¯¯ 
x0r
°° 
=
°° 
a
°° 
[
°° 
$num
°° 
]
°° 
-
°° 
a
°° 
[
°° 
$num
°° 
]
°° 
;
°° 
x0i
±± 
=
±± 
a
±± 
[
±± 
$num
±± 
]
±± 
+
±± 
a
±± 
[
±± 
$num
±± 
]
±± 
;
±± 
x1r
²² 
=
²² 
wk2r
²² 
*
²² 
x0r
²² 
-
²² 
wk2i
²² #
*
²²$ %
x0i
²²& )
;
²²) *
x1i
³³ 
=
³³ 
wk2r
³³ 
*
³³ 
x0i
³³ 
+
³³ 
wk2i
³³ #
*
³³$ %
x0r
³³& )
;
³³) *
x0r
´´ 
=
´´ 
a
´´ 
[
´´ 
$num
´´ 
]
´´ 
-
´´ 
a
´´ 
[
´´ 
$num
´´ 
]
´´ 
;
´´  
x0i
µµ 
=
µµ 
a
µµ 
[
µµ 
$num
µµ 
]
µµ 
+
µµ 
a
µµ 
[
µµ 
$num
µµ 
]
µµ 
;
µµ  
x2r
¶¶ 
=
¶¶ 
wk2i
¶¶ 
*
¶¶ 
x0r
¶¶ 
-
¶¶ 
wk2r
¶¶ #
*
¶¶$ %
x0i
¶¶& )
;
¶¶) *
x2i
·· 
=
·· 
wk2i
·· 
*
·· 
x0i
·· 
+
·· 
wk2r
·· #
*
··$ %
x0r
··& )
;
··) *
y2r
¸¸ 
=
¸¸ 
x1r
¸¸ 
+
¸¸ 
x2r
¸¸ 
;
¸¸ 
y2i
¹¹ 
=
¹¹ 
x1i
¹¹ 
+
¹¹ 
x2i
¹¹ 
;
¹¹ 
y6r
ºº 
=
ºº 
x1r
ºº 
-
ºº 
x2r
ºº 
;
ºº 
y6i
»» 
=
»» 
x1i
»» 
-
»» 
x2i
»» 
;
»» 
x0r
¼¼ 
=
¼¼ 
a
¼¼ 
[
¼¼ 
$num
¼¼ 
]
¼¼ 
+
¼¼ 
a
¼¼ 
[
¼¼ 
$num
¼¼ 
]
¼¼ 
;
¼¼ 
x0i
½½ 
=
½½ 
a
½½ 
[
½½ 
$num
½½ 
]
½½ 
-
½½ 
a
½½ 
[
½½ 
$num
½½ 
]
½½ 
;
½½ 
x1r
¾¾ 
=
¾¾ 
wk2i
¾¾ 
*
¾¾ 
x0r
¾¾ 
-
¾¾ 
wk2r
¾¾ #
*
¾¾$ %
x0i
¾¾& )
;
¾¾) *
x1i
¿¿ 
=
¿¿ 
wk2i
¿¿ 
*
¿¿ 
x0i
¿¿ 
+
¿¿ 
wk2r
¿¿ #
*
¿¿$ %
x0r
¿¿& )
;
¿¿) *
x0r
ÀÀ 
=
ÀÀ 
a
ÀÀ 
[
ÀÀ 
$num
ÀÀ 
]
ÀÀ 
+
ÀÀ 
a
ÀÀ 
[
ÀÀ 
$num
ÀÀ 
]
ÀÀ 
;
ÀÀ  
x0i
ÁÁ 
=
ÁÁ 
a
ÁÁ 
[
ÁÁ 
$num
ÁÁ 
]
ÁÁ 
-
ÁÁ 
a
ÁÁ 
[
ÁÁ 
$num
ÁÁ 
]
ÁÁ 
;
ÁÁ  
x2r
ÂÂ 
=
ÂÂ 
wk2r
ÂÂ 
*
ÂÂ 
x0r
ÂÂ 
-
ÂÂ 
wk2i
ÂÂ #
*
ÂÂ$ %
x0i
ÂÂ& )
;
ÂÂ) *
x2i
ÃÃ 
=
ÃÃ 
wk2r
ÃÃ 
*
ÃÃ 
x0i
ÃÃ 
+
ÃÃ 
wk2i
ÃÃ #
*
ÃÃ$ %
x0r
ÃÃ& )
;
ÃÃ) *
y10r
ÄÄ 
=
ÄÄ 
x1r
ÄÄ 
-
ÄÄ 
x2r
ÄÄ 
;
ÄÄ 
y10i
ÅÅ 
=
ÅÅ 
x1i
ÅÅ 
-
ÅÅ 
x2i
ÅÅ 
;
ÅÅ 
y14r
ÆÆ 
=
ÆÆ 
x1r
ÆÆ 
+
ÆÆ 
x2r
ÆÆ 
;
ÆÆ 
y14i
ÇÇ 
=
ÇÇ 
x1i
ÇÇ 
+
ÇÇ 
x2i
ÇÇ 
;
ÇÇ 
x0r
ÈÈ 
=
ÈÈ 
a
ÈÈ 
[
ÈÈ 
$num
ÈÈ 
]
ÈÈ 
-
ÈÈ 
a
ÈÈ 
[
ÈÈ 
$num
ÈÈ 
]
ÈÈ 
;
ÈÈ 
x0i
ÉÉ 
=
ÉÉ 
a
ÉÉ 
[
ÉÉ 
$num
ÉÉ 
]
ÉÉ 
+
ÉÉ 
a
ÉÉ 
[
ÉÉ 
$num
ÉÉ 
]
ÉÉ 
;
ÉÉ 
x1r
ÊÊ 
=
ÊÊ 
wk3r
ÊÊ 
*
ÊÊ 
x0r
ÊÊ 
-
ÊÊ 
wk3i
ÊÊ #
*
ÊÊ$ %
x0i
ÊÊ& )
;
ÊÊ) *
x1i
ËË 
=
ËË 
wk3r
ËË 
*
ËË 
x0i
ËË 
+
ËË 
wk3i
ËË #
*
ËË$ %
x0r
ËË& )
;
ËË) *
x0r
ÌÌ 
=
ÌÌ 
a
ÌÌ 
[
ÌÌ 
$num
ÌÌ 
]
ÌÌ 
-
ÌÌ 
a
ÌÌ 
[
ÌÌ 
$num
ÌÌ 
]
ÌÌ 
;
ÌÌ  
x0i
ÍÍ 
=
ÍÍ 
a
ÍÍ 
[
ÍÍ 
$num
ÍÍ 
]
ÍÍ 
+
ÍÍ 
a
ÍÍ 
[
ÍÍ 
$num
ÍÍ 
]
ÍÍ 
;
ÍÍ  
x2r
ÎÎ 
=
ÎÎ 
wk1i
ÎÎ 
*
ÎÎ 
x0r
ÎÎ 
-
ÎÎ 
wk1r
ÎÎ #
*
ÎÎ$ %
x0i
ÎÎ& )
;
ÎÎ) *
x2i
ÏÏ 
=
ÏÏ 
wk1i
ÏÏ 
*
ÏÏ 
x0i
ÏÏ 
+
ÏÏ 
wk1r
ÏÏ #
*
ÏÏ$ %
x0r
ÏÏ& )
;
ÏÏ) *
y3r
ÐÐ 
=
ÐÐ 
x1r
ÐÐ 
+
ÐÐ 
x2r
ÐÐ 
;
ÐÐ 
y3i
ÑÑ 
=
ÑÑ 
x1i
ÑÑ 
+
ÑÑ 
x2i
ÑÑ 
;
ÑÑ 
y7r
ÒÒ 
=
ÒÒ 
x1r
ÒÒ 
-
ÒÒ 
x2r
ÒÒ 
;
ÒÒ 
y7i
ÓÓ 
=
ÓÓ 
x1i
ÓÓ 
-
ÓÓ 
x2i
ÓÓ 
;
ÓÓ 
x0r
ÔÔ 
=
ÔÔ 
a
ÔÔ 
[
ÔÔ 
$num
ÔÔ 
]
ÔÔ 
+
ÔÔ 
a
ÔÔ 
[
ÔÔ 
$num
ÔÔ 
]
ÔÔ 
;
ÔÔ 
x0i
ÕÕ 
=
ÕÕ 
a
ÕÕ 
[
ÕÕ 
$num
ÕÕ 
]
ÕÕ 
-
ÕÕ 
a
ÕÕ 
[
ÕÕ 
$num
ÕÕ 
]
ÕÕ 
;
ÕÕ 
x1r
ÖÖ 
=
ÖÖ 
wk1i
ÖÖ 
*
ÖÖ 
x0r
ÖÖ 
+
ÖÖ 
wk1r
ÖÖ #
*
ÖÖ$ %
x0i
ÖÖ& )
;
ÖÖ) *
x1i
×× 
=
×× 
wk1i
×× 
*
×× 
x0i
×× 
-
×× 
wk1r
×× #
*
××$ %
x0r
××& )
;
××) *
x0r
ØØ 
=
ØØ 
a
ØØ 
[
ØØ 
$num
ØØ 
]
ØØ 
+
ØØ 
a
ØØ 
[
ØØ 
$num
ØØ 
]
ØØ 
;
ØØ  
x0i
ÙÙ 
=
ÙÙ 
a
ÙÙ 
[
ÙÙ 
$num
ÙÙ 
]
ÙÙ 
-
ÙÙ 
a
ÙÙ 
[
ÙÙ 
$num
ÙÙ 
]
ÙÙ 
;
ÙÙ  
x2r
ÚÚ 
=
ÚÚ 
wk3i
ÚÚ 
*
ÚÚ 
x0r
ÚÚ 
-
ÚÚ 
wk3r
ÚÚ #
*
ÚÚ$ %
x0i
ÚÚ& )
;
ÚÚ) *
x2i
ÛÛ 
=
ÛÛ 
wk3i
ÛÛ 
*
ÛÛ 
x0i
ÛÛ 
+
ÛÛ 
wk3r
ÛÛ #
*
ÛÛ$ %
x0r
ÛÛ& )
;
ÛÛ) *
y11r
ÜÜ 
=
ÜÜ 
x1r
ÜÜ 
+
ÜÜ 
x2r
ÜÜ 
;
ÜÜ 
y11i
ÝÝ 
=
ÝÝ 
x1i
ÝÝ 
+
ÝÝ 
x2i
ÝÝ 
;
ÝÝ 
y15r
ÞÞ 
=
ÞÞ 
x1r
ÞÞ 
-
ÞÞ 
x2r
ÞÞ 
;
ÞÞ 
y15i
ßß 
=
ßß 
x1i
ßß 
-
ßß 
x2i
ßß 
;
ßß 
x1r
àà 
=
àà 
y0r
àà 
+
àà 
y2r
àà 
;
àà 
x1i
áá 
=
áá 
y0i
áá 
+
áá 
y2i
áá 
;
áá 
x2r
ââ 
=
ââ 
y1r
ââ 
+
ââ 
y3r
ââ 
;
ââ 
x2i
ãã 
=
ãã 
y1i
ãã 
+
ãã 
y3i
ãã 
;
ãã 
a
ää 
[
ää 
$num
ää 
]
ää 
=
ää 
x1r
ää 
+
ää 
x2r
ää 
;
ää 
a
åå 
[
åå 
$num
åå 
]
åå 
=
åå 
x1i
åå 
+
åå 
x2i
åå 
;
åå 
a
ææ 
[
ææ 
$num
ææ 
]
ææ 
=
ææ 
x1r
ææ 
-
ææ 
x2r
ææ 
;
ææ 
a
çç 
[
çç 
$num
çç 
]
çç 
=
çç 
x1i
çç 
-
çç 
x2i
çç 
;
çç 
x1r
èè 
=
èè 
y0r
èè 
-
èè 
y2r
èè 
;
èè 
x1i
éé 
=
éé 
y0i
éé 
-
éé 
y2i
éé 
;
éé 
x2r
êê 
=
êê 
y1r
êê 
-
êê 
y3r
êê 
;
êê 
x2i
ëë 
=
ëë 
y1i
ëë 
-
ëë 
y3i
ëë 
;
ëë 
a
ìì 
[
ìì 
$num
ìì 
]
ìì 
=
ìì 
x1r
ìì 
-
ìì 
x2i
ìì 
;
ìì 
a
íí 
[
íí 
$num
íí 
]
íí 
=
íí 
x1i
íí 
+
íí 
x2r
íí 
;
íí 
a
îî 
[
îî 
$num
îî 
]
îî 
=
îî 
x1r
îî 
+
îî 
x2i
îî 
;
îî 
a
ïï 
[
ïï 
$num
ïï 
]
ïï 
=
ïï 
x1i
ïï 
-
ïï 
x2r
ïï 
;
ïï 
x1r
ðð 
=
ðð 
y4r
ðð 
-
ðð 
y6i
ðð 
;
ðð 
x1i
ññ 
=
ññ 
y4i
ññ 
+
ññ 
y6r
ññ 
;
ññ 
x0r
òò 
=
òò 
y5r
òò 
-
òò 
y7i
òò 
;
òò 
x0i
óó 
=
óó 
y5i
óó 
+
óó 
y7r
óó 
;
óó 
x2r
ôô 
=
ôô 
wn4r
ôô 
*
ôô 
(
ôô 
x0r
ôô 
-
ôô 
x0i
ôô  #
)
ôô# $
;
ôô$ %
x2i
õõ 
=
õõ 
wn4r
õõ 
*
õõ 
(
õõ 
x0i
õõ 
+
õõ 
x0r
õõ  #
)
õõ# $
;
õõ$ %
a
öö 
[
öö 
$num
öö 
]
öö 
=
öö 
x1r
öö 
+
öö 
x2r
öö 
;
öö 
a
÷÷ 
[
÷÷ 
$num
÷÷ 
]
÷÷ 
=
÷÷ 
x1i
÷÷ 
+
÷÷ 
x2i
÷÷ 
;
÷÷ 
a
øø 
[
øø 
$num
øø 
]
øø 
=
øø 
x1r
øø 
-
øø 
x2r
øø 
;
øø 
a
ùù 
[
ùù 
$num
ùù 
]
ùù 
=
ùù 
x1i
ùù 
-
ùù 
x2i
ùù 
;
ùù 
x1r
úú 
=
úú 
y4r
úú 
+
úú 
y6i
úú 
;
úú 
x1i
ûû 
=
ûû 
y4i
ûû 
-
ûû 
y6r
ûû 
;
ûû 
x0r
üü 
=
üü 
y5r
üü 
+
üü 
y7i
üü 
;
üü 
x0i
ýý 
=
ýý 
y5i
ýý 
-
ýý 
y7r
ýý 
;
ýý 
x2r
þþ 
=
þþ 
wn4r
þþ 
*
þþ 
(
þþ 
x0r
þþ 
-
þþ 
x0i
þþ  #
)
þþ# $
;
þþ$ %
x2i
ÿÿ 
=
ÿÿ 
wn4r
ÿÿ 
*
ÿÿ 
(
ÿÿ 
x0i
ÿÿ 
+
ÿÿ 
x0r
ÿÿ  #
)
ÿÿ# $
;
ÿÿ$ %
a
 
[
 
$num
 
]
 
=
 
x1r
 
-
 
x2i
 
;
 
a
 
[
 
$num
 
]
 
=
 
x1i
 
+
 
x2r
 
;
 
a
 
[
 
$num
 
]
 
=
 
x1r
 
+
 
x2i
 
;
 
a
 
[
 
$num
 
]
 
=
 
x1i
 
-
 
x2r
 
;
 
x1r
 
=
 
y8r
 
+
 
y10r
 
;
 
x1i
 
=
 
y8i
 
+
 
y10i
 
;
 
x2r
 
=
 
y9r
 
-
 
y11r
 
;
 
x2i
 
=
 
y9i
 
-
 
y11i
 
;
 
a
 
[
 
$num
 
]
 
=
 
x1r
 
+
 
x2r
 
;
 
a
 
[
 
$num
 
]
 
=
 
x1i
 
+
 
x2i
 
;
 
a
 
[
 
$num
 
]
 
=
 
x1r
 
-
 
x2r
 
;
 
a
 
[
 
$num
 
]
 
=
 
x1i
 
-
 
x2i
 
;
 
x1r
 
=
 
y8r
 
-
 
y10r
 
;
 
x1i
 
=
 
y8i
 
-
 
y10i
 
;
 
x2r
 
=
 
y9r
 
+
 
y11r
 
;
 
x2i
 
=
 
y9i
 
+
 
y11i
 
;
 
a
 
[
 
$num
 
]
 
=
 
x1r
 
-
 
x2i
 
;
 
a
 
[
 
$num
 
]
 
=
 
x1i
 
+
 
x2r
 
;
 
a
 
[
 
$num
 
]
 
=
 
x1r
 
+
 
x2i
 
;
 
a
 
[
 
$num
 
]
 
=
 
x1i
 
-
 
x2r
 
;
 
x1r
 
=
 
y12r
 
-
 
y14i
 
;
 
x1i
 
=
 
y12i
 
+
 
y14r
 
;
 
x0r
 
=
 
y13r
 
+
 
y15i
 
;
 
x0i
 
=
 
y13i
 
-
 
y15r
 
;
 
x2r
 
=
 
wn4r
 
*
 
(
 
x0r
 
-
 
x0i
  #
)
# $
;
$ %
x2i
 
=
 
wn4r
 
*
 
(
 
x0i
 
+
 
x0r
  #
)
# $
;
$ %
a
 
[
 
$num
 
]
 
=
 
x1r
 
+
 
x2r
 
;
 
a
 
[
 
$num
 
]
 
=
 
x1i
 
+
 
x2i
 
;
 
a
 
[
 
$num
 
]
 
=
 
x1r
 
-
 
x2r
 
;
 
a
 
[
 
$num
 
]
 
=
 
x1i
 
-
 
x2i
 
;
 
x1r
 
=
 
y12r
 
+
 
y14i
 
;
 
x1i
 
=
 
y12i
 
-
 
y14r
 
;
 
x0r
   
=
   
y13r
   
-
   
y15i
   
;
   
x0i
¡¡ 
=
¡¡ 
y13i
¡¡ 
+
¡¡ 
y15r
¡¡ 
;
¡¡ 
x2r
¢¢ 
=
¢¢ 
wn4r
¢¢ 
*
¢¢ 
(
¢¢ 
x0r
¢¢ 
-
¢¢ 
x0i
¢¢  #
)
¢¢# $
;
¢¢$ %
x2i
££ 
=
££ 
wn4r
££ 
*
££ 
(
££ 
x0i
££ 
+
££ 
x0r
££  #
)
££# $
;
££$ %
a
¤¤ 
[
¤¤ 
$num
¤¤ 
]
¤¤ 
=
¤¤ 
x1r
¤¤ 
-
¤¤ 
x2i
¤¤ 
;
¤¤ 
a
¥¥ 
[
¥¥ 
$num
¥¥ 
]
¥¥ 
=
¥¥ 
x1i
¥¥ 
+
¥¥ 
x2r
¥¥ 
;
¥¥ 
a
¦¦ 
[
¦¦ 
$num
¦¦ 
]
¦¦ 
=
¦¦ 
x1r
¦¦ 
+
¦¦ 
x2i
¦¦ 
;
¦¦ 
a
§§ 
[
§§ 
$num
§§ 
]
§§ 
=
§§ 
x1i
§§ 
-
§§ 
x2r
§§ 
;
§§ 
}
¨¨ 	
static
«« 
void
«« 
cftf081
«« 
(
«« 
double
«« "
*
««" #
a
««$ %
)
««% &
{
¬¬ 	
double
­­ 
wn4r
­­ 
,
­­ 
x0r
­­ 
,
­­ 
x0i
­­ !
,
­­! "
x1r
­­# &
,
­­& '
x1i
­­( +
,
­­+ ,
x2r
­­- 0
,
­­0 1
x2i
­­2 5
,
­­5 6
x3r
­­7 :
,
­­: ;
x3i
­­< ?
,
­­? @
y0r
®® 
,
®® 
y0i
®® 
,
®® 
y1r
®® 
,
®® 
y1i
®® "
,
®®" #
y2r
®®$ '
,
®®' (
y2i
®®) ,
,
®®, -
y3r
®®. 1
,
®®1 2
y3i
®®3 6
,
®®6 7
y4r
¯¯ 
,
¯¯ 
y4i
¯¯ 
,
¯¯ 
y5r
¯¯ 
,
¯¯ 
y5i
¯¯ "
,
¯¯" #
y6r
¯¯$ '
,
¯¯' (
y6i
¯¯) ,
,
¯¯, -
y7r
¯¯. 1
,
¯¯1 2
y7i
¯¯3 6
;
¯¯6 7
wn4r
±± 
=
±± 
WR5000
±± 
;
±± 
x0r
²² 
=
²² 
a
²² 
[
²² 
$num
²² 
]
²² 
+
²² 
a
²² 
[
²² 
$num
²² 
]
²² 
;
²² 
x0i
³³ 
=
³³ 
a
³³ 
[
³³ 
$num
³³ 
]
³³ 
+
³³ 
a
³³ 
[
³³ 
$num
³³ 
]
³³ 
;
³³ 
x1r
´´ 
=
´´ 
a
´´ 
[
´´ 
$num
´´ 
]
´´ 
-
´´ 
a
´´ 
[
´´ 
$num
´´ 
]
´´ 
;
´´ 
x1i
µµ 
=
µµ 
a
µµ 
[
µµ 
$num
µµ 
]
µµ 
-
µµ 
a
µµ 
[
µµ 
$num
µµ 
]
µµ 
;
µµ 
x2r
¶¶ 
=
¶¶ 
a
¶¶ 
[
¶¶ 
$num
¶¶ 
]
¶¶ 
+
¶¶ 
a
¶¶ 
[
¶¶ 
$num
¶¶ 
]
¶¶ 
;
¶¶ 
x2i
·· 
=
·· 
a
·· 
[
·· 
$num
·· 
]
·· 
+
·· 
a
·· 
[
·· 
$num
·· 
]
·· 
;
·· 
x3r
¸¸ 
=
¸¸ 
a
¸¸ 
[
¸¸ 
$num
¸¸ 
]
¸¸ 
-
¸¸ 
a
¸¸ 
[
¸¸ 
$num
¸¸ 
]
¸¸ 
;
¸¸ 
x3i
¹¹ 
=
¹¹ 
a
¹¹ 
[
¹¹ 
$num
¹¹ 
]
¹¹ 
-
¹¹ 
a
¹¹ 
[
¹¹ 
$num
¹¹ 
]
¹¹ 
;
¹¹ 
y0r
ºº 
=
ºº 
x0r
ºº 
+
ºº 
x2r
ºº 
;
ºº 
y0i
»» 
=
»» 
x0i
»» 
+
»» 
x2i
»» 
;
»» 
y2r
¼¼ 
=
¼¼ 
x0r
¼¼ 
-
¼¼ 
x2r
¼¼ 
;
¼¼ 
y2i
½½ 
=
½½ 
x0i
½½ 
-
½½ 
x2i
½½ 
;
½½ 
y1r
¾¾ 
=
¾¾ 
x1r
¾¾ 
-
¾¾ 
x3i
¾¾ 
;
¾¾ 
y1i
¿¿ 
=
¿¿ 
x1i
¿¿ 
+
¿¿ 
x3r
¿¿ 
;
¿¿ 
y3r
ÀÀ 
=
ÀÀ 
x1r
ÀÀ 
+
ÀÀ 
x3i
ÀÀ 
;
ÀÀ 
y3i
ÁÁ 
=
ÁÁ 
x1i
ÁÁ 
-
ÁÁ 
x3r
ÁÁ 
;
ÁÁ 
x0r
ÂÂ 
=
ÂÂ 
a
ÂÂ 
[
ÂÂ 
$num
ÂÂ 
]
ÂÂ 
+
ÂÂ 
a
ÂÂ 
[
ÂÂ 
$num
ÂÂ 
]
ÂÂ 
;
ÂÂ 
x0i
ÃÃ 
=
ÃÃ 
a
ÃÃ 
[
ÃÃ 
$num
ÃÃ 
]
ÃÃ 
+
ÃÃ 
a
ÃÃ 
[
ÃÃ 
$num
ÃÃ 
]
ÃÃ 
;
ÃÃ 
x1r
ÄÄ 
=
ÄÄ 
a
ÄÄ 
[
ÄÄ 
$num
ÄÄ 
]
ÄÄ 
-
ÄÄ 
a
ÄÄ 
[
ÄÄ 
$num
ÄÄ 
]
ÄÄ 
;
ÄÄ 
x1i
ÅÅ 
=
ÅÅ 
a
ÅÅ 
[
ÅÅ 
$num
ÅÅ 
]
ÅÅ 
-
ÅÅ 
a
ÅÅ 
[
ÅÅ 
$num
ÅÅ 
]
ÅÅ 
;
ÅÅ 
x2r
ÆÆ 
=
ÆÆ 
a
ÆÆ 
[
ÆÆ 
$num
ÆÆ 
]
ÆÆ 
+
ÆÆ 
a
ÆÆ 
[
ÆÆ 
$num
ÆÆ 
]
ÆÆ 
;
ÆÆ 
x2i
ÇÇ 
=
ÇÇ 
a
ÇÇ 
[
ÇÇ 
$num
ÇÇ 
]
ÇÇ 
+
ÇÇ 
a
ÇÇ 
[
ÇÇ 
$num
ÇÇ 
]
ÇÇ 
;
ÇÇ 
x3r
ÈÈ 
=
ÈÈ 
a
ÈÈ 
[
ÈÈ 
$num
ÈÈ 
]
ÈÈ 
-
ÈÈ 
a
ÈÈ 
[
ÈÈ 
$num
ÈÈ 
]
ÈÈ 
;
ÈÈ 
x3i
ÉÉ 
=
ÉÉ 
a
ÉÉ 
[
ÉÉ 
$num
ÉÉ 
]
ÉÉ 
-
ÉÉ 
a
ÉÉ 
[
ÉÉ 
$num
ÉÉ 
]
ÉÉ 
;
ÉÉ 
y4r
ÊÊ 
=
ÊÊ 
x0r
ÊÊ 
+
ÊÊ 
x2r
ÊÊ 
;
ÊÊ 
y4i
ËË 
=
ËË 
x0i
ËË 
+
ËË 
x2i
ËË 
;
ËË 
y6r
ÌÌ 
=
ÌÌ 
x0r
ÌÌ 
-
ÌÌ 
x2r
ÌÌ 
;
ÌÌ 
y6i
ÍÍ 
=
ÍÍ 
x0i
ÍÍ 
-
ÍÍ 
x2i
ÍÍ 
;
ÍÍ 
x0r
ÎÎ 
=
ÎÎ 
x1r
ÎÎ 
-
ÎÎ 
x3i
ÎÎ 
;
ÎÎ 
x0i
ÏÏ 
=
ÏÏ 
x1i
ÏÏ 
+
ÏÏ 
x3r
ÏÏ 
;
ÏÏ 
x2r
ÐÐ 
=
ÐÐ 
x1r
ÐÐ 
+
ÐÐ 
x3i
ÐÐ 
;
ÐÐ 
x2i
ÑÑ 
=
ÑÑ 
x1i
ÑÑ 
-
ÑÑ 
x3r
ÑÑ 
;
ÑÑ 
y5r
ÒÒ 
=
ÒÒ 
wn4r
ÒÒ 
*
ÒÒ 
(
ÒÒ 
x0r
ÒÒ 
-
ÒÒ 
x0i
ÒÒ  #
)
ÒÒ# $
;
ÒÒ$ %
y5i
ÓÓ 
=
ÓÓ 
wn4r
ÓÓ 
*
ÓÓ 
(
ÓÓ 
x0r
ÓÓ 
+
ÓÓ 
x0i
ÓÓ  #
)
ÓÓ# $
;
ÓÓ$ %
y7r
ÔÔ 
=
ÔÔ 
wn4r
ÔÔ 
*
ÔÔ 
(
ÔÔ 
x2r
ÔÔ 
-
ÔÔ 
x2i
ÔÔ  #
)
ÔÔ# $
;
ÔÔ$ %
y7i
ÕÕ 
=
ÕÕ 
wn4r
ÕÕ 
*
ÕÕ 
(
ÕÕ 
x2r
ÕÕ 
+
ÕÕ 
x2i
ÕÕ  #
)
ÕÕ# $
;
ÕÕ$ %
a
ÖÖ 
[
ÖÖ 
$num
ÖÖ 
]
ÖÖ 
=
ÖÖ 
y1r
ÖÖ 
+
ÖÖ 
y5r
ÖÖ 
;
ÖÖ 
a
×× 
[
×× 
$num
×× 
]
×× 
=
×× 
y1i
×× 
+
×× 
y5i
×× 
;
×× 
a
ØØ 
[
ØØ 
$num
ØØ 
]
ØØ 
=
ØØ 
y1r
ØØ 
-
ØØ 
y5r
ØØ 
;
ØØ 
a
ÙÙ 
[
ÙÙ 
$num
ÙÙ 
]
ÙÙ 
=
ÙÙ 
y1i
ÙÙ 
-
ÙÙ 
y5i
ÙÙ 
;
ÙÙ 
a
ÚÚ 
[
ÚÚ 
$num
ÚÚ 
]
ÚÚ 
=
ÚÚ 
y3r
ÚÚ 
-
ÚÚ 
y7i
ÚÚ 
;
ÚÚ 
a
ÛÛ 
[
ÛÛ 
$num
ÛÛ 
]
ÛÛ 
=
ÛÛ 
y3i
ÛÛ 
+
ÛÛ 
y7r
ÛÛ 
;
ÛÛ 
a
ÜÜ 
[
ÜÜ 
$num
ÜÜ 
]
ÜÜ 
=
ÜÜ 
y3r
ÜÜ 
+
ÜÜ 
y7i
ÜÜ 
;
ÜÜ 
a
ÝÝ 
[
ÝÝ 
$num
ÝÝ 
]
ÝÝ 
=
ÝÝ 
y3i
ÝÝ 
-
ÝÝ 
y7r
ÝÝ 
;
ÝÝ 
a
ÞÞ 
[
ÞÞ 
$num
ÞÞ 
]
ÞÞ 
=
ÞÞ 
y0r
ÞÞ 
+
ÞÞ 
y4r
ÞÞ 
;
ÞÞ 
a
ßß 
[
ßß 
$num
ßß 
]
ßß 
=
ßß 
y0i
ßß 
+
ßß 
y4i
ßß 
;
ßß 
a
àà 
[
àà 
$num
àà 
]
àà 
=
àà 
y0r
àà 
-
àà 
y4r
àà 
;
àà 
a
áá 
[
áá 
$num
áá 
]
áá 
=
áá 
y0i
áá 
-
áá 
y4i
áá 
;
áá 
a
ââ 
[
ââ 
$num
ââ 
]
ââ 
=
ââ 
y2r
ââ 
-
ââ 
y6i
ââ 
;
ââ 
a
ãã 
[
ãã 
$num
ãã 
]
ãã 
=
ãã 
y2i
ãã 
+
ãã 
y6r
ãã 
;
ãã 
a
ää 
[
ää 
$num
ää 
]
ää 
=
ää 
y2r
ää 
+
ää 
y6i
ää 
;
ää 
a
åå 
[
åå 
$num
åå 
]
åå 
=
åå 
y2i
åå 
-
åå 
y6r
åå 
;
åå 
}
ææ 	
static
éé 
void
éé 
cftf082
éé 
(
éé 
double
éé "
*
éé" #
a
éé$ %
)
éé% &
{
êê 	
double
ëë 
wn4r
ëë 
,
ëë 
wk1r
ëë 
,
ëë 
wk1i
ëë #
,
ëë# $
x0r
ëë% (
,
ëë( )
x0i
ëë* -
,
ëë- .
x1r
ëë/ 2
,
ëë2 3
x1i
ëë4 7
,
ëë7 8
y0r
ìì 
,
ìì 
y0i
ìì 
,
ìì 
y1r
ìì 
,
ìì 
y1i
ìì "
,
ìì" #
y2r
ìì$ '
,
ìì' (
y2i
ìì) ,
,
ìì, -
y3r
ìì. 1
,
ìì1 2
y3i
ìì3 6
,
ìì6 7
y4r
íí 
,
íí 
y4i
íí 
,
íí 
y5r
íí 
,
íí 
y5i
íí "
,
íí" #
y6r
íí$ '
,
íí' (
y6i
íí) ,
,
íí, -
y7r
íí. 1
,
íí1 2
y7i
íí3 6
;
íí6 7
wn4r
ïï 
=
ïï 
WR5000
ïï 
;
ïï 
wk1r
ðð 
=
ðð 
WR2500
ðð 
;
ðð 
wk1i
ññ 
=
ññ 
WI2500
ññ 
;
ññ 
y0r
òò 
=
òò 
a
òò 
[
òò 
$num
òò 
]
òò 
-
òò 
a
òò 
[
òò 
$num
òò 
]
òò 
;
òò 
y0i
óó 
=
óó 
a
óó 
[
óó 
$num
óó 
]
óó 
+
óó 
a
óó 
[
óó 
$num
óó 
]
óó 
;
óó 
y1r
ôô 
=
ôô 
a
ôô 
[
ôô 
$num
ôô 
]
ôô 
+
ôô 
a
ôô 
[
ôô 
$num
ôô 
]
ôô 
;
ôô 
y1i
õõ 
=
õõ 
a
õõ 
[
õõ 
$num
õõ 
]
õõ 
-
õõ 
a
õõ 
[
õõ 
$num
õõ 
]
õõ 
;
õõ 
x0r
öö 
=
öö 
a
öö 
[
öö 
$num
öö 
]
öö 
-
öö 
a
öö 
[
öö 
$num
öö 
]
öö 
;
öö 
x0i
÷÷ 
=
÷÷ 
a
÷÷ 
[
÷÷ 
$num
÷÷ 
]
÷÷ 
+
÷÷ 
a
÷÷ 
[
÷÷ 
$num
÷÷ 
]
÷÷ 
;
÷÷ 
y2r
øø 
=
øø 
wn4r
øø 
*
øø 
(
øø 
x0r
øø 
-
øø 
x0i
øø  #
)
øø# $
;
øø$ %
y2i
ùù 
=
ùù 
wn4r
ùù 
*
ùù 
(
ùù 
x0i
ùù 
+
ùù 
x0r
ùù  #
)
ùù# $
;
ùù$ %
x0r
úú 
=
úú 
a
úú 
[
úú 
$num
úú 
]
úú 
+
úú 
a
úú 
[
úú 
$num
úú 
]
úú 
;
úú 
x0i
ûû 
=
ûû 
a
ûû 
[
ûû 
$num
ûû 
]
ûû 
-
ûû 
a
ûû 
[
ûû 
$num
ûû 
]
ûû 
;
ûû 
y3r
üü 
=
üü 
wn4r
üü 
*
üü 
(
üü 
x0r
üü 
-
üü 
x0i
üü  #
)
üü# $
;
üü$ %
y3i
ýý 
=
ýý 
wn4r
ýý 
*
ýý 
(
ýý 
x0i
ýý 
+
ýý 
x0r
ýý  #
)
ýý# $
;
ýý$ %
x0r
þþ 
=
þþ 
a
þþ 
[
þþ 
$num
þþ 
]
þþ 
-
þþ 
a
þþ 
[
þþ 
$num
þþ 
]
þþ 
;
þþ 
x0i
ÿÿ 
=
ÿÿ 
a
ÿÿ 
[
ÿÿ 
$num
ÿÿ 
]
ÿÿ 
+
ÿÿ 
a
ÿÿ 
[
ÿÿ 
$num
ÿÿ 
]
ÿÿ 
;
ÿÿ 
y4r
 
=
 
wk1r
 
*
 
x0r
 
-
 
wk1i
 #
*
$ %
x0i
& )
;
) *
y4i
 
=
 
wk1r
 
*
 
x0i
 
+
 
wk1i
 #
*
$ %
x0r
& )
;
) *
x0r
 
=
 
a
 
[
 
$num
 
]
 
+
 
a
 
[
 
$num
 
]
 
;
 
x0i
 
=
 
a
 
[
 
$num
 
]
 
-
 
a
 
[
 
$num
 
]
 
;
 
y5r
 
=
 
wk1i
 
*
 
x0r
 
-
 
wk1r
 #
*
$ %
x0i
& )
;
) *
y5i
 
=
 
wk1i
 
*
 
x0i
 
+
 
wk1r
 #
*
$ %
x0r
& )
;
) *
x0r
 
=
 
a
 
[
 
$num
 
]
 
-
 
a
 
[
 
$num
 
]
 
;
 
x0i
 
=
 
a
 
[
 
$num
 
]
 
+
 
a
 
[
 
$num
 
]
 
;
 
y6r
 
=
 
wk1i
 
*
 
x0r
 
-
 
wk1r
 #
*
$ %
x0i
& )
;
) *
y6i
 
=
 
wk1i
 
*
 
x0i
 
+
 
wk1r
 #
*
$ %
x0r
& )
;
) *
x0r
 
=
 
a
 
[
 
$num
 
]
 
+
 
a
 
[
 
$num
 
]
 
;
 
x0i
 
=
 
a
 
[
 
$num
 
]
 
-
 
a
 
[
 
$num
 
]
 
;
 
y7r
 
=
 
wk1r
 
*
 
x0r
 
-
 
wk1i
 #
*
$ %
x0i
& )
;
) *
y7i
 
=
 
wk1r
 
*
 
x0i
 
+
 
wk1i
 #
*
$ %
x0r
& )
;
) *
x0r
 
=
 
y0r
 
+
 
y2r
 
;
 
x0i
 
=
 
y0i
 
+
 
y2i
 
;
 
x1r
 
=
 
y4r
 
+
 
y6r
 
;
 
x1i
 
=
 
y4i
 
+
 
y6i
 
;
 
a
 
[
 
$num
 
]
 
=
 
x0r
 
+
 
x1r
 
;
 
a
 
[
 
$num
 
]
 
=
 
x0i
 
+
 
x1i
 
;
 
a
 
[
 
$num
 
]
 
=
 
x0r
 
-
 
x1r
 
;
 
a
 
[
 
$num
 
]
 
=
 
x0i
 
-
 
x1i
 
;
 
x0r
 
=
 
y0r
 
-
 
y2r
 
;
 
x0i
 
=
 
y0i
 
-
 
y2i
 
;
 
x1r
 
=
 
y4r
 
-
 
y6r
 
;
 
x1i
 
=
 
y4i
 
-
 
y6i
 
;
 
a
 
[
 
$num
 
]
 
=
 
x0r
 
-
 
x1i
 
;
 
a
 
[
 
$num
 
]
 
=
 
x0i
 
+
 
x1r
 
;
 
a
 
[
 
$num
 
]
 
=
 
x0r
 
+
 
x1i
 
;
 
a
 
[
 
$num
 
]
 
=
 
x0i
 
-
 
x1r
 
;
 
x0r
 
=
 
y1r
 
-
 
y3i
 
;
 
x0i
 
=
 
y1i
 
+
 
y3r
 
;
 
x1r
   
=
   
y5r
   
-
   
y7r
   
;
   
x1i
¡¡ 
=
¡¡ 
y5i
¡¡ 
-
¡¡ 
y7i
¡¡ 
;
¡¡ 
a
¢¢ 
[
¢¢ 
$num
¢¢ 
]
¢¢ 
=
¢¢ 
x0r
¢¢ 
+
¢¢ 
x1r
¢¢ 
;
¢¢ 
a
££ 
[
££ 
$num
££ 
]
££ 
=
££ 
x0i
££ 
+
££ 
x1i
££ 
;
££ 
a
¤¤ 
[
¤¤ 
$num
¤¤ 
]
¤¤ 
=
¤¤ 
x0r
¤¤ 
-
¤¤ 
x1r
¤¤ 
;
¤¤ 
a
¥¥ 
[
¥¥ 
$num
¥¥ 
]
¥¥ 
=
¥¥ 
x0i
¥¥ 
-
¥¥ 
x1i
¥¥ 
;
¥¥ 
x0r
¦¦ 
=
¦¦ 
y1r
¦¦ 
+
¦¦ 
y3i
¦¦ 
;
¦¦ 
x0i
§§ 
=
§§ 
y1i
§§ 
-
§§ 
y3r
§§ 
;
§§ 
x1r
¨¨ 
=
¨¨ 
y5r
¨¨ 
+
¨¨ 
y7r
¨¨ 
;
¨¨ 
x1i
©© 
=
©© 
y5i
©© 
+
©© 
y7i
©© 
;
©© 
a
ªª 
[
ªª 
$num
ªª 
]
ªª 
=
ªª 
x0r
ªª 
-
ªª 
x1i
ªª 
;
ªª 
a
«« 
[
«« 
$num
«« 
]
«« 
=
«« 
x0i
«« 
+
«« 
x1r
«« 
;
«« 
a
¬¬ 
[
¬¬ 
$num
¬¬ 
]
¬¬ 
=
¬¬ 
x0r
¬¬ 
+
¬¬ 
x1i
¬¬ 
;
¬¬ 
a
­­ 
[
­­ 
$num
­­ 
]
­­ 
=
­­ 
x0i
­­ 
-
­­ 
x1r
­­ 
;
­­ 
}
®® 	
static
±± 
void
±± 
cftf040
±± 
(
±± 
double
±± "
*
±±" #
a
±±$ %
)
±±% &
{
²² 	
double
³³ 
x0r
³³ 
,
³³ 
x0i
³³ 
,
³³ 
x1r
³³  
,
³³  !
x1i
³³" %
,
³³% &
x2r
³³' *
,
³³* +
x2i
³³, /
,
³³/ 0
x3r
³³1 4
,
³³4 5
x3i
³³6 9
;
³³9 :
x0r
µµ 
=
µµ 
a
µµ 
[
µµ 
$num
µµ 
]
µµ 
+
µµ 
a
µµ 
[
µµ 
$num
µµ 
]
µµ 
;
µµ 
x0i
¶¶ 
=
¶¶ 
a
¶¶ 
[
¶¶ 
$num
¶¶ 
]
¶¶ 
+
¶¶ 
a
¶¶ 
[
¶¶ 
$num
¶¶ 
]
¶¶ 
;
¶¶ 
x1r
·· 
=
·· 
a
·· 
[
·· 
$num
·· 
]
·· 
-
·· 
a
·· 
[
·· 
$num
·· 
]
·· 
;
·· 
x1i
¸¸ 
=
¸¸ 
a
¸¸ 
[
¸¸ 
$num
¸¸ 
]
¸¸ 
-
¸¸ 
a
¸¸ 
[
¸¸ 
$num
¸¸ 
]
¸¸ 
;
¸¸ 
x2r
¹¹ 
=
¹¹ 
a
¹¹ 
[
¹¹ 
$num
¹¹ 
]
¹¹ 
+
¹¹ 
a
¹¹ 
[
¹¹ 
$num
¹¹ 
]
¹¹ 
;
¹¹ 
x2i
ºº 
=
ºº 
a
ºº 
[
ºº 
$num
ºº 
]
ºº 
+
ºº 
a
ºº 
[
ºº 
$num
ºº 
]
ºº 
;
ºº 
x3r
»» 
=
»» 
a
»» 
[
»» 
$num
»» 
]
»» 
-
»» 
a
»» 
[
»» 
$num
»» 
]
»» 
;
»» 
x3i
¼¼ 
=
¼¼ 
a
¼¼ 
[
¼¼ 
$num
¼¼ 
]
¼¼ 
-
¼¼ 
a
¼¼ 
[
¼¼ 
$num
¼¼ 
]
¼¼ 
;
¼¼ 
a
½½ 
[
½½ 
$num
½½ 
]
½½ 
=
½½ 
x0r
½½ 
+
½½ 
x2r
½½ 
;
½½ 
a
¾¾ 
[
¾¾ 
$num
¾¾ 
]
¾¾ 
=
¾¾ 
x0i
¾¾ 
+
¾¾ 
x2i
¾¾ 
;
¾¾ 
a
¿¿ 
[
¿¿ 
$num
¿¿ 
]
¿¿ 
=
¿¿ 
x1r
¿¿ 
-
¿¿ 
x3i
¿¿ 
;
¿¿ 
a
ÀÀ 
[
ÀÀ 
$num
ÀÀ 
]
ÀÀ 
=
ÀÀ 
x1i
ÀÀ 
+
ÀÀ 
x3r
ÀÀ 
;
ÀÀ 
a
ÁÁ 
[
ÁÁ 
$num
ÁÁ 
]
ÁÁ 
=
ÁÁ 
x0r
ÁÁ 
-
ÁÁ 
x2r
ÁÁ 
;
ÁÁ 
a
ÂÂ 
[
ÂÂ 
$num
ÂÂ 
]
ÂÂ 
=
ÂÂ 
x0i
ÂÂ 
-
ÂÂ 
x2i
ÂÂ 
;
ÂÂ 
a
ÃÃ 
[
ÃÃ 
$num
ÃÃ 
]
ÃÃ 
=
ÃÃ 
x1r
ÃÃ 
+
ÃÃ 
x3i
ÃÃ 
;
ÃÃ 
a
ÄÄ 
[
ÄÄ 
$num
ÄÄ 
]
ÄÄ 
=
ÄÄ 
x1i
ÄÄ 
-
ÄÄ 
x3r
ÄÄ 
;
ÄÄ 
}
ÅÅ 	
static
ÈÈ 
void
ÈÈ 
cftb040
ÈÈ 
(
ÈÈ 
double
ÈÈ "
*
ÈÈ" #
a
ÈÈ$ %
)
ÈÈ% &
{
ÉÉ 	
double
ÊÊ 
x0r
ÊÊ 
,
ÊÊ 
x0i
ÊÊ 
,
ÊÊ 
x1r
ÊÊ  
,
ÊÊ  !
x1i
ÊÊ" %
,
ÊÊ% &
x2r
ÊÊ' *
,
ÊÊ* +
x2i
ÊÊ, /
,
ÊÊ/ 0
x3r
ÊÊ1 4
,
ÊÊ4 5
x3i
ÊÊ6 9
;
ÊÊ9 :
x0r
ÌÌ 
=
ÌÌ 
a
ÌÌ 
[
ÌÌ 
$num
ÌÌ 
]
ÌÌ 
+
ÌÌ 
a
ÌÌ 
[
ÌÌ 
$num
ÌÌ 
]
ÌÌ 
;
ÌÌ 
x0i
ÍÍ 
=
ÍÍ 
a
ÍÍ 
[
ÍÍ 
$num
ÍÍ 
]
ÍÍ 
+
ÍÍ 
a
ÍÍ 
[
ÍÍ 
$num
ÍÍ 
]
ÍÍ 
;
ÍÍ 
x1r
ÎÎ 
=
ÎÎ 
a
ÎÎ 
[
ÎÎ 
$num
ÎÎ 
]
ÎÎ 
-
ÎÎ 
a
ÎÎ 
[
ÎÎ 
$num
ÎÎ 
]
ÎÎ 
;
ÎÎ 
x1i
ÏÏ 
=
ÏÏ 
a
ÏÏ 
[
ÏÏ 
$num
ÏÏ 
]
ÏÏ 
-
ÏÏ 
a
ÏÏ 
[
ÏÏ 
$num
ÏÏ 
]
ÏÏ 
;
ÏÏ 
x2r
ÐÐ 
=
ÐÐ 
a
ÐÐ 
[
ÐÐ 
$num
ÐÐ 
]
ÐÐ 
+
ÐÐ 
a
ÐÐ 
[
ÐÐ 
$num
ÐÐ 
]
ÐÐ 
;
ÐÐ 
x2i
ÑÑ 
=
ÑÑ 
a
ÑÑ 
[
ÑÑ 
$num
ÑÑ 
]
ÑÑ 
+
ÑÑ 
a
ÑÑ 
[
ÑÑ 
$num
ÑÑ 
]
ÑÑ 
;
ÑÑ 
x3r
ÒÒ 
=
ÒÒ 
a
ÒÒ 
[
ÒÒ 
$num
ÒÒ 
]
ÒÒ 
-
ÒÒ 
a
ÒÒ 
[
ÒÒ 
$num
ÒÒ 
]
ÒÒ 
;
ÒÒ 
x3i
ÓÓ 
=
ÓÓ 
a
ÓÓ 
[
ÓÓ 
$num
ÓÓ 
]
ÓÓ 
-
ÓÓ 
a
ÓÓ 
[
ÓÓ 
$num
ÓÓ 
]
ÓÓ 
;
ÓÓ 
a
ÔÔ 
[
ÔÔ 
$num
ÔÔ 
]
ÔÔ 
=
ÔÔ 
x0r
ÔÔ 
+
ÔÔ 
x2r
ÔÔ 
;
ÔÔ 
a
ÕÕ 
[
ÕÕ 
$num
ÕÕ 
]
ÕÕ 
=
ÕÕ 
x0i
ÕÕ 
+
ÕÕ 
x2i
ÕÕ 
;
ÕÕ 
a
ÖÖ 
[
ÖÖ 
$num
ÖÖ 
]
ÖÖ 
=
ÖÖ 
x1r
ÖÖ 
+
ÖÖ 
x3i
ÖÖ 
;
ÖÖ 
a
×× 
[
×× 
$num
×× 
]
×× 
=
×× 
x1i
×× 
-
×× 
x3r
×× 
;
×× 
a
ØØ 
[
ØØ 
$num
ØØ 
]
ØØ 
=
ØØ 
x0r
ØØ 
-
ØØ 
x2r
ØØ 
;
ØØ 
a
ÙÙ 
[
ÙÙ 
$num
ÙÙ 
]
ÙÙ 
=
ÙÙ 
x0i
ÙÙ 
-
ÙÙ 
x2i
ÙÙ 
;
ÙÙ 
a
ÚÚ 
[
ÚÚ 
$num
ÚÚ 
]
ÚÚ 
=
ÚÚ 
x1r
ÚÚ 
-
ÚÚ 
x3i
ÚÚ 
;
ÚÚ 
a
ÛÛ 
[
ÛÛ 
$num
ÛÛ 
]
ÛÛ 
=
ÛÛ 
x1i
ÛÛ 
+
ÛÛ 
x3r
ÛÛ 
;
ÛÛ 
}
ÜÜ 	
static
ßß 
void
ßß 
cftx020
ßß 
(
ßß 
double
ßß "
*
ßß" #
a
ßß$ %
)
ßß% &
{
àà 	
double
áá 
x0r
áá 
,
áá 
x0i
áá 
;
áá 
x0r
ãã 
=
ãã 
a
ãã 
[
ãã 
$num
ãã 
]
ãã 
-
ãã 
a
ãã 
[
ãã 
$num
ãã 
]
ãã 
;
ãã 
x0i
ää 
=
ää 
a
ää 
[
ää 
$num
ää 
]
ää 
-
ää 
a
ää 
[
ää 
$num
ää 
]
ää 
;
ää 
a
åå 
[
åå 
$num
åå 
]
åå 
+=
åå 
a
åå 
[
åå 
$num
åå 
]
åå 
;
åå 
a
ææ 
[
ææ 
$num
ææ 
]
ææ 
+=
ææ 
a
ææ 
[
ææ 
$num
ææ 
]
ææ 
;
ææ 
a
çç 
[
çç 
$num
çç 
]
çç 
=
çç 
x0r
çç 
;
çç 
a
èè 
[
èè 
$num
èè 
]
èè 
=
èè 
x0i
èè 
;
èè 
}
éé 	
}
 
} Ú
2E:\GitHub\inguz-DSPUtil\InguzDSPUtilNew\Hilbert.cs
	namespace 	
DSPUtil
 
{ 
public 

class 
Dirac 
: 
SoundObj !
{ 
private 
int 
_length 
; 
public 
Dirac 
( 
int 
length 
)  
{ 	
if 
( 
length 
% 
$num 
== 
$num 
)  
{ 
length 
++ 
; 
} 
_length 
= 
length 
; 
base 
. 
NumChannels 
= 
$num  
;  !
} 	
public 
override 
int 

Iterations &
{   	
get!! 
{!! 
return!! 
_length!!  
;!!  !
}!!" #
}"" 	
public'' 
override'' 
ushort'' 
NumChannels'' *
{(( 	
get)) 
{** 
return++ 
$num++ 
;++ 
},, 
set-- 
{.. 
if// 
(// 
value// 
!=// 
$num// 
)// 
{00 
throw11 
new11 '
ArgumentOutOfRangeException11 9
(119 :
)11: ;
;11; <
}22 
}33 
}44 	
public99 
override99 
IEnumerator99 #
<99# $
ISample99$ +
>99+ ,
Samples99- 4
{:: 	
get;; 
{<< 
int== 
mid== 
=== 
(== 
int== 
)== 
(==  
(==  !
_length==! (
-==) *
$num==+ ,
)==, -
/==. /
$num==0 1
)==1 2
;==2 3
for>> 
(>> 
int>> 
j>> 
=>> 
$num>> 
;>> 
j>>  !
<>>" #
_length>>$ +
;>>+ ,
j>>- .
++>>. 0
)>>0 1
{?? 
double@@ 
val@@ 
=@@  
$num@@! "
;@@" #
intAA 
nAA 
=AA 
jAA 
-AA 
midAA  #
;AA# $
ifBB 
(BB 
nBB 
==BB 
$numBB 
)BB 
{CC 
valDD 
=DD 
$numDD 
;DD  
}EE 
yieldFF 
returnFF  
newFF! $
SampleFF% +
(FF+ ,
valFF, /
)FF/ 0
;FF0 1
}GG 
}HH 
}II 	
}JJ 
publicOO 

classOO 
HilbertOO 
:OO 
SoundObjOO #
{PP 
privateQQ 
intQQ 
_lengthQQ 
;QQ 
publicWW 
HilbertWW 
(WW 
intWW 
lengthWW !
)WW! "
{XX 	
ifYY 
(YY 
lengthYY 
%YY 
$numYY 
==YY 
$numYY 
)YY  
{ZZ 
length[[ 
++[[ 
;[[ 
}\\ 
_length]] 
=]] 
length]] 
;]] 
base^^ 
.^^ 
NumChannels^^ 
=^^ 
$num^^  
;^^  !
}__ 	
publicbb 
overridebb 
intbb 

Iterationsbb &
{cc 	
getdd 
{dd 
returndd 
_lengthdd  
;dd  !
}dd" #
}ee 	
publicjj 
overridejj 
ushortjj 
NumChannelsjj *
{kk 	
getll 
{mm 
returnnn 
$numnn 
;nn 
}oo 
setpp 
{qq 
ifrr 
(rr 
valuerr 
!=rr 
$numrr 
)rr 
{ss 
throwtt 
newtt '
ArgumentOutOfRangeExceptiontt 9
(tt9 :
)tt: ;
;tt; <
}uu 
}vv 
}ww 	
public|| 
override|| 
IEnumerator|| #
<||# $
ISample||$ +
>||+ ,
Samples||- 4
{}} 	
get~~ 
{ 
int
 
mid
 
=
 
(
 
int
 
)
 
(
  
(
  !
_length
! (
-
) *
$num
+ ,
)
, -
/
. /
$num
0 1
)
1 2
;
2 3
for
 
(
 
int
 
j
 
=
 
$num
 
;
 
j
  !
<
" #
_length
$ +
;
+ ,
j
- .
++
. 0
)
0 1
{
 
int
 
n
 
=
 
j
 
-
 
mid
  #
;
# $
double
 
val
 
=
  
$num
! "
;
" #
if
 
(
 
n
 
%
 
$num
 
!=
  
$num
! "
)
" #
{
 
val
 
=
 
$num
 
/
  !
(
" #
Math
# '
.
' (
PI
( *
*
+ ,
n
- .
)
. /
;
/ 0
}
 
yield
 
return
  
new
! $
Sample
% +
(
+ ,
val
, /
)
/ 0
;
0 1
}
 
}
 
}
 	
}
 
public
 

class
 
HilbertEnvelope
  
:
! "
SoundObj
# +
{
 
private
 
int
 
_length
 
;
 
private
 
	ISoundObj
 
_i
 
;
 
private
 
	ISoundObj
 
_r
 
;
 
public
 
HilbertEnvelope
 
(
 
int
 "
length
# )
)
) *
{
 	
if
   
(
   
length
   
%
   
$num
   
==
   
$num
   
)
    
{
¡¡ 
length
¢¢ 
++
¢¢ 
;
¢¢ 
}
££ 
_length
¤¤ 
=
¤¤ 
length
¤¤ 
;
¤¤ 
base
¥¥ 
.
¥¥ 
NumChannels
¥¥ 
=
¥¥ 
$num
¥¥  
;
¥¥  !
_i
¨¨ 
=
¨¨ 
new
¨¨ 
FastConvolver
¨¨ "
(
¨¨" #
new
¨¨# &
Hilbert
¨¨' .
(
¨¨. /
length
¨¨/ 5
)
¨¨5 6
)
¨¨6 7
;
¨¨7 8
_r
«« 
=
«« 
new
«« 
FastConvolver
«« "
(
««" #
new
««# &
Dirac
««' ,
(
««, -
length
««- 3
)
««3 4
)
««4 5
;
««5 6
}
¬¬ 	
public
®® 
override
®® 
IEnumerator
®® #
<
®®# $
ISample
®®$ +
>
®®+ ,
Samples
®®- 4
{
¯¯ 	
get
°° 
{
±± 
if
²² 
(
²² 
_input
²² 
==
²² 
null
²² "
)
²²" #
{
³³ 
yield
´´ 
break
´´ 
;
´´  
}
µµ 
_i
·· 
.
·· 
Input
·· 
=
·· 
_input
·· !
;
··! "
_r
¸¸ 
.
¸¸ 
Input
¸¸ 
=
¸¸ 
_input
¸¸ !
;
¸¸! "
ushort
ºº 
nc
ºº 
=
ºº 
_input
ºº "
.
ºº" #
NumChannels
ºº# .
;
ºº. /
IEnumerator
¼¼ 
<
¼¼ 
ISample
¼¼ #
>
¼¼# $
ienum
¼¼% *
=
¼¼+ ,
_i
¼¼- /
.
¼¼/ 0
Samples
¼¼0 7
;
¼¼7 8
IEnumerator
½½ 
<
½½ 
ISample
½½ #
>
½½# $
renum
½½% *
=
½½+ ,
_r
½½- /
.
½½/ 0
Samples
½½0 7
;
½½7 8
bool
¿¿ 
imore
¿¿ 
=
¿¿ 
ienum
¿¿ "
.
¿¿" #
MoveNext
¿¿# +
(
¿¿+ ,
)
¿¿, -
;
¿¿- .
bool
ÀÀ 
rmore
ÀÀ 
=
ÀÀ 
renum
ÀÀ "
.
ÀÀ" #
MoveNext
ÀÀ# +
(
ÀÀ+ ,
)
ÀÀ, -
;
ÀÀ- .
while
ÁÁ 
(
ÁÁ 
imore
ÁÁ 
&&
ÁÁ 
rmore
ÁÁ  %
)
ÁÁ% &
{
ÂÂ 
ISample
ÃÃ 
icurr
ÃÃ !
=
ÃÃ" #
ienum
ÃÃ$ )
.
ÃÃ) *
Current
ÃÃ* 1
;
ÃÃ1 2
ISample
ÄÄ 
rcurr
ÄÄ !
=
ÄÄ" #
renum
ÄÄ$ )
.
ÄÄ) *
Current
ÄÄ* 1
;
ÄÄ1 2
ISample
ÅÅ 
ret
ÅÅ 
;
ÅÅ  
if
ÆÆ 
(
ÆÆ 
nc
ÆÆ 
==
ÆÆ 
$num
ÆÆ 
)
ÆÆ  
{
ÇÇ 
ret
ÈÈ 
=
ÈÈ 
new
ÈÈ !
Sample2
ÈÈ" )
(
ÈÈ) *
)
ÈÈ* +
;
ÈÈ+ ,
}
ÉÉ 
else
ÊÊ 
{
ËË 
ret
ÌÌ 
=
ÌÌ 
new
ÌÌ !
Sample
ÌÌ" (
(
ÌÌ( )
nc
ÌÌ) +
)
ÌÌ+ ,
;
ÌÌ, -
}
ÍÍ 
for
ÎÎ 
(
ÎÎ 
ushort
ÎÎ 
c
ÎÎ  !
=
ÎÎ" #
$num
ÎÎ$ %
;
ÎÎ% &
c
ÎÎ' (
<
ÎÎ) *
nc
ÎÎ+ -
;
ÎÎ- .
c
ÎÎ/ 0
++
ÎÎ0 2
)
ÎÎ2 3
{
ÏÏ 
ret
ÐÐ 
[
ÐÐ 
c
ÐÐ 
]
ÐÐ 
=
ÐÐ  
new
ÐÐ! $
Complex
ÐÐ% ,
(
ÐÐ, -
rcurr
ÐÐ- 2
[
ÐÐ2 3
c
ÐÐ3 4
]
ÐÐ4 5
,
ÐÐ5 6
icurr
ÐÐ7 <
[
ÐÐ< =
c
ÐÐ= >
]
ÐÐ> ?
)
ÐÐ? @
.
ÐÐ@ A
	Magnitude
ÐÐA J
;
ÐÐJ K
}
ÑÑ 
yield
ÒÒ 
return
ÒÒ  
ret
ÒÒ! $
;
ÒÒ$ %
imore
ÔÔ 
=
ÔÔ 
ienum
ÔÔ !
.
ÔÔ! "
MoveNext
ÔÔ" *
(
ÔÔ* +
)
ÔÔ+ ,
;
ÔÔ, -
rmore
ÕÕ 
=
ÕÕ 
renum
ÕÕ !
.
ÕÕ! "
MoveNext
ÕÕ" *
(
ÕÕ* +
)
ÕÕ+ ,
;
ÕÕ, -
}
ÖÖ 
}
×× 
}
ØØ 	
}
ÙÙ 
public
àà 

class
àà 
PhaseMultiplier
àà  
:
àà! "
SoundObj
àà# +
{
áá 
private
ââ 
double
ââ 
_a
ââ 
;
ââ 
private
ãã 
double
ãã 
_b
ãã 
;
ãã 
private
ää 
int
ää 
_length
ää 
;
ää 
private
åå 
double
åå 
_f
åå 
;
åå 
public
ìì 
PhaseMultiplier
ìì 
(
ìì 
Complex
ìì &
phase
ìì' ,
,
ìì, -
int
ìì. 1
length
ìì2 8
)
ìì8 9
{
íí 	
_init
îî 
(
îî 
phase
îî 
,
îî 
length
îî 
,
îî  
$num
îî! "
,
îî" #
$num
îî$ %
)
îî% &
;
îî& '
}
ïï 	
public
ññ 
PhaseMultiplier
ññ 
(
ññ 
Complex
ññ &
phase
ññ' ,
,
ññ, -
int
ññ. 1
length
ññ2 8
,
ññ8 9
uint
ññ: >

sampleRate
ññ? I
)
ññI J
{
òò 	
_init
óó 
(
óó 
phase
óó 
,
óó 
length
óó 
,
óó  

sampleRate
óó! +
,
óó+ ,
$num
óó- .
)
óó. /
;
óó/ 0
}
ôô 	
public
öö 
PhaseMultiplier
öö 
(
öö 
Complex
öö &
phase
öö' ,
,
öö, -
int
öö. 1
length
öö2 8
,
öö8 9
uint
öö: >

sampleRate
öö? I
,
ööI J
double
ööK Q

cornerFreq
ööR \
)
öö\ ]
{
÷÷ 	
_init
øø 
(
øø 
phase
øø 
,
øø 
length
øø 
,
øø  

sampleRate
øø! +
,
øø+ ,

cornerFreq
øø- 7
)
øø7 8
;
øø8 9
}
ùù 	
private
ûû 
void
ûû 
_init
ûû 
(
ûû 
Complex
ûû "
phase
ûû# (
,
ûû( )
int
ûû* -
length
ûû. 4
,
ûû4 5
uint
ûû6 :

sampleRate
ûû; E
,
ûûE F
double
ûûG M

cornerFreq
ûûN X
)
ûûX Y
{
üü 	
if
ýý 
(
ýý 
length
ýý 
%
ýý 
$num
ýý 
==
ýý 
$num
ýý 
)
ýý  
{
þþ 
length
ÿÿ 
++
ÿÿ 
;
ÿÿ 
}
 
_a
 
=
 
phase
 
.
 
Re
 
;
 
_b
 
=
 
phase
 
.
 
Im
 
;
 
_length
 
=
 
length
 
;
 

SampleRate
 
=
 

sampleRate
 #
;
# $
_f
 
=
 

cornerFreq
 
;
 
base
 
.
 
NumChannels
 
=
 
$num
  
;
  !
}
 	
public
 
double
 
PhaseRe
 
{
 	
get
 
{
 
return
 
_a
 
;
 
}
 
set
 
{
 
_a
 
=
 
value
 
;
 
}
 
}
 	
public
 
double
 
PhaseIm
 
{
 	
get
 
{
 
return
 
_b
 
;
 
}
 
set
 
{
 
_b
 
=
 
value
 
;
 
}
 
}
 	
public
¡¡ 
override
¡¡ 
int
¡¡ 

Iterations
¡¡ &
{
¢¢ 	
get
££ 
{
££ 
return
££ 
_length
££  
;
££  !
}
££" #
}
¤¤ 	
public
©© 
override
©© 
ushort
©© 
NumChannels
©© *
{
ªª 	
get
«« 
{
¬¬ 
return
­­ 
$num
­­ 
;
­­ 
}
®® 
set
¯¯ 
{
°° 
if
±± 
(
±± 
value
±± 
!=
±± 
$num
±± 
)
±± 
{
²² 
throw
³³ 
new
³³ )
ArgumentOutOfRangeException
³³ 9
(
³³9 :
)
³³: ;
;
³³; <
}
´´ 
}
µµ 
}
¶¶ 	
public
¸¸ 
override
¸¸ 
IEnumerator
¸¸ #
<
¸¸# $
ISample
¸¸$ +
>
¸¸+ ,
Samples
¸¸- 4
{
¹¹ 	
get
ºº 
{
»» 
int
¼¼ 
mid
¼¼ 
=
¼¼ 
(
¼¼ 
int
¼¼ 
)
¼¼ 
(
¼¼  
(
¼¼  !
_length
¼¼! (
-
¼¼) *
$num
¼¼+ ,
)
¼¼, -
/
¼¼. /
$num
¼¼0 1
)
¼¼1 2
;
¼¼2 3
Hilbert
¿¿ 
hilbert
¿¿ 
=
¿¿  !
new
¿¿" %
Hilbert
¿¿& -
(
¿¿- .
_length
¿¿. 5
)
¿¿5 6
;
¿¿6 7
BlackmanHarris
ÂÂ 
window
ÂÂ %
=
ÂÂ& '
new
ÂÂ( +
BlackmanHarris
ÂÂ, :
(
ÂÂ: ;
mid
ÂÂ; >
,
ÂÂ> ?
mid
ÂÂ@ C
)
ÂÂC D
;
ÂÂD E
if
ÄÄ 
(
ÄÄ 
_f
ÄÄ 
>
ÄÄ 
$num
ÄÄ 
)
ÄÄ 
{
ÅÅ 
FilterProfile
ÆÆ !
fp
ÆÆ" $
=
ÆÆ% &
new
ÆÆ' *
FilterProfile
ÆÆ+ 8
(
ÆÆ8 9
)
ÆÆ9 :
;
ÆÆ: ;
fp
ÇÇ 
.
ÇÇ 
Add
ÇÇ 
(
ÇÇ 
new
ÇÇ 
FreqGain
ÇÇ '
(
ÇÇ' (
$num
ÇÇ( )
,
ÇÇ) *
$num
ÇÇ+ ,
)
ÇÇ, -
)
ÇÇ- .
;
ÇÇ. /
fp
ÈÈ 
.
ÈÈ 
Add
ÈÈ 
(
ÈÈ 
new
ÈÈ 
FreqGain
ÈÈ '
(
ÈÈ' (
_f
ÈÈ( *
/
ÈÈ+ ,
$num
ÈÈ- .
,
ÈÈ. /
$num
ÈÈ0 1
)
ÈÈ1 2
)
ÈÈ2 3
;
ÈÈ3 4
fp
ÉÉ 
.
ÉÉ 
Add
ÉÉ 
(
ÉÉ 
new
ÉÉ 
FreqGain
ÉÉ '
(
ÉÉ' (
_f
ÉÉ( *
*
ÉÉ+ ,
$num
ÉÉ- .
,
ÉÉ. /
-
ÉÉ0 1
$num
ÉÉ1 4
)
ÉÉ4 5
)
ÉÉ5 6
;
ÉÉ6 7
FilterImpulse
ÊÊ !
fi
ÊÊ" $
=
ÊÊ% &
new
ÊÊ' *
FilterImpulse
ÊÊ+ 8
(
ÊÊ8 9
_length
ÊÊ9 @
,
ÊÊ@ A
fp
ÊÊB D
,
ÊÊD E!
FilterInterpolation
ÊÊF Y
.
ÊÊY Z
COSINE
ÊÊZ `
,
ÊÊ` a
_sr
ÊÊb e
)
ÊÊe f
;
ÊÊf g
FastConvolver
ËË !
fc
ËË" $
=
ËË% &
new
ËË' *
FastConvolver
ËË+ 8
(
ËË8 9
hilbert
ËË9 @
,
ËË@ A
fi
ËËB D
)
ËËD E
;
ËËE F
SoundBuffer
ÌÌ 
sb
ÌÌ  "
=
ÌÌ# $
new
ÌÌ% (
SoundBuffer
ÌÌ) 4
(
ÌÌ4 5
fc
ÌÌ5 7
)
ÌÌ7 8
;
ÌÌ8 9
window
ÍÍ 
.
ÍÍ 
Input
ÍÍ  
=
ÍÍ! "
sb
ÍÍ# %
.
ÍÍ% &
Subset
ÍÍ& ,
(
ÍÍ, -
_length
ÍÍ- 4
/
ÍÍ5 6
$num
ÍÍ7 8
,
ÍÍ8 9
_length
ÍÍ: A
)
ÍÍA B
;
ÍÍB C
}
ÎÎ 
else
ÏÏ 
{
ÐÐ 
window
ÑÑ 
.
ÑÑ 
Input
ÑÑ  
=
ÑÑ! "
hilbert
ÑÑ# *
;
ÑÑ* +
}
ÒÒ 
int
ÕÕ 
j
ÕÕ 
=
ÕÕ 
$num
ÕÕ 
;
ÕÕ 
foreach
ÖÖ 
(
ÖÖ 
ISample
ÖÖ 
sample
ÖÖ  &
in
ÖÖ' )
window
ÖÖ* 0
)
ÖÖ0 1
{
×× 
int
ØØ 
n
ØØ 
=
ØØ 
j
ØØ 
-
ØØ 
mid
ØØ  #
;
ØØ# $
if
ÙÙ 
(
ÙÙ 
n
ÙÙ 
==
ÙÙ 
$num
ÙÙ 
)
ÙÙ 
{
ÚÚ 
sample
ÜÜ 
[
ÜÜ 
$num
ÜÜ  
]
ÜÜ  !
=
ÜÜ" #
_a
ÜÜ$ &
;
ÜÜ& '
}
ÝÝ 
else
ÞÞ 
{
ßß 
sample
áá 
[
áá 
$num
áá  
]
áá  !
=
áá" #
sample
áá$ *
[
áá* +
$num
áá+ ,
]
áá, -
*
áá. /
_b
áá0 2
;
áá2 3
}
ââ 
yield
ãã 
return
ãã  
sample
ãã! '
;
ãã' (
j
ää 
++
ää 
;
ää 
}
åå 
}
ææ 
}
çç 	
}
èè 
}éé À²
/E:\GitHub\inguz-DSPUtil\InguzDSPUtilNew\HRTF.cs
	namespace 	
DSPUtil
 
{ 
public 

class 
HRTF 
{ 
public		 
static		 
FilterProfile		 #
diffuseDiff0		$ 0
(		0 1
)		1 2
{

 	
FilterProfile 
lfg 
= 
new  #
FilterProfile$ 1
(1 2
)2 3
;3 4
lfg 
. 
Add 
( 
new 
FreqGain  
(  !
$num! 1
,1 2
-3 4
$num4 E
)E F
)F G
;G H
lfg 
. 
Add 
( 
new 
FreqGain  
(  !
$num! 1
,1 2
-3 4
$num4 E
)E F
)F G
;G H
lfg 
. 
Add 
( 
new 
FreqGain  
(  !
$num! 1
,1 2
-3 4
$num4 E
)E F
)F G
;G H
lfg 
. 
Add 
( 
new 
FreqGain  
(  !
$num! 0
,0 1
-2 3
$num3 C
)C D
)D E
;E F
lfg 
. 
Add 
( 
new 
FreqGain  
(  !
$num! 0
,0 1
-2 3
$num3 D
)D E
)E F
;F G
lfg 
. 
Add 
( 
new 
FreqGain  
(  !
$num! 1
,1 2
-3 4
$num4 E
)E F
)F G
;G H
lfg 
. 
Add 
( 
new 
FreqGain  
(  !
$num! 1
,1 2
-3 4
$num4 E
)E F
)F G
;G H
lfg 
. 
Add 
( 
new 
FreqGain  
(  !
$num! 1
,1 2
-3 4
$num4 E
)E F
)F G
;G H
lfg 
. 
Add 
( 
new 
FreqGain  
(  !
$num! 1
,1 2
-3 4
$num4 D
)D E
)E F
;F G
lfg 
. 
Add 
( 
new 
FreqGain  
(  !
$num! 1
,1 2
-3 4
$num4 D
)D E
)E F
;F G
lfg 
. 
Add 
( 
new 
FreqGain  
(  !
$num! 1
,1 2
-3 4
$num4 D
)D E
)E F
;F G
lfg 
. 
Add 
( 
new 
FreqGain  
(  !
$num! 1
,1 2
-3 4
$num4 D
)D E
)E F
;F G
lfg 
. 
Add 
( 
new 
FreqGain  
(  !
$num! 1
,1 2
-3 4
$num4 D
)D E
)E F
;F G
lfg 
. 
Add 
( 
new 
FreqGain  
(  !
$num! 1
,1 2
-3 4
$num4 D
)D E
)E F
;F G
lfg 
. 
Add 
( 
new 
FreqGain  
(  !
$num! 0
,0 1
-2 3
$num3 B
)B C
)C D
;D E
lfg 
. 
Add 
( 
new 
FreqGain  
(  !
$num! 1
,1 2
-3 4
$num4 D
)D E
)E F
;F G
lfg 
. 
Add 
( 
new 
FreqGain  
(  !
$num! 1
,1 2
-3 4
$num4 D
)D E
)E F
;F G
lfg 
. 
Add 
( 
new 
FreqGain  
(  !
$num! 1
,1 2
-3 4
$num4 D
)D E
)E F
;F G
lfg 
. 
Add 
( 
new 
FreqGain  
(  !
$num! 1
,1 2
-3 4
$num4 D
)D E
)E F
;F G
lfg   
.   
Add   
(   
new   
FreqGain    
(    !
$num  ! 1
,  1 2
-  3 4
$num  4 D
)  D E
)  E F
;  F G
lfg!! 
.!! 
Add!! 
(!! 
new!! 
FreqGain!!  
(!!  !
$num!!! 1
,!!1 2
-!!3 4
$num!!4 D
)!!D E
)!!E F
;!!F G
lfg"" 
."" 
Add"" 
("" 
new"" 
FreqGain""  
(""  !
$num""! 1
,""1 2
-""3 4
$num""4 D
)""D E
)""E F
;""F G
lfg## 
.## 
Add## 
(## 
new## 
FreqGain##  
(##  !
$num##! 1
,##1 2
-##3 4
$num##4 D
)##D E
)##E F
;##F G
lfg$$ 
.$$ 
Add$$ 
($$ 
new$$ 
FreqGain$$  
($$  !
$num$$! 1
,$$1 2
-$$3 4
$num$$4 D
)$$D E
)$$E F
;$$F G
lfg%% 
.%% 
Add%% 
(%% 
new%% 
FreqGain%%  
(%%  !
$num%%! 1
,%%1 2
-%%3 4
$num%%4 D
)%%D E
)%%E F
;%%F G
lfg&& 
.&& 
Add&& 
(&& 
new&& 
FreqGain&&  
(&&  !
$num&&! 1
,&&1 2
-&&3 4
$num&&4 E
)&&E F
)&&F G
;&&G H
lfg'' 
.'' 
Add'' 
('' 
new'' 
FreqGain''  
(''  !
$num''! 1
,''1 2
-''3 4
$num''4 E
)''E F
)''F G
;''G H
lfg(( 
.(( 
Add(( 
((( 
new(( 
FreqGain((  
(((  !
$num((! 0
,((0 1
-((2 3
$num((3 D
)((D E
)((E F
;((F G
lfg)) 
.)) 
Add)) 
()) 
new)) 
FreqGain))  
())  !
$num))! 1
,))1 2
$num))3 D
)))D E
)))E F
;))F G
lfg** 
.** 
Add** 
(** 
new** 
FreqGain**  
(**  !
$num**! 1
,**1 2
$num**3 D
)**D E
)**E F
;**F G
lfg++ 
.++ 
Add++ 
(++ 
new++ 
FreqGain++  
(++  !
$num++! 1
,++1 2
$num++3 D
)++D E
)++E F
;++F G
lfg,, 
.,, 
Add,, 
(,, 
new,, 
FreqGain,,  
(,,  !
$num,,! 1
,,,1 2
$num,,3 D
),,D E
),,E F
;,,F G
lfg-- 
.-- 
Add-- 
(-- 
new-- 
FreqGain--  
(--  !
$num--! 1
,--1 2
$num--3 D
)--D E
)--E F
;--F G
lfg.. 
... 
Add.. 
(.. 
new.. 
FreqGain..  
(..  !
$num..! 1
,..1 2
$num..3 D
)..D E
)..E F
;..F G
lfg// 
.// 
Add// 
(// 
new// 
FreqGain//  
(//  !
$num//! 1
,//1 2
$num//3 C
)//C D
)//D E
;//E F
lfg00 
.00 
Add00 
(00 
new00 
FreqGain00  
(00  !
$num00! 1
,001 2
$num003 C
)00C D
)00D E
;00E F
lfg11 
.11 
Add11 
(11 
new11 
FreqGain11  
(11  !
$num11! 1
,111 2
$num113 E
)11E F
)11F G
;11G H
lfg22 
.22 
Add22 
(22 
new22 
FreqGain22  
(22  !
$num22! 0
,220 1
-222 3
$num223 D
)22D E
)22E F
;22F G
lfg33 
.33 
Add33 
(33 
new33 
FreqGain33  
(33  !
$num33! 1
,331 2
-333 4
$num334 E
)33E F
)33F G
;33G H
lfg44 
.44 
Add44 
(44 
new44 
FreqGain44  
(44  !
$num44! 1
,441 2
-443 4
$num444 E
)44E F
)44F G
;44G H
lfg55 
.55 
Add55 
(55 
new55 
FreqGain55  
(55  !
$num55! 1
,551 2
-553 4
$num554 E
)55E F
)55F G
;55G H
lfg66 
.66 
Add66 
(66 
new66 
FreqGain66  
(66  !
$num66! 1
,661 2
-663 4
$num664 E
)66E F
)66F G
;66G H
lfg77 
.77 
Add77 
(77 
new77 
FreqGain77  
(77  !
$num77! 1
,771 2
$num773 E
)77E F
)77F G
;77G H
lfg88 
.88 
Add88 
(88 
new88 
FreqGain88  
(88  !
$num88! 1
,881 2
$num883 D
)88D E
)88E F
;88F G
lfg99 
.99 
Add99 
(99 
new99 
FreqGain99  
(99  !
$num99! 0
,990 1
-992 3
$num993 E
)99E F
)99F G
;99G H
lfg:: 
.:: 
Add:: 
(:: 
new:: 
FreqGain::  
(::  !
$num::! 0
,::0 1
-::2 3
$num::3 D
)::D E
)::E F
;::F G
lfg;; 
.;; 
Add;; 
(;; 
new;; 
FreqGain;;  
(;;  !
$num;;! 1
,;;1 2
-;;3 4
$num;;4 E
);;E F
);;F G
;;;G H
lfg<< 
.<< 
Add<< 
(<< 
new<< 
FreqGain<<  
(<<  !
$num<<! 1
,<<1 2
-<<3 4
$num<<4 D
)<<D E
)<<E F
;<<F G
lfg== 
.== 
Add== 
(== 
new== 
FreqGain==  
(==  !
$num==! 1
,==1 2
-==3 4
$num==4 E
)==E F
)==F G
;==G H
lfg>> 
.>> 
Add>> 
(>> 
new>> 
FreqGain>>  
(>>  !
$num>>! 0
,>>0 1
->>2 3
$num>>3 C
)>>C D
)>>D E
;>>E F
lfg?? 
.?? 
Add?? 
(?? 
new?? 
FreqGain??  
(??  !
$num??! 1
,??1 2
-??3 4
$num??4 D
)??D E
)??E F
;??F G
lfg@@ 
.@@ 
Add@@ 
(@@ 
new@@ 
FreqGain@@  
(@@  !
$num@@! 1
,@@1 2
-@@3 4
$num@@4 D
)@@D E
)@@E F
;@@F G
lfgAA 
.AA 
AddAA 
(AA 
newAA 
FreqGainAA  
(AA  !
$numAA! 1
,AA1 2
-AA3 4
$numAA4 D
)AAD E
)AAE F
;AAF G
lfgBB 
.BB 
AddBB 
(BB 
newBB 
FreqGainBB  
(BB  !
$numBB! 1
,BB1 2
-BB3 4
$numBB4 D
)BBD E
)BBE F
;BBF G
lfgCC 
.CC 
AddCC 
(CC 
newCC 
FreqGainCC  
(CC  !
$numCC! 1
,CC1 2
-CC3 4
$numCC4 D
)CCD E
)CCE F
;CCF G
lfgDD 
.DD 
AddDD 
(DD 
newDD 
FreqGainDD  
(DD  !
$numDD! 0
,DD0 1
-DD2 3
$numDD3 C
)DDC D
)DDD E
;DDE F
lfgEE 
.EE 
AddEE 
(EE 
newEE 
FreqGainEE  
(EE  !
$numEE! 1
,EE1 2
-EE3 4
$numEE4 D
)EED E
)EEE F
;EEF G
lfgFF 
.FF 
AddFF 
(FF 
newFF 
FreqGainFF  
(FF  !
$numFF! 1
,FF1 2
-FF3 4
$numFF4 D
)FFD E
)FFE F
;FFF G
lfgGG 
.GG 
AddGG 
(GG 
newGG 
FreqGainGG  
(GG  !
$numGG! 1
,GG1 2
-GG3 4
$numGG4 D
)GGD E
)GGE F
;GGF G
lfgHH 
.HH 
AddHH 
(HH 
newHH 
FreqGainHH  
(HH  !
$numHH! 1
,HH1 2
-HH3 4
$numHH4 D
)HHD E
)HHE F
;HHF G
lfgII 
.II 
AddII 
(II 
newII 
FreqGainII  
(II  !
$numII! 1
,II1 2
-II3 4
$numII4 D
)IID E
)IIE F
;IIF G
lfgJJ 
.JJ 
AddJJ 
(JJ 
newJJ 
FreqGainJJ  
(JJ  !
$numJJ! 1
,JJ1 2
-JJ3 4
$numJJ4 D
)JJD E
)JJE F
;JJF G
lfgKK 
.KK 
AddKK 
(KK 
newKK 
FreqGainKK  
(KK  !
$numKK! /
,KK/ 0
-KK1 2
$numKK2 B
)KKB C
)KKC D
;KKD E
lfgLL 
.LL 
AddLL 
(LL 
newLL 
FreqGainLL  
(LL  !
$numLL! 1
,LL1 2
-LL3 4
$numLL4 D
)LLD E
)LLE F
;LLF G
lfgMM 
.MM 
AddMM 
(MM 
newMM 
FreqGainMM  
(MM  !
$numMM! 1
,MM1 2
-MM3 4
$numMM4 D
)MMD E
)MME F
;MMF G
lfgNN 
.NN 
AddNN 
(NN 
newNN 
FreqGainNN  
(NN  !
$numNN! 1
,NN1 2
-NN3 4
$numNN4 D
)NND E
)NNE F
;NNF G
lfgOO 
.OO 
AddOO 
(OO 
newOO 
FreqGainOO  
(OO  !
$numOO! 1
,OO1 2
-OO3 4
$numOO4 D
)OOD E
)OOE F
;OOF G
lfgPP 
.PP 
AddPP 
(PP 
newPP 
FreqGainPP  
(PP  !
$numPP! 1
,PP1 2
-PP3 4
$numPP4 D
)PPD E
)PPE F
;PPF G
lfgQQ 
.QQ 
AddQQ 
(QQ 
newQQ 
FreqGainQQ  
(QQ  !
$numQQ! 0
,QQ0 1
-QQ2 3
$numQQ3 C
)QQC D
)QQD E
;QQE F
lfgRR 
.RR 
AddRR 
(RR 
newRR 
FreqGainRR  
(RR  !
$numRR! 1
,RR1 2
-RR3 4
$numRR4 D
)RRD E
)RRE F
;RRF G
lfgSS 
.SS 
AddSS 
(SS 
newSS 
FreqGainSS  
(SS  !
$numSS! 1
,SS1 2
-SS3 4
$numSS4 D
)SSD E
)SSE F
;SSF G
lfgTT 
.TT 
AddTT 
(TT 
newTT 
FreqGainTT  
(TT  !
$numTT! 1
,TT1 2
-TT3 4
$numTT4 D
)TTD E
)TTE F
;TTF G
lfgUU 
.UU 
AddUU 
(UU 
newUU 
FreqGainUU  
(UU  !
$numUU! 1
,UU1 2
-UU3 4
$numUU4 F
)UUF G
)UUG H
;UUH I
lfgVV 
.VV 
AddVV 
(VV 
newVV 
FreqGainVV  
(VV  !
$numVV! 1
,VV1 2
-VV3 4
$numVV4 G
)VVG H
)VVH I
;VVI J
returnWW 
lfgWW 
;WW 
}XX 	
publicZZ 
staticZZ 
FilterProfileZZ #
diffuseDiff15ZZ$ 1
(ZZ1 2
)ZZ2 3
{[[ 	
FilterProfile]] 
lfg]] 
=]] 
new]]  #
FilterProfile]]$ 1
(]]1 2
)]]2 3
;]]3 4
lfg^^ 
.^^ 
Add^^ 
(^^ 
new^^ 
FreqGain^^  
(^^  !
$num^^! 1
,^^1 2
-^^3 4
$num^^4 F
)^^F G
)^^G H
;^^H I
lfg__ 
.__ 
Add__ 
(__ 
new__ 
FreqGain__  
(__  !
$num__! 1
,__1 2
-__3 4
$num__4 E
)__E F
)__F G
;__G H
lfg`` 
.`` 
Add`` 
(`` 
new`` 
FreqGain``  
(``  !
$num``! 1
,``1 2
-``3 4
$num``4 F
)``F G
)``G H
;``H I
lfgaa 
.aa 
Addaa 
(aa 
newaa 
FreqGainaa  
(aa  !
$numaa! 0
,aa0 1
-aa2 3
$numaa3 E
)aaE F
)aaF G
;aaG H
lfgbb 
.bb 
Addbb 
(bb 
newbb 
FreqGainbb  
(bb  !
$numbb! 0
,bb0 1
-bb2 3
$numbb3 E
)bbE F
)bbF G
;bbG H
lfgcc 
.cc 
Addcc 
(cc 
newcc 
FreqGaincc  
(cc  !
$numcc! 1
,cc1 2
-cc3 4
$numcc4 F
)ccF G
)ccG H
;ccH I
lfgdd 
.dd 
Adddd 
(dd 
newdd 
FreqGaindd  
(dd  !
$numdd! 1
,dd1 2
-dd3 4
$numdd4 F
)ddF G
)ddG H
;ddH I
lfgee 
.ee 
Addee 
(ee 
newee 
FreqGainee  
(ee  !
$numee! 1
,ee1 2
-ee3 4
$numee4 F
)eeF G
)eeG H
;eeH I
lfgff 
.ff 
Addff 
(ff 
newff 
FreqGainff  
(ff  !
$numff! 1
,ff1 2
-ff3 4
$numff4 F
)ffF G
)ffG H
;ffH I
lfggg 
.gg 
Addgg 
(gg 
newgg 
FreqGaingg  
(gg  !
$numgg! 1
,gg1 2
-gg3 4
$numgg4 F
)ggF G
)ggG H
;ggH I
lfghh 
.hh 
Addhh 
(hh 
newhh 
FreqGainhh  
(hh  !
$numhh! 1
,hh1 2
-hh3 4
$numhh4 F
)hhF G
)hhG H
;hhH I
lfgii 
.ii 
Addii 
(ii 
newii 
FreqGainii  
(ii  !
$numii! 1
,ii1 2
-ii3 4
$numii4 F
)iiF G
)iiG H
;iiH I
lfgjj 
.jj 
Addjj 
(jj 
newjj 
FreqGainjj  
(jj  !
$numjj! 1
,jj1 2
-jj3 4
$numjj4 F
)jjF G
)jjG H
;jjH I
lfgkk 
.kk 
Addkk 
(kk 
newkk 
FreqGainkk  
(kk  !
$numkk! 1
,kk1 2
-kk3 4
$numkk4 E
)kkE F
)kkF G
;kkG H
lfgll 
.ll 
Addll 
(ll 
newll 
FreqGainll  
(ll  !
$numll! 0
,ll0 1
-ll2 3
$numll3 D
)llD E
)llE F
;llF G
lfgmm 
.mm 
Addmm 
(mm 
newmm 
FreqGainmm  
(mm  !
$nummm! 1
,mm1 2
-mm3 4
$nummm4 F
)mmF G
)mmG H
;mmH I
lfgnn 
.nn 
Addnn 
(nn 
newnn 
FreqGainnn  
(nn  !
$numnn! 1
,nn1 2
-nn3 4
$numnn4 F
)nnF G
)nnG H
;nnH I
lfgoo 
.oo 
Addoo 
(oo 
newoo 
FreqGainoo  
(oo  !
$numoo! 1
,oo1 2
-oo3 4
$numoo4 F
)ooF G
)ooG H
;ooH I
lfgpp 
.pp 
Addpp 
(pp 
newpp 
FreqGainpp  
(pp  !
$numpp! 1
,pp1 2
-pp3 4
$numpp4 F
)ppF G
)ppG H
;ppH I
lfgqq 
.qq 
Addqq 
(qq 
newqq 
FreqGainqq  
(qq  !
$numqq! 1
,qq1 2
-qq3 4
$numqq4 F
)qqF G
)qqG H
;qqH I
lfgrr 
.rr 
Addrr 
(rr 
newrr 
FreqGainrr  
(rr  !
$numrr! 1
,rr1 2
$numrr3 E
)rrE F
)rrF G
;rrG H
lfgss 
.ss 
Addss 
(ss 
newss 
FreqGainss  
(ss  !
$numss! 1
,ss1 2
$numss3 E
)ssE F
)ssF G
;ssG H
lfgtt 
.tt 
Addtt 
(tt 
newtt 
FreqGaintt  
(tt  !
$numtt! 1
,tt1 2
$numtt3 D
)ttD E
)ttE F
;ttF G
lfguu 
.uu 
Adduu 
(uu 
newuu 
FreqGainuu  
(uu  !
$numuu! 1
,uu1 2
$numuu3 D
)uuD E
)uuE F
;uuF G
lfgvv 
.vv 
Addvv 
(vv 
newvv 
FreqGainvv  
(vv  !
$numvv! 1
,vv1 2
$numvv3 D
)vvD E
)vvE F
;vvF G
lfgww 
.ww 
Addww 
(ww 
newww 
FreqGainww  
(ww  !
$numww! 1
,ww1 2
$numww3 D
)wwD E
)wwE F
;wwF G
lfgxx 
.xx 
Addxx 
(xx 
newxx 
FreqGainxx  
(xx  !
$numxx! 1
,xx1 2
$numxx3 D
)xxD E
)xxE F
;xxF G
lfgyy 
.yy 
Addyy 
(yy 
newyy 
FreqGainyy  
(yy  !
$numyy! 0
,yy0 1
$numyy2 C
)yyC D
)yyD E
;yyE F
lfgzz 
.zz 
Addzz 
(zz 
newzz 
FreqGainzz  
(zz  !
$numzz! 1
,zz1 2
$numzz3 D
)zzD E
)zzE F
;zzF G
lfg{{ 
.{{ 
Add{{ 
({{ 
new{{ 
FreqGain{{  
({{  !
$num{{! 1
,{{1 2
$num{{3 D
){{D E
){{E F
;{{F G
lfg|| 
.|| 
Add|| 
(|| 
new|| 
FreqGain||  
(||  !
$num||! 1
,||1 2
$num||3 D
)||D E
)||E F
;||F G
lfg}} 
.}} 
Add}} 
(}} 
new}} 
FreqGain}}  
(}}  !
$num}}! 1
,}}1 2
$num}}3 D
)}}D E
)}}E F
;}}F G
lfg~~ 
.~~ 
Add~~ 
(~~ 
new~~ 
FreqGain~~  
(~~  !
$num~~! 1
,~~1 2
$num~~3 D
)~~D E
)~~E F
;~~F G
lfg 
. 
Add 
( 
new 
FreqGain  
(  !
$num! 1
,1 2
$num3 D
)D E
)E F
;F G
lfg
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
$num
! 1
,
1 2
$num
3 D
)
D E
)
E F
;
F G
lfg
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
$num
! 1
,
1 2
$num
3 D
)
D E
)
E F
;
F G
lfg
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
$num
! 1
,
1 2
$num
3 B
)
B C
)
C D
;
D E
lfg
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
$num
! 0
,
0 1
$num
2 C
)
C D
)
D E
;
E F
lfg
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
$num
! 1
,
1 2
$num
3 C
)
C D
)
D E
;
E F
lfg
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
$num
! 1
,
1 2
$num
3 D
)
D E
)
E F
;
F G
lfg
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
$num
! 1
,
1 2
$num
3 D
)
D E
)
E F
;
F G
lfg
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
$num
! 1
,
1 2
$num
3 D
)
D E
)
E F
;
F G
lfg
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
$num
! 1
,
1 2
$num
3 D
)
D E
)
E F
;
F G
lfg
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
$num
! 1
,
1 2
$num
3 D
)
D E
)
E F
;
F G
lfg
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
$num
! 0
,
0 1
$num
2 C
)
C D
)
D E
;
E F
lfg
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
$num
! 0
,
0 1
$num
2 B
)
B C
)
C D
;
D E
lfg
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
$num
! 1
,
1 2
$num
3 D
)
D E
)
E F
;
F G
lfg
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
$num
! 1
,
1 2
$num
3 D
)
D E
)
E F
;
F G
lfg
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
$num
! 1
,
1 2
-
3 4
$num
4 E
)
E F
)
F G
;
G H
lfg
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
$num
! 0
,
0 1
-
2 3
$num
3 D
)
D E
)
E F
;
F G
lfg
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
$num
! 1
,
1 2
-
3 4
$num
4 D
)
D E
)
E F
;
F G
lfg
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
$num
! 1
,
1 2
-
3 4
$num
4 D
)
D E
)
E F
;
F G
lfg
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
$num
! 1
,
1 2
-
3 4
$num
4 D
)
D E
)
E F
;
F G
lfg
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
$num
! 1
,
1 2
-
3 4
$num
4 D
)
D E
)
E F
;
F G
lfg
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
$num
! 1
,
1 2
-
3 4
$num
4 D
)
D E
)
E F
;
F G
lfg
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
$num
! 0
,
0 1
-
2 3
$num
3 C
)
C D
)
D E
;
E F
lfg
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
$num
! 1
,
1 2
-
3 4
$num
4 D
)
D E
)
E F
;
F G
lfg
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
$num
! 1
,
1 2
-
3 4
$num
4 D
)
D E
)
E F
;
F G
lfg
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
$num
! 1
,
1 2
-
3 4
$num
4 D
)
D E
)
E F
;
F G
lfg
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
$num
! 1
,
1 2
-
3 4
$num
4 D
)
D E
)
E F
;
F G
lfg
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
$num
! 1
,
1 2
-
3 4
$num
4 D
)
D E
)
E F
;
F G
lfg
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
$num
! 1
,
1 2
-
3 4
$num
4 D
)
D E
)
E F
;
F G
lfg
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
$num
! /
,
/ 0
-
1 2
$num
2 C
)
C D
)
D E
;
E F
lfg
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
$num
! 1
,
1 2
-
3 4
$num
4 D
)
D E
)
E F
;
F G
lfg
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
$num
! 1
,
1 2
-
3 4
$num
4 D
)
D E
)
E F
;
F G
lfg
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
$num
! 1
,
1 2
-
3 4
$num
4 D
)
D E
)
E F
;
F G
lfg
   
.
   
Add
   
(
   
new
   
FreqGain
    
(
    !
$num
  ! 1
,
  1 2
$num
  3 D
)
  D E
)
  E F
;
  F G
lfg
¡¡ 
.
¡¡ 
Add
¡¡ 
(
¡¡ 
new
¡¡ 
FreqGain
¡¡  
(
¡¡  !
$num
¡¡! 1
,
¡¡1 2
$num
¡¡3 D
)
¡¡D E
)
¡¡E F
;
¡¡F G
lfg
¢¢ 
.
¢¢ 
Add
¢¢ 
(
¢¢ 
new
¢¢ 
FreqGain
¢¢  
(
¢¢  !
$num
¢¢! 0
,
¢¢0 1
$num
¢¢2 B
)
¢¢B C
)
¢¢C D
;
¢¢D E
lfg
££ 
.
££ 
Add
££ 
(
££ 
new
££ 
FreqGain
££  
(
££  !
$num
££! 1
,
££1 2
-
££3 4
$num
££4 F
)
££F G
)
££G H
;
££H I
lfg
¤¤ 
.
¤¤ 
Add
¤¤ 
(
¤¤ 
new
¤¤ 
FreqGain
¤¤  
(
¤¤  !
$num
¤¤! 1
,
¤¤1 2
-
¤¤3 4
$num
¤¤4 E
)
¤¤E F
)
¤¤F G
;
¤¤G H
lfg
¥¥ 
.
¥¥ 
Add
¥¥ 
(
¥¥ 
new
¥¥ 
FreqGain
¥¥  
(
¥¥  !
$num
¥¥! 1
,
¥¥1 2
-
¥¥3 4
$num
¥¥4 D
)
¥¥D E
)
¥¥E F
;
¥¥F G
lfg
¦¦ 
.
¦¦ 
Add
¦¦ 
(
¦¦ 
new
¦¦ 
FreqGain
¦¦  
(
¦¦  !
$num
¦¦! 1
,
¦¦1 2
-
¦¦3 4
$num
¦¦4 G
)
¦¦G H
)
¦¦H I
;
¦¦I J
lfg
§§ 
.
§§ 
Add
§§ 
(
§§ 
new
§§ 
FreqGain
§§  
(
§§  !
$num
§§! 1
,
§§1 2
-
§§3 4
$num
§§4 H
)
§§H I
)
§§I J
;
§§J K
return
¨¨ 
lfg
¨¨ 
;
¨¨ 
}
©© 	
public
«« 
static
«« 
FilterProfile
«« #
diffuseDiff30
««$ 1
(
««1 2
)
««2 3
{
¬¬ 	
FilterProfile
®® 
lfg
®® 
=
®® 
new
®®  #
FilterProfile
®®$ 1
(
®®1 2
)
®®2 3
;
®®3 4
lfg
¯¯ 
.
¯¯ 
Add
¯¯ 
(
¯¯ 
new
¯¯ 
FreqGain
¯¯  
(
¯¯  !
$num
¯¯! 1
,
¯¯1 2
$num
¯¯3 E
)
¯¯E F
)
¯¯F G
;
¯¯G H
lfg
°° 
.
°° 
Add
°° 
(
°° 
new
°° 
FreqGain
°°  
(
°°  !
$num
°°! 1
,
°°1 2
$num
°°3 E
)
°°E F
)
°°F G
;
°°G H
lfg
±± 
.
±± 
Add
±± 
(
±± 
new
±± 
FreqGain
±±  
(
±±  !
$num
±±! 1
,
±±1 2
$num
±±3 E
)
±±E F
)
±±F G
;
±±G H
lfg
²² 
.
²² 
Add
²² 
(
²² 
new
²² 
FreqGain
²²  
(
²²  !
$num
²²! 0
,
²²0 1
$num
²²2 D
)
²²D E
)
²²E F
;
²²F G
lfg
³³ 
.
³³ 
Add
³³ 
(
³³ 
new
³³ 
FreqGain
³³  
(
³³  !
$num
³³! 0
,
³³0 1
$num
³³2 D
)
³³D E
)
³³E F
;
³³F G
lfg
´´ 
.
´´ 
Add
´´ 
(
´´ 
new
´´ 
FreqGain
´´  
(
´´  !
$num
´´! 1
,
´´1 2
$num
´´3 E
)
´´E F
)
´´F G
;
´´G H
lfg
µµ 
.
µµ 
Add
µµ 
(
µµ 
new
µµ 
FreqGain
µµ  
(
µµ  !
$num
µµ! 1
,
µµ1 2
$num
µµ3 E
)
µµE F
)
µµF G
;
µµG H
lfg
¶¶ 
.
¶¶ 
Add
¶¶ 
(
¶¶ 
new
¶¶ 
FreqGain
¶¶  
(
¶¶  !
$num
¶¶! 1
,
¶¶1 2
$num
¶¶3 E
)
¶¶E F
)
¶¶F G
;
¶¶G H
lfg
·· 
.
·· 
Add
·· 
(
·· 
new
·· 
FreqGain
··  
(
··  !
$num
··! 1
,
··1 2
$num
··3 E
)
··E F
)
··F G
;
··G H
lfg
¸¸ 
.
¸¸ 
Add
¸¸ 
(
¸¸ 
new
¸¸ 
FreqGain
¸¸  
(
¸¸  !
$num
¸¸! 1
,
¸¸1 2
$num
¸¸3 E
)
¸¸E F
)
¸¸F G
;
¸¸G H
lfg
¹¹ 
.
¹¹ 
Add
¹¹ 
(
¹¹ 
new
¹¹ 
FreqGain
¹¹  
(
¹¹  !
$num
¹¹! 1
,
¹¹1 2
$num
¹¹3 E
)
¹¹E F
)
¹¹F G
;
¹¹G H
lfg
ºº 
.
ºº 
Add
ºº 
(
ºº 
new
ºº 
FreqGain
ºº  
(
ºº  !
$num
ºº! 1
,
ºº1 2
$num
ºº3 D
)
ººD E
)
ººE F
;
ººF G
lfg
»» 
.
»» 
Add
»» 
(
»» 
new
»» 
FreqGain
»»  
(
»»  !
$num
»»! 1
,
»»1 2
$num
»»3 E
)
»»E F
)
»»F G
;
»»G H
lfg
¼¼ 
.
¼¼ 
Add
¼¼ 
(
¼¼ 
new
¼¼ 
FreqGain
¼¼  
(
¼¼  !
$num
¼¼! 1
,
¼¼1 2
$num
¼¼3 E
)
¼¼E F
)
¼¼F G
;
¼¼G H
lfg
½½ 
.
½½ 
Add
½½ 
(
½½ 
new
½½ 
FreqGain
½½  
(
½½  !
$num
½½! 0
,
½½0 1
$num
½½2 D
)
½½D E
)
½½E F
;
½½F G
lfg
¾¾ 
.
¾¾ 
Add
¾¾ 
(
¾¾ 
new
¾¾ 
FreqGain
¾¾  
(
¾¾  !
$num
¾¾! 1
,
¾¾1 2
$num
¾¾3 E
)
¾¾E F
)
¾¾F G
;
¾¾G H
lfg
¿¿ 
.
¿¿ 
Add
¿¿ 
(
¿¿ 
new
¿¿ 
FreqGain
¿¿  
(
¿¿  !
$num
¿¿! 1
,
¿¿1 2
$num
¿¿3 E
)
¿¿E F
)
¿¿F G
;
¿¿G H
lfg
ÀÀ 
.
ÀÀ 
Add
ÀÀ 
(
ÀÀ 
new
ÀÀ 
FreqGain
ÀÀ  
(
ÀÀ  !
$num
ÀÀ! 1
,
ÀÀ1 2
$num
ÀÀ3 D
)
ÀÀD E
)
ÀÀE F
;
ÀÀF G
lfg
ÁÁ 
.
ÁÁ 
Add
ÁÁ 
(
ÁÁ 
new
ÁÁ 
FreqGain
ÁÁ  
(
ÁÁ  !
$num
ÁÁ! 1
,
ÁÁ1 2
$num
ÁÁ3 D
)
ÁÁD E
)
ÁÁE F
;
ÁÁF G
lfg
ÂÂ 
.
ÂÂ 
Add
ÂÂ 
(
ÂÂ 
new
ÂÂ 
FreqGain
ÂÂ  
(
ÂÂ  !
$num
ÂÂ! 1
,
ÂÂ1 2
$num
ÂÂ3 C
)
ÂÂC D
)
ÂÂD E
;
ÂÂE F
lfg
ÃÃ 
.
ÃÃ 
Add
ÃÃ 
(
ÃÃ 
new
ÃÃ 
FreqGain
ÃÃ  
(
ÃÃ  !
$num
ÃÃ! 1
,
ÃÃ1 2
$num
ÃÃ3 D
)
ÃÃD E
)
ÃÃE F
;
ÃÃF G
lfg
ÄÄ 
.
ÄÄ 
Add
ÄÄ 
(
ÄÄ 
new
ÄÄ 
FreqGain
ÄÄ  
(
ÄÄ  !
$num
ÄÄ! 1
,
ÄÄ1 2
$num
ÄÄ3 D
)
ÄÄD E
)
ÄÄE F
;
ÄÄF G
lfg
ÅÅ 
.
ÅÅ 
Add
ÅÅ 
(
ÅÅ 
new
ÅÅ 
FreqGain
ÅÅ  
(
ÅÅ  !
$num
ÅÅ! 1
,
ÅÅ1 2
$num
ÅÅ3 D
)
ÅÅD E
)
ÅÅE F
;
ÅÅF G
lfg
ÆÆ 
.
ÆÆ 
Add
ÆÆ 
(
ÆÆ 
new
ÆÆ 
FreqGain
ÆÆ  
(
ÆÆ  !
$num
ÆÆ! 1
,
ÆÆ1 2
$num
ÆÆ3 D
)
ÆÆD E
)
ÆÆE F
;
ÆÆF G
lfg
ÇÇ 
.
ÇÇ 
Add
ÇÇ 
(
ÇÇ 
new
ÇÇ 
FreqGain
ÇÇ  
(
ÇÇ  !
$num
ÇÇ! 1
,
ÇÇ1 2
$num
ÇÇ3 D
)
ÇÇD E
)
ÇÇE F
;
ÇÇF G
lfg
ÈÈ 
.
ÈÈ 
Add
ÈÈ 
(
ÈÈ 
new
ÈÈ 
FreqGain
ÈÈ  
(
ÈÈ  !
$num
ÈÈ! 1
,
ÈÈ1 2
$num
ÈÈ3 D
)
ÈÈD E
)
ÈÈE F
;
ÈÈF G
lfg
ÉÉ 
.
ÉÉ 
Add
ÉÉ 
(
ÉÉ 
new
ÉÉ 
FreqGain
ÉÉ  
(
ÉÉ  !
$num
ÉÉ! 1
,
ÉÉ1 2
$num
ÉÉ3 D
)
ÉÉD E
)
ÉÉE F
;
ÉÉF G
lfg
ÊÊ 
.
ÊÊ 
Add
ÊÊ 
(
ÊÊ 
new
ÊÊ 
FreqGain
ÊÊ  
(
ÊÊ  !
$num
ÊÊ! 0
,
ÊÊ0 1
$num
ÊÊ2 C
)
ÊÊC D
)
ÊÊD E
;
ÊÊE F
lfg
ËË 
.
ËË 
Add
ËË 
(
ËË 
new
ËË 
FreqGain
ËË  
(
ËË  !
$num
ËË! 1
,
ËË1 2
$num
ËË3 D
)
ËËD E
)
ËËE F
;
ËËF G
lfg
ÌÌ 
.
ÌÌ 
Add
ÌÌ 
(
ÌÌ 
new
ÌÌ 
FreqGain
ÌÌ  
(
ÌÌ  !
$num
ÌÌ! 1
,
ÌÌ1 2
$num
ÌÌ3 D
)
ÌÌD E
)
ÌÌE F
;
ÌÌF G
lfg
ÍÍ 
.
ÍÍ 
Add
ÍÍ 
(
ÍÍ 
new
ÍÍ 
FreqGain
ÍÍ  
(
ÍÍ  !
$num
ÍÍ! 1
,
ÍÍ1 2
$num
ÍÍ3 D
)
ÍÍD E
)
ÍÍE F
;
ÍÍF G
lfg
ÎÎ 
.
ÎÎ 
Add
ÎÎ 
(
ÎÎ 
new
ÎÎ 
FreqGain
ÎÎ  
(
ÎÎ  !
$num
ÎÎ! 1
,
ÎÎ1 2
$num
ÎÎ3 B
)
ÎÎB C
)
ÎÎC D
;
ÎÎD E
lfg
ÏÏ 
.
ÏÏ 
Add
ÏÏ 
(
ÏÏ 
new
ÏÏ 
FreqGain
ÏÏ  
(
ÏÏ  !
$num
ÏÏ! 1
,
ÏÏ1 2
$num
ÏÏ3 D
)
ÏÏD E
)
ÏÏE F
;
ÏÏF G
lfg
ÐÐ 
.
ÐÐ 
Add
ÐÐ 
(
ÐÐ 
new
ÐÐ 
FreqGain
ÐÐ  
(
ÐÐ  !
$num
ÐÐ! 1
,
ÐÐ1 2
$num
ÐÐ3 D
)
ÐÐD E
)
ÐÐE F
;
ÐÐF G
lfg
ÑÑ 
.
ÑÑ 
Add
ÑÑ 
(
ÑÑ 
new
ÑÑ 
FreqGain
ÑÑ  
(
ÑÑ  !
$num
ÑÑ! 1
,
ÑÑ1 2
$num
ÑÑ3 D
)
ÑÑD E
)
ÑÑE F
;
ÑÑF G
lfg
ÒÒ 
.
ÒÒ 
Add
ÒÒ 
(
ÒÒ 
new
ÒÒ 
FreqGain
ÒÒ  
(
ÒÒ  !
$num
ÒÒ! 1
,
ÒÒ1 2
$num
ÒÒ3 C
)
ÒÒC D
)
ÒÒD E
;
ÒÒE F
lfg
ÓÓ 
.
ÓÓ 
Add
ÓÓ 
(
ÓÓ 
new
ÓÓ 
FreqGain
ÓÓ  
(
ÓÓ  !
$num
ÓÓ! 1
,
ÓÓ1 2
$num
ÓÓ3 D
)
ÓÓD E
)
ÓÓE F
;
ÓÓF G
lfg
ÔÔ 
.
ÔÔ 
Add
ÔÔ 
(
ÔÔ 
new
ÔÔ 
FreqGain
ÔÔ  
(
ÔÔ  !
$num
ÔÔ! 0
,
ÔÔ0 1
$num
ÔÔ2 C
)
ÔÔC D
)
ÔÔD E
;
ÔÔE F
lfg
ÕÕ 
.
ÕÕ 
Add
ÕÕ 
(
ÕÕ 
new
ÕÕ 
FreqGain
ÕÕ  
(
ÕÕ  !
$num
ÕÕ! 1
,
ÕÕ1 2
$num
ÕÕ3 C
)
ÕÕC D
)
ÕÕD E
;
ÕÕE F
lfg
ÖÖ 
.
ÖÖ 
Add
ÖÖ 
(
ÖÖ 
new
ÖÖ 
FreqGain
ÖÖ  
(
ÖÖ  !
$num
ÖÖ! 1
,
ÖÖ1 2
$num
ÖÖ3 D
)
ÖÖD E
)
ÖÖE F
;
ÖÖF G
lfg
×× 
.
×× 
Add
×× 
(
×× 
new
×× 
FreqGain
××  
(
××  !
$num
××! 1
,
××1 2
$num
××3 D
)
××D E
)
××E F
;
××F G
lfg
ØØ 
.
ØØ 
Add
ØØ 
(
ØØ 
new
ØØ 
FreqGain
ØØ  
(
ØØ  !
$num
ØØ! 1
,
ØØ1 2
$num
ØØ3 D
)
ØØD E
)
ØØE F
;
ØØF G
lfg
ÙÙ 
.
ÙÙ 
Add
ÙÙ 
(
ÙÙ 
new
ÙÙ 
FreqGain
ÙÙ  
(
ÙÙ  !
$num
ÙÙ! 1
,
ÙÙ1 2
$num
ÙÙ3 D
)
ÙÙD E
)
ÙÙE F
;
ÙÙF G
lfg
ÚÚ 
.
ÚÚ 
Add
ÚÚ 
(
ÚÚ 
new
ÚÚ 
FreqGain
ÚÚ  
(
ÚÚ  !
$num
ÚÚ! 1
,
ÚÚ1 2
$num
ÚÚ3 D
)
ÚÚD E
)
ÚÚE F
;
ÚÚF G
lfg
ÛÛ 
.
ÛÛ 
Add
ÛÛ 
(
ÛÛ 
new
ÛÛ 
FreqGain
ÛÛ  
(
ÛÛ  !
$num
ÛÛ! 0
,
ÛÛ0 1
$num
ÛÛ2 B
)
ÛÛB C
)
ÛÛC D
;
ÛÛD E
lfg
ÜÜ 
.
ÜÜ 
Add
ÜÜ 
(
ÜÜ 
new
ÜÜ 
FreqGain
ÜÜ  
(
ÜÜ  !
$num
ÜÜ! 0
,
ÜÜ0 1
$num
ÜÜ2 C
)
ÜÜC D
)
ÜÜD E
;
ÜÜE F
lfg
ÝÝ 
.
ÝÝ 
Add
ÝÝ 
(
ÝÝ 
new
ÝÝ 
FreqGain
ÝÝ  
(
ÝÝ  !
$num
ÝÝ! 1
,
ÝÝ1 2
$num
ÝÝ3 C
)
ÝÝC D
)
ÝÝD E
;
ÝÝE F
lfg
ÞÞ 
.
ÞÞ 
Add
ÞÞ 
(
ÞÞ 
new
ÞÞ 
FreqGain
ÞÞ  
(
ÞÞ  !
$num
ÞÞ! 1
,
ÞÞ1 2
$num
ÞÞ3 E
)
ÞÞE F
)
ÞÞF G
;
ÞÞG H
lfg
ßß 
.
ßß 
Add
ßß 
(
ßß 
new
ßß 
FreqGain
ßß  
(
ßß  !
$num
ßß! 1
,
ßß1 2
-
ßß3 4
$num
ßß4 E
)
ßßE F
)
ßßF G
;
ßßG H
lfg
àà 
.
àà 
Add
àà 
(
àà 
new
àà 
FreqGain
àà  
(
àà  !
$num
àà! 0
,
àà0 1
-
àà2 3
$num
àà3 D
)
ààD E
)
ààE F
;
ààF G
lfg
áá 
.
áá 
Add
áá 
(
áá 
new
áá 
FreqGain
áá  
(
áá  !
$num
áá! 1
,
áá1 2
-
áá3 4
$num
áá4 E
)
ááE F
)
ááF G
;
ááG H
lfg
ââ 
.
ââ 
Add
ââ 
(
ââ 
new
ââ 
FreqGain
ââ  
(
ââ  !
$num
ââ! 1
,
ââ1 2
-
ââ3 4
$num
ââ4 D
)
ââD E
)
ââE F
;
ââF G
lfg
ãã 
.
ãã 
Add
ãã 
(
ãã 
new
ãã 
FreqGain
ãã  
(
ãã  !
$num
ãã! 1
,
ãã1 2
-
ãã3 4
$num
ãã4 D
)
ããD E
)
ããE F
;
ããF G
lfg
ää 
.
ää 
Add
ää 
(
ää 
new
ää 
FreqGain
ää  
(
ää  !
$num
ää! 1
,
ää1 2
-
ää3 4
$num
ää4 D
)
ääD E
)
ääE F
;
ääF G
lfg
åå 
.
åå 
Add
åå 
(
åå 
new
åå 
FreqGain
åå  
(
åå  !
$num
åå! 1
,
åå1 2
-
åå3 4
$num
åå4 D
)
ååD E
)
ååE F
;
ååF G
lfg
ææ 
.
ææ 
Add
ææ 
(
ææ 
new
ææ 
FreqGain
ææ  
(
ææ  !
$num
ææ! 0
,
ææ0 1
-
ææ2 3
$num
ææ3 C
)
ææC D
)
ææD E
;
ææE F
lfg
çç 
.
çç 
Add
çç 
(
çç 
new
çç 
FreqGain
çç  
(
çç  !
$num
çç! 1
,
çç1 2
-
çç3 4
$num
çç4 D
)
ççD E
)
ççE F
;
ççF G
lfg
èè 
.
èè 
Add
èè 
(
èè 
new
èè 
FreqGain
èè  
(
èè  !
$num
èè! 1
,
èè1 2
-
èè3 4
$num
èè4 D
)
èèD E
)
èèE F
;
èèF G
lfg
éé 
.
éé 
Add
éé 
(
éé 
new
éé 
FreqGain
éé  
(
éé  !
$num
éé! 1
,
éé1 2
-
éé3 4
$num
éé4 E
)
ééE F
)
ééF G
;
ééG H
lfg
êê 
.
êê 
Add
êê 
(
êê 
new
êê 
FreqGain
êê  
(
êê  !
$num
êê! 1
,
êê1 2
-
êê3 4
$num
êê4 E
)
êêE F
)
êêF G
;
êêG H
lfg
ëë 
.
ëë 
Add
ëë 
(
ëë 
new
ëë 
FreqGain
ëë  
(
ëë  !
$num
ëë! 1
,
ëë1 2
$num
ëë3 D
)
ëëD E
)
ëëE F
;
ëëF G
lfg
ìì 
.
ìì 
Add
ìì 
(
ìì 
new
ìì 
FreqGain
ìì  
(
ìì  !
$num
ìì! 1
,
ìì1 2
$num
ìì3 D
)
ììD E
)
ììE F
;
ììF G
lfg
íí 
.
íí 
Add
íí 
(
íí 
new
íí 
FreqGain
íí  
(
íí  !
$num
íí! /
,
íí/ 0
$num
íí1 B
)
ííB C
)
ííC D
;
ííD E
lfg
îî 
.
îî 
Add
îî 
(
îî 
new
îî 
FreqGain
îî  
(
îî  !
$num
îî! 1
,
îî1 2
$num
îî3 D
)
îîD E
)
îîE F
;
îîF G
lfg
ïï 
.
ïï 
Add
ïï 
(
ïï 
new
ïï 
FreqGain
ïï  
(
ïï  !
$num
ïï! 1
,
ïï1 2
$num
ïï3 D
)
ïïD E
)
ïïE F
;
ïïF G
lfg
ðð 
.
ðð 
Add
ðð 
(
ðð 
new
ðð 
FreqGain
ðð  
(
ðð  !
$num
ðð! 1
,
ðð1 2
$num
ðð3 D
)
ððD E
)
ððE F
;
ððF G
lfg
ññ 
.
ññ 
Add
ññ 
(
ññ 
new
ññ 
FreqGain
ññ  
(
ññ  !
$num
ññ! 1
,
ññ1 2
$num
ññ3 D
)
ññD E
)
ññE F
;
ññF G
lfg
òò 
.
òò 
Add
òò 
(
òò 
new
òò 
FreqGain
òò  
(
òò  !
$num
òò! 1
,
òò1 2
$num
òò3 D
)
òòD E
)
òòE F
;
òòF G
lfg
óó 
.
óó 
Add
óó 
(
óó 
new
óó 
FreqGain
óó  
(
óó  !
$num
óó! 0
,
óó0 1
$num
óó2 C
)
óóC D
)
óóD E
;
óóE F
lfg
ôô 
.
ôô 
Add
ôô 
(
ôô 
new
ôô 
FreqGain
ôô  
(
ôô  !
$num
ôô! 1
,
ôô1 2
$num
ôô3 D
)
ôôD E
)
ôôE F
;
ôôF G
lfg
õõ 
.
õõ 
Add
õõ 
(
õõ 
new
õõ 
FreqGain
õõ  
(
õõ  !
$num
õõ! 1
,
õõ1 2
-
õõ3 4
$num
õõ4 F
)
õõF G
)
õõG H
;
õõH I
lfg
öö 
.
öö 
Add
öö 
(
öö 
new
öö 
FreqGain
öö  
(
öö  !
$num
öö! 1
,
öö1 2
-
öö3 4
$num
öö4 F
)
ööF G
)
ööG H
;
ööH I
lfg
÷÷ 
.
÷÷ 
Add
÷÷ 
(
÷÷ 
new
÷÷ 
FreqGain
÷÷  
(
÷÷  !
$num
÷÷! 1
,
÷÷1 2
$num
÷÷3 G
)
÷÷G H
)
÷÷H I
;
÷÷I J
lfg
øø 
.
øø 
Add
øø 
(
øø 
new
øø 
FreqGain
øø  
(
øø  !
$num
øø! 1
,
øø1 2
-
øø3 4
$num
øø4 H
)
øøH I
)
øøI J
;
øøJ K
return
ùù 
lfg
ùù 
;
ùù 
}
úú 	
public
üü 
static
üü 
FilterProfile
üü #
diffuseDiff45
üü$ 1
(
üü1 2
)
üü2 3
{
ýý 	
FilterProfile
ÿÿ 
lfg
ÿÿ 
=
ÿÿ 
new
ÿÿ  #
FilterProfile
ÿÿ$ 1
(
ÿÿ1 2
)
ÿÿ2 3
;
ÿÿ3 4
lfg
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
$num
! 1
,
1 2
$num
3 D
)
D E
)
E F
;
F G
lfg
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
$num
! 1
,
1 2
$num
3 E
)
E F
)
F G
;
G H
lfg
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
$num
! 1
,
1 2
$num
3 E
)
E F
)
F G
;
G H
lfg
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
$num
! 0
,
0 1
$num
2 D
)
D E
)
E F
;
F G
lfg
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
$num
! 0
,
0 1
$num
2 D
)
D E
)
E F
;
F G
lfg
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
$num
! 1
,
1 2
$num
3 E
)
E F
)
F G
;
G H
lfg
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
$num
! 1
,
1 2
$num
3 E
)
E F
)
F G
;
G H
lfg
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
$num
! 1
,
1 2
$num
3 E
)
E F
)
F G
;
G H
lfg
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
$num
! 1
,
1 2
$num
3 E
)
E F
)
F G
;
G H
lfg
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
$num
! 1
,
1 2
$num
3 D
)
D E
)
E F
;
F G
lfg
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
$num
! 1
,
1 2
$num
3 E
)
E F
)
F G
;
G H
lfg
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
$num
! 1
,
1 2
$num
3 E
)
E F
)
F G
;
G H
lfg
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
$num
! 1
,
1 2
$num
3 E
)
E F
)
F G
;
G H
lfg
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
$num
! 1
,
1 2
$num
3 E
)
E F
)
F G
;
G H
lfg
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
$num
! 0
,
0 1
$num
2 D
)
D E
)
E F
;
F G
lfg
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
$num
! 1
,
1 2
$num
3 D
)
D E
)
E F
;
F G
lfg
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
$num
! 1
,
1 2
$num
3 D
)
D E
)
E F
;
F G
lfg
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
$num
! 1
,
1 2
$num
3 D
)
D E
)
E F
;
F G
lfg
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
$num
! 1
,
1 2
$num
3 D
)
D E
)
E F
;
F G
lfg
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
$num
! 1
,
1 2
$num
3 D
)
D E
)
E F
;
F G
lfg
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
$num
! 1
,
1 2
$num
3 D
)
D E
)
E F
;
F G
lfg
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
$num
! 1
,
1 2
$num
3 D
)
D E
)
E F
;
F G
lfg
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
$num
! 1
,
1 2
$num
3 D
)
D E
)
E F
;
F G
lfg
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
$num
! 1
,
1 2
$num
3 D
)
D E
)
E F
;
F G
lfg
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
$num
! 1
,
1 2
$num
3 C
)
C D
)
D E
;
E F
lfg
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
$num
! 1
,
1 2
$num
3 D
)
D E
)
E F
;
F G
lfg
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
$num
! 1
,
1 2
$num
3 D
)
D E
)
E F
;
F G
lfg
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
$num
! 0
,
0 1
$num
2 C
)
C D
)
D E
;
E F
lfg
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
$num
! 1
,
1 2
$num
3 C
)
C D
)
D E
;
E F
lfg
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
$num
! 1
,
1 2
$num
3 D
)
D E
)
E F
;
F G
lfg
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
$num
! 1
,
1 2
$num
3 D
)
D E
)
E F
;
F G
lfg
 
.
 
Add
 
(
 
new
 
FreqGain
  
(
  !
$num
! 1
,
1 2
$num
3 D
)
D E
)
E F
;
F G
lfg
   
.
   
Add
   
(
   
new
   
FreqGain
    
(
    !
$num
  ! 1
,
  1 2
$num
  3 D
)
  D E
)
  E F
;
  F G
lfg
¡¡ 
.
¡¡ 
Add
¡¡ 
(
¡¡ 
new
¡¡ 
FreqGain
¡¡  
(
¡¡  !
$num
¡¡! 1
,
¡¡1 2
$num
¡¡3 D
)
¡¡D E
)
¡¡E F
;
¡¡F G
lfg
¢¢ 
.
¢¢ 
Add
¢¢ 
(
¢¢ 
new
¢¢ 
FreqGain
¢¢  
(
¢¢  !
$num
¢¢! 1
,
¢¢1 2
$num
¢¢3 D
)
¢¢D E
)
¢¢E F
;
¢¢F G
lfg
££ 
.
££ 
Add
££ 
(
££ 
new
££ 
FreqGain
££  
(
££  !
$num
££! 1
,
££1 2
$num
££3 D
)
££D E
)
££E F
;
££F G
lfg
¤¤ 
.
¤¤ 
Add
¤¤ 
(
¤¤ 
new
¤¤ 
FreqGain
¤¤  
(
¤¤  !
$num
¤¤! 1
,
¤¤1 2
$num
¤¤3 D
)
¤¤D E
)
¤¤E F
;
¤¤F G
lfg
¥¥ 
.
¥¥ 
Add
¥¥ 
(
¥¥ 
new
¥¥ 
FreqGain
¥¥  
(
¥¥  !
$num
¥¥! 0
,
¥¥0 1
$num
¥¥2 C
)
¥¥C D
)
¥¥D E
;
¥¥E F
lfg
¦¦ 
.
¦¦ 
Add
¦¦ 
(
¦¦ 
new
¦¦ 
FreqGain
¦¦  
(
¦¦  !
$num
¦¦! 1
,
¦¦1 2
$num
¦¦3 D
)
¦¦D E
)
¦¦E F
;
¦¦F G
lfg
§§ 
.
§§ 
Add
§§ 
(
§§ 
new
§§ 
FreqGain
§§  
(
§§  !
$num
§§! 1
,
§§1 2
$num
§§3 C
)
§§C D
)
§§D E
;
§§E F
lfg
¨¨ 
.
¨¨ 
Add
¨¨ 
(
¨¨ 
new
¨¨ 
FreqGain
¨¨  
(
¨¨  !
$num
¨¨! 1
,
¨¨1 2
$num
¨¨3 D
)
¨¨D E
)
¨¨E F
;
¨¨F G
lfg
©© 
.
©© 
Add
©© 
(
©© 
new
©© 
FreqGain
©©  
(
©©  !
$num
©©! 1
,
©©1 2
$num
©©3 D
)
©©D E
)
©©E F
;
©©F G
lfg
ªª 
.
ªª 
Add
ªª 
(
ªª 
new
ªª 
FreqGain
ªª  
(
ªª  !
$num
ªª! 1
,
ªª1 2
$num
ªª3 D
)
ªªD E
)
ªªE F
;
ªªF G
lfg
«« 
.
«« 
Add
«« 
(
«« 
new
«« 
FreqGain
««  
(
««  !
$num
««! 1
,
««1 2
$num
««3 D
)
««D E
)
««E F
;
««F G
lfg
¬¬ 
.
¬¬ 
Add
¬¬ 
(
¬¬ 
new
¬¬ 
FreqGain
¬¬  
(
¬¬  !
$num
¬¬! 0
,
¬¬0 1
$num
¬¬2 C
)
¬¬C D
)
¬¬D E
;
¬¬E F
lfg
­­ 
.
­­ 
Add
­­ 
(
­­ 
new
­­ 
FreqGain
­­  
(
­­  !
$num
­­! 0
,
­­0 1
$num
­­2 C
)
­­C D
)
­­D E
;
­­E F
lfg
®® 
.
®® 
Add
®® 
(
®® 
new
®® 
FreqGain
®®  
(
®®  !
$num
®®! 1
,
®®1 2
$num
®®3 E
)
®®E F
)
®®F G
;
®®G H
lfg
¯¯ 
.
¯¯ 
Add
¯¯ 
(
¯¯ 
new
¯¯ 
FreqGain
¯¯  
(
¯¯  !
$num
¯¯! 1
,
¯¯1 2
-
¯¯3 4
$num
¯¯4 F
)
¯¯F G
)
¯¯G H
;
¯¯H I
lfg
°° 
.
°° 
Add
°° 
(
°° 
new
°° 
FreqGain
°°  
(
°°  !
$num
°°! 1
,
°°1 2
-
°°3 4
$num
°°4 E
)
°°E F
)
°°F G
;
°°G H
lfg
±± 
.
±± 
Add
±± 
(
±± 
new
±± 
FreqGain
±±  
(
±±  !
$num
±±! 0
,
±±0 1
-
±±2 3
$num
±±3 D
)
±±D E
)
±±E F
;
±±F G
lfg
²² 
.
²² 
Add
²² 
(
²² 
new
²² 
FreqGain
²²  
(
²²  !
$num
²²! 1
,
²²1 2
-
²²3 4
$num
²²4 E
)
²²E F
)
²²F G
;
²²G H
lfg
³³ 
.
³³ 
Add
³³ 
(
³³ 
new
³³ 
FreqGain
³³  
(
³³  !
$num
³³! 1
,
³³1 2
-
³³3 4
$num
³³4 E
)
³³E F
)
³³F G
;
³³G H
lfg
´´ 
.
´´ 
Add
´´ 
(
´´ 
new
´´ 
FreqGain
´´  
(
´´  !
$num
´´! 1
,
´´1 2
-
´´3 4
$num
´´4 D
)
´´D E
)
´´E F
;
´´F G
lfg
µµ 
.
µµ 
Add
µµ 
(
µµ 
new
µµ 
FreqGain
µµ  
(
µµ  !
$num
µµ! 1
,
µµ1 2
-
µµ3 4
$num
µµ4 E
)
µµE F
)
µµF G
;
µµG H
lfg
¶¶ 
.
¶¶ 
Add
¶¶ 
(
¶¶ 
new
¶¶ 
FreqGain
¶¶  
(
¶¶  !
$num
¶¶! 1
,
¶¶1 2
-
¶¶3 4
$num
¶¶4 D
)
¶¶D E
)
¶¶E F
;
¶¶F G
lfg
·· 
.
·· 
Add
·· 
(
·· 
new
·· 
FreqGain
··  
(
··  !
$num
··! 0
,
··0 1
-
··2 3
$num
··3 D
)
··D E
)
··E F
;
··F G
lfg
¸¸ 
.
¸¸ 
Add
¸¸ 
(
¸¸ 
new
¸¸ 
FreqGain
¸¸  
(
¸¸  !
$num
¸¸! 1
,
¸¸1 2
-
¸¸3 4
$num
¸¸4 F
)
¸¸F G
)
¸¸G H
;
¸¸H I
lfg
¹¹ 
.
¹¹ 
Add
¹¹ 
(
¹¹ 
new
¹¹ 
FreqGain
¹¹  
(
¹¹  !
$num
¹¹! 1
,
¹¹1 2
$num
¹¹3 D
)
¹¹D E
)
¹¹E F
;
¹¹F G
lfg
ºº 
.
ºº 
Add
ºº 
(
ºº 
new
ºº 
FreqGain
ºº  
(
ºº  !
$num
ºº! 1
,
ºº1 2
$num
ºº3 D
)
ººD E
)
ººE F
;
ººF G
lfg
»» 
.
»» 
Add
»» 
(
»» 
new
»» 
FreqGain
»»  
(
»»  !
$num
»»! 1
,
»»1 2
$num
»»3 D
)
»»D E
)
»»E F
;
»»F G
lfg
¼¼ 
.
¼¼ 
Add
¼¼ 
(
¼¼ 
new
¼¼ 
FreqGain
¼¼  
(
¼¼  !
$num
¼¼! 1
,
¼¼1 2
$num
¼¼3 C
)
¼¼C D
)
¼¼D E
;
¼¼E F
lfg
½½ 
.
½½ 
Add
½½ 
(
½½ 
new
½½ 
FreqGain
½½  
(
½½  !
$num
½½! 1
,
½½1 2
$num
½½3 D
)
½½D E
)
½½E F
;
½½F G
lfg
¾¾ 
.
¾¾ 
Add
¾¾ 
(
¾¾ 
new
¾¾ 
FreqGain
¾¾  
(
¾¾  !
$num
¾¾! /
,
¾¾/ 0
$num
¾¾1 B
)
¾¾B C
)
¾¾C D
;
¾¾D E
lfg
¿¿ 
.
¿¿ 
Add
¿¿ 
(
¿¿ 
new
¿¿ 
FreqGain
¿¿  
(
¿¿  !
$num
¿¿! 1
,
¿¿1 2
$num
¿¿3 D
)
¿¿D E
)
¿¿E F
;
¿¿F G
lfg
ÀÀ 
.
ÀÀ 
Add
ÀÀ 
(
ÀÀ 
new
ÀÀ 
FreqGain
ÀÀ  
(
ÀÀ  !
$num
ÀÀ! 1
,
ÀÀ1 2
$num
ÀÀ3 D
)
ÀÀD E
)
ÀÀE F
;
ÀÀF G
lfg
ÁÁ 
.
ÁÁ 
Add
ÁÁ 
(
ÁÁ 
new
ÁÁ 
FreqGain
ÁÁ  
(
ÁÁ  !
$num
ÁÁ! 1
,
ÁÁ1 2
$num
ÁÁ3 D
)
ÁÁD E
)
ÁÁE F
;
ÁÁF G
lfg
ÂÂ 
.
ÂÂ 
Add
ÂÂ 
(
ÂÂ 
new
ÂÂ 
FreqGain
ÂÂ  
(
ÂÂ  !
$num
ÂÂ! 1
,
ÂÂ1 2
$num
ÂÂ3 C
)
ÂÂC D
)
ÂÂD E
;
ÂÂE F
lfg
ÃÃ 
.
ÃÃ 
Add
ÃÃ 
(
ÃÃ 
new
ÃÃ 
FreqGain
ÃÃ  
(
ÃÃ  !
$num
ÃÃ! 1
,
ÃÃ1 2
$num
ÃÃ3 D
)
ÃÃD E
)
ÃÃE F
;
ÃÃF G
lfg
ÄÄ 
.
ÄÄ 
Add
ÄÄ 
(
ÄÄ 
new
ÄÄ 
FreqGain
ÄÄ  
(
ÄÄ  !
$num
ÄÄ! 0
,
ÄÄ0 1
$num
ÄÄ2 C
)
ÄÄC D
)
ÄÄD E
;
ÄÄE F
lfg
ÅÅ 
.
ÅÅ 
Add
ÅÅ 
(
ÅÅ 
new
ÅÅ 
FreqGain
ÅÅ  
(
ÅÅ  !
$num
ÅÅ! 1
,
ÅÅ1 2
$num
ÅÅ3 D
)
ÅÅD E
)
ÅÅE F
;
ÅÅF G
lfg
ÆÆ 
.
ÆÆ 
Add
ÆÆ 
(
ÆÆ 
new
ÆÆ 
FreqGain
ÆÆ  
(
ÆÆ  !
$num
ÆÆ! 1
,
ÆÆ1 2
$num
ÆÆ3 B
)
ÆÆB C
)
ÆÆC D
;
ÆÆD E
lfg
ÇÇ 
.
ÇÇ 
Add
ÇÇ 
(
ÇÇ 
new
ÇÇ 
FreqGain
ÇÇ  
(
ÇÇ  !
$num
ÇÇ! 1
,
ÇÇ1 2
$num
ÇÇ3 E
)
ÇÇE F
)
ÇÇF G
;
ÇÇG H
lfg
ÈÈ 
.
ÈÈ 
Add
ÈÈ 
(
ÈÈ 
new
ÈÈ 
FreqGain
ÈÈ  
(
ÈÈ  !
$num
ÈÈ! 1
,
ÈÈ1 2
$num
ÈÈ3 F
)
ÈÈF G
)
ÈÈG H
;
ÈÈH I
lfg
ÉÉ 
.
ÉÉ 
Add
ÉÉ 
(
ÉÉ 
new
ÉÉ 
FreqGain
ÉÉ  
(
ÉÉ  !
$num
ÉÉ! 1
,
ÉÉ1 2
$num
ÉÉ3 G
)
ÉÉG H
)
ÉÉH I
;
ÉÉI J
return
ÊÊ 
lfg
ÊÊ 
;
ÊÊ 
}
ËË 	
}
ÌÌ 
}ÍÍ ·K
.E:\GitHub\inguz-DSPUtil\InguzDSPUtilNew\IIR.cs
	namespace 	
DSPUtil
 
{ 
public 

abstract 
class 
IIR1 
:  
SoundObj! )
{ 
	protected 
int 
_n 
; 
	protected 
double 
_a1 
, 
_b0 !
,! "
_b1# &
;& '
public 
override 
ushort 
NumChannels *
{ 	
get 
{ 
return 
_input 
==  
null! %
?& '
(( )
ushort) /
)/ 0
$num0 1
:2 3
_input4 :
.: ;
NumChannels; F
;F G
} 
} 	
public 
override 
int 

Iterations &
{ 	
get 
{ 
return 
_n 
; 
} 
} 	
public"" 
override"" 
IEnumerator"" #
<""# $
ISample""$ +
>""+ ,
Samples""- 4
{## 	
get$$ 
{%% 
if&& 
(&& 
_input&& 
==&& 
null&& "
)&&" #
{'' 
double(( 
a(( 
=(( 
$num(( "
;((" #
double)) 
z0)) 
=)) 
$num))  !
;))! "
double** 
z1** 
=** 
$num**  !
;**! "
for++ 
(++ 
int++ 
j++ 
=++  
$num++! "
;++" #
j++$ %
<++& '
_n++( *
;++* +
j++, -
++++- /
)++/ 0
{,, 
double-- 
v--  
=--! "
a--# $
*--% &
_b0--' *
+--+ ,
z0--- /
*--0 1
_b1--2 5
---6 7
z1--8 :
*--; <
_a1--= @
;--@ A
z1.. 
=.. 
v.. 
;.. 
z0// 
=// 
a// 
;// 
a00 
=00 
$num00 
;00 
yield11 
return11 $
new11% (
Sample11) /
(11/ 0
v110 1
)111 2
;112 3
}22 
}33 
else44 
{55 
int66 
nc66 
=66 
_input66 #
.66# $
NumChannels66$ /
;66/ 0
double77 
[77 
]77 
z077 
=77  !
new77" %
double77& ,
[77, -
nc77- /
]77/ 0
;770 1
double88 
[88 
]88 
z188 
=88  !
new88" %
double88& ,
[88, -
nc88- /
]88/ 0
;880 1
foreach99 
(99 
ISample99 $
sample99% +
in99, .
_input99/ 5
)995 6
{:: 
ISample;; 
s;;  !
=;;" #
sample;;$ *
;;;* +
for<< 
(<< 
int<<  
c<<! "
=<<# $
$num<<% &
;<<& '
c<<( )
<<<* +
nc<<, .
;<<. /
c<<0 1
++<<1 3
)<<3 4
{== 
double>> "
a>># $
=>>% &
s>>' (
[>>( )
c>>) *
]>>* +
;>>+ ,
double?? "
v??# $
=??% &
a??' (
*??) *
_b0??+ .
+??/ 0
z0??1 3
[??3 4
c??4 5
]??5 6
*??7 8
_b1??9 <
-??= >
z1??? A
[??A B
c??B C
]??C D
*??E F
_a1??G J
;??J K
z1@@ 
[@@ 
c@@  
]@@  !
=@@" #
v@@$ %
;@@% &
z0AA 
[AA 
cAA  
]AA  !
=AA" #
aAA$ %
;AA% &
sBB 
[BB 
cBB 
]BB  
=BB! "
vBB# $
;BB$ %
}CC 
yieldDD 
returnDD $
sampleDD% +
;DD+ ,
}EE 
}FF 
}GG 
}HH 	
}II 
publicNN 

classNN 
IIR1HPNN 
:NN 
IIR1NN 
{OO 
publicVV 
IIR1HPVV 
(VV 
uintVV 
fSVV 
,VV 
doubleVV %
fCVV& (
,VV( )
intVV* -
nVV. /
)VV/ 0
{WW 	
baseXX 
.XX 

SampleRateXX 
=XX 
fSXX  
;XX  !
_nYY 
=YY 
nYY 
;YY 
doubleZZ 
wZZ 
=ZZ 
MathZZ 
.ZZ 
TanZZ 
(ZZ  
MathZZ  $
.ZZ$ %
PIZZ% '
*ZZ( )
fCZZ* ,
/ZZ- .
fSZZ/ 1
)ZZ1 2
;ZZ2 3
double[[ 
a[[ 
=[[ 
$num[[ 
/[[ 
([[ 
$num[[ 
+[[ 
w[[  !
)[[! "
;[[" #
_b0\\ 
=\\ 
a\\ 
;\\ 
_b1]] 
=]] 
-]] 
_b0]] 
;]] 
_a1^^ 
=^^ 
a^^ 
*^^ 
(^^ 
w^^ 
-^^ 
$num^^ 
)^^ 
;^^ 
}__ 	
publicff 
IIR1HPff 
(ff 
doubleff 
fCff 
,ff  
	ISoundObjff! *
inputff+ 0
)ff0 1
{gg 	
uinthh 
fShh 
=hh 
inputhh 
.hh 

SampleRatehh &
;hh& '
baseii 
.ii 

SampleRateii 
=ii 
fSii  
;ii  !
basejj 
.jj 
Inputjj 
=jj 
inputjj 
;jj 
doublekk 
wkk 
=kk 
Mathkk 
.kk 
Tankk 
(kk  
Mathkk  $
.kk$ %
PIkk% '
*kk( )
fCkk* ,
/kk- .
fSkk/ 1
)kk1 2
;kk2 3
doublell 
all 
=ll 
$numll 
/ll 
(ll 
$numll 
+ll 
wll  !
)ll! "
;ll" #
_b0mm 
=mm 
amm 
;mm 
_b1nn 
=nn 
-nn 
_b0nn 
;nn 
_a1oo 
=oo 
aoo 
*oo 
(oo 
woo 
-oo 
$numoo 
)oo 
;oo 
}pp 	
}qq 
publicvv 

classvv 
IIR1LPvv 
:vv 
IIR1vv 
{ww 
public~~ 
IIR1LP~~ 
(~~ 
uint~~ 
fS~~ 
,~~ 
double~~ %
fC~~& (
,~~( )
int~~* -
n~~. /
)~~/ 0
{ 	
base
 
.
 

SampleRate
 
=
 
fS
  
;
  !
_n
 
=
 
n
 
;
 
double
 
w
 
=
 
Math
 
.
 
Tan
 
(
  
Math
  $
.
$ %
PI
% '
*
( )
fC
* ,
/
- .
fS
/ 1
)
1 2
;
2 3
double
 
a
 
=
 
$num
 
/
 
(
 
$num
 
+
 
w
  !
)
! "
;
" #
_b0
 
=
 
w
 
*
 
a
 
;
 
_b1
 
=
 
_b0
 
;
 
_a1
 
=
 
a
 
*
 
(
 
w
 
-
 
$num
 
)
 
;
 
}
 	
public
 
IIR1LP
 
(
 
double
 
fC
 
,
  
	ISoundObj
! *
input
+ 0
)
0 1
{
 	
uint
 
fS
 
=
 
input
 
.
 

SampleRate
 &
;
& '
base
 
.
 

SampleRate
 
=
 
fS
  
;
  !
base
 
.
 
Input
 
=
 
input
 
;
 
double
 
w
 
=
 
Math
 
.
 
Tan
 
(
  
Math
  $
.
$ %
PI
% '
*
( )
fC
* ,
/
- .
fS
/ 1
)
1 2
;
2 3
double
 
a
 
=
 
$num
 
/
 
(
 
$num
 
+
 
w
  !
)
! "
;
" #
_b0
 
=
 
w
 
*
 
a
 
;
 
_b1
 
=
 
_b0
 
;
 
_a1
 
=
 
a
 
*
 
(
 
w
 
-
 
$num
 
)
 
;
 
}
 	
}
 
} ¨
3E:\GitHub\inguz-DSPUtil\InguzDSPUtilNew\Invertor.cs
	namespace 	
DSPUtil
 
{ 
public		 

class		 
Invertor		 
:		 
SoundObj		 $
{

 
private 
bool 
[ 
] 
_invert 
; 
public 
Invertor 
( 
) 
{ 	
} 	
public 
override 
IEnumerator #
<# $
ISample$ +
>+ ,
Samples- 4
{ 	
get 
{ 
if 
( 
_input 
== 
null "
)" #
{ 
yield 
break 
;  
} 
foreach 
( 
ISample  
sample! '
in( *
Input+ 0
)0 1
{ 
yield 
return  
_nxt! %
(% &
sample& ,
), -
;- .
}   
}!! 
}"" 	
internal$$ 
ISample$$ 
_nxt$$ 
($$ 
ISample$$ %
s$$& '
)$$' (
{%% 	
if&& 
(&& 
_invert&& 
!=&& 
null&& 
)&&  
{'' 
for(( 
((( 
ushort(( 
c(( 
=(( 
$num((  !
;((! "
c((# $
<((% &
s((' (
.((( )
NumChannels(() 4
;((4 5
c((6 7
++((7 9
)((9 :
{)) 
if** 
(** 
_invert** 
[**  
c**  !
]**! "
)**" #
{++ 
s,, 
[,, 
c,, 
],, 
=,, 
-,,  
s,,  !
[,,! "
c,," #
],,# $
;,,$ %
}-- 
}.. 
}// 
return00 
s00 
;00 
}11 	
public77 
void77 
Invert77 
(77 
ushort77 !
nChannel77" *
,77* +
bool77, 0
doInvert771 9
)779 :
{88 	
if99 
(99 
_invert99 
==99 
null99 
)99  
{:: 
_invert<< 
=<< 
new<< 
bool<< "
[<<" #
$num<<# %
]<<% &
;<<& '
}== 
if>> 
(>> 
nChannel>> 
>>> 
_invert>> "
.>>" #
Length>># )
)>>) *
{?? 
throw@@ 
new@@ '
ArgumentOutOfRangeException@@ 5
(@@5 6
$str@@6 @
)@@@ A
;@@A B
}AA 
_invertBB 
[BB 
nChannelBB 
]BB 
=BB 
doInvertBB  (
;BB( )
}CC 	
}DD 
}EE 2
2E:\GitHub\inguz-DSPUtil\InguzDSPUtilNew\License.cs
	namespace 	
DSPUtil
 
{ 
public 

class 
License 
{ 
private 
const 
string 
CERT !
=" #
$str 
+ 
$str B
+C D
$str B
+C D
$str B
+C D
$str B
+C D
$str B
+C D
$str B
+C D
$str B
+C D
$str B
+C D
$str B
+C D
$str B
+C D
$str B
+C D
$str B
+C D
$str B
+C D
$str   2
+  3 4
$str!! 
;!! 
private## 
const## 
string## 
URL##  
=##! "
$str### W
;##W X
private$$ 
const$$ 
string$$ 
SIG$$  
=$$! "
$str$$# 8
;$$8 9
public-- 
static-- 
bool-- 
Verify-- !
(--! "
string--" (
data--) -
,--- .
string--/ 5
	signature--6 ?
)--? @
{.. 	
byte00 
[00 
]00 
certdata00 
=00 
new00 !
System00" (
.00( )
Text00) -
.00- .
ASCIIEncoding00. ;
(00; <
)00< =
.00= >
GetBytes00> F
(00F G
CERT00G K
)00K L
;00L M
byte11 
[11 
]11 
rawdata11 
=11 
Encoding11 %
.11% &
UTF811& *
.11* +
GetBytes11+ 3
(113 4
data114 8
)118 9
;119 :
SHA144 
sha44 
=44 
new44 %
SHA1CryptoServiceProvider44 4
(444 5
)445 6
;446 7
byte55 
[55 
]55 
contenthash55 
=55  
sha55! $
.55$ %
ComputeHash55% 0
(550 1
rawdata551 8
)558 9
;559 :
int88 
sl88 
=88 
(88 
	signature88 
.88  
Length88  &
%88' (
$num88) *
)88* +
;88+ ,
if99 
(99 
sl99 
>99 
$num99 
)99 
for:: 
(:: 
int:: 
j:: 
=:: 
$num:: 
;:: 
j:: 
<:: 
$num::  !
-::! "
sl::" $
;::$ %
j::& '
++::' )
)::) *
{::+ ,
	signature::- 6
+=::7 9
$str::: =
;::= >
}::? @
byte;; 
[;; 
];; 
sigdata;; 
=;; 
Convert;; $
.;;$ %
FromBase64String;;% 5
(;;5 6
	signature;;6 ?
);;? @
;;;@ A
bool== 
ok== 
=== 
false== 
;== 
X509Certificate2>> 
cert>> !
=>>" #
new>>$ '
X509Certificate2>>( 8
(>>8 9
certdata>>9 A
)>>A B
;>>B C(
RSAPKCS1SignatureDeformatter?? (
RSADeformatter??) 7
=??8 9
new??: =(
RSAPKCS1SignatureDeformatter??> Z
(??Z [
)??[ \
;??\ ]
RSADeformatter@@ 
.@@ 
SetHashAlgorithm@@ +
(@@+ ,
$str@@, 2
)@@2 3
;@@3 4
RSADeformatterAA 
.AA 
SetKeyAA !
(AA! "
certAA" &
.AA& '
	PublicKeyAA' 0
.AA0 1
KeyAA1 4
)AA4 5
;AA5 6
okBB 
=BB 
RSADeformatterBB 
.BB 
VerifySignatureBB -
(BB- .
contenthashBB. 9
,BB9 :
sigdataBB; B
)BBB C
;BBC D
returnCC 
okCC 
;CC 
}DD 	
publicMM 
staticMM 
voidMM 
UpdateMM !
(MM! "
stringMM" (
macMM) ,
,MM, -
stringMM. 4
guidMM5 9
)MM9 :
{NN 	
stringOO 
urlOO 
=OO 
StringOO 
.OO  
FormatOO  &
(OO& '
URLOO' *
,OO* +
guidOO, 0
,OO0 1
macOO2 5
)OO5 6
;OO6 7
stringPP 
sigPP 
=PP 
StringPP 
.PP  
FormatPP  &
(PP& '
SIGPP' *
,PP* +
guidPP, 0
,PP0 1
macPP2 5
)PP5 6
;PP6 7
stringQQ 
valQQ 
;QQ 
HttpWebRequestSS 
reqSS 
=SS  
(SS! "
HttpWebRequestSS" 0
)SS0 1

WebRequestSS1 ;
.SS; <
CreateSS< B
(SSB C
urlSSC F
)SSF G
;SSG H
reqTT 
.TT 
TimeoutTT 
=TT 
$numTT 
;TT 
HttpWebResponseUU 
rspUU 
=UU  !
(UU" #
HttpWebResponseUU# 2
)UU2 3
reqUU3 6
.UU6 7
GetResponseUU7 B
(UUB C
)UUC D
;UUD E
XmlDocumentVV 
docVV 
=VV 
newVV !
XmlDocumentVV" -
(VV- .
)VV. /
;VV/ 0
docWW 
.WW 
LoadWW 
(WW 
rspWW 
.WW 
GetResponseStreamWW *
(WW* +
)WW+ ,
)WW, -
;WW- .
rspXX 
.XX 
CloseXX 
(XX 
)XX 
;XX 
valYY 
=YY 
docYY 
.YY 
SelectSingleNodeYY &
(YY& '
$strYY' .
)YY. /
.YY/ 0
	InnerTextYY0 9
;YY9 :
bool[[ 
ok[[ 
=[[ 
Verify[[ 
([[ 
sig[[  
,[[  !
val[[" %
)[[% &
;[[& '
if\\ 
(\\ 
!\\ 
ok\\ 
)\\ 
{]] 
throw^^ 
new^^ 
	Exception^^ #
(^^# $
$str^^$ F
)^^F G
;^^G H
}__ 
}`` 	
}bb 
}cc ò²
3E:\GitHub\inguz-DSPUtil\InguzDSPUtilNew\Loudness.cs
	namespace 	
DSPUtil
 
{ 
public## 

class## 
Loudness## 
{$$ 
static%% 
double%% 
[%% 
]%% 
f%% 
=%% 
{%% 
$num%%! #
,%%# $
$num%%( *
,%%* +
$num%%- 1
,%%1 2
$num%%4 8
,%%8 9
$num%%; ?
,%%? @
$num%%B F
,%%F G
$num%%I M
,%%M N
$num%%O T
,%%T U
$num%%V [
,%%[ \
$num%%] b
,%%b c
$num%%d i
,%%i j
$num%%k p
,%%p q
$num%%r w
,%%w x
$num%%y ~
,%%~ 
$num
%% 
,
%% 
$num
%% 
,
%% 
$num
%% 
,
%% 
$num
%% 
,
%% 
$num
%% 
,
%%  
$num
%%¡ ¥
,
%%¥ ¦
$num
%%§ «
,
%%« ¬
$num
%%­ ±
,
%%± ²
$num
%%³ ·
,
%%· ¸
$num
%%¹ ½
,
%%½ ¾
$num
%%¿ Ã
,
%%Ã Ä
$num
%%Å É
,
%%É Ê
$num
%%Ë Ï
,
%%Ï Ð
$num
%%Ñ Ö
,
%%Ö ×
$num
%%Ø Ý
}
%%Ý Þ
;
%%Þ ß
static&& 
double&& 
[&& 
]&& 
af&& 
=&& 
{&& 
$num&& #
,&&# $
$num&&% *
,&&* +
$num&&, 1
,&&1 2
$num&&3 8
,&&8 9
$num&&: ?
,&&? @
$num&&A F
,&&F G
$num&&H M
,&&M N
$num&&O T
,&&T U
$num&&V [
,&&[ \
$num&&] b
,&&b c
$num&&d i
,&&i j
$num&&k p
,&&p q
$num&&r w
,&&w x
$num&&y ~
,&&~ 
$num
&& 
,
&& 
$num
&& 
,
&& 
$num
&& 
,
&& 
$num
&& 
,
&& 
$num
&& ¡
,
&&¡ ¢
$num
&&£ ¨
,
&&¨ ©
$num
&&ª ¯
,
&&¯ °
$num
&&± ¶
,
&&¶ ·
$num
&&¸ ½
,
&&½ ¾
$num
&&¿ Ä
,
&&Ä Å
$num
&&Æ Ë
,
&&Ë Ì
$num
&&Í Ò
,
&&Ò Ó
$num
&&Ô Ù
,
&&Ù Ú
$num
&&Û à
,
&&à á
$num
&&â ç
}
&&ç è
;
&&è é
static'' 
double'' 
['' 
]'' 
Lu'' 
='' 
{'' 
-'' 
$num'' #
,''# $
-''% &
$num''& *
,''* +
-'', -
$num''- 1
,''1 2
-''3 4
$num''4 8
,''8 9
-'': ;
$num''; ?
,''? @
-''A B
$num''B F
,''F G
-''H I
$num''I M
,''M N
-''P Q
$num''Q T
,''T U
-''V W
$num''W Z
,''Z [
-''\ ]
$num''] `
,''` a
-''b c
$num''c f
,''f g
-''h i
$num''i l
,''l m
-''n o
$num''o r
,''r s
-''t u
$num''u x
,''x y
$num''{ ~
,''~ 
$num
'' 
,
'' 
$num
'' 
,
'' 
$num
'' 
,
'' 
-
'' 
$num
'' 
,
'' 
-
'' 
$num
'' ¡
,
''¡ ¢
-
''¤ ¥
$num
''¥ ¨
,
''¨ ©
$num
''¬ ¯
,
''¯ °
$num
''³ ¶
,
''¶ ·
$num
''º ½
,
''½ ¾
-
''¿ À
$num
''À Ã
,
''Ã Ä
-
''Å Æ
$num
''Æ É
,
''É Ê
-
''Ë Ì
$num
''Ì Ð
,
''Ð Ñ
-
''Ò Ó
$num
''Ó ×
,
''× Ø
-
''Ù Ú
$num
''Ú Ý
}
''Ý Þ
;
''Þ ß
static(( 
double(( 
[(( 
](( 
Tf(( 
=(( 
{(( 
$num(( #
,((# $
$num((% )
,(() *
$num((+ /
,((/ 0
$num((1 5
,((5 6
$num((7 ;
,((; <
$num((= A
,((A B
$num((C G
,((G H
$num((I M
,((M N
$num((O S
,((S T
$num((U Y
,((Y Z
$num(([ _
,((_ `
$num((a e
,((e f
$num((g j
,((j k
$num((l o
,((o p
$num((q t
,((t u
$num((v y
,((y z
$num(({ ~
,((~ 
$num
(( 
,
(( 
$num
(( 
,
(( 
$num
(( 
,
(( 
-
(( 
$num
(( 
,
(( 
-
(( 
$num
(( 
,
(( 
-
(( 
$num
(( 
,
((  
-
((¡ ¢
$num
((¢ ¥
,
((¥ ¦
-
((§ ¨
$num
((¨ «
,
((« ¬
$num
((­ °
,
((° ±
$num
((² ¶
,
((¶ ·
$num
((¸ ¼
,
((¼ ½
$num
((¾ Â
}
((Ã Ä
;
((Ä Å
public00 
static00 
FilterProfile00 #
SPL00$ '
(00' (
double00( .
phon00/ 3
)003 4
{11 	
FilterProfile22 
lfg22 
=22 
new22  #
FilterProfile22$ 1
(221 2
)222 3
;223 4
if33 
(33 
(33 
phon33 
<33 
$num33 
)33 
|33 
(33 
phon33 "
>33# $
$num33% (
)33( )
)33) *
{44 
throw55 
new55 
ArgumentException55 +
(55+ ,
$str55, G
)55G H
;55H I
}66 
double88 
Ln88 
=88 
phon88 
;88 
for:: 
(:: 
int:: 
j:: 
=:: 
$num:: 
;:: 
j:: 
<:: 
f::  !
.::! "
Length::" (
;::( )
j::* +
++::+ -
)::- .
{;; 
double== 
Af== 
=== 
$num== #
*==$ %
Math==& *
.==* +
Pow==+ .
(==. /
$num==/ 1
,==1 2
(==3 4
$num==4 9
*==: ;
Ln==< >
)==> ?
-==@ A
$num==B F
)==F G
+==H I
Math==J N
.==N O
Pow==O R
(==R S
$num==S V
*==W X
Math==Y ]
.==] ^
Pow==^ a
(==a b
$num==b d
,==d e
(==f g
(==g h
(==h i
Tf==i k
[==k l
j==l m
]==m n
+==o p
Lu==q s
[==s t
j==t u
]==u v
)==v w
/==x y
$num==z |
)==| }
-==~ 
$num
== 
)
== 
)
== 
,
== 
af
== 
[
== 
j
== 
]
== 
)
== 
;
== 
double>> 
Lp>> 
=>> 
(>> 
(>> 
$num>>  
/>>! "
af>># %
[>>% &
j>>& '
]>>' (
)>>( )
*>>* +
Math>>, 0
.>>0 1
Log10>>1 6
(>>6 7
Af>>7 9
)>>9 :
)>>: ;
->>< =
Lu>>> @
[>>@ A
j>>A B
]>>B C
+>>D E
$num>>F H
;>>H I
FreqGainAA 
fgAA 
=AA 
newAA !
FreqGainAA" *
(AA* +
fAA+ ,
[AA, -
jAA- .
]AA. /
,AA/ 0
LpAA1 3
)AA3 4
;AA4 5
lfgBB 
.BB 
AddBB 
(BB 
fgBB 
)BB 
;BB 
}CC 
returnDD 
lfgDD 
;DD 
}EE 	
publicGG 
staticGG 
FilterProfileGG #
DifferentialSPLGG$ 3
(GG3 4
doubleGG4 :
phon0GG; @
,GG@ A
doubleGGB H
phon1GGI N
)GGN O
{HH 	
returnII 
DifferentialSPLII "
(II" #
phon0II# (
,II( )
phon1II* /
,II/ 0
$numII1 4
)II4 5
;II5 6
}JJ 	
publicLL 
staticLL 
FilterProfileLL #
DifferentialSPLLL$ 3
(LL3 4
doubleLL4 :
phon0LL; @
,LL@ A
doubleLLB H
phon1LLI N
,LLN O
doubleLLP V
scaleLLW \
)LL\ ]
{MM 	
FilterProfileNN 
splNN 
=NN 
newNN  #
FilterProfileNN$ 1
(NN1 2
)NN2 3
;NN3 4
FilterProfileOO 
spl0OO 
=OO  
LoudnessOO! )
.OO) *
SPLOO* -
(OO- .
phon0OO. 3
)OO3 4
;OO4 5
FilterProfilePP 
spl1PP 
=PP  
LoudnessPP! )
.PP) *
SPLPP* -
(PP- .
phon1PP. 3
)PP3 4
;PP4 5
forQQ 
(QQ 
intQQ 
jQQ 
=QQ 
$numQQ 
;QQ 
jQQ 
<QQ 
spl1QQ  $
.QQ$ %
CountQQ% *
;QQ* +
jQQ, -
++QQ- /
)QQ/ 0
{RR 
FreqGainSS 
fgSS 
=SS 
spl1SS "
[SS" #
jSS# $
]SS$ %
;SS% &
fgTT 
.TT 
GainTT 
=TT 
scaleTT 
*TT  !
(TT" #
spl0TT$ (
[TT( )
jTT) *
]TT* +
.TT+ ,
GainTT, 0
-TT1 2
fgTT3 5
.TT5 6
GainTT6 :
)TT; <
;TT< =
splUU 
.UU 
AddUU 
(UU 
fgUU 
)UU 
;UU 
}VV 
returnWW 
splWW 
;WW 
}XX 	
publicbb 
staticbb 
doublebb 
WeightedVolume1bb ,
(bb, -
	ISoundObjbb- 6
srcbb7 :
,bb: ;
doublebb< B
dbSPLbbC H
,bbH I
doublebbJ P
	dbSPLBasebbQ Z
)bbZ [
{cc 	
ifdd 
(dd 
srcdd 
.dd 
NumChannelsdd 
!=dd  "
$numdd# $
)dd$ %
{ee 
throwff 
newff 
ArgumentExceptionff +
(ff+ ,
$strff, E
)ffE F
;ffF G
}gg 
SoundBufferjj 
buffjj 
=jj 
newjj "
SoundBufferjj# .
(jj. /
srcjj/ 2
)jj2 3
;jj3 4
buffkk 
.kk 
ReadAllkk 
(kk 
)kk 
;kk 
buffnn 
.nn 
PadTonn 
(nn 
buffnn 
.nn 
Countnn !
*nn" #
$numnn$ %
)nn% &
;nn& '
buffpp 
.pp 
PadToPowerOfTwopp  
(pp  !
)pp! "
;pp" #
intqq 
nqq 
=qq 
buffqq 
.qq 
Countqq 
;qq 
doubless 
	wvImpulsess 
=ss 
WeightedVolume2ss .
(ss. /
buffss/ 3
,ss3 4
dbSPLss5 :
,ss: ;
	dbSPLBasess< E
)ssE F
;ssF G
CallbackSourcevv 
diracvv  
=vv! "
newvv# &
CallbackSourcevv' 5
(vv5 6
$numvv6 7
,vv7 8
srcvv9 <
.vv< =

SampleRatevv= G
,vvG H
delegatevvI Q
(vvQ R
longvvR V
jvvW X
)vvX Y
{ww 
ifxx 
(xx 
jxx 
>=xx 
nxx 
)xx 
{yy 
returnzz 
nullzz 
;zz  
}{{ 
double|| 
v|| 
=|| 
$num|| 
;|| 
if}} 
(}} 
j}} 
==}} 
n}} 
/}} 
$num}} 
)}} 
{~~ 
v 
= 
$num 
; 
}
 
return
 
new
 
Sample
 !
(
! "
v
" #
)
# $
;
$ %
}
 
)
 
;
 
buff
 
=
 
new
 
SoundBuffer
 "
(
" #
dirac
# (
)
( )
;
) *
buff
 
.
 
ReadAll
 
(
 
)
 
;
 
double
 
wvDirac
 
=
 
WeightedVolume2
 ,
(
, -
buff
- 1
,
1 2
dbSPL
3 8
,
8 9
	dbSPLBase
: C
)
C D
;
D E
buff
 
=
 
null
 
;
 
GC
 
.
 
Collect
 
(
 
)
 
;
 
return
 
	wvImpulse
 
/
 
wvDirac
 &
;
& '
}
 	
private
 
static
 
double
 
WeightedVolume2
 -
(
- .
SoundBuffer
. 9
src
: =
,
= >
double
? E
dbSPL
F K
,
K L
double
M S
	dbSPLBase
T ]
)
] ^
{
 	
double
 
v
 
=
 
$num
 
;
 
uint
 
sr
 
=
 
src
 
.
 

SampleRate
 $
;
$ %
Complex
 
[
 
]
 
[
 
]
 
data
 
=
 
src
 "
.
" #
ToComplexArray
# 1
(
1 2
)
2 3
;
3 4
Complex
 
[
 
]
 
cdata
 
=
 
data
 "
[
" #
$num
# $
]
$ %
;
% &
Fourier
 
.
 
FFT
 
(
 
cdata
 
.
 
Length
 $
,
$ %
cdata
& +
)
+ ,
;
, -
FilterProfile
 
lfg
 
;
 
if
 
(
 
	dbSPLBase
 
==
 
$num
 
)
 
{
 
lfg
   
=
   
SPL
   
(
   
dbSPL
   
)
    
;
    !
}
¡¡ 
else
¢¢ 
{
££ 
lfg
¤¤ 
=
¤¤ 
DifferentialSPL
¤¤ %
(
¤¤% &
dbSPL
¤¤& +
,
¤¤+ ,
	dbSPLBase
¤¤- 6
)
¤¤6 7
;
¤¤7 8
}
¥¥ 
int
©© 
nStart
©© 
=
©© 
(
©© 
int
©© 
)
©© 
(
©© 
lfg
©© "
[
©©" #
$num
©©# $
]
©©$ %
.
©©% &
Freq
©©& *
*
©©+ ,
(
©©- .
long
©©. 2
)
©©2 3
cdata
©©3 8
.
©©8 9
Length
©©9 ?
/
©©@ A
sr
©©B D
)
©©D E
;
©©E F
int
ªª 
nEnd
ªª 
=
ªª 
(
ªª 
int
ªª 
)
ªª 
(
ªª 
lfg
ªª  
[
ªª  !
lfg
ªª! $
.
ªª$ %
Count
ªª% *
-
ªª+ ,
$num
ªª- .
]
ªª. /
.
ªª/ 0
Freq
ªª0 4
*
ªª5 6
(
ªª7 8
long
ªª8 <
)
ªª< =
cdata
ªª= B
.
ªªB C
Length
ªªC I
/
ªªJ K
sr
ªªL N
)
ªªN O
;
ªªO P
int
­­ 
nfg
­­ 
=
­­ 
$num
­­ 
;
­­ 
int
¯¯ 
startp
¯¯ 
=
¯¯ 
nStart
¯¯ 
;
¯¯  
int
°° 
endp
°° 
=
°° 
(
°° 
int
°° 
)
°° 
(
°° 
lfg
°°  
[
°°  !
nfg
°°! $
+
°°% &
$num
°°' (
]
°°( )
.
°°) *
Freq
°°* .
*
°°/ 0
(
°°1 2
long
°°2 6
)
°°6 7
cdata
°°7 <
.
°°< =
Length
°°= C
/
°°D E
sr
°°F H
)
°°H I
;
°°I J
double
±± 
dB1
±± 
=
±± 
lfg
±± 
[
±± 
nfg
±±  
]
±±  !
.
±±! "
Gain
±±" &
;
±±& '
double
²² 
dB2
²² 
=
²² 
lfg
²² 
[
²² 
nfg
²²  
+
²²  !
$num
²²! "
]
²²" #
.
²²# $
Gain
²²$ (
;
²²( )
double
´´ 
	vThisBand
´´ 
=
´´ 
$num
´´  
;
´´  !
int
µµ 
	nThisBand
µµ 
=
µµ 
$num
µµ 
;
µµ 
for
¶¶ 
(
¶¶ 
int
¶¶ 
j
¶¶ 
=
¶¶ 
nStart
¶¶ 
;
¶¶  
j
¶¶! "
<
¶¶# $
nEnd
¶¶% )
;
¶¶) *
j
¶¶+ ,
++
¶¶, .
)
¶¶. /
{
·· 
if
¸¸ 
(
¸¸ 
j
¸¸ 
>
¸¸ 
endp
¸¸ 
)
¸¸ 
{
¹¹ 
if
ºº 
(
ºº 
	nThisBand
ºº !
>
ºº" #
$num
ºº$ %
)
ºº% &
v
ºº' (
+=
ºº) +
Math
ºº, 0
.
ºº0 1
Sqrt
ºº1 5
(
ºº5 6
	vThisBand
ºº6 ?
/
ºº@ A
	nThisBand
ººB K
)
ººK L
;
ººL M
while
»» 
(
»» 
j
»» 
>=
»» 
endp
»»  $
)
»»$ %
{
¼¼ 
nfg
½½ 
++
½½ 
;
½½ 
startp
¾¾ 
=
¾¾  
j
¾¾! "
;
¾¾" #
endp
¿¿ 
=
¿¿ 
(
¿¿  
int
¿¿  #
)
¿¿# $
(
¿¿$ %
lfg
¿¿% (
[
¿¿( )
nfg
¿¿) ,
+
¿¿- .
$num
¿¿/ 0
]
¿¿0 1
.
¿¿1 2
Freq
¿¿2 6
*
¿¿7 8
(
¿¿9 :
long
¿¿: >
)
¿¿> ?
cdata
¿¿? D
.
¿¿D E
Length
¿¿E K
/
¿¿L M
sr
¿¿N P
)
¿¿P Q
;
¿¿Q R
dB1
ÀÀ 
=
ÀÀ 
lfg
ÀÀ !
[
ÀÀ! "
nfg
ÀÀ" %
]
ÀÀ% &
.
ÀÀ& '
Gain
ÀÀ' +
;
ÀÀ+ ,
dB2
ÁÁ 
=
ÁÁ 
lfg
ÁÁ !
[
ÁÁ! "
nfg
ÁÁ" %
+
ÁÁ& '
$num
ÁÁ( )
]
ÁÁ) *
.
ÁÁ* +
Gain
ÁÁ+ /
;
ÁÁ/ 0
}
ÂÂ 
	vThisBand
ÃÃ 
=
ÃÃ 
$num
ÃÃ  !
;
ÃÃ! "
	nThisBand
ÄÄ 
=
ÄÄ 
$num
ÄÄ  !
;
ÄÄ! "
}
ÅÅ 
Complex
ÆÆ 
c
ÆÆ 
=
ÆÆ 
cdata
ÆÆ !
[
ÆÆ! "
j
ÆÆ" #
]
ÆÆ# $
;
ÆÆ$ %
double
ÇÇ 
dbHere
ÇÇ 
=
ÇÇ 
dB1
ÇÇ  #
+
ÇÇ$ %
(
ÇÇ& '
(
ÇÇ' (
dB2
ÇÇ( +
-
ÇÇ, -
dB1
ÇÇ. 1
)
ÇÇ1 2
*
ÇÇ3 4
(
ÇÇ5 6
double
ÇÇ6 <
)
ÇÇ< =
(
ÇÇ= >
j
ÇÇ> ?
-
ÇÇ@ A
startp
ÇÇB H
)
ÇÇH I
/
ÇÇJ K
(
ÇÇL M
double
ÇÇM S
)
ÇÇS T
(
ÇÇT U
endp
ÇÇU Y
-
ÇÇZ [
startp
ÇÇ\ b
)
ÇÇb c
)
ÇÇc d
;
ÇÇd e
	vThisBand
ÈÈ 
+=
ÈÈ 
(
ÈÈ 
c
ÈÈ 
.
ÈÈ  
Re
ÈÈ  "
*
ÈÈ# $
c
ÈÈ% &
.
ÈÈ& '
Re
ÈÈ' )
)
ÈÈ) *
/
ÈÈ+ ,
MathUtil
ÈÈ- 5
.
ÈÈ5 6
gain
ÈÈ6 :
(
ÈÈ: ;
dbHere
ÈÈ; A
)
ÈÈA B
;
ÈÈB C
	nThisBand
ÉÉ 
++
ÉÉ 
;
ÉÉ 
}
ÊÊ 
if
ËË 
(
ËË 
	nThisBand
ËË 
>
ËË 
$num
ËË 
)
ËË 
v
ËË 
+=
ËË  
Math
ËË! %
.
ËË% &
Sqrt
ËË& *
(
ËË* +
	vThisBand
ËË+ 4
/
ËË5 6
	nThisBand
ËË7 @
)
ËË@ A
;
ËËA B
return
ÍÍ 
v
ÍÍ 
;
ÍÍ 
}
ÎÎ 	
public
×× 
static
×× 
double
×× 
WeightedVolume
×× +
(
××+ ,
	ISoundObj
××, 5
src
××6 9
,
××9 :
double
××; A
dbSPL
××B G
,
××G H
double
××I O
	dbSPLBase
××P Y
)
××Y Z
{
ØØ 	
double
ÙÙ 
wv
ÙÙ 
=
ÙÙ 
$num
ÙÙ 
;
ÙÙ 
for
ÚÚ 
(
ÚÚ 
ushort
ÚÚ 
c
ÚÚ 
=
ÚÚ 
$num
ÚÚ 
;
ÚÚ 
c
ÚÚ  
<
ÚÚ! "
src
ÚÚ# &
.
ÚÚ& '
NumChannels
ÚÚ' 2
;
ÚÚ2 3
c
ÚÚ4 5
++
ÚÚ5 7
)
ÚÚ7 8
{
ÛÛ 
SingleChannel
ÜÜ 
channel
ÜÜ %
=
ÜÜ& '
src
ÜÜ( +
.
ÜÜ+ ,
Channel
ÜÜ, 3
(
ÜÜ3 4
c
ÜÜ4 5
)
ÜÜ5 6
;
ÜÜ6 7
wv
ÝÝ 
+=
ÝÝ 
Loudness
ÝÝ 
.
ÝÝ 
WeightedVolume1
ÝÝ .
(
ÝÝ. /
channel
ÝÝ/ 6
,
ÝÝ6 7
dbSPL
ÝÝ8 =
,
ÝÝ= >
	dbSPLBase
ÝÝ? H
)
ÝÝH I
;
ÝÝI J
}
ÞÞ 
src
ßß 
.
ßß 
Reset
ßß 
(
ßß 
)
ßß 
;
ßß 
wv
àà 
=
àà 
wv
àà 
/
àà 
src
àà 
.
àà 
NumChannels
àà %
;
àà% &
return
áá 
wv
áá 
;
áá 
}
ââ 	
public
êê 
static
êê 
double
êê 
WeightedVolume
êê +
(
êê+ ,
	ISoundObj
êê, 5
src
êê6 9
)
êê9 :
{
ëë 	
return
ìì 
WeightedVolume
ìì !
(
ìì! "
src
ìì" %
,
ìì% &
$num
ìì' )
,
ìì) *
$num
ìì+ ,
)
ìì, -
;
ìì- .
}
íí 	
}
îî 
}ïï À]
3E:\GitHub\inguz-DSPUtil\InguzDSPUtilNew\MathUtil.cs
	namespace 	
DSPUtil
 
{ 
public

 

class

 
DSPUtil

 
{ 
public 
const 
int 
BUFSIZE  
=! "
$num# '
;' (
public 
static 
Version 
VERSION %
{& '
get( +
{, -
return. 4
new5 8
Version9 @
(@ A
$strA I
)I J
;J K
}L M
}N O
public 
static 
DateTime 
EXPIRY %
{& '
get( +
{, -
return. 4
DateTime5 =
.= >
MaxValue> F
;F G
}H I
}J K
public 
static 
String 
GetVersionInfo +
(+ ,
), -
{ 	
string 
s 
= 
String 
. 
Format $
($ %
$str% 5
,5 6
VERSION7 >
,> ?
IsMono@ F
(F G
)G H
?I J
$strK U
:V W
$strX Z
)Z [
;[ \
return 
s 
; 
} 	
public 
static 
bool 
IsMono !
(! "
)" #
{ 	
Type 
t 
= 
Type 
. 
GetType !
(! "
$str" 0
)0 1
;1 2
return 
( 
t 
!= 
null 
) 
?  
true! %
:& '
false( -
;- .
} 	
} 
public 

enum 
ChannelFlag 
{ 
NONE 
= 
$num 
, 
LEFT   
=   
$num   
,   
RIGHT!! 
=!! 
$num!! 
,!! 
BOTH"" 
="" 
$num"" 
}## 
public&& 

sealed&& 
class&& 
MathUtil&&  
{'' 
public(( 
static(( 
double(( 
SQRT2(( "
=((# $
Math((% )
.(() *
Sqrt((* .
(((. /
$num((/ 0
)((0 1
;((1 2
public)) 
static)) 
double)) 
INVSQRT2)) %
=))& '
$num))( )
/))) *
Math))* .
.)). /
Sqrt))/ 3
())3 4
$num))4 5
)))5 6
;))6 7
public++ 
static++ 
bool++ 
IsPowerOfTwo++ '
(++' (
int++( +
n++, -
)++- .
{,, 	
return.. 
(.. 
(.. 
n.. 
&.. 
(.. 
n.. 
-.. 
$num.. 
)..  
)..  !
==.." $
$num..% &
)..& '
&&..( *
n..+ ,
>.., -
$num..- .
;... /
}// 	
public00 
static00 
int00 
NextPowerOfTwo00 (
(00( )
int00) ,
n00- .
)00. /
{11 	
n33 
--33 
;33 
n44 
|=44 
n44 
>>44 
$num44 
;44 
n55 
|=55 
n55 
>>55 
$num55 
;55 
n66 
|=66 
n66 
>>66 
$num66 
;66 
n77 
|=77 
n77 
>>77 
$num77 
;77 
n88 
|=88 
n88 
>>88 
$num88 
;88 
n99 
++99 
;99 
return:: 
n:: 
;:: 
};; 	
public== 
static== 
double== 
dB== 
(==  
double==  &
gain==' +
)==+ ,
{>> 	
return?? 
(?? 
$num?? 
*?? 
Math?? 
.?? 
Log?? !
(??! "
gain??" &
,??& '
$num??' )
)??) *
)??* +
;??+ ,
}@@ 	
publicAA 
staticAA 
doubleAA 
gainAA !
(AA! "
doubleAA" (
dBAA) +
)AA+ ,
{BB 	
returnCC 
(CC 
MathCC 
.CC 
PowCC 
(CC 
$numCC 
,CC  
dBCC! #
/CC$ %
$numCC& (
)CC( )
)CC) *
;CC* +
}DD 	
publicGG 
staticGG 
doubleGG 
FeetGG !
(GG! "
intGG" %
samplesGG& -
,GG- .
uintGG/ 3

sampleRateGG4 >
)GG> ?
{HH 	
returnII 
$numII 
*II 
samplesII  '
/II( )

sampleRateII* 4
;II4 5
}JJ 	
publicKK 
staticKK 
intKK 
FSamplesKK "
(KK" #
doubleKK# )
feetKK* .
,KK. /
uintKK0 4

sampleRateKK5 ?
)KK? @
{LL 	
returnMM 
(MM 
intMM 
)MM 
(MM 
(MM 
feetMM 
/MM  
$numMM! +
)MM+ ,
*MM- .

sampleRateMM/ 9
)MM9 :
;MM: ;
}NN 	
publicPP 
staticPP 
doublePP 
MetresPP #
(PP# $
intPP$ '
samplesPP( /
,PP/ 0
uintPP1 5

sampleRatePP6 @
)PP@ A
{QQ 	
returnRR 
$numRR 
*RR 
samplesRR #
/RR$ %

sampleRateRR& 0
;RR0 1
}SS 	
publicTT 
staticTT 
intTT 
MSamplesTT "
(TT" #
doubleTT# )
metresTT* 0
,TT0 1
uintTT2 6

sampleRateTT7 A
)TTA B
{UU 	
returnVV 
(VV 
intVV 
)VV 
(VV 
(VV 
metresVV  
/VV! "
$numVV# )
)VV) *
*VV+ ,

sampleRateVV- 7
)VV7 8
;VV8 9
}WW 	
publicYY 
staticYY 
doubleYY 

FcFromFeetYY '
(YY' (
doubleYY( .
rYY/ 0
)YY0 1
{ZZ 	
return[[ 
$num[[ 
/[[ 
([[  !
$num[[! "
*[[# $
Math[[% )
.[[) *
PI[[* ,
*[[- .
r[[/ 0
)[[0 1
;[[1 2
}\\ 	
public^^ 
static^^ 
double^^ 
FcFromMetres^^ )
(^^) *
double^^* 0
r^^1 2
)^^2 3
{__ 	
return`` 
$num`` 
/`` 
(`` 
$num`` 
*``  
Math``! %
.``% &
PI``& (
*``) *
r``+ ,
)``, -
;``- .
}aa 	
publichh 
statichh 
doublehh 
Barkhh !
(hh! "
doublehh" (
fhh) *
)hh* +
{ii 	
doublekk 
zkk 
=kk 
(kk 
$numkk 
/kk 
(kk  !
$numkk! "
+kk# $
$numkk% )
/kk* +
fkk, -
)kk- .
)kk. /
-kk0 1
$numkk2 6
;kk6 7
returnll 
zll 
;ll 
}mm 	
publictt 
statictt 
doublett 
BarkCbtt #
(tt# $
doublett$ *
ftt+ ,
)tt, -
{uu 	
doubleww 
zww 
=ww 
Barkww 
(ww 
fww 
)ww 
;ww 
doublexx 
Cbxx 
=xx 
$numxx 
/xx 
(xx  !
(xx! "
zxx" #
*xx$ %
zxx& '
)xx' (
-xx) *
(xx+ ,
$numxx, 1
*xx2 3
zxx4 5
)xx5 6
+xx7 8
$numxx9 ?
)xx? @
;xx@ A
returnyy 
Cbyy 
;yy 
}zz 	
public|| 
delegate|| 
double|| 
InvertDelegate|| -
(||- .
double||. 4
f||5 6
)||6 7
;||7 8
public}} 
static}} 
double}} 
invert}} #
(}}# $
InvertDelegate}}$ 2
fn}}3 5
,}}5 6
double}}7 =
low}}> A
,}}A B
double}}C I
high}}J N
,}}N O
double}}P V
i}}W X
)}}X Y
{~~ 	
double 
probe 
; 
while
 
(
 
high
 
-
 
low
 
>
 
$num
  %
)
% &
{
 
probe
 
=
 
(
 
low
 
+
 
high
 #
)
# $
/
% &
$num
' (
;
( )
if
 
(
 
fn
 
(
 
probe
 
)
 
>
 
i
  !
)
! "
high
 
=
 
probe
  
;
  !
else
 
low
 
=
 
probe
 
;
  
}
 
return
 
low
 
;
 
}
 	
public
 
static
 
uint
 
gcd
 
(
 
uint
 #
a
$ %
,
% &
uint
' +
b
, -
)
- .
{
 	
while
 
(
 
b
 
!=
 
$num
 
)
 
{
 
uint
 
t
 
=
 
b
 
;
 
b
 
=
 
a
 
%
 
b
 
;
 
a
 
=
 
t
 
;
 
}
 
return
 
a
 
;
 
}
 	
public
 
static
 
uint
 
lcm
 
(
 
uint
 #
a
$ %
,
% &
uint
' +
b
, -
)
- .
{
 	
long
 
g
 
=
 
gcd
 
(
 
a
 
,
 
b
 
)
 
;
 
uint
 
l
 
=
 
(
 
uint
 
)
 
(
 
a
 
/
 
g
  !
)
! "
*
# $
b
% &
;
& '
return
 
l
 
;
 
}
 	
public
   
static
   
double
   
Radians
   $
(
  $ %
double
  % +
degrees
  , 3
)
  3 4
{
¡¡ 	
return
¢¢ 
degrees
¢¢ 
*
¢¢ 
Math
¢¢ !
.
¢¢! "
PI
¢¢" $
/
¢¢% &
$num
¢¢' *
;
¢¢* +
}
££ 	
public
¥¥ 
static
¥¥ 
double
¥¥ 
Degrees
¥¥ $
(
¥¥$ %
double
¥¥% +
radians
¥¥, 3
)
¥¥3 4
{
¦¦ 	
return
§§ 
radians
§§ 
*
§§ 
$num
§§  
/
§§! "
Math
§§# '
.
§§' (
PI
§§( *
;
§§* +
}
¨¨ 	
}
©© 
}ªª ÿ»
1E:\GitHub\inguz-DSPUtil\InguzDSPUtilNew\Matrix.cs
	namespace 	
DSPUtil
 
{ 
abstract		 
public		 
class		 
Matrix		  
{

 
	protected 
ushort 

_dimension #
;# $
	protected 
double 
[ 
, 
] 
_matrix #
;# $
	protected 
double 
_param 
=  !
double" (
.( )
NaN) ,
;, -
virtual 
public 
double 
Param #
{ 	
get 
{ 
return 
_param 
;  
}! "
set 
{ 
_param 
= 
value  
;  !
}" #
} 	
public 
ISample 
Process 
( 
ISample &
sample' -
)- .
{ 	
if 
( 
sample 
. 
NumChannels "
!=# %

_dimension& 0
)0 1
{ 
throw 
new %
InvalidOperationException 3
(3 4
)4 5
;5 6
} 
Sample 
s 
= 
new 
Sample !
(! "

_dimension" ,
), -
;- .
for"" 
("" 
ushort"" 
j"" 
="" 
$num"" 
;"" 
j""  
<""! "

_dimension""# -
;""- .
j""/ 0
++""0 2
)""2 3
{## 
for&& 
(&& 
ushort&& 
c&& 
=&& 
$num&&  !
;&&! "
c&&# $
<&&% &

_dimension&&' 1
;&&1 2
c&&3 4
++&&4 6
)&&6 7
{'' 
s(( 
[(( 
j(( 
](( 
+=(( 
sample(( "
[((" #
c((# $
](($ %
*((& '
_matrix((( /
[((/ 0
j((0 1
,((1 2
c((2 3
]((3 4
;((4 5
})) 
}** 
return++ 
s++ 
;++ 
},, 	
}-- 
abstract// 
public// 
class// 

Amb1Matrix// $
://% &
Matrix//' -
{00 
public11 

Amb1Matrix11 
(11 
)11 
{22 	

_dimension33 
=33 
$num33 
;33 
_matrix44 
=44 
new44 
double44  
[44  !
$num44! "
,44" #
$num44# $
]44$ %
;44% &
}55 	
}66 
public<< 

class<< 
Amb1RotAboutX<< 
:<<  

Amb1Matrix<<! +
{== 
public>> 
Amb1RotAboutX>> 
(>> 
double>> #
degrees>>$ +
)>>+ ,
:?? 
base?? 
(?? 
)?? 
{@@ 	
ParamAA 
=AA 
degreesAA 
;AA 
}BB 	
overrideCC 
publicCC 
doubleCC 
ParamCC $
{DD 	
setEE 
{FF 
ifGG 
(GG 
_paramGG 
!=GG 
valueGG #
)GG# $
{HH 
_paramII 
=II 
valueII "
;II" #
doubleJJ 
rJJ 
=JJ 
MathUtilJJ '
.JJ' (
RadiansJJ( /
(JJ/ 0
valueJJ0 5
)JJ5 6
;JJ6 7
_matrixKK 
[KK 
$numKK 
,KK 
$numKK  
]KK  !
=KK" #
$numKK$ %
;KK% &
_matrixLL 
[LL 
$numLL 
,LL 
$numLL  
]LL  !
=LL" #
$numLL$ %
;LL% &
_matrixMM 
[MM 
$numMM 
,MM 
$numMM  
]MM  !
=MM" #
MathMM$ (
.MM( )
CosMM) ,
(MM, -
rMM- .
)MM. /
;MM/ 0
_matrixNN 
[NN 
$numNN 
,NN 
$numNN  
]NN  !
=NN" #
MathNN$ (
.NN( )
SinNN) ,
(NN, -
rNN- .
)NN. /
;NN/ 0
_matrixOO 
[OO 
$numOO 
,OO 
$numOO  
]OO  !
=OO" #
-OO$ %
MathOO% )
.OO) *
SinOO* -
(OO- .
rOO. /
)OO/ 0
;OO0 1
_matrixPP 
[PP 
$numPP 
,PP 
$numPP  
]PP  !
=PP" #
MathPP$ (
.PP( )
CosPP) ,
(PP, -
rPP- .
)PP. /
;PP/ 0
}QQ 
}RR 
}SS 	
}TT 
publicVV 

classVV 
Amb1RotAboutYVV 
:VV  

Amb1MatrixVV! +
{WW 
publicXX 
Amb1RotAboutYXX 
(XX 
doubleXX #
degreesXX$ +
)XX+ ,
:YY 
baseYY 
(YY 
)YY 
{ZZ 	
Param[[ 
=[[ 
degrees[[ 
;[[ 
}\\ 	
override]] 
public]] 
double]] 
Param]] $
{^^ 	
set__ 
{`` 
ifaa 
(aa 
_paramaa 
!=aa 
valueaa #
)aa# $
{bb 
_paramcc 
=cc 
valuecc "
;cc" #
doubledd 
rdd 
=dd 
MathUtildd '
.dd' (
Radiansdd( /
(dd/ 0
valuedd0 5
)dd5 6
;dd6 7
_matrixee 
[ee 
$numee 
,ee 
$numee  
]ee  !
=ee" #
$numee$ %
;ee% &
_matrixff 
[ff 
$numff 
,ff 
$numff  
]ff  !
=ff" #
Mathff$ (
.ff( )
Cosff) ,
(ff, -
rff- .
)ff. /
;ff/ 0
_matrixgg 
[gg 
$numgg 
,gg 
$numgg  
]gg  !
=gg" #
Mathgg$ (
.gg( )
Singg) ,
(gg, -
rgg- .
)gg. /
;gg/ 0
_matrixhh 
[hh 
$numhh 
,hh 
$numhh  
]hh  !
=hh" #
$numhh$ %
;hh% &
_matrixii 
[ii 
$numii 
,ii 
$numii  
]ii  !
=ii" #
-ii$ %
Mathii% )
.ii) *
Sinii* -
(ii- .
rii. /
)ii/ 0
;ii0 1
_matrixjj 
[jj 
$numjj 
,jj 
$numjj  
]jj  !
=jj" #
Mathjj$ (
.jj( )
Cosjj) ,
(jj, -
rjj- .
)jj. /
;jj/ 0
}kk 
}ll 
}mm 	
}nn 
publicpp 

classpp 
Amb1RotAboutZpp 
:pp  

Amb1Matrixpp! +
{qq 
publicrr 
Amb1RotAboutZrr 
(rr 
doublerr #
degreesrr$ +
)rr+ ,
:ss 
basess 
(ss 
)ss 
{tt 	
Paramuu 
=uu 
degreesuu 
;uu 
}vv 	
overrideww 
publicww 
doubleww 
Paramww $
{xx 	
setyy 
{zz 
if{{ 
({{ 
_param{{ 
!={{ 
value{{ #
){{# $
{|| 
_param}} 
=}} 
value}} "
;}}" #
double~~ 
r~~ 
=~~ 
MathUtil~~ '
.~~' (
Radians~~( /
(~~/ 0
value~~0 5
)~~5 6
;~~6 7
_matrix 
[ 
$num 
, 
$num  
]  !
=" #
$num$ %
;% &
_matrix
 
[
 
$num
 
,
 
$num
  
]
  !
=
" #
Math
$ (
.
( )
Cos
) ,
(
, -
r
- .
)
. /
;
/ 0
_matrix
 
[
 
$num
 
,
 
$num
  
]
  !
=
" #
Math
$ (
.
( )
Sin
) ,
(
, -
r
- .
)
. /
;
/ 0
_matrix
 
[
 
$num
 
,
 
$num
  
]
  !
=
" #
-
$ %
Math
% )
.
) *
Sin
* -
(
- .
r
. /
)
/ 0
;
0 1
_matrix
 
[
 
$num
 
,
 
$num
  
]
  !
=
" #
Math
$ (
.
( )
Cos
) ,
(
, -
r
- .
)
. /
;
/ 0
_matrix
 
[
 
$num
 
,
 
$num
  
]
  !
=
" #
$num
$ %
;
% &
}
 
}
 
}
 	
}
 
public
 

class
 
Amb1Dominance
 
:
  

Amb1Matrix
! +
{
 
private
 
double
 
_az
 
,
 
_el
 
;
  
public
 
Amb1Dominance
 
(
 
double
 #
lambda
$ *
,
* +
double
, 2
az
3 5
,
5 6
double
7 =
el
> @
)
@ A
:
 
base
 
(
 
)
 
{
 	
Param
 
=
 
lambda
 
;
 
_az
 
=
 
az
 
;
 
_el
 
=
 
el
 
;
 
}
 	
override
 
public
 
double
 
Param
 $
{
 	
set
 
{
 
if
 
(
 
_param
 
!=
 
value
 #
)
# $
{
 
_param
 
=
 
value
 "
;
" #
double
 
lambda
 !
=
" #
value
$ )
;
) *
_matrix
   
[
   
$num
   
,
   
$num
    
]
    !
=
  " #
$num
  $ '
*
  ( )
(
  * +
lambda
  + 1
+
  2 3
(
  4 5
$num
  5 6
/
  7 8
lambda
  9 ?
)
  ? @
)
  @ A
;
  A B
_matrix
¡¡ 
[
¡¡ 
$num
¡¡ 
,
¡¡ 
$num
¡¡  
]
¡¡  !
=
¡¡" #
(
¡¡$ %
$num
¡¡% &
/
¡¡' (
Math
¡¡) -
.
¡¡- .
Sqrt
¡¡. 2
(
¡¡2 3
$num
¡¡3 4
)
¡¡4 5
)
¡¡5 6
*
¡¡7 8
(
¡¡9 :
lambda
¡¡: @
-
¡¡A B
(
¡¡C D
$num
¡¡D E
/
¡¡F G
lambda
¡¡H N
)
¡¡N O
)
¡¡O P
;
¡¡P Q
_matrix
¢¢ 
[
¢¢ 
$num
¢¢ 
,
¢¢ 
$num
¢¢  
]
¢¢  !
=
¢¢" #
(
¢¢$ %
$num
¢¢% &
/
¢¢' (
Math
¢¢) -
.
¢¢- .
Sqrt
¢¢. 2
(
¢¢2 3
$num
¢¢3 4
)
¢¢4 5
)
¢¢5 6
*
¢¢7 8
(
¢¢9 :
lambda
¢¢: @
-
¢¢A B
(
¢¢C D
$num
¢¢D E
/
¢¢F G
lambda
¢¢H N
)
¢¢N O
)
¢¢O P
;
¢¢P Q
_matrix
££ 
[
££ 
$num
££ 
,
££ 
$num
££  
]
££  !
=
££" #
$num
££$ '
*
££( )
(
££* +
lambda
££+ 1
+
££2 3
(
££4 5
$num
££5 6
/
££7 8
lambda
££9 ?
)
££? @
)
££@ A
;
££A B
_matrix
¤¤ 
[
¤¤ 
$num
¤¤ 
,
¤¤ 
$num
¤¤  
]
¤¤  !
=
¤¤" #
$num
¤¤$ %
;
¤¤% &
_matrix
¥¥ 
[
¥¥ 
$num
¥¥ 
,
¥¥ 
$num
¥¥  
]
¥¥  !
=
¥¥" #
$num
¥¥$ %
;
¥¥% &
}
¦¦ 
}
§§ 
}
¨¨ 	
}
©© 
public
«« 

class
«« 
	Amb1Focus
«« 
:
«« 

Amb1Matrix
«« '
{
¬¬ 
private
­­ 
double
­­ 
_az
­­ 
,
­­ 
_el
­­ 
;
­­  
public
®® 
	Amb1Focus
®® 
(
®® 
double
®® 
degrees
®®  '
,
®®' (
double
®®) /
az
®®0 2
,
®®2 3
double
®®4 :
el
®®; =
)
®®= >
:
¯¯ 
base
¯¯ 
(
¯¯ 
)
¯¯ 
{
°° 	
Param
±± 
=
±± 
degrees
±± 
;
±± 
_az
²² 
=
²² 
az
²² 
;
²² 
_el
³³ 
=
³³ 
el
³³ 
;
³³ 
}
´´ 	
override
µµ 
public
µµ 
double
µµ 
Param
µµ $
{
¶¶ 	
set
·· 
{
¸¸ 
if
¹¹ 
(
¹¹ 
_param
¹¹ 
!=
¹¹ 
value
¹¹ #
)
¹¹# $
{
ºº 
_param
»» 
=
»» 
value
»» "
;
»»" #
double
¼¼ 
r
¼¼ 
=
¼¼ 
MathUtil
¼¼ '
.
¼¼' (
Radians
¼¼( /
(
¼¼/ 0
value
¼¼0 5
)
¼¼5 6
;
¼¼6 7
double
½½ 
sinr
½½ 
=
½½  !
Math
½½" &
.
½½& '
Sin
½½' *
(
½½* +
r
½½+ ,
)
½½, -
;
½½- .
double
¾¾ 
sqr2
¾¾ 
=
¾¾  !
Math
¾¾" &
.
¾¾& '
Sqrt
¾¾' +
(
¾¾+ ,
$num
¾¾, -
)
¾¾- .
;
¾¾. /
_matrix
¿¿ 
[
¿¿ 
$num
¿¿ 
,
¿¿ 
$num
¿¿  
]
¿¿  !
=
¿¿" #
(
¿¿$ %
$num
¿¿% &
/
¿¿' (
(
¿¿) *
$num
¿¿* +
+
¿¿, -
Math
¿¿. 2
.
¿¿2 3
Abs
¿¿3 6
(
¿¿6 7
sinr
¿¿7 ;
)
¿¿; <
)
¿¿< =
)
¿¿= >
;
¿¿> ?
_matrix
ÀÀ 
[
ÀÀ 
$num
ÀÀ 
,
ÀÀ 
$num
ÀÀ  
]
ÀÀ  !
=
ÀÀ" #
sqr2
ÀÀ$ (
*
ÀÀ) *
(
ÀÀ+ ,
sinr
ÀÀ, 0
/
ÀÀ1 2
(
ÀÀ3 4
$num
ÀÀ4 5
+
ÀÀ6 7
Math
ÀÀ8 <
.
ÀÀ< =
Abs
ÀÀ= @
(
ÀÀ@ A
sinr
ÀÀA E
)
ÀÀE F
)
ÀÀF G
)
ÀÀG H
;
ÀÀH I
_matrix
ÁÁ 
[
ÁÁ 
$num
ÁÁ 
,
ÁÁ 
$num
ÁÁ  
]
ÁÁ  !
=
ÁÁ" #
(
ÁÁ$ %
$num
ÁÁ% &
/
ÁÁ' (
sqr2
ÁÁ) -
)
ÁÁ- .
*
ÁÁ/ 0
(
ÁÁ1 2
sinr
ÁÁ2 6
/
ÁÁ7 8
(
ÁÁ9 :
$num
ÁÁ: ;
+
ÁÁ< =
Math
ÁÁ> B
.
ÁÁB C
Abs
ÁÁC F
(
ÁÁF G
sinr
ÁÁG K
)
ÁÁK L
)
ÁÁL M
)
ÁÁM N
;
ÁÁN O
_matrix
ÂÂ 
[
ÂÂ 
$num
ÂÂ 
,
ÂÂ 
$num
ÂÂ  
]
ÂÂ  !
=
ÂÂ" #
(
ÂÂ$ %
$num
ÂÂ% &
/
ÂÂ' (
(
ÂÂ) *
$num
ÂÂ* +
+
ÂÂ, -
Math
ÂÂ. 2
.
ÂÂ2 3
Abs
ÂÂ3 6
(
ÂÂ6 7
sinr
ÂÂ7 ;
)
ÂÂ; <
)
ÂÂ< =
)
ÂÂ= >
;
ÂÂ> ?
_matrix
ÃÃ 
[
ÃÃ 
$num
ÃÃ 
,
ÃÃ 
$num
ÃÃ  
]
ÃÃ  !
=
ÃÃ" #
Math
ÃÃ$ (
.
ÃÃ( )
Sqrt
ÃÃ) -
(
ÃÃ- .
(
ÃÃ. /
$num
ÃÃ/ 0
-
ÃÃ1 2
Math
ÃÃ3 7
.
ÃÃ7 8
Abs
ÃÃ8 ;
(
ÃÃ; <
sinr
ÃÃ< @
)
ÃÃ@ A
)
ÃÃA B
/
ÃÃC D
(
ÃÃE F
$num
ÃÃF G
+
ÃÃH I
Math
ÃÃJ N
.
ÃÃN O
Abs
ÃÃO R
(
ÃÃR S
sinr
ÃÃS W
)
ÃÃW X
)
ÃÃX Y
)
ÃÃY Z
;
ÃÃZ [
_matrix
ÄÄ 
[
ÄÄ 
$num
ÄÄ 
,
ÄÄ 
$num
ÄÄ  
]
ÄÄ  !
=
ÄÄ" #
Math
ÄÄ$ (
.
ÄÄ( )
Sqrt
ÄÄ) -
(
ÄÄ- .
(
ÄÄ. /
$num
ÄÄ/ 0
-
ÄÄ1 2
Math
ÄÄ3 7
.
ÄÄ7 8
Abs
ÄÄ8 ;
(
ÄÄ; <
sinr
ÄÄ< @
)
ÄÄ@ A
)
ÄÄA B
/
ÄÄC D
(
ÄÄE F
$num
ÄÄF G
+
ÄÄH I
Math
ÄÄJ N
.
ÄÄN O
Abs
ÄÄO R
(
ÄÄR S
sinr
ÄÄS W
)
ÄÄW X
)
ÄÄX Y
)
ÄÄY Z
;
ÄÄZ [
}
ÅÅ 
}
ÆÆ 
}
ÇÇ 	
}
ÈÈ 
public
ÊÊ 

class
ÊÊ 
Amb1Push
ÊÊ 
:
ÊÊ 

Amb1Matrix
ÊÊ &
{
ËË 
private
ÌÌ 
double
ÌÌ 
_az
ÌÌ 
,
ÌÌ 
_el
ÌÌ 
;
ÌÌ  
public
ÍÍ 
Amb1Push
ÍÍ 
(
ÍÍ 
double
ÍÍ 
degrees
ÍÍ &
,
ÍÍ& '
double
ÍÍ( .
az
ÍÍ/ 1
,
ÍÍ1 2
double
ÍÍ3 9
el
ÍÍ: <
)
ÍÍ< =
:
ÎÎ 
base
ÎÎ 
(
ÎÎ 
)
ÎÎ 
{
ÏÏ 	
Param
ÐÐ 
=
ÐÐ 
degrees
ÐÐ 
;
ÐÐ 
_az
ÑÑ 
=
ÑÑ 
az
ÑÑ 
;
ÑÑ 
_el
ÒÒ 
=
ÒÒ 
el
ÒÒ 
;
ÒÒ 
}
ÓÓ 	
override
ÔÔ 
public
ÔÔ 
double
ÔÔ 
Param
ÔÔ $
{
ÕÕ 	
set
ÖÖ 
{
×× 
if
ØØ 
(
ØØ 
_param
ØØ 
!=
ØØ 
value
ØØ #
)
ØØ# $
{
ÙÙ 
_param
ÚÚ 
=
ÚÚ 
value
ÚÚ "
;
ÚÚ" #
double
ÛÛ 
r
ÛÛ 
=
ÛÛ 
MathUtil
ÛÛ '
.
ÛÛ' (
Radians
ÛÛ( /
(
ÛÛ/ 0
value
ÛÛ0 5
)
ÛÛ5 6
;
ÛÛ6 7
_matrix
ÜÜ 
[
ÜÜ 
$num
ÜÜ 
,
ÜÜ 
$num
ÜÜ  
]
ÜÜ  !
=
ÜÜ" #
$num
ÜÜ$ %
;
ÜÜ% &
_matrix
ÝÝ 
[
ÝÝ 
$num
ÝÝ 
,
ÝÝ 
$num
ÝÝ  
]
ÝÝ  !
=
ÝÝ" #
Math
ÝÝ$ (
.
ÝÝ( )
Sqrt
ÝÝ) -
(
ÝÝ- .
$num
ÝÝ. /
)
ÝÝ/ 0
*
ÝÝ1 2
Math
ÝÝ3 7
.
ÝÝ7 8
Abs
ÝÝ8 ;
(
ÝÝ; <
Math
ÝÝ< @
.
ÝÝ@ A
Sin
ÝÝA D
(
ÝÝD E
r
ÝÝE F
)
ÝÝF G
)
ÝÝG H
*
ÝÝI J
Math
ÝÝK O
.
ÝÝO P
Sin
ÝÝP S
(
ÝÝS T
r
ÝÝT U
)
ÝÝU V
;
ÝÝV W
_matrix
ÞÞ 
[
ÞÞ 
$num
ÞÞ 
,
ÞÞ 
$num
ÞÞ  
]
ÞÞ  !
=
ÞÞ" #
Math
ÞÞ$ (
.
ÞÞ( )
Cos
ÞÞ) ,
(
ÞÞ, -
r
ÞÞ- .
)
ÞÞ. /
*
ÞÞ0 1
Math
ÞÞ2 6
.
ÞÞ6 7
Cos
ÞÞ7 :
(
ÞÞ: ;
r
ÞÞ; <
)
ÞÞ< =
;
ÞÞ= >
_matrix
ßß 
[
ßß 
$num
ßß 
,
ßß 
$num
ßß  
]
ßß  !
=
ßß" #
Math
ßß$ (
.
ßß( )
Cos
ßß) ,
(
ßß, -
r
ßß- .
)
ßß. /
*
ßß0 1
Math
ßß2 6
.
ßß6 7
Cos
ßß7 :
(
ßß: ;
r
ßß; <
)
ßß< =
;
ßß= >
_matrix
àà 
[
àà 
$num
àà 
,
àà 
$num
àà  
]
àà  !
=
àà" #
Math
àà$ (
.
àà( )
Cos
àà) ,
(
àà, -
r
àà- .
)
àà. /
*
àà0 1
Math
àà2 6
.
àà6 7
Cos
àà7 :
(
àà: ;
r
àà; <
)
àà< =
;
àà= >
}
áá 
}
ââ 
}
ãã 	
}
ää 
public
ææ 

class
ææ 
	Amb1Press
ææ 
:
ææ 

Amb1Matrix
ææ '
{
çç 
private
èè 
double
èè 
_az
èè 
,
èè 
_el
èè 
;
èè  
public
éé 
	Amb1Press
éé 
(
éé 
double
éé 
degrees
éé  '
,
éé' (
double
éé) /
az
éé0 2
,
éé2 3
double
éé4 :
el
éé; =
)
éé= >
:
êê 
base
êê 
(
êê 
)
êê 
{
ëë 	
Param
ìì 
=
ìì 
degrees
ìì 
;
ìì 
_az
íí 
=
íí 
az
íí 
;
íí 
_el
îî 
=
îî 
el
îî 
;
îî 
}
ïï 	
override
ðð 
public
ðð 
double
ðð 
Param
ðð $
{
ññ 	
set
òò 
{
óó 
if
ôô 
(
ôô 
_param
ôô 
!=
ôô 
value
ôô #
)
ôô# $
{
õõ 
_param
öö 
=
öö 
value
öö "
;
öö" #
double
÷÷ 
r
÷÷ 
=
÷÷ 
MathUtil
÷÷ '
.
÷÷' (
Radians
÷÷( /
(
÷÷/ 0
value
÷÷0 5
)
÷÷5 6
;
÷÷6 7
_matrix
øø 
[
øø 
$num
øø 
,
øø 
$num
øø  
]
øø  !
=
øø" #
$num
øø$ %
;
øø% &
_matrix
ùù 
[
ùù 
$num
ùù 
,
ùù 
$num
ùù  
]
ùù  !
=
ùù" #
Math
ùù$ (
.
ùù( )
Sqrt
ùù) -
(
ùù- .
$num
ùù. /
)
ùù/ 0
*
ùù1 2
Math
ùù3 7
.
ùù7 8
Abs
ùù8 ;
(
ùù; <
Math
ùù< @
.
ùù@ A
Sin
ùùA D
(
ùùD E
r
ùùE F
)
ùùF G
)
ùùG H
*
ùùI J
Math
ùùK O
.
ùùO P
Sin
ùùP S
(
ùùS T
r
ùùT U
)
ùùU V
;
ùùV W
_matrix
úú 
[
úú 
$num
úú 
,
úú 
$num
úú  
]
úú  !
=
úú" #
Math
úú$ (
.
úú( )
Cos
úú) ,
(
úú, -
r
úú- .
)
úú. /
*
úú0 1
Math
úú2 6
.
úú6 7
Cos
úú7 :
(
úú: ;
r
úú; <
)
úú< =
;
úú= >
_matrix
ûû 
[
ûû 
$num
ûû 
,
ûû 
$num
ûû  
]
ûû  !
=
ûû" #
Math
ûû$ (
.
ûû( )
Cos
ûû) ,
(
ûû, -
r
ûû- .
)
ûû. /
;
ûû/ 0
_matrix
üü 
[
üü 
$num
üü 
,
üü 
$num
üü  
]
üü  !
=
üü" #
Math
üü$ (
.
üü( )
Cos
üü) ,
(
üü, -
r
üü- .
)
üü. /
;
üü/ 0
}
ýý 
}
þþ 
}
ÿÿ 	
}
 
} °
/E:\GitHub\inguz-DSPUtil\InguzDSPUtilNew\Misc.cs
	namespace 	
DSPUtil
 
{		 
class

 	
Value


 
{ 
private 
string 
[ 
] 
_value 
;  
public 
Value 
( 
string 
s 
) 
{ 	
char 
[ 
] 
c 
= 
{ 
$char 
} 
; 
_value 
= 
s 
. 
Split 
( 
c 
, 
$num  !
)! "
;" #
} 	
private 
string 
Val 
{ 	
get 
{ 
if 
( 
_value 
== 
null "
)" #
{ 
return 
$str 
; 
} 
if 
( 
_value 
. 
Length !
>" #
$num$ %
)% &
{ 
return 
_value !
[! "
$num" #
]# $
;$ %
} 
else 
if 
( 
_value 
.  
Length  &
==' )
$num* +
)+ ,
{ 
return   
_value   !
[  ! "
$num  " #
]  # $
;  $ %
}!! 
return"" 
$str"" 
;"" 
}$$ 
}%% 	
public&& 
string&& 
Tag&& 
{'' 	
get(( 
{)) 
if** 
(** 
_value** 
.** 
Length** !
>**" #
$num**$ %
)**% &
{++ 
return,, 
_value,, !
[,,! "
$num,," #
],,# $
;,,$ %
}-- 
return.. 
$str.. 
;.. 
}// 
}00 	
public11 
string11 
StringValue11 !
{22 	
get33 
{44 
return55 
Val55 
;55 
}66 
}77 	
public88 
bool88 
	BoolValue88 
{99 	
get:: 
{;; 
switch<< 
(<< 
Val<< 
)<< 
{== 
case>> 
$str>> 
:>> 
return?? 
false?? $
;??$ %
case@@ 
$str@@ 
:@@ 
returnAA 
trueAA #
;AA# $
defaultBB 
:BB 
throwCC 
newCC !
	ExceptionCC" +
(CC+ ,
$strCC, O
)CCO P
;CCP Q
}DD 
}EE 
}FF 	
publicGG 
intGG 
IntValueGG 
{HH 	
getII 
{JJ 
returnKK 
intKK 
.KK 
ParseKK  
(KK  !
ValKK! $
,KK$ %
CultureInfoKK& 1
.KK1 2
InvariantCultureKK2 B
)KKB C
;KKC D
}LL 
}MM 	
publicNN 
floatNN 

FloatValueNN 
{OO 	
getPP 
{QQ 
returnRR 
floatRR 
.RR 
ParseRR "
(RR" #
ValRR# &
,RR& '
CultureInfoRR( 3
.RR3 4
InvariantCultureRR4 D
)RRD E
;RRE F
}SS 
}TT 	
}UU 
}VV ù0
0E:\GitHub\inguz-DSPUtil\InguzDSPUtilNew\Mixer.cs
	namespace 	
DSPUtil
 
{ 
[		 
Serializable		 
]		 
public

 

class

 
Mixer

 
:

 
SoundObj

 !
{ 
List 
< 
	ISoundObj 
> 
_inputs 
=  !
new" %
List& *
<* +
	ISoundObj+ 4
>4 5
(5 6
)6 7
;7 8
List 
< 
double 
> 
_gains 
= 
new !
List" &
<& '
double' -
>- .
(. /
)/ 0
;0 1
public 
Mixer 
( 
) 
{ 	
} 	
public 
void 
Add 
( 
	ISoundObj !
input" '
,' (
double) /
	gainUnits0 9
)9 :
{ 	
if 
( 
_inputs 
. 
Count 
==  
$num! "
)" #
{ 
Input 
= 
input 
; 
} 
if 
( 
_inputs 
. 
Count 
> 
$num  !
)! "
{ 
if 
( 
input 
. 
NumChannels %
!=& (
NumChannels) 4
)4 5
{ 
throw 
new 
	Exception '
(' (
$str( ]
)] ^
;^ _
}   
}!! 
_inputs"" 
."" 
Add"" 
("" 
input"" 
)"" 
;"" 
_gains## 
.## 
Add## 
(## 
	gainUnits##  
)##  !
;##! "
}$$ 	
public&& 
override&& 
int&& 

Iterations&& &
{'' 	
get(( 
{)) 
int** 
i** 
=** 
$num** 
;** 
foreach++ 
(++ 
	ISoundObj++ "
input++# (
in++) +
_inputs++, 3
)++3 4
{,, 
i-- 
=-- 
Math-- 
.-- 
Max--  
(--  !
i--! "
,--" #
input--$ )
.--) *

Iterations--* 4
)--4 5
;--5 6
}.. 
return// 
i// 
;// 
}00 
}11 	
public66 
override66 
IEnumerator66 #
<66# $
ISample66$ +
>66+ ,
Samples66- 4
{77 	
get88 
{99 
List;; 
<;; 
IEnumerator;;  
<;;  !
ISample;;! (
>;;( )
>;;) *
enums;;+ 0
=;;1 2
new;;3 6
List;;7 ;
<;;; <
IEnumerator;;< G
<;;G H
ISample;;H O
>;;O P
>;;P Q
(;;Q R
);;R S
;;;S T
List<< 
<<< 
bool<< 
><< 
mores<<  
=<<! "
new<<# &
List<<' +
<<<+ ,
bool<<, 0
><<0 1
(<<1 2
)<<2 3
;<<3 4
foreach>> 
(>> 
	ISoundObj>> "
input>># (
in>>) +
_inputs>>, 3
)>>3 4
{?? 
enums@@ 
.@@ 
Add@@ 
(@@ 
input@@ #
.@@# $
Samples@@$ +
)@@+ ,
;@@, -
moresAA 
.AA 
AddAA 
(AA 
trueAA "
)AA" #
;AA# $
}BB 
boolDD 
anymoreDD 
=DD 
trueDD #
;DD# $
whileEE 
(EE 
anymoreEE 
)EE 
{FF 
SampleGG 
sampleGG !
=GG" #
newGG$ '
SampleGG( .
(GG. /
NumChannelsGG/ :
)GG: ;
;GG; <
intHH 
eHH 
=HH 
$numHH 
;HH 
anymoreII 
=II 
falseII #
;II# $
foreachJJ 
(JJ 
IEnumeratorJJ (
<JJ( )
ISampleJJ) 0
>JJ0 1
srcJJ2 5
inJJ6 8
enumsJJ9 >
)JJ> ?
{KK 
ISampleLL 
sLL  !
;LL! "
ifMM 
(MM 
moresMM !
[MM! "
eMM" #
]MM# $
)MM$ %
{NN 
moresOO !
[OO! "
eOO" #
]OO# $
=OO% &
srcOO' *
.OO* +
MoveNextOO+ 3
(OO3 4
)OO4 5
;OO5 6
}PP 
ifQQ 
(QQ 
moresQQ !
[QQ! "
eQQ" #
]QQ# $
)QQ$ %
{RR 
sSS 
=SS 
srcSS  #
.SS# $
CurrentSS$ +
;SS+ ,
}TT 
elseUU 
{VV 
sWW 
=WW 
newWW  #
SampleWW$ *
(WW* +
_inputsWW+ 2
[WW2 3
eWW3 4
]WW4 5
.WW5 6
NumChannelsWW6 A
)WWA B
;WWB C
}XX 
anymoreYY 
|=YY  "
moresYY# (
[YY( )
eYY) *
]YY* +
;YY+ ,
for[[ 
([[ 
int[[  
k[[! "
=[[# $
$num[[% &
;[[& '
k[[( )
<[[* +
s[[, -
.[[- .
NumChannels[[. 9
;[[9 :
k[[; <
++[[< >
)[[> ?
{\\ 
sample]] "
[]]" #
k]]# $
]]]$ %
+=]]& (
(]]) *
s]]* +
[]]+ ,
k]], -
]]]- .
*]]/ 0
_gains]]1 7
[]]7 8
e]]8 9
]]]9 :
)]]: ;
;]]; <
}^^ 
e__ 
++__ 
;__ 
}`` 
yieldaa 
returnaa  
sampleaa! '
;aa' (
}bb 
}cc 
}dd 	
}ee 
}ff ñB
4E:\GitHub\inguz-DSPUtil\InguzDSPUtilNew\MorseCode.cs
	namespace 	
DSPUtil
 
{ 
public		 

class		 
	MorseCode		 
:		 
SoundObj		 %
{

 
static 
string 
[ 
] 
_code 
= 
{  !
$str" %
,% &
$str' +
,+ ,
$str- 3
,3 4
$str5 ;
,; <
$str= B
,B C
$strD G
,G H
$strI O
,O P
$strQ V
,V W
$strX ^
,^ _
$str` d
,d e
$strf l
,l m
$strn s
,s t
$stru {
,{ |
$str	} 
,
 
$str
 
,
 
$str
 
,
 
$str
 
,
 
$str
 
,
 
$str
  ¥
,
¥ ¦
$str
§ ¬
,
¬ ­
$str
® ±
,
± ²
$str
³ ¸
,
¸ ¹
$str
º À
,
À Á
$str
Â Ç
,
Ç È
$str
É Ï
,
Ï Ð
$str
Ñ ×
,
× Ø
$str
Ù ß
}
à á
;
á â
string 
_text 
; 
double 
_speed 
; 
bool 
_repeat 
; 
List 
< 
bool 
> 
	_envelope 
; 
public 
	MorseCode 
( 
string 
text  $
)$ %
{ 	
_speed 
= 
$num 
; 
_repeat 
= 
true 
; 
Text 
= 
text 
; 
} 	
public 
	MorseCode 
( 
string 
text  $
,$ %
double& ,
speed- 2
,2 3
bool4 8
repeat9 ?
)? @
{ 	
_speed 
= 
speed 
; 
_repeat 
= 
repeat 
; 
Text 
= 
text 
; 
}   	
public"" 
string"" 
Text"" 
{## 	
set$$ 
{%% 
_text&& 
=&& 
value&& 
;&& 
	_envelope'' 
='' 
Code''  
(''  !
_text''! &
)''& '
;''' (
}(( 
})) 	
public++ 
static++ 
List++ 
<++ 
bool++ 
>++  
Code++! %
(++% &
string++& ,
s++- .
)++. /
{,, 	
List-- 
<-- 
bool-- 
>-- 
list-- 
=-- 
new-- !
List--" &
<--& '
bool--' +
>--+ ,
(--, -
)--- .
;--. /
foreach.. 
(.. 
char.. 
c.. 
in.. 
s..  
...  !
ToUpperInvariant..! 1
(..1 2
)..2 3
)..3 4
{// 
int00 
i00 
=00 
c00 
-00 
$char00 
+00  !
$num00" #
;00# $
if11 
(11 
i11 
<11 
$num11 
)11 
i11 
=11 
$num11  
;11  !
if22 
(22 
i22 
>22 
_code22 
.22 
Length22 $
)22$ %
i22& '
=22( )
$num22* +
;22+ ,
foreach33 
(33 
char33 
d33 
in33  "
_code33# (
[33( )
i33) *
]33* +
)33+ ,
{44 
switch55 
(55 
d55 
)55 
{66 
case77 
$char77  
:77  !
list99  
.99  !
Add99! $
(99$ %
false99% *
)99* +
;99+ ,
list::  
.::  !
Add::! $
(::$ %
false::% *
)::* +
;::+ ,
list;;  
.;;  !
Add;;! $
(;;$ %
false;;% *
);;* +
;;;+ ,
list<<  
.<<  !
Add<<! $
(<<$ %
false<<% *
)<<* +
;<<+ ,
break== !
;==! "
case>> 
$char>>  
:>>  !
list??  
.??  !
Add??! $
(??$ %
true??% )
)??) *
;??* +
break@@ !
;@@! "
caseAA 
$charAA  
:AA  !
listBB  
.BB  !
AddBB! $
(BB$ %
trueBB% )
)BB) *
;BB* +
listCC  
.CC  !
AddCC! $
(CC$ %
trueCC% )
)CC) *
;CC* +
listDD  
.DD  !
AddDD! $
(DD$ %
trueDD% )
)DD) *
;DD* +
breakEE !
;EE! "
defaultFF 
:FF  
breakGG !
;GG! "
}HH 
listJJ 
.JJ 
AddJJ 
(JJ 
falseJJ "
)JJ" #
;JJ# $
}KK 
listMM 
.MM 
AddMM 
(MM 
falseMM 
)MM 
;MM  
listNN 
.NN 
AddNN 
(NN 
falseNN 
)NN 
;NN  
}OO 
returnPP 
listPP 
;PP 
}QQ 	
publicVV 
doubleVV 

DitSecondsVV  
{WW 	
getXX 
{YY 
return\\ 
$num\\ 
/\\ 
(\\ 
_speed\\ #
*\\$ %
$num\\& (
)\\( )
;\\) *
}]] 
}^^ 	
public`` 
double`` 

DitSamples``  
{aa 	
getbb 
{cc 
returndd 

SampleRatedd !
*dd" #

DitSecondsdd$ .
;dd. /
}ee 
}ff 	
publicii 
doubleii 
LengthSecondsii #
{jj 	
getkk 
{ll 
returnmm 

DitSecondsmm !
*mm" #
	_envelopemm$ -
.mm- .
Countmm. 3
;mm3 4
}nn 
}oo 	
publictt 
overridett 
IEnumeratortt #
<tt# $
ISamplett$ +
>tt+ ,
Samplestt- 4
{uu 	
getvv 
{ww 
ifxx 
(xx 
_inputxx 
==xx 
nullxx "
)xx" #
{yy 
yieldzz 
breakzz 
;zz  
}{{ 
int}} 
n}} 
=}} 
$num}} 
;}} 
foreach~~ 
(~~ 
ISample~~  
sample~~! '
in~~( *
Input~~+ 0
)~~0 1
{ 
int
 
tick
 
=
 
(
  
int
  #
)
# $
(
$ %
n
% &
/
' (

DitSamples
) 3
)
3 4
;
4 5
if
 
(
 
_repeat
 
)
  
{
 
tick
 
=
 
tick
 #
%
$ %
	_envelope
& /
.
/ 0
Count
0 5
;
5 6
}
 
double
 
gain
 
=
  !
$num
" #
;
# $
if
 
(
 
tick
 
<
 
	_envelope
 (
.
( )
Count
) .
)
. /
{
 
gain
 
=
 
	_envelope
 (
[
( )
tick
) -
]
- .
?
/ 0
$num
1 2
:
3 4
$num
5 6
;
6 7
}
 
Sample
 
s
 
=
 
new
 "
Sample
# )
(
) *
sample
* 0
,
0 1
gain
2 6
)
6 7
;
7 8
n
 
++
 
;
 
yield
 
return
  
s
! "
;
" #
}
 
}
 
}
 	
}
 
} ªâ
9E:\GitHub\inguz-DSPUtil\InguzDSPUtilNew\NoiseGenerator.cs
	namespace 	
DSPUtil
 
{ 
public		 

enum		 
	NoiseType		 
{

 
SILENCE 
= 
$num 
, 
WHITE 
= 
$num 
, 
PINK 
= 
$num 
, 
	EWEIGHTED 
= 
$num 
, 

WHITE_FLAT 
= 
$num 
, 
	ARBITRARY 
= 
$num 
, 
DIRAC 
= 
$num 
} 
[ 
Serializable 
] 
public 

class 
NoiseGenerator 
:  !
SoundObj" *
{ 
const 
double 
twopi 
= 
$num 
*  
Math! %
.% &
PI& (
;( )
	NoiseType 
_type 
; 
int 
_lengthSamples 
; 
double 
_gain 
; 
bool 
_mono 
; 
public 
NoiseGenerator 
( 
	NoiseType '
type( ,
,, -
ushort. 4
numChannels5 @
,@ A
doubleB H

lengthSecsI S
,S T
uintU Y

sampleRateZ d
,d e
doublef l
gainm q
,q r
bools w
monox |
)| }
{ 	
init   
(   
type   
,   
numChannels   "
,  " #
(  $ %
int  % (
)  ( )
(  ) *

sampleRate  * 4
*  5 6

lengthSecs  7 A
)  A B
,  B C

sampleRate  D N
,  N O
gain  P T
,  T U
mono  V Z
)  Z [
;  [ \
}!! 	
public## 
NoiseGenerator## 
(## 
	NoiseType## '
type##( ,
,##, -
ushort##. 4
numChannels##5 @
,##@ A
int##B E
lengthSamples##F S
,##S T
uint##U Y

sampleRate##Z d
,##d e
double##f l
gain##m q
,##q r
bool##s w
mono##x |
)##| }
{$$ 	
init%% 
(%% 
type%% 
,%% 
numChannels%% "
,%%" #
lengthSamples%%$ 1
,%%1 2

sampleRate%%3 =
,%%= >
gain%%? C
,%%C D
mono%%E I
)%%I J
;%%J K
}&& 	
private(( 
void(( 
init(( 
((( 
	NoiseType(( #
type(($ (
,((( )
ushort((* 0
numChannels((1 <
,((< =
int((> A
lengthSamples((B O
,((O P
uint((Q U

sampleRate((V `
,((` a
double((b h
gain((i m
,((m n
bool((o s
mono((t x
)((x y
{)) 	
_type** 
=** 
type** 
;** 
_lengthSamples++ 
=++ 
lengthSamples++ *
;++* +
NumChannels,, 
=,, 
numChannels,, %
;,,% &

SampleRate-- 
=-- 

sampleRate-- #
;--# $
_gain.. 
=.. 
gain.. 
;.. 
_mono// 
=// 
mono// 
;// 
if00 
(00 
_gain00 
==00 
$num00 
)00 
_gain00 !
=00" #
$num00$ %
;00% &
_random11 
=11 
new11 
Random11  
(11  !
)11! "
;11" #
}22 	
private55 
FilterProfile55 
_coeffs55 %
;55% &
public66 
FilterProfile66 
Coefficients66 )
{77 	
get88 
{88 
return88 
_coeffs88  
;88  !
}88" #
set99 
{99 
_coeffs99 
=99 
value99 !
;99! "
}99# $
}:: 	
private>> 
static>> 
Random>> 
_random>> %
=>>& '
new>>( +
Random>>, 2
(>>2 3
)>>3 4
;>>4 5
private@@ 
static@@ 
double@@ 

NextRandom@@ (
(@@( )
)@@) *
{AA 	
lockBB 
(BB 
_randomBB 
)BB 
{CC 
returnDD 
_randomDD 
.DD 

NextDoubleDD )
(DD) *
)DD* +
;DD+ ,
}EE 
}FF 	
privateHH 
staticHH 
doubleHH 
NextRandom2HH )
(HH) *
)HH* +
{II 	
lockJJ 
(JJ 
_randomJJ 
)JJ 
{KK 
returnLL 
$numLL 
*LL 
_randomLL "
.LL" #

NextDoubleLL# -
(LL- .
)LL. /
-LL0 1
$numLL2 3
;LL3 4
}MM 
}NN 	
privatePP 
staticPP 
IEnumeratorPP "
<PP" #
doublePP# )
>PP) *
SilencePP+ 2
{QQ 	
getRR 
{SS 
whileTT 
(TT 
trueTT 
)TT 
{UU 
yieldVV 
returnVV  
$numVV! "
;VV" #
}WW 
}XX 
}YY 	
private[[ 
static[[ 
IEnumerator[[ "
<[[" #
double[[# )
>[[) *
White[[+ 0
{\\ 	
get]] 
{^^ 
while__ 
(__ 
true__ 
)__ 
{`` 
yieldaa 
returnaa  
NextRandom2aa! ,
(aa, -
)aa- .
;aa. /
}bb 
}cc 
}dd 	
privateff 
staticff 
IEnumeratorff "
<ff" #
doubleff# )
>ff) *
Pinkff+ /
{gg 	
gethh 
{ii 
doublejj 
[jj 
]jj 
bjj 
=jj 
newjj  
doublejj! '
[jj' (
$numjj( )
]jj) *
;jj* +
whilekk 
(kk 
truekk 
)kk 
{ll 
double
 
white
  
=
! "
NextRandom2
# .
(
. /
)
/ 0
;
0 1
b
 
[
 
$num
 
]
 
=
 
$num
 "
*
# $
b
% &
[
& '
$num
' (
]
( )
+
* +
white
, 1
*
2 3
$num
4 =
;
= >
b
 
[
 
$num
 
]
 
=
 
$num
 "
*
# $
b
% &
[
& '
$num
' (
]
( )
+
* +
white
, 1
*
2 3
$num
4 =
;
= >
b
 
[
 
$num
 
]
 
=
 
$num
 "
*
# $
b
% &
[
& '
$num
' (
]
( )
+
* +
white
, 1
*
2 3
$num
4 =
;
= >
b
 
[
 
$num
 
]
 
=
 
$num
 "
*
# $
b
% &
[
& '
$num
' (
]
( )
+
* +
white
, 1
*
2 3
$num
4 =
;
= >
b
 
[
 
$num
 
]
 
=
 
$num
 "
*
# $
b
% &
[
& '
$num
' (
]
( )
+
* +
white
, 1
*
2 3
$num
4 =
;
= >
b
 
[
 
$num
 
]
 
=
 
-
 
$num
 "
*
# $
b
% &
[
& '
$num
' (
]
( )
-
* +
white
, 1
*
2 3
$num
4 =
;
= >
double
 
pink
 
=
  !
b
" #
[
# $
$num
$ %
]
% &
+
' (
b
) *
[
* +
$num
+ ,
]
, -
+
. /
b
0 1
[
1 2
$num
2 3
]
3 4
+
5 6
b
7 8
[
8 9
$num
9 :
]
: ;
+
< =
b
> ?
[
? @
$num
@ A
]
A B
+
C D
b
E F
[
F G
$num
G H
]
H I
+
J K
b
L M
[
M N
$num
N O
]
O P
+
Q R
white
S X
*
Y Z
$num
[ a
;
a b
b
 
[
 
$num
 
]
 
=
 
white
  
*
! "
$num
# +
;
+ ,
yield
 
return
  
pink
! %
/
& '
$num
( )
;
) *
}
 
}
 
}
 	
private
 
static
 
IEnumerator
 "
<
" #
double
# )
>
) *
	EWeighted
+ 4
{
 	
get
 
{
 
double
 
[
 
]
 
_shaped
  
=
! "
{
# $
$num
& ,
,
, -
-
. /
$num
/ 5
,
5 6
$num
7 =
,
= >
-
? @
$num
@ F
,
F G
$num
H N
,
N O
-
P Q
$num
Q W
,
W X
$num
Y _
,
_ `
-
a b
$num
b h
,
h i
$num
j q
}
q r
;
r s
int
   
ORDER
   
=
   
$num
   
;
   
int
¡¡ 
_HistPos
¡¡ 
=
¡¡ 
ORDER
¡¡ $
-
¡¡$ %
$num
¡¡% &
;
¡¡& '
double
¢¢ 
[
¢¢ 
]
¢¢ 
_EH
¢¢ 
=
¢¢ 
new
¢¢ "
double
¢¢# )
[
¢¢) *
$num
¢¢* +
*
¢¢, -
ORDER
¢¢. 3
]
¢¢3 4
;
¢¢4 5
while
££ 
(
££ 
true
££ 
)
££ 
{
¤¤ 
double
¥¥ 
samp
¥¥ 
=
¥¥  !
NextRandom2
¥¥" -
(
¥¥- .
)
¥¥. /
;
¥¥/ 0
for
¨¨ 
(
¨¨ 
int
¨¨ 
x
¨¨ 
=
¨¨  
$num
¨¨! "
;
¨¨" #
x
¨¨$ %
<
¨¨& '
ORDER
¨¨( -
;
¨¨- .
x
¨¨/ 0
++
¨¨0 2
)
¨¨2 3
{
©© 
samp
ªª 
+=
ªª 
_shaped
ªª  '
[
ªª' (
x
ªª( )
]
ªª) *
*
ªª+ ,
_EH
ªª- 0
[
ªª0 1
_HistPos
ªª1 9
+
ªª: ;
x
ªª< =
]
ªª= >
;
ªª> ?
}
«« 
_HistPos
­­ 
--
­­ 
;
­­ 
if
®® 
(
®® 
_HistPos
®®  
<
®®! "
$num
®®# $
)
®®$ %
_HistPos
®®& .
+=
®®/ 1
ORDER
®®2 7
;
®®7 8
_EH
±± 
[
±± 
_HistPos
±±  
+
±±! "
$num
±±# $
]
±±$ %
=
±±& '
_EH
±±( +
[
±±+ ,
_HistPos
±±, 4
]
±±4 5
=
±±6 7
samp
±±8 <
;
±±< =
yield
³³ 
return
³³  
samp
³³! %
/
³³& '
$num
³³( *
;
³³* +
}
´´ 
}
µµ 
}
¶¶ 	
private
¸¸ 
static
¸¸ 
IEnumerator
¸¸ "
<
¸¸" #
double
¸¸# )
>
¸¸) *
	WhiteFlat
¸¸+ 4
(
¸¸4 5
int
¸¸5 8
length
¸¸9 ?
)
¸¸? @
{
¹¹ 	
int
¾¾ 
n
¾¾ 
=
¾¾ 
MathUtil
¾¾ 
.
¾¾ 
NextPowerOfTwo
¾¾ +
(
¾¾+ ,
length
¾¾, 2
)
¾¾2 3
;
¾¾3 4
Complex
¿¿ 
[
¿¿ 
]
¿¿ 
data
¿¿ 
=
¿¿ 
new
¿¿  
Complex
¿¿! (
[
¿¿( )
n
¿¿) *
]
¿¿* +
;
¿¿+ ,
double
ÁÁ 
logn
ÁÁ 
=
ÁÁ 
Math
ÁÁ 
.
ÁÁ 
Log
ÁÁ "
(
ÁÁ" #
n
ÁÁ# $
)
ÁÁ$ %
;
ÁÁ% &
for
ÂÂ 
(
ÂÂ 
int
ÂÂ 
j
ÂÂ 
=
ÂÂ 
$num
ÂÂ 
;
ÂÂ 
j
ÂÂ 
<
ÂÂ 
n
ÂÂ  !
;
ÂÂ! "
j
ÂÂ# $
++
ÂÂ$ &
)
ÂÂ& '
{
ÃÃ 
double
ÅÅ 
phi
ÅÅ 
=
ÅÅ 

NextRandom
ÅÅ '
(
ÅÅ' (
)
ÅÅ( )
*
ÅÅ* +
$num
ÅÅ, -
*
ÅÅ. /
Math
ÅÅ0 4
.
ÅÅ4 5
PI
ÅÅ5 7
;
ÅÅ7 8
double
ÇÇ 
re
ÇÇ 
=
ÇÇ 
Math
ÇÇ  
.
ÇÇ  !
Cos
ÇÇ! $
(
ÇÇ$ %
phi
ÇÇ% (
)
ÇÇ( )
;
ÇÇ) *
double
ÈÈ 
im
ÈÈ 
=
ÈÈ 
Math
ÈÈ  
.
ÈÈ  !
Sin
ÈÈ! $
(
ÈÈ$ %
phi
ÈÈ% (
)
ÈÈ( )
;
ÈÈ) *
data
ÉÉ 
[
ÉÉ 
j
ÉÉ 
]
ÉÉ 
=
ÉÉ 
new
ÉÉ 
Complex
ÉÉ %
(
ÉÉ% &
logn
ÉÉ& *
*
ÉÉ* +
re
ÉÉ+ -
,
ÉÉ- .
logn
ÉÉ. 2
*
ÉÉ2 3
im
ÉÉ3 5
)
ÉÉ5 6
;
ÉÉ6 7
}
ÊÊ 
Fourier
ÍÍ 
.
ÍÍ 
IFFT
ÍÍ 
(
ÍÍ 
(
ÍÍ 
int
ÍÍ 
)
ÍÍ 
n
ÍÍ 
,
ÍÍ  
data
ÍÍ! %
)
ÍÍ% &
;
ÍÍ& '
int
ÐÐ 
k
ÐÐ 
=
ÐÐ 
$num
ÐÐ 
;
ÐÐ 
while
ÑÑ 
(
ÑÑ 
true
ÑÑ 
)
ÑÑ 
{
ÒÒ 
yield
ÓÓ 
return
ÓÓ 
data
ÓÓ !
[
ÓÓ! "
k
ÓÓ" #
]
ÓÓ# $
.
ÓÓ$ %
Re
ÓÓ% '
*
ÓÓ( )
logn
ÓÓ* .
;
ÓÓ. /
k
ÔÔ 
++
ÔÔ 
;
ÔÔ 
if
ÕÕ 
(
ÕÕ 
k
ÕÕ 
>=
ÕÕ 
n
ÕÕ 
)
ÕÕ 
{
ÖÖ 
k
×× 
=
×× 
$num
×× 
;
×× 
}
ØØ 
}
ÙÙ 
}
ÚÚ 	
private
ÜÜ 
static
ÜÜ 
IEnumerator
ÜÜ "
<
ÜÜ" #
double
ÜÜ# )
>
ÜÜ) *
	Arbitrary
ÜÜ+ 4
(
ÜÜ4 5
int
ÜÜ5 8
length
ÜÜ9 ?
,
ÜÜ? @
FilterProfile
ÜÜA N
coeffs
ÜÜO U
,
ÜÜU V
uint
ÜÜW [

sampleRate
ÜÜ\ f
)
ÜÜf g
{
ÝÝ 	
int
áá 
l
áá 
=
áá 
MathUtil
áá 
.
áá 
NextPowerOfTwo
áá +
(
áá+ ,
length
áá, 2
)
áá2 3
;
áá3 4
Complex
ââ 
[
ââ 
]
ââ 
data
ââ 
=
ââ 
new
ââ  
Complex
ââ! (
[
ââ( )
l
ââ) *
]
ââ* +
;
ââ+ ,
int
ää 
n
ää 
=
ää 
$num
ää 
;
ää 
double
åå 
freq1
åå 
=
åå 
coeffs
åå !
[
åå! "
n
åå" #
]
åå# $
.
åå$ %
Freq
åå% )
*
åå* +
$num
åå, -
*
åå. /
l
åå0 1
/
åå2 3

sampleRate
åå4 >
;
åå> ?
double
ææ 
freq2
ææ 
=
ææ 
coeffs
ææ !
[
ææ! "
n
ææ" #
+
ææ$ %
$num
ææ& '
]
ææ' (
.
ææ( )
Freq
ææ) -
*
ææ. /
$num
ææ0 1
*
ææ2 3
l
ææ4 5
/
ææ6 7

sampleRate
ææ8 B
;
ææB C
double
çç 
gain1
çç 
=
çç 
coeffs
çç !
[
çç! "
n
çç" #
]
çç# $
.
çç$ %
Gain
çç% )
;
çç) *
double
èè 
gain2
èè 
=
èè 
coeffs
èè !
[
èè! "
n
èè" #
+
èè$ %
$num
èè& '
]
èè' (
.
èè( )
Gain
èè) -
;
èè- .
double
êê 
logn
êê 
=
êê 
Math
êê 
.
êê 
Log
êê "
(
êê" #
l
êê# $
)
êê$ %
;
êê% &
for
ëë 
(
ëë 
int
ëë 
j
ëë 
=
ëë 
$num
ëë 
;
ëë 
j
ëë 
<
ëë 
l
ëë  !
;
ëë! "
j
ëë# $
++
ëë$ &
)
ëë& '
{
ìì 
double
íí 
gainDb
íí 
;
íí 
double
îî 
gain
îî 
;
îî 
if
ïï 
(
ïï 
j
ïï 
>
ïï 
freq2
ïï 
)
ïï 
{
ðð 
n
òò 
++
òò 
;
òò 
if
óó 
(
óó 
n
óó 
<
óó 
coeffs
óó "
.
óó" #
Count
óó# (
-
óó( )
$num
óó) *
)
óó* +
{
ôô 
freq1
õõ 
=
õõ 
coeffs
õõ  &
[
õõ& '
n
õõ' (
]
õõ( )
.
õõ) *
Freq
õõ* .
*
õõ/ 0
$num
õõ1 2
*
õõ3 4
l
õõ5 6
/
õõ7 8

sampleRate
õõ9 C
;
õõC D
freq2
öö 
=
öö 
coeffs
öö  &
[
öö& '
n
öö' (
+
öö) *
$num
öö+ ,
]
öö, -
.
öö- .
Freq
öö. 2
*
öö3 4
$num
öö5 6
*
öö7 8
l
öö9 :
/
öö; <

sampleRate
öö= G
;
ööG H
gain1
÷÷ 
=
÷÷ 
coeffs
÷÷  &
[
÷÷& '
n
÷÷' (
]
÷÷( )
.
÷÷) *
Gain
÷÷* .
;
÷÷. /
gain2
øø 
=
øø 
coeffs
øø  &
[
øø& '
n
øø' (
+
øø) *
$num
øø+ ,
]
øø, -
.
øø- .
Gain
øø. 2
;
øø2 3
}
ùù 
}
úú 
if
ûû 
(
ûû 
j
ûû 
<
ûû 
freq1
ûû 
)
ûû 
{
üü 
gainDb
ýý 
=
ýý 
gain1
ýý "
;
ýý" #
}
þþ 
else
ÿÿ 
if
ÿÿ 
(
ÿÿ 
j
ÿÿ 
>
ÿÿ 
freq2
ÿÿ "
)
ÿÿ" #
{
 
gainDb
 
=
 
gain2
 "
;
" #
}
 
else
 
{
 
double
 
frac
 
=
  !
(
" #
double
# )
)
) *
(
* +
j
+ ,
-
- .
freq1
/ 4
)
4 5
/
6 7
(
8 9
double
9 ?
)
? @
(
@ A
freq2
A F
-
G H
freq1
I N
)
N O
;
O P
double
 
ph
 
=
 
Math
  $
.
$ %
PI
% '
*
( )
(
* +
$num
+ ,
+
- .
frac
/ 3
)
3 4
;
4 5
double
 
rcos
 
=
  !
(
" #
$num
# $
+
% &
Math
' +
.
+ ,
Cos
, /
(
/ 0
ph
0 2
)
2 3
)
3 4
/
5 6
$num
7 8
;
8 9
gainDb
 
=
 
gain1
 "
+
# $
rcos
% )
*
* +
(
, -
gain2
- 2
-
3 4
gain1
5 :
)
: ;
;
; <
}
 
gain
 
=
 
MathUtil
 
.
  
gain
  $
(
$ %
gainDb
% +
)
+ ,
;
, -
double
 
phi
 
=
 

NextRandom
 '
(
' (
)
( )
*
* +
$num
, -
*
. /
Math
0 4
.
4 5
PI
5 7
;
7 8
double
 
re
 
=
 
Math
  
.
  !
Cos
! $
(
$ %
phi
% (
)
( )
;
) *
double
 
im
 
=
 
Math
  
.
  !
Sin
! $
(
$ %
phi
% (
)
( )
;
) *
data
 
[
 
j
 
]
 
=
 
new
 
Complex
 %
(
% &
gain
& *
*
+ ,
logn
- 1
*
2 3
re
4 6
,
6 7
gain
8 <
*
= >
logn
? C
*
D E
im
F H
)
H I
;
I J
}
 
Fourier
 
.
 
IFFT
 
(
 
(
 
int
 
)
 
l
 
,
  
data
! %
)
% &
;
& '
int
 
k
 
=
 
$num
 
;
 
while
 
(
 
true
 
)
 
{
 
yield
 
return
 
data
 !
[
! "
k
" #
]
# $
.
$ %
Re
% '
*
( )
logn
* .
;
. /
k
 
++
 
;
 
if
 
(
 
k
 
>=
 
l
 
)
 
{
   
k
¡¡ 
=
¡¡ 
$num
¡¡ 
;
¡¡ 
}
¢¢ 
}
££ 
}
¤¤ 	
private
¦¦ 
static
¦¦ 
IEnumerator
¦¦ "
<
¦¦" #
double
¦¦# )
>
¦¦) *
Dirac
¦¦+ 0
{
§§ 	
get
¨¨ 
{
©© 
yield
ªª 
return
ªª 
$num
ªª 
;
ªª 
while
«« 
(
«« 
true
«« 
)
«« 
{
¬¬ 
yield
­­ 
return
­­  
$num
­­! "
;
­­" #
}
®® 
}
¯¯ 
}
°° 	
private
²² 
IEnumerator
²² 
<
²² 
double
²² "
>
²²" #
Noise
²²$ )
{
³³ 	
get
´´ 
{
µµ 
switch
¶¶ 
(
¶¶ 
_type
¶¶ 
)
¶¶ 
{
·· 
case
¸¸ 
	NoiseType
¸¸ "
.
¸¸" #
SILENCE
¸¸# *
:
¸¸* +
return
¹¹ 
Silence
¹¹ &
;
¹¹& '
case
ºº 
	NoiseType
ºº "
.
ºº" #
WHITE
ºº# (
:
ºº( )
return
»» 
White
»» $
;
»»$ %
case
¼¼ 
	NoiseType
¼¼ "
.
¼¼" #
PINK
¼¼# '
:
¼¼' (
return
½½ 
Pink
½½ #
;
½½# $
case
¾¾ 
	NoiseType
¾¾ "
.
¾¾" #
	EWEIGHTED
¾¾# ,
:
¾¾, -
return
¿¿ 
	EWeighted
¿¿ (
;
¿¿( )
case
ÀÀ 
	NoiseType
ÀÀ "
.
ÀÀ" #

WHITE_FLAT
ÀÀ# -
:
ÀÀ- .
return
ÁÁ 
	WhiteFlat
ÁÁ (
(
ÁÁ( )
_lengthSamples
ÁÁ) 7
)
ÁÁ7 8
;
ÁÁ8 9
case
ÂÂ 
	NoiseType
ÂÂ "
.
ÂÂ" #
	ARBITRARY
ÂÂ# ,
:
ÂÂ, -
return
ÃÃ 
	Arbitrary
ÃÃ (
(
ÃÃ( )
_lengthSamples
ÃÃ) 7
,
ÃÃ7 8
_coeffs
ÃÃ8 ?
,
ÃÃ? @

SampleRate
ÃÃ@ J
)
ÃÃJ K
;
ÃÃK L
case
ÄÄ 
	NoiseType
ÄÄ "
.
ÄÄ" #
DIRAC
ÄÄ# (
:
ÄÄ( )
return
ÅÅ 
Dirac
ÅÅ $
;
ÅÅ$ %
default
ÆÆ 
:
ÆÆ 
throw
ÇÇ 
new
ÇÇ !
ArgumentException
ÇÇ" 3
(
ÇÇ3 4
$str
ÇÇ4 H
)
ÇÇH I
;
ÇÇI J
}
ÈÈ 
}
ÉÉ 
}
ÊÊ 	
public
ÏÏ 
override
ÏÏ 
IEnumerator
ÏÏ #
<
ÏÏ# $
ISample
ÏÏ$ +
>
ÏÏ+ ,
Samples
ÏÏ- 4
{
ÐÐ 	
get
ÑÑ 
{
ÒÒ 
ushort
ÓÓ 
nc
ÓÓ 
=
ÓÓ 
_mono
ÓÓ !
?
ÓÓ" #
(
ÓÓ$ %
ushort
ÓÓ% +
)
ÓÓ+ ,
$num
ÓÓ, -
:
ÓÓ. /
NumChannels
ÓÓ0 ;
;
ÓÓ; <
IEnumerator
ÔÔ 
<
ÔÔ 
double
ÔÔ "
>
ÔÔ" #
[
ÔÔ# $
]
ÔÔ$ %
noise
ÔÔ& +
=
ÔÔ, -
new
ÔÔ. 1
IEnumerator
ÔÔ2 =
<
ÔÔ= >
double
ÔÔ> D
>
ÔÔD E
[
ÔÔE F
nc
ÔÔF H
]
ÔÔH I
;
ÔÔI J
for
ÕÕ 
(
ÕÕ 
int
ÕÕ 
c
ÕÕ 
=
ÕÕ 
$num
ÕÕ 
;
ÕÕ 
c
ÕÕ  !
<
ÕÕ" #
nc
ÕÕ$ &
;
ÕÕ& '
c
ÕÕ( )
++
ÕÕ) +
)
ÕÕ+ ,
{
ÖÖ 
noise
×× 
[
×× 
c
×× 
]
×× 
=
×× 
Noise
×× $
;
××$ %
noise
ØØ 
[
ØØ 
c
ØØ 
]
ØØ 
.
ØØ 
MoveNext
ØØ %
(
ØØ% &
)
ØØ& '
;
ØØ' (
}
ÙÙ 
for
ÚÚ 
(
ÚÚ 
int
ÚÚ 
j
ÚÚ 
=
ÚÚ 
$num
ÚÚ 
;
ÚÚ 
j
ÚÚ  !
<
ÚÚ" #
_lengthSamples
ÚÚ$ 2
;
ÚÚ2 3
j
ÚÚ4 5
++
ÚÚ5 7
)
ÚÚ7 8
{
ÛÛ 
Sample
ÜÜ 
sample
ÜÜ !
=
ÜÜ" #
new
ÜÜ$ '
Sample
ÜÜ( .
(
ÜÜ. /
NumChannels
ÜÜ/ :
)
ÜÜ: ;
;
ÜÜ; <
if
ÝÝ 
(
ÝÝ 
_mono
ÝÝ 
)
ÝÝ 
{
ÞÞ 
double
ßß 
v
ßß  
=
ßß! "
_gain
ßß# (
*
ßß) *
noise
ßß+ 0
[
ßß0 1
$num
ßß1 2
]
ßß2 3
.
ßß3 4
Current
ßß4 ;
;
ßß; <
noise
àà 
[
àà 
$num
àà 
]
àà  
.
àà  !
MoveNext
àà! )
(
àà) *
)
àà* +
;
àà+ ,
for
áá 
(
áá 
int
áá  
c
áá! "
=
áá# $
$num
áá% &
;
áá& '
c
áá( )
<
áá* +
NumChannels
áá, 7
;
áá7 8
c
áá9 :
++
áá: <
)
áá< =
{
ââ 
sample
ãã "
[
ãã" #
c
ãã# $
]
ãã$ %
=
ãã& '
v
ãã( )
;
ãã) *
}
ää 
}
åå 
else
ææ 
{
çç 
for
èè 
(
èè 
int
èè  
c
èè! "
=
èè# $
$num
èè% &
;
èè& '
c
èè( )
<
èè* +
NumChannels
èè, 7
;
èè7 8
c
èè9 :
++
èè: <
)
èè< =
{
éé 
sample
êê "
[
êê" #
c
êê# $
]
êê$ %
=
êê& '
_gain
êê( -
*
êê. /
noise
êê0 5
[
êê5 6
c
êê6 7
]
êê7 8
.
êê8 9
Current
êê9 @
;
êê@ A
noise
ëë !
[
ëë! "
c
ëë" #
]
ëë# $
.
ëë$ %
MoveNext
ëë% -
(
ëë- .
)
ëë. /
;
ëë/ 0
}
ìì 
}
íí 
yield
îî 
return
îî  
sample
îî! '
;
îî' (
}
ïï 
}
ðð 
}
ññ 	
public
ôô 
override
ôô 
int
ôô 

Iterations
ôô &
{
õõ 	
get
öö 
{
öö 
return
öö 
(
öö 
_lengthSamples
öö (
)
öö( )
;
öö) *
}
öö+ ,
}
÷÷ 	
}
ùù 
}úú ¦
:E:\GitHub\inguz-DSPUtil\InguzDSPUtilNew\OtherConvolvers.cs
	namespace 	
DSPUtil
 
{ 
[ 
Serializable 
] 
public 

class 
SlowConvolver 
:  
SoundObj! )
,) *

IConvolver+ 5
{ 
TimeDomainConvolver 
[ 
] 

_convolver (
;( )
int 
_length 
; 
double 
[ 
] 
[ 
] 
_impbuff 
; 
double 
[ 
] 
[ 
] 
	_databuff 
; 
double!! 
[!! 
]!! 
[!! 
]!! 
_outbuff!! 
;!! 
double$$ 
[$$ 
]$$ 
[$$ 
]$$ 
	_copybuff$$ 
;$$ 
	protected++ 
	ISoundObj++ 
_impulse++ $
;++$ %
	protected,, 
int,, 
_impulseLength,, $
=,,% &
DSPUtil,,' .
.,,. /
BUFSIZE,,/ 6
;,,6 7
public-- 
virtual-- 
	ISoundObj--  
impulse--! (
{.. 	
get// 
{00 
return11 
_impulse11 
;11  
}22 
set33 
{44 
_impulse66 
=66 
value66  
;66  !
_impulseLength77 
=77  
(77! "
_impulse77" *
==77+ -
null77. 2
)772 3
?774 5
$num776 7
:778 9
MathUtil77: B
.77B C
NextPowerOfTwo77C Q
(77Q R
_impulse77R Z
.77Z [

Iterations77[ e
)77e f
;77f g
SoundBuffer;; 
buff;;  
=;;! "
new;;# &
SoundBuffer;;' 2
(;;2 3
_impulse;;3 ;
);;; <
;;;< =
_impbuff<< 
=<< 
buff<< 
.<<  
ToDoubleArray<<  -
(<<- .
$num<<. /
,<</ 0
ImpulseLength<<1 >
)<<> ?
;<<? @
}>> 
}?? 	
	protectedBB 
boolBB 
_deconvolveBB "
;BB" #
publicCC 
boolCC 

deconvolveCC 
{DD 	
getEE 
{FF 
returnGG 
falseGG 
;GG 
}HH 
setII 
{JJ 
ifKK 
(KK 
valueKK 
)KK 
{LL 
throwMM 
newMM 
	ExceptionMM '
(MM' (
$strMM( T
)MMT U
;MMU V
}NN 
}OO 
}PP 	
	protectedUU 
stringUU 
_persistTailUU %
;UU% &
	protectedVV 
stringVV 
_persistFileVV %
;VV% &
	protectedWW 
stringWW 
_persistPathWW %
=WW& '
PathWW( ,
.WW, -
GetTempPathWW- 8
(WW8 9
)WW9 :
;WW: ;
publicXX 
stringXX 
PersistPathXX !
{YY 	
setZZ 
{[[ 
_persistPath\\ 
=\\ 
value\\ $
;\\$ %
}]] 
}^^ 	
public__ 
string__ 
PersistTail__ !
{`` 	
getaa 
{aa 
returnaa 
_persistTailaa %
;aa% &
}aa' (
setbb 
{cc 
_persistTaildd 
=dd 
valuedd $
;dd$ %
ifee 
(ee 
!ee 
Stringee 
.ee 
IsNullOrEmptyee )
(ee) *
_persistTailee* 6
)ee6 7
)ee7 8
{ff 
stringgg 
filenamegg #
=gg$ %
thisgg& *
.gg* +
GetTypegg+ 2
(gg2 3
)gg3 4
+gg5 6
$strgg7 :
+gg; <
_persistTailgg= I
;ggI J
foreachhh 
(hh 
charhh !
chh" #
inhh$ &
Systemhh' -
.hh- .
IOhh. 0
.hh0 1
Pathhh1 5
.hh5 6#
GetInvalidFileNameCharshh6 M
(hhM N
)hhN O
)hhO P
{ii 
filenamejj  
=jj! "
filenamejj# +
.jj+ ,
Replacejj, 3
(jj3 4
cjj4 5
,jj5 6
$charjj7 :
)jj: ;
;jj; <
}kk 
_persistFilell  
=ll! "
Pathll# '
.ll' (
Combinell( /
(ll/ 0
Pathll0 4
.ll4 5
GetTempPathll5 @
(ll@ A
)llA B
,llB C
filenamellD L
+llM N
$strllO V
)llV W
;llW X
}mm 
}nn 
}oo 	
publicss 
boolss 
IsPersistTailss !
{tt 	
getuu 
{vv 
returnww 
!ww 
Stringww 
.ww 
IsNullOrEmptyww ,
(ww, -
_persistTailww- 9
)ww9 :
;ww: ;
}xx 
}yy 	
public|| 
int|| 

partitions|| 
{}} 	
get~~ 
{ 
return
 
$num
 
;
 
}
 
set
 
{
 
}
 
}
 	
int
 
ImpulseLength
 
{
 	
get
 
{
 
if
 
(
 
_length
 
==
 
$num
  
)
  !
{
 
_length
 
=
 
MathUtil
 &
.
& '
NextPowerOfTwo
' 5
(
5 6
_impulse
6 >
.
> ?

Iterations
? I
)
I J
;
J K
}
 
return
 
_length
 
;
 
}
 
}
 	
	protected
 
double
 
_gain
 
;
 
public
 
double
 
gain
 
{
 	
get
 
{
 
return
 
_gain
 
;
 
}
 
}
   	
public
¢¢ 
override
¢¢ 
int
¢¢ 

Iterations
¢¢ &
{
££ 	
get
¤¤ 
{
¥¥ 
return
¦¦ 
(
¦¦ 
(
¦¦ 
_impulse
¦¦ !
==
¦¦" $
null
¦¦% )
)
¦¦) *
?
¦¦+ ,
$num
¦¦- .
:
¦¦/ 0
_impulseLength
¦¦1 ?
)
¦¦? @
+
¦¦A B
_input
¦¦C I
.
¦¦I J

Iterations
¦¦J T
;
¦¦T U
}
§§ 
}
¨¨ 	
public
®® 
override
®® 
IEnumerator
®® #
<
®®# $
ISample
®®$ +
>
®®+ ,
Samples
®®- 4
{
¯¯ 	
get
°° 
{
±± 
if
²² 
(
²² 
_input
²² 
==
²² 
null
²² "
)
²²" #
{
³³ 
yield
´´ 
break
´´ 
;
´´  
}
µµ 
ushort
¸¸ 
	nChannels
¸¸  
=
¸¸! "
_input
¸¸# )
.
¸¸) *
NumChannels
¸¸* 5
;
¸¸5 6
if
½½ 
(
½½ 
(
½½ 
_impulse
½½ 
.
½½ 
NumChannels
½½ )
>
½½* +
$num
½½, -
)
½½- .
&&
½½/ 1
(
½½2 3
_impulse
½½3 ;
.
½½; <
NumChannels
½½< G
!=
½½H J
_input
½½K Q
.
½½Q R
NumChannels
½½R ]
)
½½] ^
)
½½^ _
{
¾¾ 
throw
¿¿ 
new
¿¿ 
ArgumentException
¿¿ /
(
¿¿/ 0
String
¿¿0 6
.
¿¿6 7
Format
¿¿7 =
(
¿¿= >
$str¿¿> 
,¿¿ 
_impulse¿¿ 
.¿¿ 
NumChannels¿¿ 
,¿¿ 
_input¿¿ ¢
.¿¿¢ £
NumChannels¿¿£ ®
)¿¿® ¯
)¿¿¯ °
;¿¿° ±
}
ÀÀ 
_outbuff
ÅÅ 
=
ÅÅ 
new
ÅÅ 
double
ÅÅ %
[
ÅÅ% &
	nChannels
ÅÅ& /
]
ÅÅ/ 0
[
ÅÅ0 1
]
ÅÅ1 2
;
ÅÅ2 3
	_databuff
ÈÈ 
=
ÈÈ 
new
ÈÈ 
double
ÈÈ  &
[
ÈÈ& '
	nChannels
ÈÈ' 0
]
ÈÈ0 1
[
ÈÈ1 2
]
ÈÈ2 3
;
ÈÈ3 4
	_copybuff
ÉÉ 
=
ÉÉ 
new
ÉÉ 
double
ÉÉ  &
[
ÉÉ& '
	nChannels
ÉÉ' 0
]
ÉÉ0 1
[
ÉÉ1 2
]
ÉÉ2 3
;
ÉÉ3 4
for
ÊÊ 
(
ÊÊ 
int
ÊÊ 
c
ÊÊ 
=
ÊÊ 
$num
ÊÊ 
;
ÊÊ 
c
ÊÊ  !
<
ÊÊ" #
	nChannels
ÊÊ$ -
;
ÊÊ- .
c
ÊÊ/ 0
++
ÊÊ0 2
)
ÊÊ2 3
{
ËË 
	_databuff
ÌÌ 
[
ÌÌ 
c
ÌÌ 
]
ÌÌ  
=
ÌÌ! "
new
ÌÌ# &
double
ÌÌ' -
[
ÌÌ- .
ImpulseLength
ÌÌ. ;
]
ÌÌ; <
;
ÌÌ< =
	_copybuff
ÍÍ 
[
ÍÍ 
c
ÍÍ 
]
ÍÍ  
=
ÍÍ! "
new
ÍÍ# &
double
ÍÍ' -
[
ÍÍ- .
ImpulseLength
ÍÍ. ;
]
ÍÍ; <
;
ÍÍ< =
}
ÎÎ 

_convolver
ÖÖ 
=
ÖÖ 
new
ÖÖ  !
TimeDomainConvolver
ÖÖ! 4
[
ÖÖ4 5
	nChannels
ÖÖ5 >
]
ÖÖ> ?
;
ÖÖ? @
for
×× 
(
×× 
int
×× 
c
×× 
=
×× 
$num
×× 
;
×× 
c
××  !
<
××" #
	nChannels
××$ -
;
××- .
c
××/ 0
++
××0 2
)
××2 3
{
ØØ 
double
ÙÙ 
[
ÙÙ 
]
ÙÙ 
imp
ÙÙ  
=
ÙÙ! "
_impbuff
ÙÙ# +
[
ÙÙ+ ,
_impulse
ÙÙ, 4
.
ÙÙ4 5
NumChannels
ÙÙ5 @
==
ÙÙA C
$num
ÙÙD E
?
ÙÙF G
$num
ÙÙH I
:
ÙÙJ K
c
ÙÙL M
]
ÙÙM N
;
ÙÙN O

_convolver
ÚÚ 
[
ÚÚ 
c
ÚÚ  
]
ÚÚ  !
=
ÚÚ" #
new
ÚÚ$ '!
TimeDomainConvolver
ÚÚ( ;
(
ÚÚ; <
imp
ÚÚ< ?
,
ÚÚ? @
_deconvolve
ÚÚA L
)
ÚÚL M
;
ÚÚM N
}
ÛÛ 
IEnumerator
ÝÝ 
<
ÝÝ 
ISample
ÝÝ #
>
ÝÝ# $
inputSamples
ÝÝ% 1
=
ÝÝ2 3
_input
ÝÝ4 :
.
ÝÝ: ;
Samples
ÝÝ; B
;
ÝÝB C
bool
ÞÞ 
moreSamples
ÞÞ  
=
ÞÞ! "
true
ÞÞ# '
;
ÞÞ' (
bool
ßß 
tail
ßß 
=
ßß 
false
ßß !
;
ßß! "
while
àà 
(
àà 
moreSamples
àà "
)
àà" #
{
áá 
int
ãã 
x
ãã 
=
ãã 
$num
ãã 
;
ãã 
for
ää 
(
ää 
int
ää 
j
ää 
=
ää  
$num
ää! "
;
ää" #
j
ää$ %
<
ää& '
ImpulseLength
ää( 5
;
ää5 6
j
ää7 8
++
ää8 :
)
ää: ;
{
åå 
ISample
ææ 
s
ææ  !
;
ææ! "
if
çç 
(
çç 
moreSamples
çç '
)
çç' (
{
èè 
moreSamples
éé '
=
éé( )
inputSamples
éé* 6
.
éé6 7
MoveNext
éé7 ?
(
éé? @
)
éé@ A
;
ééA B
}
êê 
if
ëë 
(
ëë 
moreSamples
ëë '
)
ëë' (
{
ìì 
s
íí 
=
íí 
inputSamples
íí  ,
.
íí, -
Current
íí- 4
;
íí4 5
x
îî 
=
îî 
j
îî  !
;
îî! "
}
ïï 
else
ðð 
{
ññ 
s
òò 
=
òò 
new
òò  #
Sample
òò$ *
(
òò* +
	nChannels
òò+ 4
)
òò4 5
;
òò5 6
}
óó 
for
ôô 
(
ôô 
ushort
ôô #
c
ôô$ %
=
ôô& '
$num
ôô( )
;
ôô) *
c
ôô+ ,
<
ôô- .
	nChannels
ôô/ 8
;
ôô8 9
c
ôô: ;
++
ôô; =
)
ôô= >
{
õõ 
	_databuff
öö %
[
öö% &
c
öö& '
]
öö' (
[
öö( )
j
öö) *
]
öö* +
=
öö, -
s
öö. /
[
öö/ 0
c
öö0 1
]
öö1 2
;
öö2 3
}
÷÷ 
}
øø 
tail
ùù 
=
ùù 
(
ùù 
!
ùù 
moreSamples
ùù (
&&
ùù) +
!
ùù, -
tail
ùù- 1
)
ùù1 2
;
ùù2 3
for
üü 
(
üü 
int
üü 
k
üü 
=
üü  
$num
üü! "
;
üü" #
k
üü$ %
<
üü& '
	nChannels
üü( 1
;
üü1 2
k
üü3 4
++
üü4 6
)
üü6 7
{
ýý 
if
þþ 
(
þþ 
_outbuff
þþ $
[
þþ$ %
k
þþ% &
]
þþ& '
!=
þþ( *
null
þþ+ /
)
þþ/ 0
{
ÿÿ 
for
 
(
  !
int
! $
j
% &
=
' (
$num
) *
;
* +
j
, -
<
. /
ImpulseLength
0 =
-
> ?
$num
@ A
;
A B
j
C D
++
D F
)
F G
{
 
	_copybuff
  )
[
) *
k
* +
]
+ ,
[
, -
j
- .
]
. /
=
0 1
_outbuff
2 :
[
: ;
k
; <
]
< =
[
= >
j
> ?
+
@ A
ImpulseLength
B O
]
O P
;
P Q
}
 
}
 
_outbuff
  
[
  !
k
! "
]
" #
=
$ %

_convolver
& 0
[
0 1
k
1 2
]
2 3
.
3 4
Convolve
4 <
(
< =
	_databuff
= F
[
F G
k
G H
]
H I
,
I J
$num
K O
)
O P
;
P Q
_gain
 
=
 

_convolver
  *
[
* +
k
+ ,
]
, -
.
- .
Gain
. 2
;
2 3
}
 
if
 
(
 
!
 
tail
 
)
 
{
 
x
 
++
 
;
 
}
 
for
 
(
 
int
 
n
 
=
  
$num
! "
;
" #
n
$ %
<
& '
x
( )
;
) *
n
+ ,
++
, .
)
. /
{
 
ISample
 
ret
  #
=
$ %
	nChannels
& /
==
0 2
$num
3 4
?
5 6
new
7 :
Sample2
; B
(
B C
)
C D
:
E F
new
G J
Sample
K Q
(
Q R
	nChannels
R [
)
[ \
as
] _
ISample
` g
;
g h
for
 
(
 
int
  
c
! "
=
# $
$num
% &
;
& '
c
( )
<
* +
	nChannels
, 5
;
5 6
c
7 8
++
8 :
)
: ;
{
 
ret
 
[
  
c
  !
]
! "
=
# $
	_copybuff
% .
[
. /
c
/ 0
]
0 1
[
1 2
n
2 3
]
3 4
+
5 6
_outbuff
7 ?
[
? @
c
@ A
]
A B
[
B C
n
C D
]
D E
;
E F
}
 
yield
 
return
 $
ret
% (
;
( )
}
 
}
 
}
 
}
 	
}
 
[
¦¦ 
Serializable
¦¦ 
]
¦¦ 
class
§§ 	!
TimeDomainConvolver
§§
 
{
¨¨ 
double
©© 
[
©© 
]
©© 
_impulse
©© 
;
©© 
double
ªª 
[
ªª 
]
ªª 
_buffer
ªª 
;
ªª 
double
«« 
[
«« 
]
«« 
_output
«« 
;
«« 
double
¬¬ 
_gain
¬¬ 
;
¬¬ 
int
­­ 
_size
­­ 
;
­­ 
bool
®® 
_deconvolve
®® 
;
®® 
public
²² !
TimeDomainConvolver
²² "
(
²²" #
double
²²# )
[
²²) *
]
²²* +
impulse
²², 3
,
²²3 4
bool
²²5 9

deConvolve
²²: D
)
²²D E
{
³³ 	
_impulse
´´ 
=
´´ 
impulse
´´ 
;
´´ 
_deconvolve
µµ 
=
µµ 

deConvolve
µµ $
;
µµ$ %
_size
¶¶ 
=
¶¶ 
_impulse
¶¶ 
.
¶¶ 
Length
¶¶ #
;
¶¶# $
if
·· 
(
·· 
!
·· 
MathUtil
·· 
.
·· 
IsPowerOfTwo
·· &
(
··& '
_size
··' ,
)
··, -
)
··- .
{
¸¸ 
throw
¹¹ 
new
¹¹ 
ArgumentException
¹¹ +
(
¹¹+ ,
$str
¹¹, ]
)
¹¹] ^
;
¹¹^ _
}
ºº 
_buffer
¼¼ 
=
¼¼ 
new
¼¼ 
double
¼¼  
[
¼¼  !
_size
¼¼! &
*
¼¼' (
$num
¼¼) *
]
¼¼* +
;
¼¼+ ,
_output
½½ 
=
½½ 
new
½½ 
double
½½  
[
½½  !
_size
½½! &
*
½½' (
$num
½½) *
]
½½* +
;
½½+ ,
}
¾¾ 	
public
ÀÀ 
unsafe
ÀÀ 
double
ÀÀ 
[
ÀÀ 
]
ÀÀ 
Convolve
ÀÀ '
(
ÀÀ' (
double
ÀÀ( .
[
ÀÀ. /
]
ÀÀ/ 0
data
ÀÀ1 5
,
ÀÀ5 6
double
ÀÀ7 =
gain
ÀÀ> B
)
ÀÀB C
{
ÁÁ 	
if
ÂÂ 
(
ÂÂ 
_size
ÂÂ 
!=
ÂÂ 
data
ÂÂ 
.
ÂÂ 
Length
ÂÂ $
)
ÂÂ$ %
{
ÃÃ 
throw
ÄÄ 
new
ÄÄ 
ArgumentException
ÄÄ +
(
ÄÄ+ ,
$str
ÄÄ, Z
)
ÄÄZ [
;
ÄÄ[ \
}
ÅÅ 
fixed
ÉÉ 
(
ÉÉ 
double
ÉÉ 
*
ÉÉ 
o
ÉÉ 
=
ÉÉ 
_output
ÉÉ &
,
ÉÉ& '
a
ÉÉ( )
=
ÉÉ* +
data
ÉÉ, 0
,
ÉÉ0 1
b
ÉÉ2 3
=
ÉÉ4 5
_impulse
ÉÉ6 >
,
ÉÉ> ?
tmp
ÉÉ@ C
=
ÉÉD E
_buffer
ÉÉF M
)
ÉÉM N
{
ÊÊ 
	mul_knuth
ËË 
(
ËË 
o
ËË 
,
ËË 
a
ËË 
,
ËË 
b
ËË  !
,
ËË! "
tmp
ËË# &
,
ËË& '
(
ËË( )
uint
ËË) -
)
ËË- .
_size
ËË. 3
)
ËË3 4
;
ËË4 5
}
ÌÌ 
_gain
ÎÎ 
=
ÎÎ 
gain
ÎÎ 
;
ÎÎ 
if
ÏÏ 
(
ÏÏ 
_gain
ÏÏ 
==
ÏÏ 
$num
ÏÏ 
)
ÏÏ 
{
ÐÐ 
double
ÓÓ 
peak1
ÓÓ 
=
ÓÓ 
$num
ÓÓ  
;
ÓÓ  !
for
ÔÔ 
(
ÔÔ 
int
ÔÔ 
j
ÔÔ 
=
ÔÔ 
$num
ÔÔ 
;
ÔÔ 
j
ÔÔ  !
<
ÔÔ" #
_impulse
ÔÔ$ ,
.
ÔÔ, -
Length
ÔÔ- 3
;
ÔÔ3 4
j
ÔÔ5 6
++
ÔÔ6 8
)
ÔÔ8 9
{
ÕÕ 
peak1
ÖÖ 
=
ÖÖ 
Math
ÖÖ  
.
ÖÖ  !
Max
ÖÖ! $
(
ÖÖ$ %
peak1
ÖÖ% *
,
ÖÖ* +
Math
ÖÖ, 0
.
ÖÖ0 1
Abs
ÖÖ1 4
(
ÖÖ4 5
data
ÖÖ5 9
[
ÖÖ9 :
j
ÖÖ: ;
]
ÖÖ; <
)
ÖÖ< =
)
ÖÖ= >
;
ÖÖ> ?
}
×× 
if
ØØ 
(
ØØ 
peak1
ØØ 
!=
ØØ 
$num
ØØ 
)
ØØ 
{
ÙÙ 
double
ÚÚ 
peak2
ÚÚ  
=
ÚÚ! "
$num
ÚÚ# $
;
ÚÚ$ %
for
ÛÛ 
(
ÛÛ 
int
ÛÛ 
j
ÛÛ 
=
ÛÛ  
$num
ÛÛ! "
;
ÛÛ" #
j
ÛÛ$ %
<
ÛÛ& '
_output
ÛÛ( /
.
ÛÛ/ 0
Length
ÛÛ0 6
;
ÛÛ6 7
j
ÛÛ8 9
++
ÛÛ9 ;
)
ÛÛ; <
{
ÜÜ 
peak2
ÝÝ 
=
ÝÝ 
Math
ÝÝ  $
.
ÝÝ$ %
Max
ÝÝ% (
(
ÝÝ( )
peak2
ÝÝ) .
,
ÝÝ. /
Math
ÝÝ0 4
.
ÝÝ4 5
Abs
ÝÝ5 8
(
ÝÝ8 9
_output
ÝÝ9 @
[
ÝÝ@ A
j
ÝÝA B
]
ÝÝB C
)
ÝÝC D
)
ÝÝD E
;
ÝÝE F
}
ÞÞ 
if
ßß 
(
ßß 
!
ßß 
double
ßß 
.
ßß  
IsNaN
ßß  %
(
ßß% &
peak2
ßß& +
)
ßß+ ,
)
ßß, -
{
àà 
_gain
áá 
=
áá 
peak1
áá  %
/
áá& '
peak2
áá( -
;
áá- .
}
ââ 
else
ãã 
{
ää 
_gain
åå 
=
åå 
$num
åå  #
;
åå# $
}
ææ 
}
çç 
}
èè 
return
ïï 
_output
ïï 
;
ïï 
}
ðð 	
public
òò 
double
òò 
Gain
òò 
{
óó 	
get
ôô 
{
õõ 
return
öö 
_gain
öö 
;
öö 
}
÷÷ 
}
øø 	
private
üü 
void
üü 
arr_mul_brute
üü "
(
üü" #
double
üü# )
[
üü) *
]
üü* +
r
üü, -
,
üü- .
uint
üü/ 3
ro
üü4 6
,
üü6 7
double
üü8 >
[
üü> ?
]
üü? @
a
üüA B
,
üüB C
uint
üüD H
ao
üüI K
,
üüK L
double
üüM S
[
üüS T
]
üüT U
b
üüV W
,
üüW X
uint
üüY ]
bo
üü^ `
,
üü` a
uint
üüb f
w
üüg h
)
üüh i
{
ýý 	
for
þþ 
(
þþ 
uint
þþ 
i
þþ 
=
þþ 
$num
þþ 
;
þþ 
i
þþ 
<
þþ  
w
þþ! "
+
þþ# $
w
þþ% &
;
þþ& '
i
þþ( )
++
þþ) +
)
þþ+ ,
r
ÿÿ 
[
ÿÿ 
ro
ÿÿ 
+
ÿÿ 
i
ÿÿ 
]
ÿÿ 
=
ÿÿ 
$num
ÿÿ 
;
ÿÿ 
if
 
(
 
_deconvolve
 
)
 
{
 
for
 
(
 
uint
 
i
 
=
 
$num
 
;
  
i
! "
<
# $
w
% &
;
& '
i
( )
++
) +
)
+ ,
{
 
for
 
(
 
uint
 
j
 
=
  !
$num
" #
;
# $
j
% &
<
' (
w
) *
;
* +
j
, -
++
- /
)
/ 0
r
 
[
 
ro
 
+
 
i
  
+
! "
j
# $
]
$ %
+=
& (
a
) *
[
* +
ao
+ -
+
. /
i
0 1
]
1 2
/
3 4
b
5 6
[
6 7
bo
7 9
+
: ;
j
< =
]
= >
;
> ?
}
 
}
 
else
 
{
 
for
 
(
 
uint
 
i
 
=
 
$num
 
;
  
i
! "
<
# $
w
% &
;
& '
i
( )
++
) +
)
+ ,
{
 
for
 
(
 
uint
 
j
 
=
  !
$num
" #
;
# $
j
% &
<
' (
w
) *
;
* +
j
, -
++
- /
)
/ 0
r
 
[
 
ro
 
+
 
i
  
+
! "
j
# $
]
$ %
+=
& (
a
) *
[
* +
ao
+ -
+
. /
i
0 1
]
1 2
*
3 4
b
5 6
[
6 7
bo
7 9
+
: ;
j
< =
]
= >
;
> ?
}
 
}
 
}
 	
private
 
void
 
arr_mul_knuth
 "
(
" #
double
# )
[
) *
]
* +
r
, -
,
- .
uint
/ 3
ro
4 6
,
6 7
double
8 >
[
> ?
]
? @
a
A B
,
B C
uint
D H
ao
I K
,
K L
double
M S
[
S T
]
T U
b
V W
,
W X
uint
Y ]
bo
^ `
,
` a
double
b h
[
h i
]
i j
tmp
k n
,
n o
uint
p t
tmpo
u y
,
y z
uint
{ 
w 
) 
{
 	
if
 
(
 
w
 
<
 
$num
 
)
 
{
 
arr_mul_brute
 
(
 
r
 
,
  
ro
! #
,
# $
a
% &
,
& '
ao
( *
,
* +
b
, -
,
- .
bo
/ 1
,
1 2
w
3 4
)
4 5
;
5 6
}
 
else
 
{
 
uint
 
m
 
=
 
w
 
>>
 
$num
 
;
  
for
 
(
 
uint
 
i
 
=
 
$num
 
;
  
i
! "
<
# $
m
% &
;
& '
i
( )
++
) +
)
+ ,
{
 
r
 
[
 
ro
 
+
 
i
 
]
 
=
 
a
  !
[
! "
ao
" $
+
% &
m
' (
+
) *
i
+ ,
]
, -
-
. /
a
0 1
[
1 2
ao
2 4
+
5 6
i
7 8
]
8 9
;
9 :
r
 
[
 
ro
 
+
 
i
 
+
 
m
  
]
  !
=
" #
b
$ %
[
% &
bo
& (
+
) *
i
+ ,
]
, -
-
. /
b
0 1
[
1 2
bo
2 4
+
5 6
m
7 8
+
9 :
i
; <
]
< =
;
= >
}
   
arr_mul_knuth
¢¢ 
(
¢¢ 
tmp
¢¢ !
,
¢¢! "
tmpo
¢¢# '
,
¢¢' (
r
¢¢) *
,
¢¢* +
ro
¢¢, .
,
¢¢. /
r
¢¢0 1
,
¢¢1 2
ro
¢¢3 5
+
¢¢6 7
m
¢¢8 9
,
¢¢9 :
tmp
¢¢; >
,
¢¢> ?
tmpo
¢¢@ D
+
¢¢E F
w
¢¢G H
,
¢¢H I
m
¢¢J K
)
¢¢K L
;
¢¢L M
arr_mul_knuth
££ 
(
££ 
r
££ 
,
££  
ro
££! #
,
££# $
a
££% &
,
££& '
ao
££( *
,
££* +
b
££, -
,
££- .
bo
££/ 1
,
££1 2
tmp
££3 6
,
££6 7
tmpo
££8 <
+
££= >
w
££? @
,
££@ A
m
££B C
)
££C D
;
££D E
arr_mul_knuth
¤¤ 
(
¤¤ 
r
¤¤ 
,
¤¤  
ro
¤¤! #
+
¤¤$ %
w
¤¤& '
,
¤¤' (
a
¤¤) *
,
¤¤* +
ao
¤¤, .
+
¤¤/ 0
m
¤¤1 2
,
¤¤2 3
b
¤¤4 5
,
¤¤5 6
bo
¤¤7 9
+
¤¤: ;
m
¤¤< =
,
¤¤= >
tmp
¤¤? B
,
¤¤B C
tmpo
¤¤D H
+
¤¤I J
w
¤¤K L
,
¤¤L M
m
¤¤N O
)
¤¤O P
;
¤¤P Q
for
¦¦ 
(
¦¦ 
uint
¦¦ 
i
¦¦ 
=
¦¦ 
$num
¦¦ 
;
¦¦  
i
¦¦! "
<
¦¦# $
m
¦¦% &
;
¦¦& '
i
¦¦( )
++
¦¦) +
)
¦¦+ ,
{
§§ 
double
¨¨ 
bla
¨¨ 
=
¨¨  
r
¨¨! "
[
¨¨" #
ro
¨¨# %
+
¨¨& '
m
¨¨( )
+
¨¨* +
i
¨¨, -
]
¨¨- .
+
¨¨/ 0
r
¨¨1 2
[
¨¨2 3
ro
¨¨3 5
+
¨¨6 7
w
¨¨8 9
+
¨¨: ;
i
¨¨< =
]
¨¨= >
;
¨¨> ?
r
©© 
[
©© 
ro
©© 
+
©© 
m
©© 
+
©© 
i
©©  
]
©©  !
=
©©" #
bla
©©$ '
+
©©( )
r
©©* +
[
©©+ ,
ro
©©, .
+
©©/ 0
i
©©1 2
]
©©2 3
+
©©4 5
tmp
©©6 9
[
©©9 :
tmpo
©©: >
+
©©? @
i
©©A B
]
©©B C
;
©©C D
r
ªª 
[
ªª 
ro
ªª 
+
ªª 
w
ªª 
+
ªª 
i
ªª  
]
ªª  !
=
ªª" #
bla
ªª$ '
+
ªª( )
r
ªª* +
[
ªª+ ,
ro
ªª, .
+
ªª/ 0
w
ªª1 2
+
ªª3 4
m
ªª5 6
+
ªª7 8
i
ªª9 :
]
ªª: ;
+
ªª< =
tmp
ªª> A
[
ªªA B
tmpo
ªªB F
+
ªªG H
m
ªªI J
+
ªªK L
i
ªªM N
]
ªªN O
;
ªªO P
}
«« 
}
¬¬ 
}
­­ 	
private
±± 
unsafe
±± 
void
±± 
	mul_brute
±± %
(
±±% &
double
±±& ,
*
±±, -
r
±±. /
,
±±/ 0
double
±±1 7
*
±±7 8
a
±±9 :
,
±±: ;
double
±±< B
*
±±B C
b
±±D E
,
±±E F
uint
±±G K
w
±±L M
)
±±M N
{
²² 	
for
³³ 
(
³³ 
uint
³³ 
i
³³ 
=
³³ 
$num
³³ 
;
³³ 
i
³³ 
<
³³  
w
³³! "
+
³³# $
w
³³% &
;
³³& '
i
³³( )
++
³³) +
)
³³+ ,
r
´´ 
[
´´ 
i
´´ 
]
´´ 
=
´´ 
$num
´´ 
;
´´ 
if
µµ 
(
µµ 
_deconvolve
µµ 
)
µµ 
{
¶¶ 
for
·· 
(
·· 
uint
·· 
i
·· 
=
·· 
$num
·· 
;
··  
i
··! "
<
··# $
w
··% &
;
··& '
i
··( )
++
··) +
)
··+ ,
{
¸¸ 
for
¹¹ 
(
¹¹ 
uint
¹¹ 
j
¹¹ 
=
¹¹  !
$num
¹¹" #
;
¹¹# $
j
¹¹% &
<
¹¹' (
w
¹¹) *
;
¹¹* +
j
¹¹, -
++
¹¹- /
)
¹¹/ 0
r
ºº 
[
ºº 
i
ºº 
+
ºº 
j
ºº 
]
ºº  
+=
ºº! #
a
ºº$ %
[
ºº% &
i
ºº& '
]
ºº' (
/
ºº) *
b
ºº+ ,
[
ºº, -
j
ºº- .
]
ºº. /
;
ºº/ 0
}
»» 
}
¼¼ 
else
½½ 
{
¾¾ 
for
¿¿ 
(
¿¿ 
uint
¿¿ 
i
¿¿ 
=
¿¿ 
$num
¿¿ 
;
¿¿  
i
¿¿! "
<
¿¿# $
w
¿¿% &
;
¿¿& '
i
¿¿( )
++
¿¿) +
)
¿¿+ ,
{
ÀÀ 
for
ÁÁ 
(
ÁÁ 
uint
ÁÁ 
j
ÁÁ 
=
ÁÁ  !
$num
ÁÁ" #
;
ÁÁ# $
j
ÁÁ% &
<
ÁÁ' (
w
ÁÁ) *
;
ÁÁ* +
j
ÁÁ, -
++
ÁÁ- /
)
ÁÁ/ 0
r
ÂÂ 
[
ÂÂ 
i
ÂÂ 
+
ÂÂ 
j
ÂÂ 
]
ÂÂ  
+=
ÂÂ! #
a
ÂÂ$ %
[
ÂÂ% &
i
ÂÂ& '
]
ÂÂ' (
*
ÂÂ) *
b
ÂÂ+ ,
[
ÂÂ, -
j
ÂÂ- .
]
ÂÂ. /
;
ÂÂ/ 0
}
ÃÃ 
}
ÄÄ 
}
ÅÅ 	
private
ÉÉ 
unsafe
ÉÉ 
void
ÉÉ 
	mul_knuth
ÉÉ %
(
ÉÉ% &
double
ÉÉ& ,
*
ÉÉ, -
r
ÉÉ. /
,
ÉÉ/ 0
double
ÉÉ1 7
*
ÉÉ7 8
a
ÉÉ9 :
,
ÉÉ: ;
double
ÉÉ< B
*
ÉÉB C
b
ÉÉD E
,
ÉÉE F
double
ÉÉG M
*
ÉÉM N
tmp
ÉÉO R
,
ÉÉR S
uint
ÉÉT X
w
ÉÉY Z
)
ÉÉZ [
{
ÊÊ 	
if
ËË 
(
ËË 
w
ËË 
<
ËË 
$num
ËË 
)
ËË 
{
ÌÌ 
	mul_brute
ÍÍ 
(
ÍÍ 
r
ÍÍ 
,
ÍÍ 
a
ÍÍ 
,
ÍÍ 
b
ÍÍ  !
,
ÍÍ! "
w
ÍÍ# $
)
ÍÍ$ %
;
ÍÍ% &
}
ÎÎ 
else
ÏÏ 
{
ÐÐ 
uint
ÑÑ 
m
ÑÑ 
=
ÑÑ 
w
ÑÑ 
>>
ÑÑ 
$num
ÑÑ 
;
ÑÑ  
for
ÓÓ 
(
ÓÓ 
uint
ÓÓ 
i
ÓÓ 
=
ÓÓ 
$num
ÓÓ 
;
ÓÓ  
i
ÓÓ! "
<
ÓÓ# $
m
ÓÓ% &
;
ÓÓ& '
i
ÓÓ( )
++
ÓÓ) +
)
ÓÓ+ ,
{
ÔÔ 
r
ÕÕ 
[
ÕÕ 
i
ÕÕ 
]
ÕÕ 
=
ÕÕ 
a
ÕÕ 
[
ÕÕ 
m
ÕÕ 
+
ÕÕ  
i
ÕÕ! "
]
ÕÕ" #
-
ÕÕ$ %
a
ÕÕ& '
[
ÕÕ' (
i
ÕÕ( )
]
ÕÕ) *
;
ÕÕ* +
r
ÖÖ 
[
ÖÖ 
i
ÖÖ 
+
ÖÖ 
m
ÖÖ 
]
ÖÖ 
=
ÖÖ 
b
ÖÖ  
[
ÖÖ  !
i
ÖÖ! "
]
ÖÖ" #
-
ÖÖ$ %
b
ÖÖ& '
[
ÖÖ' (
m
ÖÖ( )
+
ÖÖ* +
i
ÖÖ, -
]
ÖÖ- .
;
ÖÖ. /
}
×× 
	mul_knuth
ÙÙ 
(
ÙÙ 
tmp
ÙÙ 
,
ÙÙ 
r
ÙÙ  
,
ÙÙ  !
r
ÙÙ" #
+
ÙÙ$ %
m
ÙÙ& '
,
ÙÙ' (
tmp
ÙÙ) ,
+
ÙÙ- .
w
ÙÙ/ 0
,
ÙÙ0 1
m
ÙÙ2 3
)
ÙÙ3 4
;
ÙÙ4 5
	mul_knuth
ÚÚ 
(
ÚÚ 
r
ÚÚ 
,
ÚÚ 
a
ÚÚ 
,
ÚÚ 
b
ÚÚ  !
,
ÚÚ! "
tmp
ÚÚ# &
+
ÚÚ' (
w
ÚÚ) *
,
ÚÚ* +
m
ÚÚ, -
)
ÚÚ- .
;
ÚÚ. /
	mul_knuth
ÛÛ 
(
ÛÛ 
r
ÛÛ 
+
ÛÛ 
w
ÛÛ 
,
ÛÛ  
a
ÛÛ! "
+
ÛÛ# $
m
ÛÛ% &
,
ÛÛ& '
b
ÛÛ( )
+
ÛÛ* +
m
ÛÛ, -
,
ÛÛ- .
tmp
ÛÛ/ 2
+
ÛÛ3 4
w
ÛÛ5 6
,
ÛÛ6 7
m
ÛÛ8 9
)
ÛÛ9 :
;
ÛÛ: ;
for
ÝÝ 
(
ÝÝ 
uint
ÝÝ 
i
ÝÝ 
=
ÝÝ 
$num
ÝÝ 
;
ÝÝ  
i
ÝÝ! "
<
ÝÝ# $
m
ÝÝ% &
;
ÝÝ& '
i
ÝÝ( )
++
ÝÝ) +
)
ÝÝ+ ,
{
ÞÞ 
double
ßß 
bla
ßß 
=
ßß  
r
ßß! "
[
ßß" #
m
ßß# $
+
ßß% &
i
ßß' (
]
ßß( )
+
ßß* +
r
ßß, -
[
ßß- .
w
ßß. /
+
ßß0 1
i
ßß2 3
]
ßß3 4
;
ßß4 5
r
àà 
[
àà 
m
àà 
+
àà 
i
àà 
]
àà 
=
àà 
bla
àà "
+
àà# $
r
àà% &
[
àà& '
i
àà' (
]
àà( )
+
àà* +
tmp
àà, /
[
àà/ 0
i
àà0 1
]
àà1 2
;
àà2 3
r
áá 
[
áá 
w
áá 
+
áá 
i
áá 
]
áá 
=
áá 
bla
áá "
+
áá# $
r
áá% &
[
áá& '
w
áá' (
+
áá) *
m
áá+ ,
+
áá- .
i
áá/ 0
]
áá0 1
+
áá2 3
tmp
áá4 7
[
áá7 8
m
áá8 9
+
áá: ;
i
áá< =
]
áá= >
;
áá> ?
}
ââ 
}
ãã 
}
ää 	
}
åå 
}çç £
3E:\GitHub\inguz-DSPUtil\InguzDSPUtilNew\Reverser.cs
	namespace 	
DSPUtil
 
{ 
[		 
Serializable		 
]		 
public

 

class

 
Reverser

 
:

 
SoundObj

 $
{ 
private 
List 
< 
ISample 
> 
_data #
;# $
public 
Reverser 
( 
) 
{ 	
_data 
= 
new 
List 
< 
ISample $
>$ %
(% &
)& '
;' (
} 	
public 
override 
IEnumerator #
<# $
ISample$ +
>+ ,
Samples- 4
{ 	
get 
{ 
if 
( 
_input 
== 
null "
)" #
{ 
yield 
break 
;  
} 
foreach 
( 
ISample  
sample! '
in( *
Input+ 0
)0 1
{   
_data!! 
.!! 
Add!! 
(!! 
sample!! $
)!!$ %
;!!% &
}"" 
_data$$ 
.$$ 
Reverse$$ 
($$ 
)$$ 
;$$  
foreach%% 
(%% 
ISample%%  
sample%%! '
in%%( *
_data%%+ 0
)%%0 1
{&& 
yield'' 
return''  
sample''! '
;''' (
}(( 
})) 
}** 	
}++ 
},, ãp
1E:\GitHub\inguz-DSPUtil\InguzDSPUtilNew\Sample.cs
	namespace 	
DSPUtil
 
{ 
public		 

	interface		 
ISample		 
{

 
ushort 
NumChannels 
{ 
get  
;  !
}" #
double 
this 
[ 
int 
arg 
] 
{ 
get "
;" #
set$ '
;' (
}) *
} 
[ 
Serializable 
] 
public 

struct 
Sample2 
: 
ISample #
{ 
double 
_0 
; 
double 
_1 
; 
public 
Sample2 
( 
double 
a 
,  
double! '
b( )
)) *
{ 	
_0 
= 
a 
; 
_1 
= 
b 
; 
} 	
public 
ushort 
NumChannels !
{" #
get$ '
{( )
return* 0
$num1 2
;2 3
}4 5
}6 7
public 
double 
this 
[ 
int 
arg "
]" #
{ 	
get 
{ 
return 
( 
arg 
== 
$num  
)  !
?" #
_0$ &
:' (
_1) +
;+ ,
} 
set   
{!! 
if"" 
("" 
arg"" 
=="" 
$num"" 
)"" 
_0""  
=""! "
value""# (
;""( )
else""* .
_1""/ 1
=""2 3
value""4 9
;""9 :
}## 
}$$ 	
public%% 
override%% 
bool%% 
Equals%% #
(%%# $
object%%$ *
obj%%+ .
)%%. /
{&& 	
ISample'' 
o'' 
='' 
obj'' 
as'' 
ISample'' &
;''& '
if(( 
((( 
o(( 
==(( 
null(( 
)(( 
{)) 
return** 
false** 
;** 
}++ 
return,, 
o,, 
.,, 
NumChannels,,  
==,,! #
$num,,$ %
&&,,& (
o,,) *
[,,* +
$num,,+ ,
],,, -
==,,. 0
_0,,1 3
&&,,4 6
o,,7 8
[,,8 9
$num,,9 :
],,: ;
==,,< >
_1,,? A
;,,A B
}-- 	
public.. 
override.. 
int.. 
GetHashCode.. '
(..' (
)..( )
{// 	
return00 
_000 
.00 
GetHashCode00 !
(00! "
)00" #
^00$ %
_100& (
.00( )
GetHashCode00) 4
(004 5
)005 6
;006 7
}11 	
}22 
[55 
Serializable55 
]55 
public66 

struct66 
Sample66 
:66 
ISample66 "
{77 
double99 
[99 
]99 
_value99 
;99 
public;; 
Sample;; 
(;; 
ushort;; 
numChannels;; (
);;( )
{<< 	
_value== 
=== 
new== 
double== 
[==  
numChannels==  +
]==+ ,
;==, -
}>> 	
publicAA 
SampleAA 
(AA 
doubleAA 
valAA  
)AA  !
{BB 	
_valueCC 
=CC 
newCC 
doubleCC 
[CC  
$numCC  !
]CC! "
;CC" #
_valueDD 
[DD 
$numDD 
]DD 
=DD 
valDD 
;DD 
}EE 	
publicHH 
SampleHH 
(HH 
ISampleHH 
sampleHH $
)HH$ %
{II 	
ushortJJ 
ncJJ 
=JJ 
sampleJJ 
.JJ 
NumChannelsJJ *
;JJ* +
_valueKK 
=KK 
newKK 
doubleKK 
[KK  
ncKK  "
]KK" #
;KK# $
forLL 
(LL 
intLL 
nLL 
=LL 
$numLL 
;LL 
nLL 
<LL 
ncLL  "
;LL" #
nLL$ %
++LL% '
)LL' (
{MM 
_valueNN 
[NN 
nNN 
]NN 
=NN 
sampleNN "
[NN" #
nNN# $
]NN$ %
;NN% &
}OO 
}PP 	
publicRR 
SampleRR 
(RR 
ISampleRR 
sampleRR $
,RR$ %
doubleRR& ,
gainRR- 1
)RR1 2
{SS 	
ushortTT 
ncTT 
=TT 
sampleTT 
.TT 
NumChannelsTT *
;TT* +
_valueUU 
=UU 
newUU 
doubleUU 
[UU  
ncUU  "
]UU" #
;UU# $
forVV 
(VV 
intVV 
nVV 
=VV 
$numVV 
;VV 
nVV 
<VV 
ncVV  "
;VV" #
nVV$ %
++VV% '
)VV' (
{WW 
_valueXX 
[XX 
nXX 
]XX 
=XX 
sampleXX "
[XX" #
nXX# $
]XX$ %
*XX& '
gainXX( ,
;XX, -
}YY 
}ZZ 	
public\\ 
ushort\\ 
NumChannels\\ !
{\\" #
get\\$ '
{\\( )
return\\* 0
(\\1 2
ushort\\2 8
)\\8 9
_value\\9 ?
.\\? @
Length\\@ F
;\\F G
}\\H I
}\\J K
public^^ 
double^^ 
this^^ 
[^^ 
int^^ 
arg^^ "
]^^" #
{__ 	
get`` 
{aa 
returnbb 
_valuebb 
[bb 
argbb !
]bb! "
;bb" #
}cc 
setdd 
{ee 
_valueff 
[ff 
argff 
]ff 
=ff 
valueff #
;ff# $
}gg 
}hh 	
publicjj 
overridejj 
booljj 
Equalsjj #
(jj# $
objectjj$ *
objjj+ .
)jj. /
{kk 	
ISamplell 
oll 
=ll 
objll 
asll 
ISamplell &
;ll& '
ifmm 
(mm 
omm 
==mm 
nullmm 
)mm 
{nn 
returnoo 
falseoo 
;oo 
}pp 
ushortqq 
ncqq 
=qq 
NumChannelsqq #
;qq# $
ifrr 
(rr 
orr 
.rr 
NumChannelsrr 
!=rr  
ncrr! #
)rr# $
{ss 
returntt 
falsett 
;tt 
}uu 
forvv 
(vv 
intvv 
nvv 
=vv 
$numvv 
;vv 
nvv 
<vv 
ncvv  "
;vv" #
nvv$ %
++vv% '
)vv' (
{ww 
ifxx 
(xx 
oxx 
[xx 
nxx 
]xx 
!=xx 
_valuexx "
[xx" #
nxx# $
]xx$ %
)xx% &
{yy 
returnzz 
falsezz  
;zz  !
}{{ 
}|| 
return}} 
true}} 
;}} 
}~~ 	
public
 
override
 
int
 
GetHashCode
 '
(
' (
)
( )
{
 	
int
 
h
 
=
 
$num
 
;
 
ushort
 
nc
 
=
 
NumChannels
 #
;
# $
for
 
(
 
int
 
n
 
=
 
$num
 
;
 
n
 
<
 
nc
  "
;
" #
n
$ %
++
% '
)
' (
{
 
h
 
=
 
h
 
^
 
_value
 
[
 
n
  
]
  !
.
! "
GetHashCode
" -
(
- .
)
. /
;
/ 0
}
 
return
 
h
 
;
 
}
 	
public
 
static
 
Sample
 
operator
 %
+
& '
(
' (
Sample
( .
c1
/ 1
,
1 2
Sample
3 9
c2
: <
)
< =
{
 	
if
 
(
 
c1
 
.
 
NumChannels
 
!=
 !
c2
" $
.
$ %
NumChannels
% 0
)
0 1
{
 
throw
 
new
 
ArgumentException
 +
(
+ ,
$str
, [
)
[ \
;
\ ]
}
 
Sample
 
s
 
=
 
new
 
Sample
 !
(
! "
c1
" $
.
$ %
NumChannels
% 0
)
0 1
;
1 2
for
 
(
 
int
 
n
 
=
 
$num
 
;
 
n
 
<
 
c1
  "
.
" #
NumChannels
# .
;
. /
n
0 1
++
1 3
)
3 4
{
 
s
 
[
 
n
 
]
 
=
 
c1
 
[
 
n
 
]
 
+
 
c2
 !
[
! "
n
" #
]
# $
;
$ %
}
 
return
 
s
 
;
 
}
 	
public
 
static
 
Sample
 
operator
 %
-
& '
(
' (
Sample
( .
c1
/ 1
,
1 2
Sample
3 9
c2
: <
)
< =
{
 	
if
 
(
 
c1
 
.
 
NumChannels
 
!=
 !
c2
" $
.
$ %
NumChannels
% 0
)
0 1
{
 
throw
 
new
 
ArgumentException
 +
(
+ ,
$str
, [
)
[ \
;
\ ]
}
 
Sample
 
s
 
=
 
new
 
Sample
 !
(
! "
c1
" $
.
$ %
NumChannels
% 0
)
0 1
;
1 2
for
   
(
   
int
   
n
   
=
   
$num
   
;
   
n
   
<
   
c1
    "
.
  " #
NumChannels
  # .
;
  . /
n
  0 1
++
  1 3
)
  3 4
{
¡¡ 
s
¢¢ 
[
¢¢ 
n
¢¢ 
]
¢¢ 
=
¢¢ 
c1
¢¢ 
[
¢¢ 
n
¢¢ 
]
¢¢ 
-
¢¢ 
c2
¢¢ !
[
¢¢! "
n
¢¢" #
]
¢¢# $
;
¢¢$ %
}
££ 
return
¤¤ 
s
¤¤ 
;
¤¤ 
}
¥¥ 	
public
¨¨ 
static
¨¨ 
Sample
¨¨ 
operator
¨¨ %
*
¨¨& '
(
¨¨' (
Sample
¨¨( .
c1
¨¨/ 1
,
¨¨1 2
Sample
¨¨3 9
c2
¨¨: <
)
¨¨< =
{
©© 	
ushort
ªª 
nc
ªª 
=
ªª 
c1
ªª 
.
ªª 
NumChannels
ªª &
;
ªª& '
if
«« 
(
«« 
nc
«« 
!=
«« 
c2
«« 
.
«« 
NumChannels
«« $
)
««$ %
{
¬¬ 
throw
­­ 
new
­­ 
ArgumentException
­­ +
(
­­+ ,
$str
­­, [
)
­­[ \
;
­­\ ]
}
®® 
Sample
¯¯ 
s
¯¯ 
=
¯¯ 
new
¯¯ 
Sample
¯¯ !
(
¯¯! "
nc
¯¯" $
)
¯¯$ %
;
¯¯% &
for
°° 
(
°° 
int
°° 
n
°° 
=
°° 
$num
°° 
;
°° 
n
°° 
<
°° 
nc
°°  "
;
°°" #
n
°°$ %
++
°°% '
)
°°' (
{
±± 
s
²² 
[
²² 
n
²² 
]
²² 
=
²² 
c1
²² 
[
²² 
n
²² 
]
²² 
*
²² 
c2
²² !
[
²²! "
n
²²" #
]
²²# $
;
²²$ %
}
³³ 
return
´´ 
s
´´ 
;
´´ 
}
µµ 	
public
¸¸ 
static
¸¸ 
Sample
¸¸ 
operator
¸¸ %
*
¸¸& '
(
¸¸' (
double
¸¸( .
gain
¸¸/ 3
,
¸¸3 4
Sample
¸¸5 ;
c
¸¸< =
)
¸¸= >
{
¹¹ 	
ushort
ºº 
nc
ºº 
=
ºº 
c
ºº 
.
ºº 
NumChannels
ºº %
;
ºº% &
Sample
»» 
s
»» 
=
»» 
new
»» 
Sample
»» !
(
»»! "
nc
»»# %
)
»»& '
;
»»' (
for
¼¼ 
(
¼¼ 
int
¼¼ 
n
¼¼ 
=
¼¼ 
$num
¼¼ 
;
¼¼ 
n
¼¼ 
<
¼¼ 
nc
¼¼  "
;
¼¼" #
n
¼¼$ %
++
¼¼% '
)
¼¼' (
{
½½ 
s
¾¾ 
[
¾¾ 
n
¾¾ 
]
¾¾ 
=
¾¾ 
c
¾¾ 
[
¾¾ 
n
¾¾ 
]
¾¾ 
*
¾¾ 
gain
¾¾ "
;
¾¾" #
}
¿¿ 
return
ÀÀ 
s
ÀÀ 
;
ÀÀ 
}
ÁÁ 	
}
ÂÂ 
}¤¤ µ 
4E:\GitHub\inguz-DSPUtil\InguzDSPUtilNew\Sequencer.cs
	namespace 	
DSPUtil
 
{ 
[ 
Serializable 
] 
public 

class 
	Sequencer 
: 
SoundObj %
{ 
List 
< 
	ISoundObj 
> 
_inputs 
=  !
new" %
List& *
<* +
	ISoundObj+ 4
>4 5
(5 6
)6 7
;7 8
List 
< 
List 
< 
double 
> 
> 
_channelGains (
=) *
new+ .
List/ 3
<3 4
List4 8
<8 9
double9 ?
>? @
>@ A
(A B
)B C
;C D
public 
	Sequencer 
( 
) 
{ 	
} 	
public 
void 
Add 
( 
	ISoundObj !
input" '
)' (
{ 	
Add 
( 
input 
, 
new 
List 
<  
double  &
>& '
(' (
)( )
)) *
;* +
} 	
public 
void 
Add 
( 
	ISoundObj !
input" '
,' (
List) -
<- .
double. 4
>4 5
channelGains6 B
)B C
{ 	
if 
( 
_inputs 
. 
Count 
==  
$num! "
)" #
{   
Input"" 
="" 
input"" 
;"" 
}## 
_inputs$$ 
.$$ 
Add$$ 
($$ 
input$$ 
)$$ 
;$$ 
_channelGains%% 
.%% 
Add%% 
(%% 
channelGains%% *
)%%* +
;%%+ ,
}&& 	
public(( 
override(( 
int(( 

Iterations(( &
{)) 	
get** 
{++ 
int,, 
i,, 
=,, 
$num,, 
;,, 
foreach-- 
(-- 
	ISoundObj-- "
input--# (
in--) +
_inputs--, 3
)--3 4
{.. 
i// 
+=// 
input// 
.// 

Iterations// )
;//) *
}00 
return11 
i11 
;11 
}22 
}33 	
public88 
override88 
IEnumerator88 #
<88# $
ISample88$ +
>88+ ,
Samples88- 4
{99 	
get:: 
{;; 
int<< 
nIn<< 
=<< 
$num<< 
;<< 
foreach== 
(== 
	ISoundObj== "
input==# (
in==) +
_inputs==, 3
)==3 4
{>> 
foreach?? 
(?? 
ISample?? $
s??% &
in??' )
input??* /
)??/ 0
{@@ 
ifAA 
(AA 
_channelGainsAA )
[AA) *
nInAA* -
]AA- .
.AA. /
CountAA/ 4
>AA5 6
$numAA7 8
)AA8 9
{BB 
forCC 
(CC  
intCC  #
cCC$ %
=CC% &
$numCC& '
;CC' (
cCC) *
<CC* +
_channelGainsCC+ 8
[CC8 9
nInCC9 <
]CC< =
.CC= >
CountCC> C
;CCC D
cCCE F
++CCF H
)CCH I
{DD 
sEE  !
[EE! "
cEE" #
]EE# $
*=EE% '
_channelGainsEE( 5
[EE5 6
nInEE6 9
]EE9 :
[EE: ;
cEE; <
]EE< =
;EE= >
}FF 
}GG 
yieldHH 
returnHH $
sHH% &
;HH& '
}II 
nInJJ 
++JJ 
;JJ 
}KK 
}LL 
}MM 	
}NN 
}PP Ð
3E:\GitHub\inguz-DSPUtil\InguzDSPUtilNew\Shuffler.cs
	namespace 	
DSPUtil
 
{ 
public 

class 
Shuffler 
: 
SoundObj #
{ 
public 
Shuffler 
( 
) 
{ 	
} 	
public 
override 
IEnumerator #
<# $
ISample$ +
>+ ,
Samples- 4
{ 	
get 
{ 
if 
( 
_input 
== 
null "
)" #
{ 
yield 
break 
;  
} 
foreach 
( 
ISample  
sample! '
in( *
_input+ 1
)1 2
{ 
yield 
return  
_next! &
(& '
sample' -
)- .
;. /
}   
}!! 
}"" 	
internal$$ 
ISample$$ 
_next$$ 
($$ 
ISample$$ &
s$$' (
)$$( )
{%% 	
if&& 
(&& 
_nc&& 
!=&& 
$num&& 
)&& 
{'' 
})) 
else** 
{++ 
double,, 
L,, 
=,, 
s,, 
[,, 
$num,, 
],, 
;,,  
double-- 
R-- 
=-- 
s-- 
[-- 
$num-- 
]-- 
;--  
s00 
[00 
$num00 
]00 
=00 
(00 
L00 
+00 
R00 
)00 
*00  

_sigmaGain00! +
;00+ ,
s11 
[11 
$num11 
]11 
=11 
(11 
L11 
-11 
R11 
)11 
*11  

_deltaGain11! +
;11+ ,
}22 
return33 
s33 
;33 
}44 	
private66 
double66 

_deltaGain66 !
=66" #
MathUtil66$ ,
.66, -
SQRT266- 2
;662 3
public88 
double88 
	DeltaGain88 
{99 	
get:: 
{:: 
return:: 

_deltaGain:: #
;::# $
}::% &
set;; 
{;; 

_deltaGain;; 
=;; 
value;; $
;;;$ %
};;& '
}<< 	
private>> 
double>> 

_sigmaGain>> !
=>>" #
MathUtil>>$ ,
.>>, -
SQRT2>>- 2
;>>2 3
public@@ 
double@@ 
	SigmaGain@@ 
{AA 	
getBB 
{BB 
returnBB 

_sigmaGainBB #
;BB# $
}BB% &
setCC 
{CC 

_sigmaGainCC 
=CC 
valueCC $
;CC$ %
}CC& '
}DD 	
}FF 
}KK ©å
:E:\GitHub\inguz-DSPUtil\InguzDSPUtilNew\SignalGenerator.cs
	namespace 	
DSPUtil
 
{ 
public 

class 
SignalGenerator  
:! "
SoundObj# +
{ 
	protected 
const 
double 
twopi $
=% &
$num' (
*) *
Math+ /
./ 0
PI0 2
;2 3
	protected 
double 
_freq 
; 
	protected 
double 
_gain 
; 
public 
SignalGenerator 
( 
ushort %
numChannels& 1
,1 2
uint3 7

sampleRate8 B
,B C
doubleD J
freqK O
,O P
doubleQ W
gainX \
)\ ]
{ 	
NumChannels 
= 
numChannels %
;% &

SampleRate 
= 

sampleRate #
;# $
_freq 
= 
freq 
; 
_gain 
= 
gain 
; 
} 	
public 
override 
IEnumerator #
<# $
ISample$ +
>+ ,
Samples- 4
{ 	
get 
{   
yield!! 
break!! 
;!! 
}"" 
}## 	
public&& 
override&& 
int&& 

Iterations&& &
{'' 	
get(( 
{(( 
return(( 
int(( 
.(( 
MaxValue(( %
;((% &
}((' (
})) 	
}** 
public,, 

class,, 
SineGenerator,, 
:,,  
SignalGenerator,,! 0
{-- 
public.. 
SineGenerator.. 
(.. 
ushort.. #
numChannels..$ /
,../ 0
uint..1 5

sampleRate..6 @
,..@ A
double..B H
freq..I M
,..M N
double..O U
gain..V Z
)..Z [
:// 
base// 
(// 
numChannels// 
,// 

sampleRate//  *
,//* +
freq//, 0
,//0 1
gain//2 6
)//6 7
{00 	
}11 	
public66 
override66 
IEnumerator66 #
<66# $
ISample66$ +
>66+ ,
Samples66- 4
{77 	
get88 
{99 
ushort:: 
nc:: 
=:: 
NumChannels:: '
;::' (
uint;; 
sr;; 
=;; 

SampleRate;; $
;;;$ %
double<< 
mul<< 
=<< 
twopi<< "
*<<# $
_freq<<% *
/<<+ ,
sr<<- /
;<</ 0
int== 
n== 
=== 
$num== 
;== 
Sample>> 
s>> 
=>> 
new>> 
Sample>> %
(>>% &
nc>>& (
)>>( )
;>>) *
while?? 
(?? 
true?? 
)?? 
{@@ 
doubleAA 
vAA 
=AA 
_gainAA $
*AA% &
MathAA' +
.AA+ ,
SinAA, /
(AA/ 0
nAA0 1
*AA2 3
mulAA4 7
)AA7 8
;AA8 9
forBB 
(BB 
intBB 
cBB 
=BB  
$numBB! "
;BB" #
cBB$ %
<BB& '
ncBB( *
;BB* +
cBB, -
++BB- /
)BB/ 0
{CC 
sDD 
[DD 
cDD 
]DD 
=DD 
vDD  
;DD  !
}EE 
nFF 
++FF 
;FF 
yieldGG 
returnGG  
sGG! "
;GG" #
}HH 
}II 
}JJ 	
}KK 
publicMM 

classMM 
SineQuadGeneratorMM "
:MM# $
SignalGeneratorMM% 4
{NN 
publicOO 
SineQuadGeneratorOO  
(OO  !
ushortOO! '
numChannelsOO( 3
,OO3 4
uintOO5 9

sampleRateOO: D
,OOD E
doubleOOF L
freqOOM Q
,OOQ R
doubleOOS Y
gainOOZ ^
)OO^ _
:PP 
basePP 
(PP 
numChannelsPP 
,PP 

sampleRatePP  *
,PP* +
freqPP, 0
,PP0 1
gainPP2 6
)PP6 7
{QQ 	
}RR 	
publicWW 
overrideWW 
IEnumeratorWW #
<WW# $
ISampleWW$ +
>WW+ ,
SamplesWW- 4
{XX 	
getYY 
{ZZ 
ushort[[ 
nc[[ 
=[[ 
NumChannels[[ '
;[[' (
if\\ 
(\\ 
nc\\ 
<\\ 
$num\\ 
)\\ 
{]] 
throw^^ 
new^^ '
ArgumentOutOfRangeException^^ 9
(^^9 :
$str^^: G
,^^G H
$str^^I l
)^^l m
;^^m n
}__ 
uint`` 
sr`` 
=`` 

SampleRate`` $
;``$ %
doubleaa 
mulaa 
=aa 
twopiaa "
*aa# $
_freqaa% *
/aa+ ,
sraa- /
;aa/ 0
intbb 
nbb 
=bb 
$numbb 
;bb 
Samplecc 
scc 
=cc 
newcc 
Samplecc %
(cc% &
nccc& (
)cc( )
;cc) *
whiledd 
(dd 
truedd 
)dd 
{ee 
sff 
[ff 
$numff 
]ff 
=ff 
_gainff  
*ff! "
Mathff# '
.ff' (
Cosff( +
(ff+ ,
nff, -
*ff. /
mulff0 3
)ff3 4
;ff4 5
sgg 
[gg 
$numgg 
]gg 
=gg 
_gaingg  
*gg! "
Mathgg# '
.gg' (
Singg( +
(gg+ ,
ngg, -
*gg. /
mulgg0 3
)gg3 4
;gg4 5
nhh 
++hh 
;hh 
yieldii 
returnii  
sii! "
;ii" #
}jj 
}kk 
}ll 	
}mm 
publicoo 

classoo 
SquareGeneratoroo  
:oo! "
SignalGeneratoroo# 2
{pp 
publicqq 
SquareGeneratorqq 
(qq 
ushortqq %
numChannelsqq& 1
,qq1 2
uintqq3 7

sampleRateqq8 B
,qqB C
doubleqqD J
freqqqK O
,qqO P
doubleqqQ W
gainqqX \
)qq\ ]
:rr 
baserr 
(rr 
numChannelsrr 
,rr 

sampleRaterr  *
,rr* +
freqrr, 0
,rr0 1
gainrr2 6
)rr6 7
{ss 	
}tt 	
publicyy 
overrideyy 
IEnumeratoryy #
<yy# $
ISampleyy$ +
>yy+ ,
Samplesyy- 4
{zz 	
get{{ 
{|| 
ushort}} 
nc}} 
=}} 
NumChannels}} '
;}}' (
uint~~ 
sr~~ 
=~~ 

SampleRate~~ $
;~~$ %
double 
mul 
= 
$num 
*  
_freq! &
/' (
sr) +
;+ ,
int
 
n
 
=
 
$num
 
;
 
Sample
 
s
 
=
 
new
 
Sample
 %
(
% &
nc
& (
)
( )
;
) *
while
 
(
 
true
 
)
 
{
 
double
 
saw
 
=
  
(
! "
(
" #
n
# $
*
% &
mul
' *
)
* +
%
, -
$num
. /
)
/ 0
-
1 2
$num
3 4
;
4 5
double
 
v
 
=
 
saw
 "
>
# $
$num
$ %
?
& '
_gain
( -
:
. /
-
0 1
_gain
1 6
;
6 7
for
 
(
 
int
 
c
 
=
  
$num
! "
;
" #
c
$ %
<
& '
nc
( *
;
* +
c
, -
++
- /
)
/ 0
{
 
s
 
[
 
c
 
]
 
=
 
v
  
;
  !
}
 
n
 
++
 
;
 
yield
 
return
  
s
! "
;
" #
}
 
}
 
}
 	
}
 
public
 

class
 
Harmonic
 
{
 
public
 
double
 
Gain
 
;
 
public
 
double
 
Phase
 
;
 
public
 
Harmonic
 
(
 
double
 
gain
 #
)
# $
{
 	
Gain
 
=
 
gain
 
;
 
Phase
 
=
 
$num
 
;
 
}
 	
public
 
Harmonic
 
(
 
double
 
gain
 #
,
# $
double
% +
phase
, 1
)
1 2
{
 	
Gain
 
=
 
gain
 
;
 
Phase
 
=
 
phase
 
;
 
}
 	
}
 
public
¡¡ 

abstract
¡¡ 
class
¡¡ 
HarmonicGenerator
¡¡ +
:
¡¡, -
SignalGenerator
¡¡. =
{
¢¢ 
public
££ 
HarmonicGenerator
££  
(
££  !
ushort
££! '
numChannels
££( 3
,
££3 4
uint
££5 9

sampleRate
££: D
,
££D E
double
££F L
freq
££M Q
,
££Q R
double
££S Y
gain
££Z ^
)
££^ _
:
¤¤ 
base
¤¤ 
(
¤¤ 
numChannels
¤¤ 
,
¤¤ 

sampleRate
¤¤  *
,
¤¤* +
freq
¤¤, 0
,
¤¤0 1
gain
¤¤2 6
)
¤¤6 7
{
¥¥ 	
}
¦¦ 	
public
¨¨ 
virtual
¨¨ 
List
¨¨ 
<
¨¨ 
Harmonic
¨¨ $
>
¨¨$ %
	Harmonics
¨¨& /
{
©© 	
get
ªª 
{
«« 
List
¬¬ 
<
¬¬ 
Harmonic
¬¬ 
>
¬¬ 
	harmonics
¬¬ (
=
¬¬) *
new
¬¬+ .
List
¬¬/ 3
<
¬¬3 4
Harmonic
¬¬4 <
>
¬¬< =
(
¬¬= >
)
¬¬> ?
;
¬¬? @
return
­­ 
	harmonics
­­  
;
­­  !
}
®® 
}
¯¯ 	
public
´´ 
override
´´ 
IEnumerator
´´ #
<
´´# $
ISample
´´$ +
>
´´+ ,
Samples
´´- 4
{
µµ 	
get
¶¶ 
{
·· 
ushort
¸¸ 
nc
¸¸ 
=
¸¸ 
NumChannels
¸¸ '
;
¸¸' (
uint
¹¹ 
sr
¹¹ 
=
¹¹ 

SampleRate
¹¹ $
;
¹¹$ %
double
ºº 
mul
ºº 
=
ºº 
twopi
ºº "
*
ºº# $
_freq
ºº% *
/
ºº+ ,
sr
ºº- /
;
ºº/ 0
int
»» 
n
»» 
=
»» 
$num
»» 
;
»» 
List
¼¼ 
<
¼¼ 
Harmonic
¼¼ 
>
¼¼ 
lH
¼¼ !
=
¼¼" #
	Harmonics
¼¼$ -
;
¼¼- .
List
½½ 
<
½½ 
Sample
½½ 
>
½½ 
samples
½½ $
=
½½% &
new
½½' *
List
½½+ /
<
½½/ 0
Sample
½½0 6
>
½½6 7
(
½½7 8
(
½½8 9
int
½½9 <
)
½½< =
sr
½½= ?
)
½½? @
;
½½@ A
while
¾¾ 
(
¾¾ 
n
¾¾ 
<
¾¾ 
sr
¾¾ 
)
¾¾ 
{
¿¿ 
double
ÀÀ 
v
ÀÀ 
=
ÀÀ 
$num
ÀÀ  
;
ÀÀ  !
for
ÁÁ 
(
ÁÁ 
int
ÁÁ 
nH
ÁÁ 
=
ÁÁ  !
$num
ÁÁ" #
;
ÁÁ# $
nH
ÁÁ% '
<
ÁÁ( )
lH
ÁÁ* ,
.
ÁÁ, -
Count
ÁÁ- 2
;
ÁÁ2 3
nH
ÁÁ4 6
++
ÁÁ6 8
)
ÁÁ8 9
{
ÂÂ 
Harmonic
ÃÃ  
h
ÃÃ! "
=
ÃÃ# $
lH
ÃÃ% '
[
ÃÃ' (
nH
ÃÃ( *
]
ÃÃ* +
;
ÃÃ+ ,
if
ÄÄ 
(
ÄÄ 
h
ÄÄ 
.
ÄÄ 
Gain
ÄÄ "
>
ÄÄ# $
$num
ÄÄ% &
)
ÄÄ& '
v
ÄÄ( )
+=
ÄÄ* ,
h
ÄÄ- .
.
ÄÄ. /
Gain
ÄÄ/ 3
*
ÄÄ4 5
Math
ÄÄ6 :
.
ÄÄ: ;
Sin
ÄÄ; >
(
ÄÄ> ?
(
ÄÄ? @
nH
ÄÄ@ B
*
ÄÄC D
n
ÄÄE F
*
ÄÄG H
mul
ÄÄI L
)
ÄÄL M
+
ÄÄN O
h
ÄÄP Q
.
ÄÄQ R
Phase
ÄÄR W
)
ÄÄW X
;
ÄÄX Y
}
ÅÅ 
Sample
ÆÆ 
s
ÆÆ 
=
ÆÆ 
new
ÆÆ "
Sample
ÆÆ# )
(
ÆÆ) *
nc
ÆÆ* ,
)
ÆÆ, -
;
ÆÆ- .
for
ÇÇ 
(
ÇÇ 
int
ÇÇ 
c
ÇÇ 
=
ÇÇ  
$num
ÇÇ! "
;
ÇÇ" #
c
ÇÇ$ %
<
ÇÇ& '
nc
ÇÇ( *
;
ÇÇ* +
c
ÇÇ, -
++
ÇÇ- /
)
ÇÇ/ 0
{
ÈÈ 
s
ÉÉ 
[
ÉÉ 
c
ÉÉ 
]
ÉÉ 
=
ÉÉ 
v
ÉÉ  
;
ÉÉ  !
}
ÊÊ 
n
ËË 
++
ËË 
;
ËË 
samples
ÌÌ 
.
ÌÌ 
Add
ÌÌ 
(
ÌÌ  
s
ÌÌ  !
)
ÌÌ! "
;
ÌÌ" #
}
ÍÍ 
while
ÎÎ 
(
ÎÎ 
true
ÎÎ 
)
ÎÎ 
{
ÏÏ 
foreach
ÐÐ 
(
ÐÐ 
Sample
ÐÐ #
s
ÐÐ$ %
in
ÐÐ& (
samples
ÐÐ) 0
)
ÐÐ0 1
{
ÑÑ 
yield
ÒÒ 
return
ÒÒ $
s
ÒÒ% &
;
ÒÒ& '
}
ÓÓ 
}
ÔÔ 
}
ÕÕ 
}
ÖÖ 	
}
×× 
public
ÙÙ 

class
ÙÙ (
BandLimitedSquareGenerator
ÙÙ +
:
ÙÙ, -
HarmonicGenerator
ÙÙ. ?
{
ÚÚ 
public
ÛÛ (
BandLimitedSquareGenerator
ÛÛ )
(
ÛÛ) *
ushort
ÛÛ* 0
numChannels
ÛÛ1 <
,
ÛÛ< =
uint
ÛÛ> B

sampleRate
ÛÛC M
,
ÛÛM N
double
ÛÛO U
freq
ÛÛV Z
,
ÛÛZ [
double
ÛÛ\ b
gain
ÛÛc g
)
ÛÛg h
:
ÜÜ 
base
ÜÜ 
(
ÜÜ 
numChannels
ÜÜ 
,
ÜÜ 

sampleRate
ÜÜ  *
,
ÜÜ* +
freq
ÜÜ, 0
,
ÜÜ0 1
gain
ÜÜ2 6
)
ÜÜ6 7
{
ÝÝ 	
}
ÞÞ 	
public
àà 
override
àà 
List
àà 
<
àà 
Harmonic
àà %
>
àà% &
	Harmonics
àà' 0
{
áá 	
get
ââ 
{
ãã 
List
ää 
<
ää 
Harmonic
ää 
>
ää 
	harmonics
ää (
=
ää) *
new
ää+ .
List
ää/ 3
<
ää3 4
Harmonic
ää4 <
>
ää< =
(
ää= >
)
ää> ?
;
ää? @
uint
åå 
sr
åå 
=
åå 

SampleRate
åå $
;
åå$ %
int
ææ 
nH
ææ 
=
ææ 
$num
ææ 
;
ææ 
double
çç 
g
çç 
=
çç 
_gain
çç  
*
çç! "
$num
çç# $
/
çç% &
Math
çç' +
.
çç+ ,
PI
çç, .
;
çç. /
while
èè 
(
èè 
true
èè 
)
èè 
{
éé 
double
êê 
fN
êê 
=
êê 
_freq
êê  %
*
êê& '
(
êê( )
nH
êê) +
+
êê, -
$num
êê. /
)
êê/ 0
;
êê0 1
if
ëë 
(
ëë 
fN
ëë 
>
ëë 
sr
ëë 
/
ëë  !
$num
ëë" #
)
ëë# $
{
ìì 
break
îî 
;
îî 
}
ïï 
Harmonic
ðð 
h
ðð 
=
ðð  
new
ðð! $
Harmonic
ðð% -
(
ðð- .
nH
ðð. 0
%
ðð1 2
$num
ðð3 4
==
ðð5 7
$num
ðð8 9
?
ðð: ;
$num
ðð< =
:
ðð> ?
g
ðð@ A
/
ððB C
nH
ððD F
)
ððF G
;
ððG H
	harmonics
ññ 
.
ññ 
Add
ññ !
(
ññ! "
h
ññ" #
)
ññ# $
;
ññ$ %
nH
òò 
++
òò 
;
òò 
}
óó 
return
ôô 
	harmonics
ôô  
;
ôô  !
}
õõ 
}
öö 	
}
÷÷ 
public
ùù 

class
ùù 
TriangleGenerator
ùù "
:
ùù# $
SignalGenerator
ùù% 4
{
úú 
public
ûû 
TriangleGenerator
ûû  
(
ûû  !
ushort
ûû! '
numChannels
ûû( 3
,
ûû3 4
uint
ûû5 9

sampleRate
ûû: D
,
ûûD E
double
ûûF L
freq
ûûM Q
,
ûûQ R
double
ûûS Y
gain
ûûZ ^
)
ûû^ _
:
üü 
base
üü 
(
üü 
numChannels
üü 
,
üü 

sampleRate
üü  *
,
üü* +
freq
üü, 0
,
üü0 1
gain
üü2 6
)
üü6 7
{
ýý 	
}
þþ 	
public
 
override
 
IEnumerator
 #
<
# $
ISample
$ +
>
+ ,
Samples
- 4
{
 	
get
 
{
 
ushort
 
nc
 
=
 
NumChannels
 '
;
' (
uint
 
sr
 
=
 

SampleRate
 $
;
$ %
double
 
mul
 
=
 
$num
 
*
  
_freq
! &
/
' (
sr
) +
;
+ ,
int
 
n
 
=
 
$num
 
;
 
Sample
 
s
 
=
 
new
 
Sample
 %
(
% &
nc
& (
)
( )
;
) *
while
 
(
 
true
 
)
 
{
 
double
 
saw
 
=
  
(
! "
(
" #
n
# $
*
% &
mul
' *
)
* +
%
, -
$num
. /
)
/ 0
;
0 1
double
 
v
 
=
 
$num
  
*
! "
saw
# &
;
& '
if
 
(
 
v
 
>
 
$num
 
)
 
v
  
=
! "
$num
# $
-
% &
v
' (
;
( )
if
 
(
 
v
 
<
 
-
 
$num
 
)
 
v
  !
=
" #
-
$ %
$num
% &
-
' (
v
) *
;
* +
for
 
(
 
int
 
c
 
=
  
$num
! "
;
" #
c
$ %
<
& '
nc
( *
;
* +
c
, -
++
- /
)
/ 0
{
 
s
 
[
 
c
 
]
 
=
 
_gain
 $
*
% &
v
' (
;
( )
}
 
n
 
++
 
;
 
yield
 
return
  
s
! "
;
" #
}
 
}
 
}
 	
}
 
public
 

class
 *
BandLimitedTriangleGenerator
 -
:
. /
HarmonicGenerator
0 A
{
 
public
 *
BandLimitedTriangleGenerator
 +
(
+ ,
ushort
, 2
numChannels
3 >
,
> ?
uint
@ D

sampleRate
E O
,
O P
double
Q W
freq
X \
,
\ ]
double
^ d
gain
e i
)
i j
:
   
base
   
(
   
numChannels
   
,
   

sampleRate
    *
,
  * +
freq
  , 0
,
  0 1
gain
  2 6
)
  6 7
{
¡¡ 	
}
¢¢ 	
public
¤¤ 
override
¤¤ 
List
¤¤ 
<
¤¤ 
Harmonic
¤¤ %
>
¤¤% &
	Harmonics
¤¤' 0
{
¥¥ 	
get
¦¦ 
{
§§ 
List
¨¨ 
<
¨¨ 
Harmonic
¨¨ 
>
¨¨ 
	harmonics
¨¨ (
=
¨¨) *
new
¨¨+ .
List
¨¨/ 3
<
¨¨3 4
Harmonic
¨¨4 <
>
¨¨< =
(
¨¨= >
)
¨¨> ?
;
¨¨? @
uint
©© 
sr
©© 
=
©© 

SampleRate
©© $
;
©©$ %
int
ªª 
nH
ªª 
=
ªª 
$num
ªª 
;
ªª 
double
«« 
g
«« 
=
«« 
_gain
««  
*
««! "
$num
««# $
/
««% &
(
««' (
Math
««( ,
.
««, -
PI
««- /
*
««0 1
Math
««2 6
.
««6 7
PI
««7 9
)
««9 :
;
««: ;
while
¬¬ 
(
¬¬ 
true
¬¬ 
)
¬¬ 
{
­­ 
double
®® 
fN
®® 
=
®® 
_freq
®®  %
*
®®& '
(
®®( )
nH
®®) +
+
®®, -
$num
®®. /
)
®®/ 0
;
®®0 1
if
¯¯ 
(
¯¯ 
fN
¯¯ 
>
¯¯ 
sr
¯¯ 
/
¯¯  !
$num
¯¯" #
)
¯¯# $
{
°° 
break
²² 
;
²² 
}
³³ 
Harmonic
´´ 
h
´´ 
=
´´  
new
´´! $
Harmonic
´´% -
(
´´- .
nH
´´. 0
%
´´1 2
$num
´´3 4
==
´´5 7
$num
´´8 9
?
´´: ;
$num
´´< =
:
´´> ?
g
´´@ A
/
´´B C
(
´´D E
nH
´´E G
*
´´H I
nH
´´J L
)
´´L M
,
´´M N
nH
´´O Q
%
´´R S
$num
´´T U
==
´´V X
$num
´´Y Z
?
´´[ \
Math
´´] a
.
´´a b
PI
´´b d
:
´´e f
$num
´´g h
)
´´h i
;
´´i j
	harmonics
µµ 
.
µµ 
Add
µµ !
(
µµ! "
h
µµ" #
)
µµ# $
;
µµ$ %
nH
¶¶ 
++
¶¶ 
;
¶¶ 
}
·· 
return
¸¸ 
	harmonics
¸¸  
;
¸¸  !
}
¹¹ 
}
ºº 	
}
»» 
public
½½ 

class
½½ 
SawtoothGenerator
½½ "
:
½½# $
SignalGenerator
½½% 4
{
¾¾ 
public
¿¿ 
SawtoothGenerator
¿¿  
(
¿¿  !
ushort
¿¿! '
numChannels
¿¿( 3
,
¿¿3 4
uint
¿¿5 9

sampleRate
¿¿: D
,
¿¿D E
double
¿¿F L
freq
¿¿M Q
,
¿¿Q R
double
¿¿S Y
gain
¿¿Z ^
)
¿¿^ _
:
ÀÀ 
base
ÀÀ 
(
ÀÀ 
numChannels
ÀÀ 
,
ÀÀ 

sampleRate
ÀÀ  *
,
ÀÀ* +
freq
ÀÀ, 0
,
ÀÀ0 1
gain
ÀÀ2 6
)
ÀÀ6 7
{
ÁÁ 	
}
ÂÂ 	
public
ÇÇ 
override
ÇÇ 
IEnumerator
ÇÇ #
<
ÇÇ# $
ISample
ÇÇ$ +
>
ÇÇ+ ,
Samples
ÇÇ- 4
{
ÈÈ 	
get
ÉÉ 
{
ÊÊ 
ushort
ËË 
nc
ËË 
=
ËË 
NumChannels
ËË '
;
ËË' (
uint
ÌÌ 
sr
ÌÌ 
=
ÌÌ 

SampleRate
ÌÌ $
;
ÌÌ$ %
double
ÍÍ 
mul
ÍÍ 
=
ÍÍ 
$num
ÍÍ 
*
ÍÍ  
_freq
ÍÍ! &
/
ÍÍ' (
sr
ÍÍ) +
;
ÍÍ+ ,
int
ÎÎ 
n
ÎÎ 
=
ÎÎ 
$num
ÎÎ 
;
ÎÎ 
Sample
ÏÏ 
s
ÏÏ 
=
ÏÏ 
new
ÏÏ 
Sample
ÏÏ %
(
ÏÏ% &
nc
ÏÏ& (
)
ÏÏ( )
;
ÏÏ) *
while
ÐÐ 
(
ÐÐ 
true
ÐÐ 
)
ÐÐ 
{
ÑÑ 
double
ÒÒ 
saw
ÒÒ 
=
ÒÒ  
(
ÒÒ! "
(
ÒÒ" #
n
ÒÒ# $
*
ÒÒ% &
mul
ÒÒ' *
)
ÒÒ* +
%
ÒÒ, -
$num
ÒÒ. /
)
ÒÒ/ 0
-
ÒÒ1 2
$num
ÒÒ3 4
;
ÒÒ4 5
double
ÓÓ 
v
ÓÓ 
=
ÓÓ 
_gain
ÓÓ $
*
ÓÓ% &
saw
ÓÓ' *
;
ÓÓ* +
for
ÔÔ 
(
ÔÔ 
int
ÔÔ 
c
ÔÔ 
=
ÔÔ  
$num
ÔÔ! "
;
ÔÔ" #
c
ÔÔ$ %
<
ÔÔ& '
nc
ÔÔ( *
;
ÔÔ* +
c
ÔÔ, -
++
ÔÔ- /
)
ÔÔ/ 0
{
ÕÕ 
s
ÖÖ 
[
ÖÖ 
c
ÖÖ 
]
ÖÖ 
=
ÖÖ 
v
ÖÖ  
;
ÖÖ  !
}
×× 
n
ØØ 
++
ØØ 
;
ØØ 
yield
ÙÙ 
return
ÙÙ  
s
ÙÙ! "
;
ÙÙ" #
}
ÚÚ 
}
ÛÛ 
}
ÜÜ 	
}
ÝÝ 
public
ßß 

class
ßß *
BandLimitedSawtoothGenerator
ßß -
:
ßß. /
HarmonicGenerator
ßß0 A
{
àà 
public
áá *
BandLimitedSawtoothGenerator
áá +
(
áá+ ,
ushort
áá, 2
numChannels
áá3 >
,
áá> ?
uint
áá@ D

sampleRate
ááE O
,
ááO P
double
ááQ W
freq
ááX \
,
áá\ ]
double
áá^ d
gain
ááe i
)
áái j
:
ââ 
base
ââ 
(
ââ 
numChannels
ââ 
,
ââ 

sampleRate
ââ  *
,
ââ* +
freq
ââ, 0
,
ââ0 1
gain
ââ2 6
)
ââ6 7
{
ãã 	
}
ää 	
public
ææ 
override
ææ 
List
ææ 
<
ææ 
Harmonic
ææ %
>
ææ% &
	Harmonics
ææ' 0
{
çç 	
get
èè 
{
éé 
List
êê 
<
êê 
Harmonic
êê 
>
êê 
	harmonics
êê (
=
êê) *
new
êê+ .
List
êê/ 3
<
êê3 4
Harmonic
êê4 <
>
êê< =
(
êê= >
)
êê> ?
;
êê? @
uint
ëë 
sr
ëë 
=
ëë 

SampleRate
ëë $
;
ëë$ %
int
ìì 
nH
ìì 
=
ìì 
$num
ìì 
;
ìì 
double
íí 
g
íí 
=
íí 
_gain
íí  
*
íí! "
$num
íí# $
/
íí% &
Math
íí' +
.
íí+ ,
PI
íí, .
;
íí. /
	harmonics
îî 
.
îî 
Add
îî 
(
îî 
new
îî !
Harmonic
îî" *
(
îî* +
$num
îî+ ,
,
îî, -
$num
îî- .
)
îî. /
)
îî/ 0
;
îî0 1
while
ïï 
(
ïï 
true
ïï 
)
ïï 
{
ðð 
double
ññ 
fN
ññ 
=
ññ 
_freq
ññ  %
*
ññ& '
(
ññ( )
nH
ññ) +
+
ññ, -
$num
ññ. /
)
ññ/ 0
;
ññ0 1
if
òò 
(
òò 
fN
òò 
>
òò 
sr
òò 
/
òò  !
$num
òò" #
)
òò# $
{
óó 
break
õõ 
;
õõ 
}
öö 
Harmonic
÷÷ 
h
÷÷ 
=
÷÷  
new
÷÷! $
Harmonic
÷÷% -
(
÷÷- .
g
÷÷. /
/
÷÷0 1
nH
÷÷2 4
,
÷÷4 5
Math
÷÷6 :
.
÷÷: ;
PI
÷÷; =
)
÷÷= >
;
÷÷> ?
	harmonics
øø 
.
øø 
Add
øø !
(
øø! "
h
øø" #
)
øø# $
;
øø$ %
nH
ùù 
++
ùù 
;
ùù 
}
úú 
return
ûû 
	harmonics
ûû  
;
ûû  !
}
üü 
}
ýý 	
}
þþ 
} ¦
/E:\GitHub\inguz-DSPUtil\InguzDSPUtilNew\Sinc.cs
	namespace 	
DSPUtil
 
{ 
public		 

class		 
Sinc		 
:		 
SoundObj		  
{

 
int 
_size 
; 
double 
_fc 
; 
public 
Sinc 
( 
int 
size 
, 
double $
fC_Fraction% 0
)0 1
{ 	
_size 
= 
size 
; 
_fc 
= 
fC_Fraction 
; 
} 	
public 
override 
IEnumerator #
<# $
ISample$ +
>+ ,
Samples- 4
{ 	
get 
{ 
ushort 
nc 
= 
NumChannels '
;' (
int 
m2 
= 
_size 
/ 
$num  
;  !
double 
k 
= 
$num 
/ 
(  
$num  !
*" #
Math$ (
.( )
PI) +
*, -
_fc. 1
)1 2
;2 3
for 
( 
int 
i 
= 
$num 
; 
i  !
<" #
_size$ )
;) *
i+ ,
++, .
). /
{ 
int 
n 
= 
i 
- 
m2  "
;" #
double 
val 
; 
if 
( 
n 
== 
$num 
) 
{   
val!! 
=!! 
$num!! 
;!!  
}"" 
else## 
{$$ 
val%% 
=%% 
Math%% "
.%%" #
Sin%%# &
(%%& '
$num%%' (
*%%) *
Math%%+ /
.%%/ 0
PI%%0 2
*%%3 4
_fc%%5 8
*%%9 :
n%%; <
)%%< =
*%%> ?
k%%@ A
/%%B C
n%%D E
;%%E F
}&& 
ISample'' 
s'' 
='' 
(''  !
nc''! #
==''$ &
$num''' (
)''( )
?''* +
new'', /
Sample2''0 7
(''7 8
)''8 9
:'': ;
new''< ?
Sample''@ F
(''F G
nc''G I
)''I J
as''K M
ISample''N U
;''U V
for(( 
((( 
int(( 
c(( 
=((  
$num((! "
;((" #
c(($ %
<((& '
nc((( *
;((* +
c((, -
++((- /
)((/ 0
{)) 
s** 
[** 
c** 
]** 
=** 
val** "
;**" #
}++ 
yield,, 
return,,  
s,,! "
;,," #
}-- 
}.. 
}// 	
}00 
}11 *
1E:\GitHub\inguz-DSPUtil\InguzDSPUtilNew\Skewer.cs
	namespace 	
DSPUtil
 
{ 
public		 

class		 
Skewer		 
:		 
SoundObj		 "
{

 
private 
int 
_skew 
; 
private 
int 
_s 
; 
private 
double 
[ 
] 
_data 
; 
private 
bool 
_tail 
; 
public 
Skewer 
( 
bool 

returnTail %
)% &
{ 	
Skew 
= 
$num 
; 
_tail 
= 

returnTail 
; 
} 	
public 
override 
void 
Reset "
(" #
)# $
{ 	
Skew 
= 
_skew 
; 
base 
. 
Reset 
( 
) 
; 
} 	
public## 
override## 
IEnumerator## #
<### $
ISample##$ +
>##+ ,
Samples##- 4
{$$ 	
get%% 
{&& 
if'' 
('' 
_input'' 
=='' 
null'' "
)''" #
{(( 
yield)) 
break)) 
;))  
}** 
int33 
n33 
=33 
$num33 
;33 
foreach44 
(44 
ISample44  
sample44! '
in44( *
Input44+ 0
)440 1
{55 
yield66 
return66  
_nxt66! %
(66% &
ref66& )
n66* +
,66+ ,
sample66- 3
)663 4
;664 5
}77 
if88 
(88 
_tail88 
)88 
{99 
for:: 
(:: 
int:: 
j:: 
=::  
$num::! "
;::" #
j::$ %
<::& '
_s::( *
;::* +
j::, -
++::- /
)::/ 0
{;; 
yield<< 
return<< $
_nxt<<% )
(<<) *
ref<<* -
n<<. /
,<</ 0
new<<1 4
Sample<<5 ;
(<<; <
_nc<<< ?
)<<? @
)<<@ A
;<<A B
}== 
}>> 
}?? 
}@@ 	
ISampleBB 
_nxtBB 
(BB 
refBB 
intBB 
nBB 
,BB 
ISampleBB  '
sBB( )
)BB) *
{CC 	
ifDD 
(DD 
_sDD 
==DD 
$numDD 
||DD 
sDD 
.DD 
NumChannelsDD (
!=DD) +
$numDD, -
)DD- .
{EE 
returnFF 
sFF 
;FF 
}GG 
elseHH 
{II 
doubleJJ 
LJJ 
=JJ 
sJJ 
[JJ 
$numJJ 
]JJ 
;JJ  
doubleKK 
RKK 
=KK 
sKK 
[KK 
$numKK 
]KK 
;KK  
ifLL 
(LL 
_skewLL 
<LL 
$numLL 
)LL 
{MM 
_dataNN 
[NN 
nNN 
%NN 
_sNN  
]NN  !
=NN" #
LNN$ %
;NN% &
nOO 
=OO 
(OO 
nOO 
+OO 
$numOO 
)OO 
%OO  !
_sOO" $
;OO$ %
LPP 
=PP 
_dataPP 
[PP 
nPP 
]PP  
;PP  !
}QQ 
elseRR 
{SS 
_dataTT 
[TT 
nTT 
%TT 
_sTT  
]TT  !
=TT" #
RTT$ %
;TT% &
nUU 
=UU 
(UU 
nUU 
+UU 
$numUU 
)UU 
%UU  !
_sUU" $
;UU$ %
RVV 
=VV 
_dataVV 
[VV 
nVV 
]VV  
;VV  !
}WW 
sXX 
[XX 
$numXX 
]XX 
=XX 
LXX 
;XX 
sYY 
[YY 
$numYY 
]YY 
=YY 
RYY 
;YY 
returnZZ 
sZZ 
;ZZ 
}[[ 
}\\ 	
publicbb 
intbb 
Skewbb 
{cc 	
getdd 
{dd 
returndd 
_skewdd 
;dd 
}dd  !
setee 
{ff 
_skewgg 
=gg 
valuegg 
;gg 
_shh 
=hh 
Mathhh 
.hh 
Abshh 
(hh 
valuehh #
)hh# $
+hh% &
$numhh' (
;hh( )
ifii 
(ii 
_dataii 
==ii 
nullii 
||ii  "
_dataii# (
.ii( )
Lengthii) /
<ii0 1
_sii2 4
)ii4 5
{jj 
_datall 
=ll 
newll 
doublell  &
[ll& '
_sll' )
]ll) *
;ll* +
}mm 
}nn 
}oo 	
}pp 
}qq 
2E:\GitHub\inguz-DSPUtil\InguzDSPUtilNew\SlimCLI.cs
	namespace 	
DSPUtil
 
{ 
public 

class 
SlimCLI 
{ 
private 
const 
ushort 
DEFAULT_PORT )
=* +
$num, 0
;0 1
private 
Socket 
_socket 
; 
private 
byte 
[ 
] 
_receiveBuffer %
;% &
public 
SlimCLI 
( 
) 
{ 	
} 	
~ 	
SlimCLI	 
( 
) 
{ 	
Close 
( 
) 
; 
} 	
internal 
bool 
IsOpen 
( 
) 
{ 	
return   
(   
_socket   
!=   
null   #
)  # $
;  $ %
}!! 	
internal,, 
string,, 
[,, 
],, 
SendCommand,, %
(,,% &
string,,& ,
player,,- 3
,,,3 4
params,,5 ;
string,,< B
[,,B C
],,C D

parameters,,E O
),,O P
{-- 	
lock.. 
(.. 
this.. 
).. 
{// 
if00 
(00 
!00 
IsOpen00 
(00 
)00 
)00 
{11 
throw22 
new22 %
InvalidOperationException22 7
(227 8
$str228 \
)22\ ]
;22] ^
}33 
StringBuilder77 
sb77  
=77! "
new77# &
StringBuilder77' 4
(774 5
)775 6
;776 7
sb88 
.88 
Append88 
(88 
player88  
)88  !
;88! "
sb99 
.99 
Append99 
(99 
$str99 
)99 
;99 
for:: 
(:: 
int:: 
i:: 
=:: 
$num:: 
;:: 
i::  !
<::" #

parameters::$ .
.::. /
Length::/ 5
;::5 6
i::7 8
++::8 :
)::: ;
{;; 
string<< 
s<< 
=<< 

parameters<< )
[<<) *
i<<* +
]<<+ ,
;<<, -
s== 
=== 
HttpUtility== #
.==# $
	UrlEncode==$ -
(==- .
s==. /
)==/ 0
;==0 1
s>> 
=>> 
s>> 
.>> 
Replace>> !
(>>! "
$str>>" %
,>>% &
$str>>' ,
)>>, -
;>>- .
sb?? 
.?? 
Append?? 
(?? 
s?? 
)??  
;??  !
sbBB 
.BB 
AppendBB 
(BB 
(BB 
iBB  
==BB! #
(BB$ %

parametersBB% /
.BB/ 0
LengthBB0 6
-BB7 8
$numBB9 :
)BB: ;
)BB; <
?BB= >
$strBB? E
:BBF G
$strBBH K
)BBK L
;BBL M
}CC 
byteEE 
[EE 
]EE 
commandBytesEE #
=EE$ %
EncodingEE& .
.EE. /
ASCIIEE/ 4
.EE4 5
GetBytesEE5 =
(EE= >
sbEE> @
.EE@ A
ToStringEEA I
(EEI J
)EEJ K
)EEK L
;EEL M
_socketFF 
.FF 
SendFF 
(FF 
commandBytesFF )
)FF) *
;FF* +
stringII 
responseII 
=II  !
nullII" &
;II& '
intJJ 
iReceiveBufferJJ "
=JJ# $
$numJJ% &
;JJ& '
whileKK 
(KK 
responseKK 
==KK  "
nullKK# '
)KK' (
{LL 
intNN 
	cNewBytesNN !
=NN" #
_socketNN$ +
.NN+ ,
ReceiveNN, 3
(NN3 4
_receiveBufferOO &
,OO& '
iReceiveBufferPP &
,PP& '
_receiveBufferQQ &
.QQ& '
LengthQQ' -
-QQ. /
iReceiveBufferQQ0 >
,QQ> ?
SocketFlagsRR #
.RR# $
NoneRR$ (
)RR( )
;RR) *
intXX 

chompBytesXX "
=XX# $
$numXX% &
;XX& '
byteZZ 
[ZZ 
]ZZ 
	lastBytesZZ $
=ZZ% &
newZZ' *
byteZZ+ /
[ZZ/ 0
$numZZ0 1
]ZZ1 2
{[[ 
_receiveBuffer\\ 
[\\ 
iReceiveBuffer\\ "
+\\# $
	cNewBytes\\% .
-\\/ 0
$num\\1 2
]\\2 3
,\\3 4
_receiveBuffer]] 
[]] 
iReceiveBuffer]] "
+]]# $
	cNewBytes]]% .
-]]/ 0
$num]]1 2
]]]2 3
}^^ 
;^^ 
if`` 
(`` 
	lastBytes`` !
[``! "
$num``" #
]``# $
==``% '
$char``( ,
&&``- /
	lastBytes``0 9
[``9 :
$num``: ;
]``; <
==``= ?
$char``@ D
)``D E
{aa 

chompBytesbb "
=bb# $
$numbb% &
;bb& '
}cc 
elsedd 
ifdd 
(dd 
	lastBytesdd &
[dd& '
$numdd' (
]dd( )
==dd* ,
$chardd- 1
||dd2 4
	lastBytesdd5 >
[dd> ?
$numdd? @
]dd@ A
==ddB D
$charddE I
)ddI J
{ee 

chompBytesff "
=ff# $
$numff% &
;ff& '
}gg 
ifii 
(ii 

chompBytesii "
==ii# %
$numii& '
)ii' (
{jj 
iReceiveBufferll &
+=ll' )
	cNewBytesll* 3
;ll3 4
ifmm 
(mm 
iReceiveBuffermm *
>=mm+ -
_receiveBuffermm. <
.mm< =
Lengthmm= C
-mmD E
$nummmF G
)mmG H
{nn 
throwoo !
newoo" %
	Exceptionoo& /
(oo/ 0
$stroo0 B
)ooB C
;ooC D
}pp 
}qq 
elserr 
{ss 
responseww  
=ww! "
Encodingww# +
.ww+ ,
ASCIIww, 1
.ww1 2
	GetStringww2 ;
(ww; <
_receiveBufferxx *
,xx* +
$numyy 
,yy 
iReceiveBufferzz *
+zz+ ,
	cNewByteszz- 6
-zz7 8

chompByteszz9 C
)zzC D
;zzD E
}{{ 
}|| 
string
 
[
 
]
 
responseParams
 '
=
( )
response
* 2
.
2 3
Split
3 8
(
8 9
new
9 <
char
= A
[
A B
]
B C
{
D E
$char
F I
}
J K
)
K L
;
L M
for
 
(
 
int
 
i
 
=
 
$num
 
;
 
i
  !
<
" #
responseParams
$ 2
.
2 3
Length
3 9
;
9 :
i
; <
++
< >
)
> ?
{
 
responseParams
 "
[
" #
i
# $
]
$ %
=
& '
HttpUtility
( 3
.
3 4
	UrlDecode
4 =
(
= >
responseParams
> L
[
L M
i
M N
]
N O
)
O P
;
P Q
}
 
return
 
responseParams
 %
;
% &
}
 
}
 	
internal
 
IEnumerable
 
<
 
string
 #
[
# $
]
$ %
>
% &
ChunkedCommand
' 5
(
5 6
string
6 <
command
= D
)
D E
{
 	
yield
 
break
 
;
 
}
 	
public
 
void
 
Open
 
(
 
)
 
{
 	
Open
 
(
 
$str
 
,
 
DEFAULT_PORT
 *
,
* +
null
, 0
,
0 1
null
2 6
)
6 7
;
7 8
}
 	
public
 
void
 
Open
 
(
 
string
 
hostname
  (
)
( )
{
   	
Open
¡¡ 
(
¡¡ 
hostname
¡¡ 
,
¡¡ 
DEFAULT_PORT
¡¡ '
,
¡¡' (
null
¡¡) -
,
¡¡- .
null
¡¡/ 3
)
¡¡3 4
;
¡¡4 5
}
¢¢ 	
public
©© 
void
©© 
Open
©© 
(
©© 
string
©© 
hostname
©©  (
,
©©( )
ushort
©©* 0
port
©©1 5
)
©©5 6
{
ªª 	
Open
«« 
(
«« 
hostname
«« 
,
«« 
port
«« 
,
««  
null
««! %
,
««% &
null
««' +
)
««+ ,
;
««, -
}
¬¬ 	
public
­­ 
void
­­ 
Open
­­ 
(
­­ 
string
­­ 
hostname
­­  (
,
­­( )
ushort
­­* 0
port
­­1 5
,
­­5 6
string
­­7 =
username
­­> F
,
­­F G
string
­­H N
password
­­O W
)
­­W X
{
®® 	
IPHostEntry
¯¯ 
hostInfo
¯¯  
=
¯¯! "
Dns
¯¯# &
.
¯¯& '
GetHostEntry
¯¯' 3
(
¯¯3 4
hostname
¯¯4 <
)
¯¯< =
;
¯¯= >
	IPAddress
°° 
[
°° 
]
°° 
ipAddresses
°° #
=
°°$ %
hostInfo
°°& .
.
°°. /
AddressList
°°/ :
;
°°: ;
if
³³ 
(
³³ 
port
³³ 
==
³³ 
$num
³³ 
)
³³ 
port
³³ 
=
³³  !
DEFAULT_PORT
³³" .
;
³³. /
for
¶¶ 
(
¶¶ 
int
¶¶ 
i
¶¶ 
=
¶¶ 
$num
¶¶ 
;
¶¶ 
i
¶¶ 
<
¶¶ 
ipAddresses
¶¶  +
.
¶¶+ ,
Length
¶¶, 2
&&
¶¶3 5
_socket
¶¶6 =
==
¶¶> @
null
¶¶A E
;
¶¶E F
i
¶¶G H
++
¶¶H J
)
¶¶J K
{
·· 

IPEndPoint
¸¸ 
endPoint
¸¸ #
=
¸¸$ %
new
¹¹ 

IPEndPoint
¹¹ "
(
¹¹" #
ipAddresses
¹¹# .
[
¹¹. /
i
¹¹/ 0
]
¹¹0 1
,
¹¹1 2
port
¹¹3 7
)
¹¹7 8
;
¹¹8 9
_socket
ºº 
=
ºº 
new
ºº 
Socket
ºº $
(
ºº$ %
AddressFamily
»» !
.
»»! "
InterNetwork
»»" .
,
»». /

SocketType
¼¼ 
.
¼¼ 
Stream
¼¼ %
,
¼¼% &
ProtocolType
½½  
.
½½  !
Tcp
½½! $
)
½½$ %
;
½½% &
_socket
¾¾ 
.
¾¾ 
Connect
¾¾ 
(
¾¾  
endPoint
¾¾  (
)
¾¾( )
;
¾¾) *
if
¿¿ 
(
¿¿ 
!
¿¿ 
_socket
¿¿ 
.
¿¿ 
	Connected
¿¿ &
)
¿¿& '
{
ÀÀ 
_socket
ÁÁ 
=
ÁÁ 
null
ÁÁ "
;
ÁÁ" #
}
ÂÂ 
}
ÃÃ 
if
ÄÄ 
(
ÄÄ 
_socket
ÄÄ 
==
ÄÄ 
null
ÄÄ 
)
ÄÄ  
{
ÅÅ 
throw
ÆÆ 
new
ÆÆ 
	Exception
ÆÆ #
(
ÆÆ# $
$str
ÆÆ$ J
)
ÆÆJ K
;
ÆÆK L
}
ÇÇ 
_receiveBuffer
ÈÈ 
=
ÈÈ 
new
ÈÈ  
byte
ÈÈ! %
[
ÈÈ% &
$num
ÈÈ& *
*
ÈÈ+ ,
$num
ÈÈ- .
]
ÈÈ. /
;
ÈÈ/ 0
if
ÊÊ 
(
ÊÊ 
username
ÊÊ 
!=
ÊÊ 
null
ÊÊ  
)
ÊÊ  !
{
ËË 
SendCommand
ÌÌ 
(
ÌÌ 
$str
ÌÌ #
,
ÌÌ# $
username
ÌÌ% -
,
ÌÌ- .
password
ÌÌ/ 7
)
ÌÌ7 8
;
ÌÌ8 9
}
ÎÎ 
}
ÏÏ 	
public
ÔÔ 
void
ÔÔ 
Close
ÔÔ 
(
ÔÔ 
)
ÔÔ 
{
ÕÕ 	
if
ÖÖ 
(
ÖÖ 
_socket
ÖÖ 
!=
ÖÖ 
null
ÖÖ 
)
ÖÖ  
{
×× 
_socket
ØØ 
.
ØØ 
Close
ØØ 
(
ØØ 
)
ØØ 
;
ØØ  
}
ÙÙ 
_socket
ÚÚ 
=
ÚÚ 
null
ÚÚ 
;
ÚÚ 
_receiveBuffer
ÛÛ 
=
ÛÛ 
null
ÛÛ !
;
ÛÛ! "
}
ÜÜ 	
public
åå 
int
åå 
PlayerCount
åå 
(
åå 
)
åå  
{
ææ 	
string
çç 
[
çç 
]
çç 
response
çç 
=
çç 
SendCommand
çç  +
(
çç+ ,
$str
çç, 4
,
çç4 5
$str
çç6 =
,
çç= >
$str
çç? B
)
ççB C
;
ççC D
return
èè 
new
èè 
Value
èè 
(
èè 
response
èè %
[
èè% &
$num
èè& '
]
èè' (
)
èè( )
.
èè) *
IntValue
èè* 2
;
èè2 3
}
éé 	
public
îî 
IEnumerable
îî 
<
îî 

SlimPlayer
îî %
>
îî% &
Players
îî' .
{
ïï 	
get
ðð 
{
ññ 
List
óó 
<
óó 

Dictionary
óó 
<
óó  
string
óó  &
,
óó& '
string
óó( .
>
óó. /
>
óó/ 0
	responses
óó1 :
=
óó; <
new
óó= @
List
óóA E
<
óóE F

Dictionary
óóF P
<
óóP Q
string
óóQ W
,
óóW X
string
óóY _
>
óó_ `
>
óó` a
(
óóa b
)
óób c
;
óóc d
int
ôô 
start
ôô 
=
ôô 
$num
ôô 
;
ôô 
int
õõ 
chunk
õõ 
=
õõ 
$num
õõ 
;
õõ 
int
öö 
total
öö 
=
öö 
$num
öö 
;
öö 
while
÷÷ 
(
÷÷ 
total
÷÷ 
>
÷÷ 
start
÷÷ $
)
÷÷$ %
{
øø 
string
ùù 
[
ùù 
]
ùù 
resp
ùù !
=
ùù" #
SendCommand
ùù$ /
(
ùù/ 0
$str
ùù0 9
,
ùù9 :
start
ùù; @
.
ùù@ A
ToString
ùùA I
(
ùùI J
)
ùùJ K
,
ùùK L
chunk
ùùM R
.
ùùR S
ToString
ùùS [
(
ùù[ \
)
ùù\ ]
)
ùù] ^
;
ùù^ _
Value
úú 
count
úú 
=
úú  !
new
úú" %
Value
úú& +
(
úú+ ,
resp
úú, 0
[
úú0 1
$num
úú1 2
]
úú2 3
)
úú3 4
;
úú4 5
if
ûû 
(
ûû 
count
ûû 
.
ûû 
Tag
ûû !
!=
ûû" $
$str
ûû% ,
)
ûû, -
{
üü 
throw
ýý 
new
ýý !
	Exception
ýý" +
(
ýý+ ,
$str
ýý, 6
)
ýý6 7
;
ýý7 8
}
þþ 
total
ÿÿ 
=
ÿÿ 
count
ÿÿ !
.
ÿÿ! "
IntValue
ÿÿ" *
;
ÿÿ* +

Dictionary
 
<
 
string
 %
,
% &
string
' -
>
- .

attributes
/ 9
=
: ;
new
< ?

Dictionary
@ J
<
J K
string
K Q
,
Q R
string
S Y
>
Y Z
(
Z [
)
[ \
;
\ ]
for
 
(
 
int
 
j
 
=
  
$num
! "
;
" #
j
$ %
<
& '
resp
( ,
.
, -
Length
- 3
;
3 4
j
5 6
++
6 8
)
8 9
{
 
Value
 
val
 !
=
" #
new
$ '
Value
( -
(
- .
resp
. 2
[
2 3
j
3 4
]
4 5
)
5 6
;
6 7
if
 
(
 
val
 
.
  
Tag
  #
==
$ &
$str
' 4
&&
5 7
(
8 9

attributes
9 C
.
C D
Count
D I
>
J K
$num
L M
)
M N
)
N O
{
 
yield
 !
return
" (
new
) ,

SlimPlayer
- 7
(
7 8
this
8 <
,
< =

attributes
> H
)
H I
;
I J

attributes
 &
=
' (
new
) ,

Dictionary
- 7
<
7 8
string
8 >
,
> ?
string
@ F
>
F G
(
G H
)
H I
;
I J
}
 

attributes
 "
.
" #
Add
# &
(
& '
val
' *
.
* +
Tag
+ .
,
. /
val
0 3
.
3 4
StringValue
4 ?
)
? @
;
@ A
}
 
if
 
(
 

attributes
 "
.
" #
Count
# (
>
) *
$num
+ ,
)
, -
{
 
yield
 
return
 $
new
% (

SlimPlayer
) 3
(
3 4
this
4 8
,
8 9

attributes
: D
)
D E
;
E F
}
 
start
 
+=
 
chunk
 "
;
" #
}
 
yield
 
break
 
;
 
}
 
}
 	
public
 

SlimPlayer
 

OpenPlayer
 $
(
$ %
string
% +
playerID
, 4
)
4 5
{
 	
foreach
 
(
 

SlimPlayer
 
player
  &
in
' )
Players
* 1
)
1 2
{
 
if
   
(
   
player
   
.
   
PlayerID
   #
==
  $ &
playerID
  ' /
)
  / 0
{
¡¡ 
return
¢¢ 
player
¢¢ !
;
¢¢! "
}
££ 
}
¤¤ 
return
¥¥ 
null
¥¥ 
;
¥¥ 
}
¦¦ 	
}
©© 
}«« Òz
5E:\GitHub\inguz-DSPUtil\InguzDSPUtilNew\SlimPlayer.cs
	namespace 	
DSPUtil
 
{ 
public 

class 

SlimPlayer 
{ 
private 
SlimCLI 
_server 
;  
private 

Dictionary 
< 
string !
,! "
string# )
>) *
_attributes+ 6
;6 7
public 

SlimPlayer 
( 
SlimCLI !
server" (
,( )
string* 0
playerID1 9
)9 :
{ 	
_server 
= 
server 
; 
_attributes 
= 
new 

Dictionary (
<( )
string) /
,/ 0
string1 7
>7 8
(8 9
)9 :
;: ;
_attributes 
[ 
$str "
]" #
=$ %
playerID& .
;. /
} 	
public 

SlimPlayer 
( 
SlimCLI !
server" (
,( )

Dictionary* 4
<4 5
string5 ;
,; <
string= C
>C D

attributesE O
)O P
{ 	
_server 
= 
server 
; 
_attributes 
= 

attributes $
;$ %
} 	
public 
override 
string 
ToString '
(' (
)( )
{ 	
if 
( 
_attributes 
. 
ContainsKey '
(' (
$str( .
). /
)/ 0
{   
return!! 
_attributes!! "
[!!" #
$str!!# )
]!!) *
;!!* +
}"" 
return## 
base## 
.## 
ToString##  
(##  !
)##! "
;##" #
}$$ 	
public&& 
IEnumerable&& 
<&& 
string&& !
>&&! "

Attributes&&# -
{'' 	
get(( 
{)) 
foreach** 
(** 
string** 
key**  #
in**$ &
_attributes**' 2
.**2 3
Keys**3 7
)**7 8
{++ 
yield,, 
return,,  
key,,! $
;,,$ %
}-- 
}.. 
}// 	
public00 
string00 
	Attribute00 
(00  
string00  &
name00' +
)00+ ,
{11 	
return22 
_attributes22 
[22 
name22 #
]22# $
;22$ %
}33 	
public55 
string55 
PlayerID55 
{66 	
get77 
{88 
return99 
_attributes99 "
[99" #
$str99# -
]99- .
;99. /
}:: 
};; 	
public== 
bool== 
Power== 
{>> 	
get?? 
{@@ 
stringDD 
[DD 
]DD 
responseDD !
=DD" #
_serverDD$ +
.DD+ ,
SendCommandDD, 7
(DD7 8
PlayerIDDD8 @
,DD@ A
$strDDB I
,DDI J
$strDDK N
)DDN O
;DDO P
returnEE 
newEE 
ValueEE  
(EE  !
responseEE! )
[EE) *
$numEE* +
]EE+ ,
)EE, -
.EE- .
	BoolValueEE. 7
;EE7 8
}FF 
setGG 
{HH 
_serverII 
.II 
SendCommandII #
(II# $
PlayerIDII$ ,
,II, -
$strII. 5
,II5 6
valueII7 <
?II= >
$strII? B
:IIC D
$strIIE H
)IIH I
;III J
}JJ 
}KK 	
publicMM 
intMM 
SignalStrengthMM !
{NN 	
getOO 
{PP 
stringQQ 
[QQ 
]QQ 
responseQQ !
=QQ" #
_serverQQ$ +
.QQ+ ,
SendCommandQQ, 7
(QQ7 8
PlayerIDQQ8 @
,QQ@ A
$strQQB R
,QQR S
$strQQT W
)QQW X
;QQX Y
returnRR 
newRR 
ValueRR  
(RR  !
responseRR! )
[RR) *
$numRR* +
]RR+ ,
)RR, -
.RR- .
IntValueRR. 6
;RR6 7
}SS 
}TT 	
publicVV 
boolVV 
	ConnectedVV 
{WW 	
getXX 
{YY 
stringZZ 
[ZZ 
]ZZ 
responseZZ !
=ZZ" #
_serverZZ$ +
.ZZ+ ,
SendCommandZZ, 7
(ZZ7 8
PlayerIDZZ8 @
,ZZ@ A
$strZZB M
,ZZM N
$strZZO R
)ZZR S
;ZZS T
return[[ 
new[[ 
Value[[  
([[  !
response[[! )
[[[) *
$num[[* +
][[+ ,
)[[, -
.[[- .
	BoolValue[[. 7
;[[7 8
}\\ 
}]] 	
public__ 
int__ 
LinesPerScreen__ !
{`` 	
getaa 
{bb 
stringcc 
[cc 
]cc 
responsecc !
=cc" #
_servercc$ +
.cc+ ,
SendCommandcc, 7
(cc7 8
PlayerIDcc8 @
,cc@ A
$strccB R
,ccR S
$strccT W
)ccW X
;ccX Y
returndd 
newdd 
Valuedd  
(dd  !
responsedd! )
[dd) *
$numdd* +
]dd+ ,
)dd, -
.dd- .
IntValuedd. 6
;dd6 7
}ee 
}ff 	
publickk 
floatkk 
Volumekk 
{ll 	
getmm 
{nn 
stringoo 
[oo 
]oo 
responseoo !
=oo" #
_serveroo$ +
.oo+ ,
SendCommandoo, 7
(oo7 8
PlayerIDoo8 @
,oo@ A
$strooB P
,ooP Q
$strooR U
)ooU V
;ooV W
returnpp 
newpp 
Valuepp  
(pp  !
responsepp! )
[pp) *
$numpp* +
]pp+ ,
)pp, -
.pp- .

FloatValuepp. 8
;pp8 9
}qq 
setrr 
{ss 
_servertt 
.tt 
SendCommandtt #
(tt# $
PlayerIDtt$ ,
,tt, -
$strtt. <
,tt< =
valuett> C
.ttC D
ToStringttD L
(ttL M
)ttM N
)ttN O
;ttO P
}uu 
}vv 	
publicxx 
intxx 
Ratexx 
{yy 	
getzz 
{{{ 
string|| 
[|| 
]|| 
response|| !
=||" #
_server||$ +
.||+ ,
SendCommand||, 7
(||7 8
PlayerID||8 @
,||@ A
$str||B H
,||H I
$str||J M
)||M N
;||N O
return}} 
new}} 
Value}}  
(}}  !
response}}! )
[}}) *
$num}}* +
]}}+ ,
)}}, -
.}}- .
IntValue}}. 6
;}}6 7
}~~ 
set 
{
 
_server
 
.
 
SendCommand
 #
(
# $
PlayerID
$ ,
,
, -
$str
. 4
,
4 5
value
6 ;
.
; <
ToString
< D
(
D E
)
E F
)
F G
;
G H
}
 
}
 	
public
 
int
 
Sleep
 
{
 	
get
 
{
 
string
 
[
 
]
 
response
 !
=
" #
_server
$ +
.
+ ,
SendCommand
, 7
(
7 8
PlayerID
8 @
,
@ A
$str
B I
,
I J
$str
K N
)
N O
;
O P
return
 
new
 
Value
  
(
  !
response
! )
[
) *
$num
* +
]
+ ,
)
, -
.
- .
IntValue
. 6
;
6 7
}
 
set
 
{
 
_server
 
.
 
SendCommand
 #
(
# $
PlayerID
$ ,
,
, -
$str
. 5
,
5 6
value
7 <
.
< =
ToString
= E
(
E F
)
F G
)
G H
;
H I
}
 
}
 	
public
 
string
 
[
 
]
 
Lines
 
{
 	
get
 
{
 
string
 
[
 
]
 
response
 !
=
" #
_server
$ +
.
+ ,
SendCommand
, 7
(
7 8
PlayerID
8 @
,
@ A
$str
B K
,
K L
$str
M P
,
P Q
$str
R U
)
U V
;
V W
string
 
[
 
]
 
lines
 
=
  
new
! $
string
% +
[
+ ,
$num
, -
]
- .
;
. /
lines
 
[
 
$num
 
]
 
=
 
response
 #
[
# $
$num
$ %
]
% &
;
& '
lines
 
[
 
$num
 
]
 
=
 
response
 #
[
# $
$num
$ %
]
% &
;
& '
return
 
lines
 
;
 
}
 
set
 
{
 
string
 
[
 
]
 
lines
 
=
  
new
! $
string
% +
[
+ ,
$num
, -
]
- .
;
. /
lines
   
[
   
$num
   
]
   
=
   
value
    
.
    !
Length
  ! '
>
  ( )
$num
  * +
?
  , -
value
  . 3
[
  3 4
$num
  4 5
]
  5 6
:
  7 8
$str
  9 ;
;
  ; <
lines
¡¡ 
[
¡¡ 
$num
¡¡ 
]
¡¡ 
=
¡¡ 
value
¡¡  
.
¡¡  !
Length
¡¡! '
>
¡¡( )
$num
¡¡* +
?
¡¡, -
value
¡¡. 3
[
¡¡3 4
$num
¡¡4 5
]
¡¡5 6
:
¡¡7 8
$str
¡¡9 ;
;
¡¡; <
lines
¢¢ 
[
¢¢ 
$num
¢¢ 
]
¢¢ 
=
¢¢ 
value
¢¢  
.
¢¢  !
Length
¢¢! '
>
¢¢( )
$num
¢¢* +
?
¢¢, -
value
¢¢. 3
[
¢¢3 4
$num
¢¢4 5
]
¢¢5 6
:
¢¢7 8
$str
¢¢9 ;
;
¢¢; <
_server
££ 
.
££ 
SendCommand
££ #
(
££# $
PlayerID
££$ ,
,
££, -
$str
££. 7
,
££7 8
lines
££9 >
[
££> ?
$num
££? @
]
££@ A
,
££A B
lines
££C H
[
££H I
$num
££I J
]
££J K
,
££K L
lines
££M R
[
££R S
$num
££S T
]
££T U
)
££U V
;
££V W
}
¤¤ 
}
¥¥ 	
public
«« 
void
«« 
ShowBriefly
«« 
(
««  
string
««  &
message
««' .
)
««. /
{
¬¬ 	
_server
­­ 
.
­­ 
SendCommand
­­ 
(
­­  
PlayerID
­­  (
,
­­( )
$str
­­* 3
,
­­3 4
$str
­­5 7
,
­­7 8
message
­­9 @
,
­­@ A
$str
­­B D
)
­­D E
;
­­E F
}
®® 	
public
´´ 
void
´´ 
Show
´´ 
(
´´ 
string
´´ 
header
´´  &
,
´´& '
string
´´( .
message
´´/ 6
,
´´6 7
int
´´8 ;
secs
´´< @
)
´´@ A
{
µµ 	
_server
¶¶ 
.
¶¶ 
SendCommand
¶¶ 
(
¶¶  
PlayerID
¶¶  (
,
¶¶( )
$str
¶¶* 3
,
¶¶3 4
header
¶¶5 ;
,
¶¶; <
message
¶¶= D
,
¶¶D E
secs
¶¶F J
.
¶¶J K
ToString
¶¶K S
(
¶¶S T
)
¶¶T U
)
¶¶U V
;
¶¶V W
}
·· 	
public
»» 
void
»» 
Button
»» 
(
»» 
string
»» !
button
»»" (
)
»»( )
{
¼¼ 	
_server
½½ 
.
½½ 
SendCommand
½½ 
(
½½  
PlayerID
½½  (
,
½½( )
$str
½½* 2
,
½½2 3
button
½½4 :
)
½½: ;
;
½½; <
}
¾¾ 	
public
ÂÂ 
string
ÂÂ 
Mode
ÂÂ 
{
ÃÃ 	
get
ÄÄ 
{
ÅÅ 
string
ÆÆ 
[
ÆÆ 
]
ÆÆ 
response
ÆÆ !
=
ÆÆ" #
_server
ÆÆ$ +
.
ÆÆ+ ,
SendCommand
ÆÆ, 7
(
ÆÆ7 8
PlayerID
ÆÆ8 @
,
ÆÆ@ A
$str
ÆÆB H
,
ÆÆH I
$str
ÆÆJ M
)
ÆÆM N
;
ÆÆN O
return
ÇÇ 
new
ÇÇ 
Value
ÇÇ  
(
ÇÇ  !
response
ÇÇ! )
[
ÇÇ) *
$num
ÇÇ* +
]
ÇÇ+ ,
)
ÇÇ, -
.
ÇÇ- .
StringValue
ÇÇ. 9
;
ÇÇ9 :
}
ÈÈ 
set
ÉÉ 
{
ÊÊ 
_server
ËË 
.
ËË 
SendCommand
ËË #
(
ËË# $
PlayerID
ËË$ ,
,
ËË, -
$str
ËË. 4
,
ËË4 5
value
ËË6 ;
)
ËË; <
;
ËË< =
}
ÌÌ 
}
ÍÍ 	
public
ÏÏ 
bool
ÏÏ 
Paused
ÏÏ 
{
ÐÐ 	
set
ÑÑ 
{
ÒÒ 
_server
ÓÓ 
.
ÓÓ 
SendCommand
ÓÓ #
(
ÓÓ# $
PlayerID
ÓÓ$ ,
,
ÓÓ, -
$str
ÓÓ. 5
,
ÓÓ5 6
value
ÓÓ7 <
?
ÓÓ= >
$str
ÓÓ? B
:
ÓÓC D
$str
ÓÓE H
)
ÓÓH I
;
ÓÓI J
}
ÔÔ 
}
ÕÕ 	
public
×× 
float
×× 
Time
×× 
{
ØØ 	
get
ÙÙ 
{
ÚÚ 
string
ÛÛ 
[
ÛÛ 
]
ÛÛ 
response
ÛÛ !
=
ÛÛ" #
_server
ÛÛ$ +
.
ÛÛ+ ,
SendCommand
ÛÛ, 7
(
ÛÛ7 8
PlayerID
ÛÛ8 @
,
ÛÛ@ A
$str
ÛÛB H
,
ÛÛH I
$str
ÛÛJ M
)
ÛÛM N
;
ÛÛN O
return
ÜÜ 
new
ÜÜ 
Value
ÜÜ  
(
ÜÜ  !
response
ÜÜ! )
[
ÜÜ) *
$num
ÜÜ* +
]
ÜÜ+ ,
)
ÜÜ, -
.
ÜÜ- .

FloatValue
ÜÜ. 8
;
ÜÜ8 9
}
ÝÝ 
set
ÞÞ 
{
ßß 
_server
àà 
.
àà 
SendCommand
àà #
(
àà# $
PlayerID
àà$ ,
,
àà, -
$str
àà. 4
,
àà4 5
value
àà6 ;
.
àà; <
ToString
àà< D
(
ààD E
)
ààE F
)
ààF G
;
ààG H
}
áá 
}
ââ 	
}
ãã 
}åå Ü±
3E:\GitHub\inguz-DSPUtil\InguzDSPUtilNew\SoundObj.cs
	namespace 	
DSPUtil
 
{ 
public 

	interface 
	ISoundObj 
:  
IEnumerable! ,
<, -
ISample- 4
>4 5
{ 
	ISoundObj 
Input 
{ 
get 
; 
set "
;" #
}# $
IEnumerator 
< 
ISample 
> 
Samples $
{% &
get' *
;* +
}, -
IEnumerator 
< 
ISample 
> !
GetBufferedEnumerator 2
(2 3
)3 4
;4 5
int 
Run 
( 
) 
; 
void 
Reset 
( 
) 
; 
int 

Iterations 
{ 
get 
; 
} 
ushort 
NumChannels 
{ 
get  
;  !
}" #
uint 

SampleRate 
{ 
get 
; 
set "
;" #
}$ %
bool 
Enabled 
{ 
get 
; 
set 
;  
}! "
SingleChannel 
Channel 
( 
ushort $
n% &
)& '
;' (
} 
public(( 

class(( 
SoundObj(( 
:(( 
	ISoundObj((6 ?
{)) 
	protected++ 
	ISoundObj++ 
_input++ "
;++" #
	protected-- 
bool-- 
_enabled-- 
=--  !
true--" &
;--& '
	protected.. 
bool.. 
_useBuff.. 
=..  !
true.." &
;..& '
	protected// 
uint// 
_sr// 
;// 
	protected00 
ushort00 
_nc00 
;00 
public22 
SoundObj22 
(22 
)22 
{33 	
}55 	
public77 
SoundObj77 
(77 
	ISoundObj77 !
input77" '
)77' (
{88 	
Input99 
=99 
input99 
;99 
}:: 	
publicAA 
virtualAA 
	ISoundObjAA  
InputAA! &
{BB 	
getCC 
{CC 
returnCC 
(CC 
_inputCC  
)CC  !
;CC! "
}CC# $
setDD 
{EE 
_inputFF 
=FF 
valueFF 
;FF 
_ncGG 
=GG 
(GG 
_inputGG 
==GG  
nullGG! %
)GG% &
?GG' (
(GG) *
ushortGG* 0
)GG0 1
$numGG1 2
:GG3 4
_inputGG5 ;
.GG; <
NumChannelsGG< G
;GGG H
_srHH 
=HH 
(HH 
_inputHH 
==HH  
nullHH! %
)HH% &
?HH' (
(HH) *
uintHH* .
)HH. /
$numHH/ 0
:HH1 2
_inputHH3 9
.HH9 :

SampleRateHH: D
;HHD E
}II 
}JJ 	
publicMM 
boolMM 
EnabledMM 
{NN 	
getOO 
{OO 
returnOO 
(OO 
_enabledOO "
)OO" #
;OO# $
}OO% &
setPP 
{PP 
_enabledPP 
=PP 
valuePP "
;PP" #
}PP$ %
}QQ 	
publicTT 
intTT 
RunTT 
(TT 
)TT 
{UU 	
intVV 
jVV 
=VV 
$numVV 
;VV 

SampleEnumWW 
eWW 
=WW 
newWW 

SampleEnumWW )
(WW) *
thisWW* .
)WW. /
;WW/ 0
eXX 
.XX 
SkipAllXX 
(XX 
outXX 
jXX 
)XX 
;XX 
returnYY 
jYY 
;YY 
}ZZ 	
public\\ 
int\\ 
Run\\ 
(\\ 
int\\ 
nSamples\\ #
)\\# $
{]] 	
int^^ 
j^^ 
=^^ 
$num^^ 
;^^ 
bool__ 
bMore__ 
=__ 
false__ 
;__ 

SampleEnum`` 
e`` 
=`` 
new`` 

SampleEnum`` )
(``) *
this``* .
)``. /
;``/ 0
eaa 
.aa 
Skipaa 
(aa 
nSamplesaa 
,aa 
outaa  
jaa! "
,aa" #
outaa$ '
bMoreaa( -
)aa- .
;aa. /
returnbb 
jbb 
;bb 
}cc 	
publichh 
virtualhh 
IEnumeratorhh "
<hh" #
ISamplehh# *
>hh* +
Sampleshh, 3
{ii 	
getjj 
{kk 
ifll 
(ll 
_inputll 
==ll 
nullll "
)ll" #
{mm 
yieldnn 
breaknn 
;nn  
}oo 
foreachpp 
(pp 
ISamplepp  
samplepp! '
inpp( *
Inputpp+ 0
)pp0 1
{qq 
yieldrr 
returnrr  
samplerr! '
;rr' (
}ss 
}tt 
}uu 	
IEnumeratorww 
IEnumerableww 
.ww  
GetEnumeratorww  -
(ww- .
)ww. /
{xx 	
returnyy 
thisyy 
.yy 
Samplesyy 
asyy  "
IEnumeratoryy# .
;yy. /
}zz 	
IEnumerator{{ 
<{{ 
ISample{{ 
>{{ 
IEnumerable{{ (
<{{( )
ISample{{) 0
>{{0 1
.{{1 2
GetEnumerator{{2 ?
({{? @
){{@ A
{|| 	
return}} 
this}} 
.}} 
Samples}} 
as}}  "
IEnumerator}}# .
<}}. /
ISample}}/ 6
>}}6 7
;}}7 8
}~~ 	
public
 
IEnumerator
 
<
 
ISample
 "
>
" ##
GetBufferedEnumerator
$ 9
(
9 :
)
: ;
{
 	
return
 
new
 

SampleEnum
 !
(
! "
this
" &
)
& '
;
' (
}
 	
public
 
virtual
 
void
 
Reset
 !
(
! "
)
" #
{
 	
if
 
(
 
_input
 
==
 
null
 
)
 
{
 
return
 
;
 
}
 
_input
 
.
 
Reset
 
(
 
)
 
;
 
}
 	
public
 
virtual
 
SingleChannel
 $
Channel
% ,
(
, -
ushort
- 3
n
4 5
)
5 6
{
 	
return
 
new
 
SingleChannel
 $
(
$ %
this
% )
,
) *
n
+ ,
)
, -
;
- .
}
 	
public
 
virtual
 
int
 

Iterations
 %
{
 	
get
 
{
 
return
 
(
 
_input
  
==
  "
null
" &
?
' (
$num
) *
:
+ ,
_input
- 3
.
3 4

Iterations
4 >
)
> ?
;
? @
}
A B
}
 	
public
 
virtual
 
uint
 

SampleRate
 &
{
 	
get
 
{
 
return
 
(
 
(
 
_sr
 
==
  
$num
  !
)
! "
?
# $
(
% &
_input
& ,
==
- /
null
0 4
?
5 6
$num
7 8
:
9 :
_input
; A
.
A B

SampleRate
B L
)
L M
:
N O
_sr
P S
)
S T
;
T U
}
V W
set
 
{
 
_sr
 
=
 
value
 
;
 
}
  
}
   	
public
££ 
virtual
££ 
ushort
££ 
NumChannels
££ )
{
¤¤ 	
get
¥¥ 
{
¥¥ 
return
¥¥ 
(
¥¥ 
(
¥¥ 
_nc
¥¥ 
==
¥¥  
$num
¥¥  !
)
¥¥! "
?
¥¥# $
(
¥¥% &
_input
¥¥& ,
==
¥¥- /
null
¥¥0 4
?
¥¥5 6
(
¥¥7 8
ushort
¥¥8 >
)
¥¥> ?
$num
¥¥? @
:
¥¥A B
_input
¥¥C I
.
¥¥I J
NumChannels
¥¥J U
)
¥¥U V
:
¥¥W X
_nc
¥¥Y \
)
¥¥\ ]
;
¥¥] ^
}
¥¥_ `
set
¦¦ 
{
¦¦ 
_nc
¦¦ 
=
¦¦ 
value
¦¦ 
;
¦¦ 
}
¦¦  
}
§§ 	
}
¨¨ 
public
°° 

class
°° 

SampleEnum
°° 
:
°° 
ISampleBuffer
°°8 E
,
°°E F
IEnumerator
°°G R
<
°°R S
ISample
°°S Z
>
°°Z [
{
±± 
	ISoundObj
²² 
_obj
²² 
;
²² 
IEnumerator
³³ 
<
³³ 
ISample
³³ 
>
³³ 
_enum
³³ "
;
³³" #
ISample
´´ 
[
´´ 
]
´´ 
_cache
´´ 
;
´´ 
int
µµ 
_cacheCount
µµ 
;
µµ 
int
¶¶ 
	_cachePos
¶¶ 
;
¶¶ 
ushort
·· 
_nc
·· 
;
·· 
private
¹¹ 
ISample
¹¹ 
[
¹¹ 
]
¹¹ 
_buff
¹¹ 
;
¹¹  
private
ºº 
int
ºº 
_bufflen
ºº 
;
ºº 
private
¼¼ 
Complex
¼¼ 
[
¼¼ 
]
¼¼ 
[
¼¼ 
]
¼¼ 
_cbuff
¼¼ "
;
¼¼" #
private
½½ 
int
½½ 
	_cbufflen
½½ 
;
½½ 
private
¿¿ 
bool
¿¿ 
_moreSamples
¿¿ !
=
¿¿" #
true
¿¿$ (
;
¿¿( )
public
ÁÁ 

SampleEnum
ÁÁ 
(
ÁÁ 
	ISoundObj
ÁÁ #
obj
ÁÁ$ '
)
ÁÁ' (
{
ÂÂ 	
_obj
ÃÃ 
=
ÃÃ 
obj
ÃÃ 
;
ÃÃ 
_nc
ÄÄ 
=
ÄÄ 
_obj
ÄÄ 
.
ÄÄ 
NumChannels
ÄÄ "
;
ÄÄ" #
Reset
ÅÅ 
(
ÅÅ 
)
ÅÅ 
;
ÅÅ 
}
ÆÆ 	
object
ÈÈ 
IEnumerator
ÈÈ 
.
ÈÈ 
Current
ÈÈ "
{
ÈÈ# $
get
ÈÈ% (
{
ÈÈ) *
return
ÈÈ+ 1
_cache
ÈÈ2 8
[
ÈÈ8 9
	_cachePos
ÈÈ9 B
]
ÈÈB C
;
ÈÈC D
}
ÈÈE F
}
ÈÈG H
public
ÉÉ 
ISample
ÉÉ 
Current
ÉÉ 
{
ÊÊ 	
get
ËË 
{
ÌÌ 
return
ÍÍ 
_cache
ÍÍ 
[
ÍÍ 
	_cachePos
ÍÍ '
]
ÍÍ' (
;
ÍÍ( )
}
ÎÎ 
}
ÏÏ 	
public
ÑÑ 
bool
ÑÑ 
MoveNext
ÑÑ 
(
ÑÑ 
)
ÑÑ 
{
ÒÒ 	
	_cachePos
ÓÓ 
++
ÓÓ 
;
ÓÓ 
if
ÔÔ 
(
ÔÔ 
_cache
ÔÔ 
!=
ÔÔ 
null
ÔÔ 
&&
ÔÔ 
	_cachePos
ÔÔ  )
>=
ÔÔ* ,
_cacheCount
ÔÔ- 8
)
ÔÔ8 9
{
ÕÕ 
_cache
ÖÖ 
=
ÖÖ 
null
ÖÖ 
;
ÖÖ 
}
×× 
if
ØØ 
(
ØØ 
_cache
ØØ 
==
ØØ 
null
ØØ 
&&
ØØ 
_moreSamples
ØØ  ,
)
ØØ, -
{
ÙÙ 
_cache
ÚÚ 
=
ÚÚ 
Read
ÚÚ 
(
ÚÚ 
DSPUtil
ÚÚ %
.
ÚÚ% &
BUFSIZE
ÚÚ& -
,
ÚÚ- .
out
ÚÚ/ 2
_cacheCount
ÚÚ3 >
,
ÚÚ> ?
out
ÚÚ@ C
_moreSamples
ÚÚD P
)
ÚÚP Q
;
ÚÚQ R
	_cachePos
ÛÛ 
=
ÛÛ 
$num
ÛÛ 
;
ÛÛ 
}
ÜÜ 
return
ÝÝ 
(
ÝÝ 
	_cachePos
ÝÝ 
<
ÝÝ 
_cacheCount
ÝÝ  +
)
ÝÝ+ ,
;
ÝÝ, -
}
ÞÞ 	
public
àà 
void
àà 
Reset
àà 
(
àà 
)
àà 
{
áá 	
_obj
ââ 
.
ââ 
Reset
ââ 
(
ââ 
)
ââ 
;
ââ 
_enum
ãã 
=
ãã 
_obj
ãã 
.
ãã 
Samples
ãã  
;
ãã  !
}
ää 	
public
ææ 
void
ææ 
Dispose
ææ 
(
ææ 
)
ææ 
{
çç 	
_enum
èè 
.
èè 
Dispose
èè 
(
èè 
)
èè 
;
èè 
_enum
éé 
=
éé 
null
éé 
;
éé 
_obj
êê 
=
êê 
null
êê 
;
êê 
}
ëë 	
public
íí 
void
íí 
Skip
íí 
(
íí 
int
íí 
n
íí 
,
íí 
out
íí  #
int
íí$ '
nn
íí( *
,
íí* +
out
íí, /
bool
íí0 4
moreRemaining
íí5 B
)
ííB C
{
îî 	
bool
ïï 
more
ïï 
=
ïï 
true
ïï 
;
ïï 
int
ðð 
j
ðð 
=
ðð 
$num
ðð 
;
ðð 
for
ññ 
(
ññ 
j
ññ 
=
ññ 
$num
ññ 
;
ññ 
j
ññ 
<
ññ 
n
ññ 
&&
ññ  
more
ññ! %
;
ññ% &
j
ññ' (
++
ññ( *
)
ññ* +
{
òò 
more
óó 
=
óó 
_enum
óó 
.
óó 
MoveNext
óó %
(
óó% &
)
óó& '
;
óó' (
}
ôô 
nn
õõ 
=
õõ 
more
õõ 
?
õõ 
j
õõ 
:
õõ 
(
õõ 
j
õõ 
-
õõ  
$num
õõ! "
)
õõ" #
;
õõ# $
moreRemaining
öö 
=
öö 
more
öö  
;
öö  !
}
÷÷ 	
public
ùù 
void
ùù 
SkipAll
ùù 
(
ùù 
out
ùù 
int
ùù  #
nn
ùù$ &
)
ùù& '
{
úú 	
bool
ûû 
more
ûû 
=
ûû 
true
ûû 
;
ûû 
int
üü 
j
üü 
=
üü 
$num
üü 
;
üü 
for
ýý 
(
ýý 
j
ýý 
=
ýý 
$num
ýý 
;
ýý 
more
ýý 
;
ýý 
j
ýý 
++
ýý !
)
ýý! "
{
þþ 
more
ÿÿ 
=
ÿÿ 
_enum
ÿÿ 
.
ÿÿ 
MoveNext
ÿÿ %
(
ÿÿ% &
)
ÿÿ& '
;
ÿÿ' (
}
 
nn
 
=
 
j
 
-
 
$num
 
;
 
}
 	
public
 
ISample
 
[
 
]
 
Read
 
(
 
int
 !
n
" #
,
# $
out
% (
int
) ,
nn
- /
,
/ 0
out
1 4
bool
5 9
moreRemaining
: G
)
G H
{
 	
ISample
 
[
 
]
 
buff
 
;
 
if
 
(
 
_obj
 
is
 
ISampleBuffer
 %
)
% &
{
 
buff
 
=
 
(
 
_obj
 
as
 
ISampleBuffer
  -
)
- .
.
. /
Read
/ 3
(
3 4
n
4 5
,
5 6
out
7 :
nn
; =
,
= >
out
? B
moreRemaining
C P
)
P Q
;
Q R
}
 
else
 
{
 
if
 
(
 
_buff
 
==
 
null
 !
||
" $
_bufflen
% -
<
. /
n
0 1
)
1 2
{
 
_buff
 
=
 
new
 
ISample
  '
[
' (
n
( )
]
) *
;
* +
_bufflen
 
=
 
n
  
;
  !
}
 
buff
 
=
 
_buff
 
;
 
moreRemaining
 
=
 
true
  $
;
$ %
int
 
j
 
;
 
for
 
(
 
j
 
=
 
$num
 
;
 
j
 
<
 
n
  !
&&
" $
moreRemaining
% 2
;
2 3
j
4 5
++
5 7
)
7 8
{
 
if
 
(
 
_enum
 
.
 
MoveNext
 &
(
& '
)
' (
)
( )
{
 
buff
 
[
 
j
 
]
 
=
  !
_enum
" '
.
' (
Current
( /
;
/ 0
}
 
else
 
{
 
moreRemaining
 %
=
& '
false
( -
;
- .
}
 
}
 
nn
   
=
   
moreRemaining
   "
?
  # $
j
  % &
:
  ' (
(
  ) *
j
  * +
-
  , -
$num
  . /
)
  / 0
;
  0 1
}
¡¡ 
return
¢¢ 
buff
¢¢ 
;
¢¢ 
}
££ 	
public
­­ 
Complex
­­ 
[
­­ 
]
­­ 
[
­­ 
]
­­ 
ReadComplex
­­ &
(
­­& '
int
­­' *
n
­­+ ,
,
­­, -
out
­­. 1
int
­­2 5
nn
­­6 8
,
­­8 9
out
­­: =
bool
­­> B
moreRemaining
­­C P
)
­­P Q
{
®® 	
if
¯¯ 
(
¯¯ 
_obj
¯¯ 
is
¯¯ 
ISampleBuffer
¯¯ %
)
¯¯% &
{
°° 
return
±± 
(
±± 
_obj
±± 
as
±± 
ISampleBuffer
±±  -
)
±±- .
.
±±. /
ReadComplex
±±/ :
(
±±: ;
n
±±; <
,
±±< =
out
±±> A
nn
±±B D
,
±±D E
out
±±F I
moreRemaining
±±J W
)
±±W X
;
±±X Y
}
²² 
if
³³ 
(
³³ 
_cbuff
³³ 
==
³³ 
null
³³ 
||
³³ !
	_cbufflen
³³" +
<
³³, -
n
³³. /
)
³³/ 0
{
´´ 
_cbuff
µµ 
=
µµ 
new
µµ 
Complex
µµ $
[
µµ$ %
_nc
µµ% (
]
µµ( )
[
µµ) *
]
µµ* +
;
µµ+ ,
for
¶¶ 
(
¶¶ 
ushort
¶¶ 
c
¶¶ 
=
¶¶ 
$num
¶¶  !
;
¶¶! "
c
¶¶# $
<
¶¶% &
_nc
¶¶' *
;
¶¶* +
c
¶¶, -
++
¶¶- /
)
¶¶/ 0
{
·· 
_cbuff
¸¸ 
[
¸¸ 
c
¸¸ 
]
¸¸ 
=
¸¸ 
new
¸¸  #
Complex
¸¸$ +
[
¸¸+ ,
n
¸¸, -
]
¸¸- .
;
¸¸. /
}
¹¹ 
	_cbufflen
ºº 
=
ºº 
n
ºº 
;
ºº 
}
»» 
else
¼¼ 
{
½½ 
for
¾¾ 
(
¾¾ 
ushort
¾¾ 
c
¾¾ 
=
¾¾ 
$num
¾¾  !
;
¾¾! "
c
¾¾# $
<
¾¾% &
_nc
¾¾' *
;
¾¾* +
c
¾¾, -
++
¾¾- /
)
¾¾/ 0
{
¿¿ 
Array
ÀÀ 
.
ÀÀ 
Clear
ÀÀ 
(
ÀÀ  
_cbuff
ÀÀ  &
[
ÀÀ& '
c
ÀÀ' (
]
ÀÀ( )
,
ÀÀ) *
$num
ÀÀ+ ,
,
ÀÀ, -
n
ÀÀ. /
)
ÀÀ/ 0
;
ÀÀ0 1
}
ÁÁ 
}
ÂÂ 
moreRemaining
ÃÃ 
=
ÃÃ 
true
ÃÃ  
;
ÃÃ  !
int
ÄÄ 
j
ÄÄ 
;
ÄÄ 
for
ÅÅ 
(
ÅÅ 
j
ÅÅ 
=
ÅÅ 
$num
ÅÅ 
;
ÅÅ 
j
ÅÅ 
<
ÅÅ 
n
ÅÅ 
&&
ÅÅ  
moreRemaining
ÅÅ! .
;
ÅÅ. /
j
ÅÅ0 1
++
ÅÅ1 3
)
ÅÅ3 4
{
ÆÆ 
if
ÇÇ 
(
ÇÇ 
_enum
ÇÇ 
.
ÇÇ 
MoveNext
ÇÇ "
(
ÇÇ" #
)
ÇÇ# $
)
ÇÇ$ %
{
ÈÈ 
ISample
ÉÉ 
s
ÉÉ 
=
ÉÉ 
_enum
ÉÉ  %
.
ÉÉ% &
Current
ÉÉ& -
;
ÉÉ- .
for
ÊÊ 
(
ÊÊ 
ushort
ÊÊ 
c
ÊÊ  !
=
ÊÊ" #
$num
ÊÊ$ %
;
ÊÊ% &
c
ÊÊ' (
<
ÊÊ) *
_nc
ÊÊ+ .
;
ÊÊ. /
c
ÊÊ0 1
++
ÊÊ1 3
)
ÊÊ3 4
{
ËË 
_cbuff
ÌÌ 
[
ÌÌ 
c
ÌÌ  
]
ÌÌ  !
[
ÌÌ! "
j
ÌÌ" #
]
ÌÌ# $
.
ÌÌ$ %
Re
ÌÌ% '
=
ÌÌ( )
s
ÌÌ* +
[
ÌÌ+ ,
c
ÌÌ, -
]
ÌÌ- .
;
ÌÌ. /
}
ÍÍ 
}
ÎÎ 
else
ÏÏ 
{
ÐÐ 
moreRemaining
ÑÑ !
=
ÑÑ" #
false
ÑÑ$ )
;
ÑÑ) *
}
ÒÒ 
}
ÓÓ 
nn
ÔÔ 
=
ÔÔ 
moreRemaining
ÔÔ 
?
ÔÔ  
j
ÔÔ! "
:
ÔÔ# $
(
ÔÔ% &
j
ÔÔ& '
-
ÔÔ( )
$num
ÔÔ* +
)
ÔÔ+ ,
;
ÔÔ, -
return
ÕÕ 
_cbuff
ÕÕ 
;
ÕÕ 
}
ÖÖ 	
}
×× 
}ÙÙ ÷
1E:\GitHub\inguz-DSPUtil\InguzDSPUtilNew\Source.cs
	namespace 	
DSPUtil
 
{ 
public 

delegate 
ISample 
SourceCallback *
(* +
long+ /
n0 1
)1 2
;2 3
public 

class 
CallbackSource 
:  !
SoundObj" *
{ 
private 
SourceCallback 
_fn "
;" #
public 
CallbackSource 
( 
) 
{ 	
} 	
public 
CallbackSource 
( 
ushort $
	nChannels% .
,. /
uint0 4

sampleRate5 ?
,? @
SourceCallbackA O
fnP R
)R S
{ 	
NumChannels 
= 
	nChannels #
;# $

SampleRate 
= 

sampleRate #
;# $
_fn 
= 
fn 
; 
} 	
public 
override 
IEnumerator #
<# $
ISample$ +
>+ ,
Samples- 4
{ 	
get 
{ 
int   
n   
=   
$num   
;   
while!! 
(!! 
true!! 
)!! 
{"" 
ISample## 
s## 
=## 
_fn##  #
(### $
n##$ %
)##% &
;##& '
if$$ 
($$ 
s$$ 
==$$ 
null$$ !
)$$! "
{%% 
yield&& 
break&& #
;&&# $
}'' 
yield(( 
return((  
s((! "
;((" #
n)) 
++)) 
;)) 
}** 
}++ 
},, 	
}.. 
}00 Û
1E:\GitHub\inguz-DSPUtil\InguzDSPUtilNew\Stream.cs
	namespace 	
DSPUtil
 
{		 
class 	
ButteredStream
 
: 
Stream !
{ 
Stream 
_s 
; 
public 
ButteredStream 
( 
Stream $
s% &
)& '
{ 	
_s 
= 
s 
; 
} 	
public 
override 
bool 
CanRead $
{ 	
get 
{ 
return 
_s 
. 
CanRead #
;# $
}% &
} 	
public 
override 
bool 
CanSeek $
{ 	
get 
{ 
return 
_s 
. 
CanSeek #
;# $
}% &
} 	
public 
override 
bool 
CanWrite %
{   	
get!! 
{!! 
return!! 
_s!! 
.!! 
CanWrite!! $
;!!$ %
}!!& '
}"" 	
public$$ 
override$$ 
void$$ 
Flush$$ "
($$" #
)$$# $
{%% 	
_s&& 
.&& 
Flush&& 
(&& 
)&& 
;&& 
}'' 	
public)) 
override)) 
long)) 
Length)) #
{** 	
get++ 
{++ 
return++ 
_s++ 
.++ 
Length++ "
;++" #
}++$ %
},, 	
public.. 
override.. 
long.. 
Position.. %
{// 	
get00 
{11 
return22 
_s22 
.22 
Position22 "
;22" #
}33 
set44 
{55 
_s66 
.66 
Position66 
=66 
value66 #
;66# $
}77 
}88 	
public:: 
override:: 
int:: 
Read::  
(::  !
byte::! %
[::% &
]::& '
buffer::( .
,::. /
int::0 3
offset::4 :
,::: ;
int::< ?
count::@ E
)::E F
{;; 	
return<< 
_s<< 
.<< 
Read<< 
(<< 
buffer<< !
,<<! "
offset<<# )
,<<) *
count<<+ 0
)<<0 1
;<<1 2
}== 	
public?? 
override?? 
long?? 
Seek?? !
(??! "
long??" &
offset??' -
,??- .

SeekOrigin??/ 9
origin??: @
)??@ A
{@@ 	
returnAA 
_sAA 
.AA 
SeekAA 
(AA 
offsetAA !
,AA! "
originAA# )
)AA) *
;AA* +
}BB 	
publicDD 
overrideDD 
voidDD 
	SetLengthDD &
(DD& '
longDD' +
valueDD, 1
)DD1 2
{EE 	
_sFF 
.FF 
	SetLengthFF 
(FF 
valueFF 
)FF 
;FF  
}GG 	
publicII 
overrideII 
voidII 
WriteII "
(II" #
byteII# '
[II' (
]II( )
bufferII* 0
,II0 1
intII2 5
offsetII6 <
,II< =
intII> A
countIIB G
)IIG H
{JJ 	
_sKK 
.KK 
WriteKK 
(KK 
bufferKK 
,KK 
offsetKK #
,KK# $
countKK% *
)KK* +
;KK+ ,
}LL 	
}MM 
}NN ßÚ
9E:\GitHub\inguz-DSPUtil\InguzDSPUtilNew\SweepGenerator.cs
	namespace 	
DSPUtil
 
{ 
public		 

	interface		 
ISweepGenerator		 $
:		% &
	ISoundObj		' 0
{

 
	ISoundObj 
Inverse 
{ 
get 
;  
}! "
} 
[ 
Serializable 
] 
public 

class 
SweepGenerator 
:  !
SoundObj" *
,* +
ISweepGenerator, ;
{ 
double 
_lengthSecs 
; 
double 

_startFreq 
; 
double 
_endFreq 
; 
double 
_gap 
; 
bool 
_pulse 
; 
double 
_gain 
; 
bool 
_repeat 
; 
double 
_phi 
; 
public 
SweepGenerator 
( 
ushort $
numChannels% 0
,0 1
double2 8

lengthSecs9 C
,C D
uintE I
	startFreqJ S
,S T
uintU Y
endFreqZ a
,a b
uintc g

sampleRateh r
,r s
doublet z
gapSecs	{ 
,
 
bool
 
pulse
 
,
 
double
 
gain
 
,
 
bool
 ¡
repeat
¢ ¨
)
¨ ©
{ 	
_lengthSecs 
= 

lengthSecs $
;$ %
_lengthSamples 
= 
( 
int !
)! "
(" #

sampleRate# -
*. /
(0 1

lengthSecs2 <
+= >
$num? @
*@ A
gapSecsA H
)I J
+K L
(M N
pulseN S
?T U
(V W
$numW ]
*] ^

sampleRate^ h
)h i
:j k
$numl m
)n o
)o p
;p q

_startFreq 
= 
	startFreq "
;" #
_endFreq   
=   
endFreq   
;   
NumChannels!! 
=!! 
numChannels!! %
;!!% &

SampleRate"" 
="" 

sampleRate"" #
;""# $
_gap## 
=## 
gapSecs## 
;## 
_pulse$$ 
=$$ 
pulse$$ 
;$$ 
_gain%% 
=%% 
gain%% 
;%% 
_repeat&& 
=&& 
repeat&& 
;&& 
_phi'' 
='' 
$num'' 
;'' 
}(( 	
public** 
SweepGenerator** 
(** 
ushort** $
numChannels**% 0
,**0 1
int**2 5
lengthSamples**6 C
,**C D
uint**E I
	startFreq**J S
,**S T
uint**U Y
endFreq**Z a
,**a b
uint**c g

sampleRate**h r
,**r s
double**t z
gain**{ 
,	** 
bool
** 
repeat
** 
)
** 
{++ 	
_lengthSecs,, 
=,, 
lengthSamples,, '
/,,( )

sampleRate,,* 4
;,,4 5
_lengthSamples-- 
=-- 
lengthSamples-- *
;--* +

_startFreq.. 
=.. 
	startFreq.. "
;.." #
_endFreq// 
=// 
endFreq// 
;// 
NumChannels00 
=00 
numChannels00 %
;00% &

SampleRate11 
=11 

sampleRate11 #
;11# $
_gap22 
=22 
$num22 
;22 
_pulse33 
=33 
false33 
;33 
_gain44 
=44 
gain44 
;44 
_repeat55 
=55 
repeat55 
;55 
_phi66 
=66 
$num66 
;66 
}77 	
public<< 
override<< 
IEnumerator<< #
<<<# $
ISample<<$ +
><<+ ,
Samples<<- 4
{== 	
get>> 
{?? 
if@@ 
(@@ 
_pulse@@ 
)@@ 
{AA 
intCC 
jCC 
=CC 
$numCC 
;CC 
forDD 
(DD 
;DD 
jDD 
<DD 

SampleRateDD )
/DD* +
$numDD, -
;DD- .
jDD/ 0
++DD0 2
)DD2 3
{EE 
yieldFF 
returnFF $
newFF% (
SampleFF) /
(FF/ 0
NumChannelsFF0 ;
)FF; <
;FF< =
}GG 
SoundObjII 
sweepII "
=II# $
newII% (
SweepGeneratorII) 7
(II7 8
NumChannelsII8 C
,IIC D
$numIIE K
,IIK L
$numIIM P
,IIP Q
$numIIR W
,IIW X

SampleRateIIY c
,IIc d
$numIIe i
,IIi j
falseIIk p
,IIp q
_gainIIr w
,IIw x
falseIIy ~
)II~ 
;	II 
SoundObjJJ 
reverJJ "
=JJ# $
newJJ% (
ReverserJJ) 1
(JJ1 2
)JJ2 3
;JJ3 4
reverKK 
.KK 
InputKK 
=KK  !
sweepKK" '
;KK' (
foreachLL 
(LL 
ISampleLL $
sampleLL% +
inLL, .
reverLL/ 4
)LL4 5
{MM 
yieldNN 
returnNN $
sampleNN% +
;NN+ ,
jOO 
++OO 
;OO 
}PP 
forRR 
(RR 
;RR 
jRR 
<RR 

SampleRateRR )
;RR) *
jRR+ ,
++RR, .
)RR. /
{SS 
yieldTT 
returnTT $
newTT% (
SampleTT) /
(TT/ 0
NumChannelsTT0 ;
)TT; <
;TT< =
}UU 
}VV 
ifWW 
(WW 
_gapWW 
>WW 
$numWW 
)WW 
{XX 
forZZ 
(ZZ 
intZZ 
jZZ 
=ZZ  
$numZZ! "
;ZZ" #
jZZ$ %
<ZZ& '
(ZZ( )
_gapZZ) -
*ZZ. /

SampleRateZZ0 :
)ZZ: ;
;ZZ; <
jZZ= >
++ZZ> @
)ZZ@ A
{[[ 
yield\\ 
return\\ $
new\\% (
Sample\\) /
(\\/ 0
NumChannels\\0 ;
)\\; <
;\\< =
}]] 
}^^ 
doubleaa 
logStartaa 
=aa  !
Mathaa" &
.aa& '
Logaa' *
(aa* +

_startFreqaa+ 5
)aa5 6
;aa6 7
doublebb 
logEndbb 
=bb 
Mathbb  $
.bb$ %
Logbb% (
(bb( )
_endFreqbb) 1
)bb1 2
;bb2 3
boolcc 
morecc 
=cc 
truecc  
;cc  !
whiledd 
(dd 
moredd 
)dd 
{ee 
forff 
(ff 
intff 
jff 
=ff  
$numff! "
;ff" #
jff$ %
<ff& '
_lengthSecsff( 3
*ff4 5

SampleRateff6 @
;ff@ A
jffB C
++ffC E
)ffE F
{gg 
Samplehh 
samplehh %
=hh& '
newhh( +
Samplehh, 2
(hh2 3
NumChannelshh3 >
)hh> ?
;hh? @
doubleii 
valueii $
=ii% &
(ii' (
Mathii( ,
.ii, -
Sinii- 0
(ii0 1
_phiii1 5
)ii5 6
)ii6 7
;ii7 8
doublell 
fll  
=ll! "
Mathll# '
.ll' (
Expll( +
(ll+ ,
logStartll, 4
+ll5 6
jll7 8
*ll9 :
(ll; <
logEndll< B
-llC D
logStartllE M
)llM N
/llO P
(llQ R
_lengthSecsllR ]
*ll^ _

SampleRatell` j
)llj k
)llk l
;lll m
doublenn 
deltann $
=nn% &
$numnn' (
*nn) *
Mathnn+ /
.nn/ 0
PInn0 2
*nn3 4
fnn5 6
/nn7 8

SampleRatenn9 C
;nnC D
_phioo 
+=oo 
deltaoo  %
;oo% &
valueqq 
*=qq  
_gainqq! &
;qq& '
forrr 
(rr 
intrr  
crr! "
=rr# $
$numrr% &
;rr& '
crr( )
<rr* +
NumChannelsrr, 7
;rr7 8
crr9 :
++rr: <
)rr< =
{ss 
samplett "
[tt" #
ctt# $
]tt$ %
=tt& '
valuett( -
;tt- .
}uu 
yieldvv 
returnvv $
samplevv% +
;vv+ ,
}ww 
morexx 
=xx 
_repeatxx "
;xx" #
}yy 
}zz 
}{{ 	
int~~ 
_lengthSamples~~ 
;~~ 
public 
override 
int 

Iterations &
{
 	
get
 
{
 
return
 
(
 
_lengthSamples
 (
)
( )
;
) *
}
+ ,
}
 	
public
 
	ISoundObj
 
Inverse
  
{
 	
get
 
{
 
double
 
dbEnd
 
=
 
-
  
$num
  !
*
" #
Math
$ (
.
( )
Log
) ,
(
, -
_endFreq
- 5
/
6 7

_startFreq
8 B
,
B C
$num
D E
)
E F
;
F G
SoundObj
 
revsw
 
=
  
new
! $
Reverser
% -
(
- .
)
. /
;
/ 0
revsw
 
.
 
Input
 
=
 
this
 "
;
" #
SoundObj
 
adjust
 
=
  !
new
" %
LinearDbEnvelope
& 6
(
6 7
$num
7 8
,
8 9
dbEnd
: ?
,
? @
this
A E
.
E F

Iterations
F P
)
P Q
;
Q R
adjust
 
.
 
Input
 
=
 
revsw
 $
;
$ %
return
 
adjust
 
;
 
}
 
}
 	
}
 
public
   

unsafe
   
class
   
FFTSweepGenerator
   )
:
  * +
SoundObj
  , 4
,
  4 5
ISweepGenerator
  6 E
{
¡¡ 
double
¢¢ 
_lengthSecs
¢¢ 
;
¢¢ 
double
££ 

_startFreq
££ 
;
££ 
double
¤¤ 
_endFreq
¤¤ 
;
¤¤ 
double
¥¥ 
_gain
¥¥ 
;
¥¥ 
double
¦¦ 
_A
¦¦ 
;
¦¦ 
double
§§ 
_B
§§ 
;
§§ 
bool
¨¨ 
_repeat
¨¨ 
;
¨¨ 
Complex
©© 
[
©© 
]
©© 
_data
©© 
;
©© 
bool
ªª 
_gotdata
ªª 
;
ªª 
public
¬¬ 
FFTSweepGenerator
¬¬  
(
¬¬  !
ushort
¬¬! '
numChannels
¬¬( 3
,
¬¬3 4
int
¬¬5 8
lengthSamples
¬¬9 F
,
¬¬F G
uint
¬¬H L
	startFreq
¬¬M V
,
¬¬V W
uint
¬¬X \
endFreq
¬¬] d
,
¬¬d e
uint
¬¬f j

sampleRate
¬¬k u
,
¬¬u v
double
¬¬w }
gain¬¬~ 
,¬¬ 
bool¬¬ 
repeat¬¬ 
)¬¬ 
{
­­ 	
_lengthSecs
®® 
=
®® 
lengthSamples
®® '
/
®®( )

sampleRate
®®* 4
;
®®4 5
_lengthSamples
¯¯ 
=
¯¯ 
lengthSamples
¯¯ *
;
¯¯* +

_startFreq
°° 
=
°° 
	startFreq
°° "
;
°°" #
_endFreq
±± 
=
±± 
endFreq
±± 
;
±± 
NumChannels
²² 
=
²² 
numChannels
²² %
;
²²% &

SampleRate
³³ 
=
³³ 

sampleRate
³³ #
;
³³# $
_gain
´´ 
=
´´ 
gain
´´ 
;
´´ 
_repeat
µµ 
=
µµ 
repeat
µµ 
;
µµ 
}
¶¶ 	
int
¹¹ 
_lengthSamples
¹¹ 
;
¹¹ 
public
ºº 
override
ºº 
int
ºº 

Iterations
ºº &
{
»» 	
get
¼¼ 
{
¼¼ 
return
¼¼ 
(
¼¼ 
_lengthSamples
¼¼ (
)
¼¼( )
;
¼¼) *
}
¼¼+ ,
}
½½ 	
public
¿¿ 
override
¿¿ 
IEnumerator
¿¿ #
<
¿¿# $
ISample
¿¿$ +
>
¿¿+ ,
Samples
¿¿- 4
{
ÀÀ 	
get
ÁÁ 
{
ÂÂ 
ushort
ÃÃ 
nc
ÃÃ 
=
ÃÃ 
NumChannels
ÃÃ '
;
ÃÃ' (
	ISoundObj
ÄÄ 
sweep
ÄÄ 
=
ÄÄ  !
CalculateSweep
ÄÄ" 0
(
ÄÄ0 1
)
ÄÄ1 2
;
ÄÄ2 3
bool
ÅÅ 
more
ÅÅ 
=
ÅÅ 
true
ÅÅ  
;
ÅÅ  !
while
ÆÆ 
(
ÆÆ 
more
ÆÆ 
)
ÆÆ 
{
ÇÇ 
foreach
ÈÈ 
(
ÈÈ 
Sample
ÈÈ #
s
ÈÈ$ %
in
ÈÈ& (
sweep
ÈÈ) .
)
ÈÈ. /
{
ÉÉ 
if
ÊÊ 
(
ÊÊ 
nc
ÊÊ 
==
ÊÊ !
$num
ÊÊ" #
)
ÊÊ# $
{
ËË 
yield
ÌÌ !
return
ÌÌ" (
s
ÌÌ) *
;
ÌÌ* +
}
ÍÍ 
else
ÎÎ 
if
ÎÎ 
(
ÎÎ  !
nc
ÎÎ! #
==
ÎÎ$ &
$num
ÎÎ' (
)
ÎÎ( )
{
ÏÏ 
yield
ÐÐ !
return
ÐÐ" (
new
ÐÐ) ,
Sample2
ÐÐ- 4
(
ÐÐ4 5
s
ÐÐ5 6
[
ÐÐ6 7
$num
ÐÐ7 8
]
ÐÐ8 9
,
ÐÐ9 :
s
ÐÐ; <
[
ÐÐ< =
$num
ÐÐ= >
]
ÐÐ> ?
)
ÐÐ? @
;
ÐÐ@ A
}
ÑÑ 
}
ÒÒ 
more
ÓÓ 
=
ÓÓ 
_repeat
ÓÓ "
;
ÓÓ" #
}
ÔÔ 
}
ÕÕ 
}
ÖÖ 	
public
ØØ 
	ISoundObj
ØØ 
Inverse
ØØ  
{
ÙÙ 	
get
ÚÚ 
{
ÛÛ 
CalculateSweep
ÜÜ 
(
ÜÜ 
)
ÜÜ  
;
ÜÜ  !
int
ÞÞ 
fftSize
ÞÞ 
=
ÞÞ 
_data
ÞÞ #
.
ÞÞ# $
Length
ÞÞ$ *
;
ÞÞ* +
int
ßß 
N
ßß 
=
ßß 
fftSize
ßß 
/
ßß  !
$num
ßß" #
;
ßß# $
Complex
ââ 
[
ââ 
]
ââ 
data1
ââ 
=
ââ  !
new
ââ" %
Complex
ââ& -
[
ââ- .
fftSize
ââ. 5
]
ââ5 6
;
ââ6 7
for
ää 
(
ää 
int
ää 
j
ää 
=
ää 
$num
ää 
;
ää 
j
ää  !
<
ää" #
N
ää$ %
;
ää% &
j
ää' (
++
ää( *
)
ää* +
{
åå 
data1
ææ 
[
ææ 
j
ææ 
]
ææ 
=
ææ 
new
ææ "
Complex
ææ# *
(
ææ* +
_data
ææ+ 0
[
ææ0 1
j
ææ1 2
]
ææ2 3
.
ææ3 4
Re
ææ4 6
,
ææ6 7
$num
ææ8 9
)
ææ9 :
;
ææ: ;
}
çç 
Fourier
êê 
.
êê 
FFT
êê 
(
êê 
fftSize
êê #
,
êê# $
data1
êê% *
)
êê* +
;
êê+ ,
Complex
íí 
unity
íí 
=
íí 
new
íí  #
Complex
íí$ +
(
íí+ ,
$num
íí, -
,
íí- .
$num
íí/ 0
)
íí0 1
;
íí1 2
Complex
îî 
[
îî 
]
îî 
data2
îî 
=
îî  !
new
îî" %
Complex
îî& -
[
îî- .
fftSize
îî. 5
]
îî5 6
;
îî6 7
data2
ïï 
[
ïï 
N
ïï 
-
ïï 
$num
ïï 
]
ïï 
=
ïï 
unity
ïï "
;
ïï" #
Fourier
ðð 
.
ðð 
FFT
ðð 
(
ðð 
fftSize
ðð #
,
ðð# $
data2
ðð% *
)
ðð* +
;
ðð+ ,
for
òò 
(
òò 
int
òò 
j
òò 
=
òò 
$num
òò 
;
òò 
j
òò  !
<
òò" #
fftSize
òò$ +
;
òò+ ,
j
òò- .
++
òò. 0
)
òò0 1
{
óó 
data1
ôô 
[
ôô 
j
ôô 
]
ôô 
.
ôô 
idiv
ôô !
(
ôô! "
data2
ôô" '
[
ôô' (
j
ôô( )
]
ôô) *
)
ôô* +
;
ôô+ ,
}
õõ 
Fourier
øø 
.
øø 
IFFT
øø 
(
øø 
fftSize
øø $
,
øø$ %
data1
øø& +
)
øø+ ,
;
øø, -!
ComplexBufferReader
ùù #
cbr
ùù$ '
=
ùù( )
new
ùù* -!
ComplexBufferReader
ùù. A
(
ùùA B
data1
ùùB G
,
ùùG H
$num
ùùI J
,
ùùJ K
fftSize
ùùL S
)
ùùT U
;
ùùU V
cbr
úú 
.
úú 

SampleRate
úú 
=
úú  
_sr
úú! $
;
úú$ %
return
ûû 
cbr
ûû 
;
ûû 
}
üü 
}
ýý 	
double
ÿÿ 
T
ÿÿ 
(
ÿÿ 
double
ÿÿ 
f
ÿÿ 
)
ÿÿ 
{
 	
return
 
_A
 
+
 
(
 
_B
 
*
 
Math
 "
.
" #
Log
# &
(
& '
f
' (
)
( )
)
) *
;
* +
}
 	
double
 
phi
 
(
 
double
 
f
 
)
 
{
 	
return
 
(
 
$num
 
*
 
Math
 
.
 
PI
 
*
  !
f
" #
*
$ %
(
& '
T
' (
(
( )
f
) *
)
* +
-
, -
_B
. 0
)
0 1
)
1 2
%
3 4
(
5 6
$num
6 7
*
8 9
Math
: >
.
> ?
PI
? A
)
A B
;
B C
}
 	
double
 
mag
 
(
 
double
 
f
 
)
 
{
 	
double
 
ff
 
=
 
f
 
-
 

_startFreq
 &
;
& '
if
 
(
 
ff
 
<=
 
$num
 
)
 
{
 
return
 
(
 
Math
 
.
 
Cos
  
(
  !
Math
! %
.
% &
PI
& (
*
( )
ff
) +
/
+ ,

_startFreq
, 6
)
6 7
+
7 8
$num
8 9
)
9 :
/
: ;
$num
; <
;
< =
}
 
double
 
dbNow
 
=
 
$num
 
-
 
(
  
$num
  "
*
# $
Math
% )
.
) *
Log10
* /
(
/ 0
f
0 1
/
2 3

_startFreq
4 >
)
> ?
)
? @
;
@ A
double
 
gainNow
 
=
 
MathUtil
 %
.
% &
gain
& *
(
* +
dbNow
+ 0
)
0 1
;
1 2
return
 
gainNow
 
;
 
}
 	
	ISoundObj
 
CalculateSweep
  
(
  !
)
! "
{
 	
int
 
fftSize
 
=
 
MathUtil
 "
.
" #
NextPowerOfTwo
# 1
(
1 2
_lengthSamples
2 @
*
A B
$num
C D
)
D E
;
E F
int
 
N
 
=
 
fftSize
 
/
 
$num
 
;
  
double
 
fNyq
 
=
 
_sr
 
/
 
$num
 
;
  
double
 
FStart
 
=
 

_startFreq
 &
;
& '
double
 
FEnd
 
=
 
_endFreq
 "
;
" #
double
 
SStart
 
=
 
(
 
N
 
-
  
_lengthSamples
! /
)
/ 0
/
0 1
$num
1 2
;
2 3
double
 
TStart
 
=
 
SStart
 "
/
# $
_sr
% (
;
( )
double
 
TEnd
 
=
 
TStart
  
+
! "
_lengthSecs
# .
;
. /
_B
 
=
 
(
 
TEnd
 
-
 
TStart
 
)
  
/
! "
Math
# '
.
' (
Log
( +
(
+ ,
FEnd
, 0
/
1 2
FStart
3 9
)
9 :
;
: ;
_A
   
=
   
TStart
   
-
   
_B
   
*
   
Math
   #
.
  # $
Log
  $ '
(
  ' (
FStart
  ( .
)
  . /
;
  / 0
double
¤¤ 
df
¤¤ 
=
¤¤ 
(
¤¤ 
double
¤¤ 
)
¤¤  
_sr
¤¤  #
/
¤¤$ %
N
¤¤& '
;
¤¤' (
double
¥¥ 
phiNyq
¥¥ 
=
¥¥ 
phi
¥¥ 
(
¥¥  
fNyq
¥¥  $
)
¥¥$ %
;
¥¥% &
double
¦¦ 
phiAdj
¦¦ 
=
¦¦ 
phiNyq
¦¦ "
%
¦¦# $
(
¦¦% &
$num
¦¦& '
*
¦¦( )
Math
¦¦* .
.
¦¦. /
PI
¦¦/ 1
)
¦¦1 2
;
¦¦2 3
if
¨¨ 
(
¨¨ 
!
¨¨ 
_gotdata
¨¨ 
)
¨¨ 
{
©© 
_data
ªª 
=
ªª 
new
ªª 
Complex
ªª #
[
ªª# $
fftSize
ªª$ +
]
ªª+ ,
;
ªª, -
fixed
«« 
(
«« 
Complex
«« 
*
«« 
cdata
««  %
=
««& '
_data
««( -
)
««- .
{
¬¬ 
for
­­ 
(
­­ 
int
­­ 
j
­­ 
=
­­  
$num
­­! "
;
­­" #
j
­­$ %
<
­­& '
N
­­( )
;
­­) *
j
­­+ ,
++
­­, .
)
­­. /
{
®® 
int
¯¯ 
m
¯¯ 
=
¯¯ 
j
¯¯  !
+
¯¯" #
$num
¯¯$ %
;
¯¯% &
double
°° 
f
°°  
=
°°! "
(
°°# $
double
°°$ *
)
°°* +
m
°°+ ,
*
°°- .
_sr
°°/ 2
/
°°3 4
fftSize
°°5 <
;
°°< =
double
±± 
ph
±± !
=
±±" #
phi
±±$ '
(
±±' (
f
±±( )
)
±±) *
-
±±+ ,
(
±±- .
f
±±. /
/
±±0 1
fNyq
±±2 6
)
±±6 7
*
±±8 9
phiAdj
±±: @
;
±±@ A
double
²² 
v
²²  
=
²²! "
mag
²²# &
(
²²& '
f
²²' (
)
²²( )
;
²²) *
double
³³ 
Re
³³ !
=
³³" #
Math
³³$ (
.
³³( )
Cos
³³) ,
(
³³, -
ph
³³- /
)
³³/ 0
*
³³1 2
v
³³3 4
;
³³4 5
double
´´ 
Im
´´ !
=
´´" #
Math
´´$ (
.
´´( )
Sin
´´) ,
(
´´, -
ph
´´- /
)
´´/ 0
*
´´1 2
v
´´3 4
;
´´4 5
_data
µµ 
[
µµ 
j
µµ 
]
µµ  
=
µµ! "
new
µµ# &
Complex
µµ' .
(
µµ. /
Re
µµ/ 1
,
µµ1 2
Im
µµ3 5
)
µµ5 6
;
µµ6 7
}
¶¶ 
Fourier
·· 
.
·· 
IFFT
··  
(
··  !
fftSize
··! (
,
··( )
_data
··* /
,
··/ 0
Math
··1 5
.
··5 6
Sqrt
··6 :
(
··: ;
fftSize
··; B
)
··B C
*
··D E
_gain
··F K
*
··L M
MathUtil
··N V
.
··V W
gain
··W [
(
··[ \
$num
··\ ^
)
··^ _
)
··_ `
;
··` a
}
¸¸ 
	CosWindow
çç 
bh
çç 
=
çç 
new
çç "
Hamming
çç# *
(
çç* +
(
çç+ ,
int
çç, /
)
çç/ 0
(
çç0 1
_lengthSamples
çç1 ?
/
çç@ A
$num
ççB C
+
ççD E
SStart
ççF L
)
ççL M
,
ççM N
(
ççO P
int
ççP S
)
ççS T
(
ççT U
SStart
ççU [
)
çç[ \
,
çç\ ]
_lengthSamples
çç^ l
/
ççm n
$num
çço p
)
ççp q
;
ççq r
IEnumerator
èè 
<
èè 
double
èè "
>
èè" #
gains
èè$ )
=
èè* +
bh
èè, .
.
èè. /
Gains
èè/ 4
;
èè4 5
for
éé 
(
éé 
int
éé 
j
éé 
=
éé 
$num
éé 
;
éé 
j
éé  !
<
éé" #
N
éé$ %
;
éé% &
j
éé' (
++
éé( *
)
éé* +
{
êê 
gains
ëë 
.
ëë 
MoveNext
ëë "
(
ëë" #
)
ëë# $
;
ëë$ %
double
ìì 
g
ìì 
=
ìì 
gains
ìì $
.
ìì$ %
Current
ìì% ,
;
ìì, -
_data
íí 
[
íí 
j
íí 
]
íí 
.
íí 
mul
íí  
(
íí  !
g
íí! "
)
íí" #
;
íí# $
_data
îî 
[
îî 
fftSize
îî !
-
îî" #
j
îî$ %
-
îî& '
$num
îî( )
]
îî) *
.
îî* +
mul
îî+ .
(
îî. /
g
îî/ 0
)
îî0 1
;
îî1 2
}
ïï 
_gotdata
ññ 
=
ññ 
true
ññ 
;
ññ  
}
òò !
ComplexBufferReader
ôô 
cbr
ôô  #
=
ôô$ %
new
ôô& )!
ComplexBufferReader
ôô* =
(
ôô= >
_data
ôô> C
,
ôôC D
$num
ôôE F
,
ôôF G
N
ôôH I
)
ôôI J
;
ôôJ K
return
øø 
cbr
øø 
;
øø 
}
ùù 	
}
ûû 
}þþ 6
0E:\GitHub\inguz-DSPUtil\InguzDSPUtilNew\Trace.cs
	namespace 	
DSPUtil
 
{		 
public 

class 
Trace 
{ 
private 
static 
bool 
_init !
;! "
private 
static 
readonly 
object  &
_lock' ,
=- .
new/ 2
Object3 9
(9 :
): ;
;; <
private 
static 
bool 
_useConsole '
;' (
public 
static 
bool 

UseConsole %
{ 	
get 
{ 
return 
_useConsole $
;$ %
}& '
set 
{ 
_useConsole 
= 
value  %
;% &
}' (
} 	
private 
static 

TextWriter !
_useTextWriter" 0
=1 2
null3 7
;7 8
public 
static 

TextWriter  
UseTextWriter! .
{   	
get!! 
{!! 
return!! 
_useTextWriter!! '
;!!' (
}!!) *
set"" 
{"" 
_useTextWriter""  
=""! "
value""# (
;""( )
}""* +
}## 	
private%% 
static%% 
string%% 

_tracefile%% (
;%%( )
public&& 
static&& 
string&& 
FilePath&& %
{'' 	
set(( 
{)) 

_tracefile** 
=** 
value** "
;**" #
_init++ 
=++ 
true++ 
;++ 
},, 
}-- 	
private// 
static// 
string// 
_prefix// %
=//& '
$str//( *
;//* +
public33 
static33 
string33 
Prefix33 #
{44 	
set55 
{66 
_prefix77 
=77 
value77 
;77  
}88 
}99 	
private;; 
static;; 
bool;; 
	TraceFile;; %
(;;% &
);;& '
{<< 	
lock== 
(== 
_lock== 
)== 
{>> 
if?? 
(?? 
!?? 
_useConsole??  
&&??! #
!??$ %
_init??% *
)??* +
{@@ 
tryAA 
{BB 
SystemDD 
.DD 
ConfigurationDD ,
.DD, -
AppSettingsReaderDD- >
rdrDD? B
=DDC D
newDDE H
SystemDDI O
.DDO P
ConfigurationDDP ]
.DD] ^
AppSettingsReaderDD^ o
(DDo p
)DDp q
;DDq r

_tracefileEE "
=EE# $
(EE% &
stringEE& ,
)EE, -
rdrEE- 0
.EE0 1
GetValueEE1 9
(EE9 :
$strEE: A
,EEA B
typeofEEC I
(EEI J
stringEEJ P
)EEP Q
)EEQ R
;EER S
}FF 
catchGG 
(GG 
	ExceptionGG $
)GG$ %
{HH 
}II 
}JJ 
_initKK 
=KK 
trueKK 
;KK 
}LL 
returnMM 
(MM 
_initMM 
&&MM 

_tracefileMM '
!=MM' )
nullMM) -
)MM- .
;MM. /
}NN 	
publicUU 
staticUU 
voidUU 
WriteUU  
(UU  !
stringUU! '
formatUU( .
,UU. /
paramsUU0 6
objectUU7 =
[UU= >
]UU> ?
argsUU@ D
)UUD E
{VV 	
ifXX 
(XX 
_useTextWriterXX 
!=XX !
nullXX" &
)XX& '
{YY 
_useTextWriterZZ 
.ZZ 
	WriteLineZZ (
(ZZ( )
formatZZ) /
,ZZ/ 0
argsZZ1 5
)ZZ5 6
;ZZ6 7
}[[ 
else\\ 
if\\ 
(\\ 
_useConsole\\  
)\\  !
{]] 
Console^^ 
.^^ 
Write^^ 
(^^ 
format^^ $
,^^$ %
args^^& *
)^^* +
;^^+ ,
}__ 
else`` 
if`` 
(`` 
	TraceFile`` 
(`` 
)``  
)``  !
{aa 
lockbb 
(bb 
_lockbb 
)bb 
{cc 
trydd 
{ee 
stringff 
msgff "
=ff# $
Stringff% +
.ff+ ,
Formatff, 2
(ff2 3
formatff3 9
,ff9 :
argsff; ?
)ff? @
;ff@ A
Filegg 
.gg 
AppendAllTextgg *
(gg* +

_tracefilegg+ 5
,gg5 6
DateTimegg7 ?
.gg? @
Nowgg@ C
.ggC D
ToStringggD L
(ggL M
$strggM _
)gg_ `
+gga b
_prefixggc j
+ggk l
msgggm p
)ggp q
;ggq r
}hh 
catchii 
(ii 
	Exceptionii $
)ii$ %
{jj 
}kk 
}ll 
}mm 
}nn 	
publicss 
staticss 
voidss 
	WriteLiness $
(ss$ %
)ss% &
{tt 	
Traceuu 
.uu 
Writeuu 
(uu 
Systemuu 
.uu 
Environmentuu *
.uu* +
NewLineuu+ 2
)uu2 3
;uu3 4
}vv 	
public}} 
static}} 
void}} 
	WriteLine}} $
(}}$ %
string}}% +
format}}, 2
,}}2 3
params}}4 :
object}}; A
[}}A B
]}}B C
args}}D H
)}}H I
{~~ 	
Trace 
. 
Write 
( 
format 
+  
System! '
.' (
Environment( 3
.3 4
NewLine4 ;
,; <
args= A
)A B
;B C
}
 	
public
 
static
 
void
 
Clear
  
(
  !
)
! "
{
 	
if
 
(
 
	TraceFile
 
(
 
)
 
)
 
{
 
try
 
{
 
System
 
.
 
IO
 
.
 
File
 "
.
" #
Delete
# )
(
) *

_tracefile
* 4
)
4 5
;
5 6
}
 
catch
 
(
 
	Exception
  
)
  !
{
 
}
 
}
 
}
 	
}
 
} 6
4E:\GitHub\inguz-DSPUtil\InguzDSPUtilNew\Upsampler.cs¤%
4E:\GitHub\inguz-DSPUtil\InguzDSPUtilNew\WaveChunk.cs
	namespace 	
DSPUtil
 
{ 
public 

class 
WaveChunkFactory !
{		 
public

 
static

 
	WaveChunk

 
	ReadChunk

  )
(

) *
BinaryReader

* 6
rdr

7 :
,

: ;
bool

< @
	bigEndian

A J
)

J K
{ 	
	WaveChunk 
chunk 
= 
null "
;" #
string 
id 
= 
new 
string "
(" #
rdr# &
.& '
	ReadChars' 0
(0 1
$num1 2
)2 3
)3 4
;4 5
if 
( 
id 
. 
Length 
> 
$num 
) 
{ 
int 
	chunkSize 
= 
rdr  #
.# $
	ReadInt32$ -
(- .
). /
;/ 0
if 
( 
	bigEndian 
) 
	chunkSize 
= 
System  &
.& '
Net' *
.* +
	IPAddress+ 4
.4 5
NetworkToHostOrder5 G
(G H
	chunkSizeH Q
)Q R
;R S
switch 
( 
id 
) 
{ 
case 
$str 
:  
chunk 
= 
new  #
WaveFmtChunk$ 0
(0 1
	chunkSize1 :
): ;
;; <
break 
; 
default 
: 
chunk 
= 
new  #
	WaveChunk$ -
(- .
id. 0
,0 1
	chunkSize2 ;
); <
;< =
break 
; 
} 
} 
return 
chunk 
; 
} 	
}   
public%% 

class%% 
	WaveChunk%% 
{&& 
	protected'' 
string'' 
_id'' 
='' 
$str'' !
;''! "
	protected(( 
int(( 

_chunkSize((  
=((! "
$num((# $
;(($ %
	protected)) 
int)) 
_structSize)) !
=))" #
$num))$ %
;))% &
	protected** 
int** 
	_dataSize** 
;**  
public,, 
	WaveChunk,, 
(,, 
string,, 
id,,  "
,,," #
int,,$ '
	chunkSize,,( 1
),,1 2
{-- 	
_id.. 
=.. 
id.. 
;.. 

_chunkSize// 
=// 
	chunkSize// "
;//" #
}00 	
public11 
string11 
ID11 
{11 
get11 
{11  
return11! '
_id11( +
;11+ ,
}11- .
}11/ 0
public22 
virtual22 
int22 
DataSize22 #
{22$ %
get22& )
{22* +
return22, 2
	_dataSize223 <
;22< =
}22> ?
set22@ C
{22D E
	_dataSize22F O
=22P Q
value22R W
;22W X
}22Y Z
}22[ \
public33 
int33 
	TotalSize33 
{33 
get33 "
{33# $
return33% +
	_dataSize33, 5
+336 7
_structSize338 C
;33C D
}33E F
}33G H
public44 
virtual44 
void44 
Skip44  
(44  !
BinaryReader44! -
rdr44. 1
)441 2
{55 	
rdr66 
.66 
	ReadBytes66 
(66 

_chunkSize66 $
)66$ %
;66% &
}77 	
public88 
virtual88 
void88 
Write88 !
(88! "
BinaryWriter88" .
w88/ 0
)880 1
{99 	
}:: 	
};; 
class== 	
WaveFmtChunk==
 
:== 
	WaveChunk== "
{>> 
public?? 
WaveFmtChunk?? 
(?? 
int?? 
	chunkSize??  )
)??) *
:??+ ,
base??- 1
(??1 2
$str??2 8
,??8 9
	chunkSize??: C
)??C D
{@@ 	
}AA 	
publicCC 
overrideCC 
intCC 
DataSizeCC $
{DD 	
setEE 
{FF 
throwGG 
newGG %
InvalidOperationExceptionGG 3
(GG3 4
)GG4 5
;GG5 6
}HH 
}II 	
}JJ 
}MM ¤
5E:\GitHub\inguz-DSPUtil\InguzDSPUtilNew\WaveReader.cs
	namespace		 	
DSPUtil		
 
{

 
public 

enum 

WaveFormat 
{ 
ANY 
= 
$num 
, 
PCM 
= 
$num 
, 
ADPCM 
= 
$num 
, 

IEEE_FLOAT 
= 
$num 
, 

EXTENSIBLE 
= 
$num 
, 
INTERNAL_DOUBLE 
= 
$num 
} 
public 

enum 
SpeakerChannelMask "
{ 
none 
= 
$num 
, 
stereo 
= 
$num 
, 
itu51 
= 
$num 
, 

FRONT_LEFT 
= 
$num 
, 
FRONT_RIGHT 
= 
$num 
, 
FRONT_CENTER   
=   
$num   
,   
LOW_FREQUENCY!! 
=!! 
$num!! 
,!! 
	BACK_LEFT"" 
="" 
$num"" 
,"" 

BACK_RIGHT## 
=## 
$num## 
,##  
FRONT_LEFT_OF_CENTER$$ 
=$$ 
$num$$ #
,$$# $!
FRONT_RIGHT_OF_CENTER%% 
=%% 
$num%%  $
,%%$ %
BACK_CENTER&& 
=&& 
$num&& 
,&& 
	SIDE_LEFT'' 
='' 
$num'' 
,'' 

SIDE_RIGHT(( 
=(( 
$num(( 
,(( 

TOP_CENTER)) 
=)) 
$num)) 
,)) 
TOP_FRONT_LEFT** 
=** 
$num** 
,**  
TOP_FRONT_CENTER++ 
=++ 
$num++ !
,++! "
TOP_FRONT_RIGHT,, 
=,, 
$num,,  
,,,  !
TOP_BACK_LEFT-- 
=-- 
$num-- 
,-- 
TOP_BACK_CENTER.. 
=.. 
$num.. !
,..! "
TOP_BACK_RIGHT// 
=// 
$num//  
,//  !
}11 
public33 

class33 
WaveFormatEx33 
{44 
public55 
static55 
WaveFormatEx55 "
PCM55# &
=55' (
new55) ,
WaveFormatEx55- 9
(559 :
$str55: `
)55` a
;55a b
public66 
static66 
WaveFormatEx66 "

IEEE_FLOAT66# -
=66. /
new660 3
WaveFormatEx664 @
(66@ A
$str66A g
)66g h
;66h i
public77 
static77 
WaveFormatEx77 ""
AMBISONIC_B_FORMAT_PCM77# 9
=77: ;
new77< ?
WaveFormatEx77@ L
(77L M
$str77M s
)77s t
;77t u
public88 
static88 
WaveFormatEx88 ")
AMBISONIC_B_FORMAT_IEEE_FLOAT88# @
=88A B
new88C F
WaveFormatEx88G S
(88S T
$str88T z
)88z {
;88{ |
public99 
Guid99 
guid99 
;99 
public:: 
WaveFormatEx:: 
(:: 
Guid::  
g::! "
)::" #
{;; 	
guid<< 
=<< 
g<< 
;<< 
}== 	
public>> 
WaveFormatEx>> 
(>> 
byte>>  
[>>  !
]>>! "
g>># $
)>>$ %
{?? 	
guid@@ 
=@@ 
new@@ 
Guid@@ 
(@@ 
g@@ 
)@@ 
;@@ 
}AA 	
publicBB 
WaveFormatExBB 
(BB 
StringBB "
gBB# $
)BB$ %
{CC 	
guidDD 
=DD 
newDD 
GuidDD 
(DD 
gDD 
)DD 
;DD 
}EE 	
publicFF 
overrideFF 
boolFF 
EqualsFF #
(FF# $
objectFF$ *
objFF+ .
)FF. /
{GG 	
ifHH 
(HH 
objHH 
==HH 
nullHH 
||HH 
GetTypeHH &
(HH& '
)HH' (
!=HH) +
objHH, /
.HH/ 0
GetTypeHH0 7
(HH7 8
)HH8 9
)HH9 :
returnII 
falseII 
;II 
returnJJ 
(JJ 
(JJ 
(JJ 
WaveFormatExJJ "
)JJ" #
objJJ# &
)JJ& '
.JJ' (
guidJJ( ,
.JJ, -
EqualsJJ- 3
(JJ3 4
guidJJ4 8
)JJ8 9
)JJ9 :
;JJ: ;
}KK 	
publicLL 
overrideLL 
intLL 
GetHashCodeLL '
(LL' (
)LL( )
{MM 	
returnNN 
guidNN 
.NN 
GetHashCodeNN #
(NN# $
)NN$ %
;NN% &
}OO 	
publicPP 
overridePP 
stringPP 
ToStringPP '
(PP' (
)PP( )
{QQ 	
returnRR 
guidRR 
.RR 
ToStringRR  
(RR  !
)RR! "
;RR" #
}SS 	
}TT 
[XX 
SerializableXX 
]XX 
publicYY 

sealedYY 
classYY 

WaveReaderYY "
:YY# $
SoundObjYY% -
{ZZ 
private[[ 
bool[[ 
_ok[[ 
;[[ 
private\\ 

FileStream\\ 
fs\\ 
;\\ 
private]] 
BinaryReader]] 
_rdr]] !
;]]! "
private^^ 
Stream^^ 
bs^^ 
;^^ 
private`` 
string`` 
	_filename``  
;``  !
privateaa 
stringaa 
_riffaa 
;aa 
privatebb 
uintbb 
_lengthbb 
;bb 
privatecc 
stringcc 
_wavecc 
;cc 
privatedd 
stringdd 
_formatdd 
;dd 
privateff 
uintff 
_sizeff 
;ff 
privategg 

WaveFormatgg 
_audioFormatgg '
;gg' (
privatehh 
WaveFormatExhh 
	_formatExhh &
;hh& '
privateii 
uintii 
	_byteRateii 
;ii 
privatejj 
ushortjj 
_blockAlignjj "
;jj" #
privatekk 
ushortkk 
_bitsPerSamplekk %
;kk% &
privatell 
boolll 

_bigEndianll 
=ll  !
falsell" '
;ll' (
privatemm 
boolmm 
_isSPDIFmm 
=mm 
falsemm  %
;mm% &
privateoo 
stringoo 
_dataoo 
;oo 
privatepp 
uintpp 
	_dataSizepp 
;pp 
privateqq 
uintqq 
_channelMaskqq !
=qq" #
$numqq$ '
;qq' (
privatess 
longss 
_posss 
;ss 
privatett 
longtt 
_maxtt 
;tt 
privateuu 
longuu 
_seekposuu 
;uu 
privatevv 
ISamplevv 
_firstvv 
;vv 
privateww 
boolww 
_moreThanFirstww #
;ww# $
privatexx 
ISamplexx 
_currentxx  
;xx  !
private
 
const
 
double
 
_scale8
 $
=
% &
$num
' (
/
) *
$num
+ /
;
/ 0
private
 
const
 
double
 
_scale16
 %
=
& '
$num
( )
/
* +
$num
, 2
;
2 3
private
 
const
 
double
 
_scale24
 %
=
& '
$num
( )
/
* +
$num
, 4
;
4 5
private
 
const
 
double
 
_scale32
 %
=
& '
$num
( )
/
* +
$num
, 7
;
7 8
public
 

WaveReader
 
(
 
string
  
fileName
! )
)
) *
{
 	
OpenFile
 
(
 
fileName
 
)
 
;
 
ReadWaveHeader
 
(
 

WaveFormat
 %
.
% &
ANY
& )
,
) *
true
+ /
)
/ 0
;
0 1
	ReadSPDIF
 
(
 
)
 
;
 
}
 	
public
 

WaveReader
 
(
 
string
  
fileName
! )
,
) *
TimeSpan
+ 3
	startTime
4 =
)
= >
{
 	
OpenFile
 
(
 
fileName
 
)
 
;
 
ReadWaveHeader
 
(
 

WaveFormat
 %
.
% &
ANY
& )
,
) *
true
+ /
)
/ 0
;
0 1
	ReadSPDIF
 
(
 
)
 
;
 
SkipToStart
 
(
 
	startTime
 !
)
! "
;
" #
}
 	
public
 

WaveReader
 
(
 
string
  
fileName
! )
,
) *

WaveFormat
+ 5
format
6 <
)
< =
{
 	
OpenFile
 
(
 
fileName
 
)
 
;
 
_audioFormat
 
=
 
format
 !
;
! "
ReadWaveHeader
 
(
 
format
 !
,
! "
true
# '
)
' (
;
( )
	ReadSPDIF
 
(
 
)
 
;
 
}
 	
public
 

WaveReader
 
(
 
string
  
fileName
! )
,
) *

WaveFormat
+ 5
format
6 <
,
< =
ushort
> D
bitsPerSample
E R
,
R S
ushort
T Z
numChannels
[ f
)
f g
{
   	
OpenFile
¢¢ 
(
¢¢ 
fileName
¢¢ 
)
¢¢ 
;
¢¢ 
_audioFormat
££ 
=
££ 
format
££ !
;
££! "
ReadWaveHeader
¤¤ 
(
¤¤ 
format
¤¤ !
,
¤¤! "
false
¤¤# (
)
¤¤( )
;
¤¤) *
NumChannels
¥¥ 
=
¥¥ 
numChannels
¥¥ %
;
¥¥% &
_bitsPerSample
¦¦ 
=
¦¦ 
bitsPerSample
¦¦ *
;
¦¦* +
	ReadSPDIF
§§ 
(
§§ 
)
§§ 
;
§§ 
}
¨¨ 	
public
©© 

WaveReader
©© 
(
©© 
string
©©  
fileName
©©! )
,
©©) *

WaveFormat
©©+ 5
format
©©6 <
,
©©< =
ushort
©©> D
bitsPerSample
©©E R
,
©©R S
ushort
©©T Z
numChannels
©©[ f
,
©©f g
TimeSpan
©©h p
	startTime
©©q z
)
©©z {
{
ªª 	
OpenFile
¬¬ 
(
¬¬ 
fileName
¬¬ 
)
¬¬ 
;
¬¬ 
_audioFormat
­­ 
=
­­ 
format
­­ !
;
­­! "
ReadWaveHeader
®® 
(
®® 
format
®® !
,
®®! "
false
®®# (
)
®®( )
;
®®) *
NumChannels
¯¯ 
=
¯¯ 
numChannels
¯¯ %
;
¯¯% &
_bitsPerSample
°° 
=
°° 
bitsPerSample
°° *
;
°°* +
	ReadSPDIF
±± 
(
±± 
)
±± 
;
±± 
SkipToStart
²² 
(
²² 
	startTime
²² !
)
²²! "
;
²²" #
}
³³ 	
public
µµ 

WaveReader
µµ 
(
µµ 
Stream
µµ  
input
µµ! &
)
µµ& '
{
¶¶ 	
_rdr
¹¹ 
=
¹¹ 
new
¹¹ 
BinaryReader
¹¹ #
(
¹¹# $
input
¹¹$ )
)
¹¹) *
;
¹¹* +
ReadWaveHeader
ºº 
(
ºº 

WaveFormat
ºº %
.
ºº% &
ANY
ºº& )
,
ºº) *
true
ºº+ /
)
ºº/ 0
;
ºº0 1
	ReadSPDIF
»» 
(
»» 
)
»» 
;
»» 
}
¼¼ 	
public
½½ 

WaveReader
½½ 
(
½½ 
Stream
½½  
input
½½! &
,
½½& '

WaveFormat
½½( 2
format
½½3 9
)
½½9 :
{
¾¾ 	
_audioFormat
¿¿ 
=
¿¿ 
format
¿¿ !
;
¿¿! "
_rdr
ÂÂ 
=
ÂÂ 
new
ÂÂ 
BinaryReader
ÂÂ #
(
ÂÂ# $
input
ÂÂ$ )
)
ÂÂ) *
;
ÂÂ* +
ReadWaveHeader
ÃÃ 
(
ÃÃ 
format
ÃÃ !
,
ÃÃ! "
true
ÃÃ# '
)
ÃÃ' (
;
ÃÃ( )
	ReadSPDIF
ÄÄ 
(
ÄÄ 
)
ÄÄ 
;
ÄÄ 
}
ÅÅ 	
private
ÇÇ 
void
ÇÇ 
OpenFile
ÇÇ 
(
ÇÇ 
string
ÇÇ $
fileName
ÇÇ% -
)
ÇÇ- .
{
ÈÈ 	
	_filename
ÉÉ 
=
ÉÉ 
fileName
ÉÉ  
;
ÉÉ  !
if
ÊÊ 
(
ÊÊ 
fileName
ÊÊ 
==
ÊÊ 
null
ÊÊ  
||
ÊÊ! #
fileName
ÊÊ$ ,
==
ÊÊ, .
$str
ÊÊ. 1
)
ÊÊ1 2
{
ËË 
Stream
ÐÐ 
stdin
ÐÐ 
=
ÐÐ 
System
ÐÐ %
.
ÐÐ% &
Console
ÐÐ& -
.
ÐÐ- .
OpenStandardInput
ÐÐ. ?
(
ÐÐ? @
)
ÐÐ@ A
;
ÐÐA B
bs
ÑÑ 
=
ÑÑ 
new
ÑÑ 
BufferedStream
ÑÑ '
(
ÑÑ' (
stdin
ÑÑ( -
)
ÑÑ- .
;
ÑÑ. /
_rdr
ÒÒ 
=
ÒÒ 
new
ÒÒ 
BinaryReader
ÒÒ '
(
ÒÒ' (
bs
ÒÒ( *
)
ÒÒ* +
;
ÒÒ+ ,
}
ÓÓ 
else
ÔÔ 
if
ÔÔ 
(
ÔÔ 
File
ÔÔ 
.
ÔÔ 
Exists
ÔÔ  
(
ÔÔ  !
fileName
ÔÔ! )
)
ÔÔ) *
)
ÔÔ* +
{
ÕÕ 
fs
×× 
=
×× 
new
×× 

FileStream
×× #
(
××# $
fileName
××$ ,
,
××, -
FileMode
××. 6
.
××6 7
Open
××7 ;
,
××; <

FileAccess
××= G
.
××G H
Read
××H L
,
××L M
	FileShare
××N W
.
××W X
Read
××X \
,
××\ ]
$num
××^ c
,
××c d
true
××e i
)
××i j
;
××j k
bs
ØØ 
=
ØØ 
new
ØØ 
BufferedStream
ØØ '
(
ØØ' (
fs
ØØ( *
)
ØØ* +
;
ØØ+ ,
_rdr
ÙÙ 
=
ÙÙ 
new
ÙÙ 
BinaryReader
ÙÙ '
(
ÙÙ' (
bs
ÙÙ( *
)
ÙÙ* +
;
ÙÙ+ ,
}
ÚÚ 
else
ÛÛ 
{
ÜÜ 
throw
ÝÝ 
(
ÝÝ 
new
ÝÝ #
FileNotFoundException
ÝÝ 0
(
ÝÝ0 1
$str
ÝÝ1 8
+
ÝÝ9 :
fileName
ÝÝ; C
+
ÝÝD E
$str
ÝÝF R
)
ÝÝR S
)
ÝÝS T
;
ÝÝT U
}
ÞÞ 
}
ßß 	
private
ââ 
void
ââ 
ReadWaveHeader
ââ #
(
ââ# $

WaveFormat
ââ$ .
format
ââ/ 5
,
ââ5 6
bool
ââ7 ;
expectHeader
ââ< H
)
ââH I
{
ãã 	
_ok
ää 
=
ää 
false
ää 
;
ää 
_pos
åå 
=
åå 
$num
åå 
;
åå 
if
èè 
(
èè 
!
èè 
expectHeader
èè 
)
èè 
{
éé 
_riff
ëë 
=
ëë 
$str
ëë %
;
ëë% &
_length
ìì 
=
ìì 
$num
ìì 
;
ìì 
_wave
íí 
=
íí 
$str
íí %
;
íí% &
_format
îî 
=
îî 
$str
îî '
;
îî' (
_size
ïï 
=
ïï 
$num
ïï 
;
ïï 
_data
ðð 
=
ðð 
$str
ðð 
;
ðð 
	_dataSize
ññ 
=
ññ 
$num
ññ 
;
ññ 
_max
òò 
=
òò 
uint
òò 
.
òò 
MaxValue
òò $
;
òò$ %
_audioFormat
óó 
=
óó 
format
óó %
;
óó% &
NumChannels
öö 
=
öö 
$num
öö 
;
öö  

SampleRate
÷÷ 
=
÷÷ 
$num
÷÷ "
;
÷÷" #
if
ùù 
(
ùù 
format
ùù 
==
ùù 

WaveFormat
ùù (
.
ùù( )
PCM
ùù) ,
||
ùù- /
format
ùù0 6
==
ùù7 9

WaveFormat
ùù: D
.
ùùD E

EXTENSIBLE
ùùE O
)
ùùO P
{
úú 
_bitsPerSample
üü "
=
üü# $
$num
üü% '
;
üü' (
_ok
ýý 
=
ýý 
true
ýý 
;
ýý 
}
þþ 
else
ÿÿ 
if
ÿÿ 
(
ÿÿ 
format
ÿÿ 
==
ÿÿ  "

WaveFormat
ÿÿ# -
.
ÿÿ- .

IEEE_FLOAT
ÿÿ. 8
)
ÿÿ8 9
{
 
_bitsPerSample
 "
=
# $
$num
% '
;
' (
_ok
 
=
 
true
 
;
 
}
 
else
 
if
 
(
 
format
 
==
  "

WaveFormat
# -
.
- .
INTERNAL_DOUBLE
. =
)
= >
{
 
_bitsPerSample
 "
=
# $
$num
% '
;
' (
_ok
 
=
 
true
 
;
 
}
 
_blockAlign
 
=
 
(
 
ushort
 %
)
% &
(
& '
(
' (
NumChannels
( 3
*
4 5
_bitsPerSample
6 D
)
D E
>>
F H
$num
I J
)
J K
;
K L
	_byteRate
 
=
 
(
 
uint
 !
)
! "
(
" #
_blockAlign
# .
*
/ 0

SampleRate
1 ;
)
; <
;
< =
return
 
;
 
}
 
char
 
[
 
]
 
hdr
 
=
 
_rdr
 
.
 
	ReadChars
 '
(
' (
$num
( )
)
) *
;
* +
_riff
 
=
 
new
 
string
 
(
 
hdr
 "
)
" #
;
# $
if
 
(
 
_riff
 
!=
 
$str
 
&&
  "
_riff
# (
!=
) +
$str
, 2
)
2 3
{
 
if
 
(
 
hdr
 
.
 
Length
 
==
 !
$num
" #
)
# $
{
 
throw
 
(
 
new
 
	Exception
 (
(
( )
$str
) K
)
K L
)
L M
;
M N
}
 
string
 
x
 
=
 
$str
 
;
 
for
 
(
 
int
 
j
 
=
 
$num
 
;
 
j
  !
<
" #
hdr
$ '
.
' (
Length
( .
;
. /
j
0 1
++
1 3
)
3 4
{
 
x
 
+=
 
String
 
.
  
Format
  &
(
& '
$str
' /
,
/ 0
(
1 2
int
2 5
)
5 6
hdr
6 9
[
9 :
j
: ;
]
; <
)
< =
;
= >
}
   
throw
¡¡ 
(
¡¡ 
new
¡¡ 
	Exception
¡¡ $
(
¡¡$ %
String
¡¡% +
.
¡¡+ ,
Format
¡¡, 2
(
¡¡2 3
$str
¡¡3 i
,
¡¡i j
x
¡¡k l
)
¡¡l m
)
¡¡m n
)
¡¡n o
;
¡¡o p
}
¢¢ 
int
¥¥ 
fileLen
¥¥ 
=
¥¥ 
_rdr
¥¥ 
.
¥¥ 
	ReadInt32
¥¥ (
(
¥¥( )
)
¥¥) *
;
¥¥* +
_length
¦¦ 
=
¦¦ 
(
¦¦ 
uint
¦¦ 
)
¦¦ 
fileLen
¦¦ #
;
¦¦# $
_wave
ªª 
=
ªª 
new
ªª 
string
ªª 
(
ªª 
_rdr
ªª #
.
ªª# $
	ReadChars
ªª$ -
(
ªª- .
$num
ªª. /
)
ªª/ 0
)
ªª0 1
;
ªª1 2
if
«« 
(
«« 
_wave
«« 
!=
«« 
$str
«« 
&&
««  "
_wave
««# (
!=
««) +
$str
««, 2
)
««2 3
throw
¬¬ 
(
¬¬ 
new
¬¬ 
	Exception
¬¬ $
(
¬¬$ %
String
¬¬% +
.
¬¬+ ,
Format
¬¬, 2
(
¬¬2 3
$str
¬¬3 f
,
¬¬f g
_wave
¬¬h m
)
¬¬m n
)
¬¬n o
)
¬¬o p
;
¬¬p q
if
­­ 
(
­­ 
_wave
­­ 
==
­­ 
$str
­­ 
)
­­  
{
®® 
	BigEndian
°° 
=
°° 
true
°°  
;
°°  !
_length
±± 
=
±± 
(
±± 
uint
±± 
)
±±  
System
±±  &
.
±±& '
Net
±±' *
.
±±* +
	IPAddress
±±+ 4
.
±±4 5 
NetworkToHostOrder
±±5 G
(
±±G H
fileLen
±±H O
)
±±O P
;
±±P Q
}
²² 
_format
µµ 
=
µµ 
new
µµ 
string
µµ  
(
µµ  !
_rdr
µµ! %
.
µµ% &
	ReadChars
µµ& /
(
µµ/ 0
$num
µµ0 1
)
µµ1 2
)
µµ2 3
;
µµ3 4
while
ºº 
(
ºº 
_format
ºº 
.
ºº 
Length
ºº !
>
ºº" #
$num
ºº$ %
&&
ºº& (
_format
ºº) 0
!=
ºº1 3
$str
ºº4 :
&&
ºº; =
_format
ºº> E
!=
ººF H
$str
ººI O
)
ººO P
{
»» 
int
¼¼ 
	chunkSize
¼¼ 
=
¼¼ 
_rdr
¼¼  $
.
¼¼$ %
	ReadInt32
¼¼% .
(
¼¼. /
)
¼¼/ 0
;
¼¼0 1
if
½½ 
(
½½ 
	BigEndian
½½ 
)
½½ 
	chunkSize
¾¾ 
=
¾¾ 
System
¾¾  &
.
¾¾& '
Net
¾¾' *
.
¾¾* +
	IPAddress
¾¾+ 4
.
¾¾4 5 
NetworkToHostOrder
¾¾5 G
(
¾¾G H
	chunkSize
¾¾H Q
)
¾¾Q R
;
¾¾R S
Trace
¿¿ 
.
¿¿ 
	WriteLine
¿¿ 
(
¿¿  
$str
¿¿  :
,
¿¿: ;
_format
¿¿< C
,
¿¿C D
	chunkSize
¿¿E N
)
¿¿N O
;
¿¿O P
_rdr
ÀÀ 
.
ÀÀ 
	ReadBytes
ÀÀ 
(
ÀÀ 
	chunkSize
ÀÀ (
)
ÀÀ( )
;
ÀÀ) *
_format
ÁÁ 
=
ÁÁ 
new
ÁÁ 
string
ÁÁ $
(
ÁÁ$ %
_rdr
ÁÁ% )
.
ÁÁ) *
	ReadChars
ÁÁ* 3
(
ÁÁ3 4
$num
ÁÁ4 5
)
ÁÁ5 6
)
ÁÁ6 7
;
ÁÁ7 8
}
ÂÂ 
if
ÄÄ 
(
ÄÄ 
_format
ÄÄ 
==
ÄÄ 
$str
ÄÄ !
)
ÄÄ! "
{
ÅÅ 
_size
ÇÇ 
=
ÇÇ 
_rdr
ÇÇ 
.
ÇÇ 

ReadUInt32
ÇÇ '
(
ÇÇ' (
)
ÇÇ( )
;
ÇÇ) *
if
ÈÈ 
(
ÈÈ 
_size
ÈÈ 
<
ÈÈ 
$num
ÈÈ 
)
ÈÈ 
throw
ÉÉ 
(
ÉÉ 
new
ÉÉ 
	Exception
ÉÉ (
(
ÉÉ( )
$str
ÉÉ) e
+
ÉÉf g
_size
ÉÉh m
)
ÉÉm n
)
ÉÉn o
;
ÉÉo p
_audioFormat
ËË 
=
ËË 
(
ËË  

WaveFormat
ËË  *
)
ËË* +
_rdr
ËË+ /
.
ËË/ 0

ReadUInt16
ËË0 :
(
ËË: ;
)
ËË; <
;
ËË< =
if
ÍÍ 
(
ÍÍ 
_audioFormat
ÍÍ  
==
ÍÍ! #

WaveFormat
ÍÍ$ .
.
ÍÍ. /
PCM
ÍÍ/ 2
||
ÍÍ3 5
_audioFormat
ÎÎ  
==
ÎÎ! #

WaveFormat
ÎÎ$ .
.
ÎÎ. /
ADPCM
ÎÎ/ 4
||
ÎÎ5 7
_audioFormat
ÏÏ  
==
ÏÏ! #

WaveFormat
ÏÏ$ .
.
ÏÏ. /

IEEE_FLOAT
ÏÏ/ 9
||
ÏÏ: <
_audioFormat
ÐÐ  
==
ÐÐ! #

WaveFormat
ÐÐ$ .
.
ÐÐ. /
INTERNAL_DOUBLE
ÐÐ/ >
||
ÐÐ? A
_audioFormat
ÑÑ  
==
ÑÑ! #

WaveFormat
ÑÑ$ .
.
ÑÑ. /

EXTENSIBLE
ÑÑ/ 9
)
ÑÑ9 :
{
ÒÒ 
NumChannels
ÔÔ 
=
ÔÔ  !
_rdr
ÔÔ" &
.
ÔÔ& '

ReadUInt16
ÔÔ' 1
(
ÔÔ1 2
)
ÔÔ2 3
;
ÔÔ3 4

SampleRate
ÕÕ 
=
ÕÕ  
_rdr
ÕÕ! %
.
ÕÕ% &

ReadUInt32
ÕÕ& 0
(
ÕÕ0 1
)
ÕÕ1 2
;
ÕÕ2 3
	_byteRate
ÖÖ 
=
ÖÖ 
_rdr
ÖÖ  $
.
ÖÖ$ %

ReadUInt32
ÖÖ% /
(
ÖÖ/ 0
)
ÖÖ0 1
;
ÖÖ1 2
_blockAlign
×× 
=
××  !
_rdr
××" &
.
××& '

ReadUInt16
××' 1
(
××1 2
)
××2 3
;
××3 4
_bitsPerSample
ØØ "
=
ØØ# $
_rdr
ØØ% )
.
ØØ) *

ReadUInt16
ØØ* 4
(
ØØ4 5
)
ØØ5 6
;
ØØ6 7
if
ÙÙ 
(
ÙÙ 
_size
ÙÙ 
>
ÙÙ 
$num
ÙÙ  "
)
ÙÙ" #
{
ÚÚ 
uint
ÛÛ 
skip
ÛÛ !
=
ÛÛ" #
$num
ÛÛ$ &
;
ÛÛ& '
if
ÜÜ 
(
ÜÜ 
_audioFormat
ÜÜ (
==
ÜÜ) +

WaveFormat
ÜÜ, 6
.
ÜÜ6 7

EXTENSIBLE
ÜÜ7 A
)
ÜÜA B
{
ÝÝ 
UInt16
ÞÞ "
kip
ÞÞ# &
=
ÞÞ' (
_rdr
ÞÞ) -
.
ÞÞ- .

ReadUInt16
ÞÞ. 8
(
ÞÞ8 9
)
ÞÞ9 :
;
ÞÞ: ;
UInt16
ßß "
union
ßß# (
=
ßß) *
_rdr
ßß+ /
.
ßß/ 0

ReadUInt16
ßß0 :
(
ßß: ;
)
ßß; <
;
ßß< =
_channelMask
àà (
=
àà) *
_rdr
àà+ /
.
àà/ 0

ReadUInt32
àà0 :
(
àà: ;
)
àà; <
;
àà< =
	_formatEx
ââ %
=
ââ& '
new
ââ( +
WaveFormatEx
ââ, 8
(
ââ8 9
_rdr
ââ9 =
.
ââ= >
	ReadBytes
ââ> G
(
ââG H
$num
ââH J
)
ââJ K
)
ââK L
;
ââL M
skip
ãã  
=
ãã! "
$num
ãã# %
;
ãã% &
if
ää 
(
ää  
	_formatEx
ää  )
.
ää) *
Equals
ää* 0
(
ää0 1
WaveFormatEx
ää1 =
.
ää= >
PCM
ää> A
)
ääA B
||
ääC E
	_formatEx
ääF O
.
ääO P
Equals
ääP V
(
ääV W
WaveFormatEx
ääW c
.
ääc d$
AMBISONIC_B_FORMAT_PCM
ääd z
)
ääz {
)
ää{ |
{
åå 
_audioFormat
ææ  ,
=
ææ- .

WaveFormat
ææ/ 9
.
ææ9 :
PCM
ææ: =
;
ææ= >
}
çç 
else
èè  
if
èè! #
(
èè$ %
	_formatEx
èè% .
.
èè. /
Equals
èè/ 5
(
èè5 6
WaveFormatEx
èè6 B
.
èèB C

IEEE_FLOAT
èèC M
)
èèM N
||
èèO Q
	_formatEx
èèR [
.
èè[ \
Equals
èè\ b
(
èèb c
WaveFormatEx
èèc o
.
èèo p,
AMBISONIC_B_FORMAT_IEEE_FLOATèèp 
)èè 
)èè 
{
éé 
_audioFormat
êê  ,
=
êê- .

WaveFormat
êê/ 9
.
êê9 :

IEEE_FLOAT
êê: D
;
êêD E
}
ëë 
}
ìì 
_rdr
îî 
.
îî 
	ReadBytes
îî &
(
îî& '
(
îî' (
int
îî( +
)
îî+ ,
(
îî, -
_size
îî- 2
-
îî3 4
skip
îî5 9
)
îî9 :
)
îî: ;
;
îî; <
}
ïï 
}
ðð 
else
ññ 
{
òò 
throw
óó 
(
óó 
new
óó 
	Exception
óó (
(
óó( )
$str
óó) g
+
óóh i
_audioFormat
óój v
)
óóv w
)
óów x
;
óóx y
}
ôô 
}
õõ 
else
öö 
if
öö 
(
öö 
_format
öö 
==
öö 
$str
öö  &
)
öö& '
{
÷÷ 
_size
ùù 
=
ùù 
(
ùù 
uint
ùù 
)
ùù 
System
ùù $
.
ùù$ %
Net
ùù% (
.
ùù( )
	IPAddress
ùù) 2
.
ùù2 3 
NetworkToHostOrder
ùù3 E
(
ùùE F
_rdr
ùùF J
.
ùùJ K
	ReadInt32
ùùK T
(
ùùT U
)
ùùU V
)
ùùV W
;
ùùW X
if
úú 
(
úú 
_size
úú 
<
úú 
$num
úú 
)
úú 
throw
ûû 
(
ûû 
new
ûû 
	Exception
ûû (
(
ûû( )
$str
ûû) f
+
ûûg h
_size
ûûi n
)
ûûn o
)
ûûo p
;
ûûp q
_audioFormat
ýý 
=
ýý 

WaveFormat
ýý )
.
ýý) *
PCM
ýý* -
;
ýý- .
NumChannels
þþ 
=
þþ 
(
þþ 
ushort
þþ %
)
þþ% &
System
þþ& ,
.
þþ, -
Net
þþ- 0
.
þþ0 1
	IPAddress
þþ1 :
.
þþ: ; 
NetworkToHostOrder
þþ; M
(
þþM N
_rdr
þþN R
.
þþR S
	ReadInt16
þþS \
(
þþ\ ]
)
þþ] ^
)
þþ^ _
;
þþ_ `
uint
ÿÿ 
	numFrames
ÿÿ 
=
ÿÿ  
(
ÿÿ! "
uint
ÿÿ" &
)
ÿÿ& '
System
ÿÿ' -
.
ÿÿ- .
Net
ÿÿ. 1
.
ÿÿ1 2
	IPAddress
ÿÿ2 ;
.
ÿÿ; < 
NetworkToHostOrder
ÿÿ< N
(
ÿÿN O
_rdr
ÿÿO S
.
ÿÿS T
	ReadInt32
ÿÿT ]
(
ÿÿ] ^
)
ÿÿ^ _
)
ÿÿ_ `
;
ÿÿ` a
_bitsPerSample
 
=
  
(
! "
ushort
" (
)
( )
System
) /
.
/ 0
Net
0 3
.
3 4
	IPAddress
4 =
.
= > 
NetworkToHostOrder
> P
(
P Q
_rdr
Q U
.
U V
	ReadInt16
V _
(
_ `
)
` a
)
a b
;
b c
byte
 
[
 
]
 
ext
 
=
 
_rdr
 !
.
! "
	ReadBytes
" +
(
+ ,
$num
, .
)
. /
;
/ 0
if
 
(
 
ext
 
[
 
$num
 
]
 
==
 
$num
  
&&
! #
ext
$ '
[
' (
$num
( )
]
) *
==
+ -
$num
. 0
&&
1 3
ext
4 7
[
7 8
$num
8 9
]
9 :
==
; =
$num
> A
&&
B D
ext
E H
[
H I
$num
I J
]
J K
==
L N
$num
O Q
)
Q R
{
 

SampleRate
 
=
  
$num
! &
;
& '
}
 
else
 
if
 
(
 
ext
 
[
 
$num
 
]
 
==
  "
$num
# %
&&
& (
ext
) ,
[
, -
$num
- .
]
. /
==
0 2
$num
3 5
&&
6 8
ext
9 <
[
< =
$num
= >
]
> ?
==
@ B
$num
C F
&&
G I
ext
J M
[
M N
$num
N O
]
O P
==
Q S
$num
T W
)
W X
{
 

SampleRate
 
=
  
$num
! &
;
& '
}
 
else
 
if
 
(
 
ext
 
[
 
$num
 
]
 
==
  "
$num
# %
&&
& (
ext
) ,
[
, -
$num
- .
]
. /
==
0 2
$num
3 5
&&
6 8
ext
9 <
[
< =
$num
= >
]
> ?
==
@ B
$num
C F
&&
G I
ext
J M
[
M N
$num
N O
]
O P
==
Q S
$num
T W
)
W X
{
 

SampleRate
 
=
  
$num
! &
;
& '
}
 
else
 
{
 
throw
 
(
 
new
 
	Exception
 (
(
( )
$str
) k
)
k l
)
l m
;
m n
}
 
_blockAlign
 
=
 
(
 
ushort
 %
)
% &
(
& '
(
' (
NumChannels
( 3
*
4 5
_bitsPerSample
6 D
)
D E
/
F G
$num
H I
)
I J
;
J K
	_byteRate
 
=
 
(
 
uint
 !
)
! "
(
" #
_blockAlign
# .
*
/ 0

SampleRate
1 ;
)
; <
;
< =
if
 
(
 
_size
 
>
 
$num
 
)
 
{
 
_rdr
 
.
 
	ReadBytes
 "
(
" #
(
# $
int
$ '
)
' (
(
( )
_size
) .
-
/ 0
$num
1 3
)
3 4
)
4 5
;
5 6
}
 
}
 
else
 
{
   
throw
¡¡ 
(
¡¡ 
new
¡¡ 
	Exception
¡¡ $
(
¡¡$ %
String
¡¡% +
.
¡¡+ ,
Format
¡¡, 2
(
¡¡2 3
$str
¡¡3 l
,
¡¡l m
_format
¡¡n u
)
¡¡u v
)
¡¡v w
)
¡¡w x
;
¡¡x y
}
¢¢ 
_data
§§ 
=
§§ 
new
§§ 
string
§§ 
(
§§ 
_rdr
§§ #
.
§§# $
	ReadChars
§§$ -
(
§§- .
$num
§§. /
)
§§/ 0
)
§§0 1
;
§§1 2
while
¨¨ 
(
¨¨ 
_data
¨¨ 
.
¨¨ 
Length
¨¨ 
>
¨¨  !
$num
¨¨" #
&&
¨¨$ &
_data
¨¨' ,
!=
¨¨- /
$str
¨¨0 6
&&
¨¨7 9
_data
¨¨: ?
!=
¨¨@ B
$str
¨¨C I
)
¨¨I J
{
©© 
int
«« 
miscSize
«« 
=
«« 
_rdr
«« #
.
««# $
	ReadInt32
««$ -
(
««- .
)
««. /
;
««/ 0
if
¬¬ 
(
¬¬ 
	BigEndian
¬¬ 
)
¬¬ 
miscSize
­­ 
=
­­ 
System
­­ %
.
­­% &
Net
­­& )
.
­­) *
	IPAddress
­­* 3
.
­­3 4 
NetworkToHostOrder
­­4 F
(
­­F G
miscSize
­­G O
)
­­O P
;
­­P Q
_rdr
®® 
.
®® 
	ReadBytes
®® 
(
®® 
miscSize
®® '
)
®®' (
;
®®( )
_data
¯¯ 
=
¯¯ 
new
¯¯ 
string
¯¯ "
(
¯¯" #
_rdr
¯¯# '
.
¯¯' (
	ReadChars
¯¯( 1
(
¯¯1 2
$num
¯¯2 3
)
¯¯3 4
)
¯¯4 5
;
¯¯5 6
}
°° 
if
³³ 
(
³³ 
	BigEndian
³³ 
)
³³ 
{
´´ 
	_dataSize
µµ 
=
µµ 
(
µµ 
uint
µµ !
)
µµ! "
System
µµ" (
.
µµ( )
Net
µµ) ,
.
µµ, -
	IPAddress
µµ- 6
.
µµ6 7 
NetworkToHostOrder
µµ7 I
(
µµI J
_rdr
µµJ N
.
µµN O
	ReadInt32
µµO X
(
µµX Y
)
µµY Z
)
µµZ [
;
µµ[ \
}
¶¶ 
else
·· 
{
¸¸ 
	_dataSize
¹¹ 
=
¹¹ 
_rdr
¹¹  
.
¹¹  !

ReadUInt32
¹¹! +
(
¹¹+ ,
)
¹¹, -
;
¹¹- .
}
ºº 
if
½½ 
(
½½ 
NumChannels
½½ 
>
½½ 
$num
½½ 
)
½½  
{
¾¾ 
switch
¿¿ 
(
¿¿ 
_audioFormat
¿¿ $
)
¿¿$ %
{
ÀÀ 
case
ÁÁ 

WaveFormat
ÁÁ #
.
ÁÁ# $
PCM
ÁÁ$ '
:
ÁÁ' (
case
ÂÂ 

WaveFormat
ÂÂ #
.
ÂÂ# $

EXTENSIBLE
ÂÂ$ .
:
ÂÂ. /
switch
ÃÃ 
(
ÃÃ  
_bitsPerSample
ÃÃ  .
)
ÃÃ. /
{
ÄÄ 
case
ÅÅ  
$num
ÅÅ! "
:
ÅÅ" #
case
ÆÆ  
$num
ÆÆ! #
:
ÆÆ# $
case
ÇÇ  
$num
ÇÇ! #
:
ÇÇ# $
case
ÈÈ  
$num
ÈÈ! #
:
ÈÈ# $
_ok
ÉÉ  #
=
ÉÉ$ %
true
ÉÉ& *
;
ÉÉ* +
break
ÊÊ  %
;
ÊÊ% &
default
ËË #
:
ËË# $
break
ÌÌ  %
;
ÌÌ% &
}
ÍÍ 
break
ÎÎ 
;
ÎÎ 
case
ÏÏ 

WaveFormat
ÏÏ #
.
ÏÏ# $

IEEE_FLOAT
ÏÏ$ .
:
ÏÏ. /
switch
ÐÐ 
(
ÐÐ  
_bitsPerSample
ÐÐ  .
)
ÐÐ. /
{
ÑÑ 
case
ÒÒ  
$num
ÒÒ! #
:
ÒÒ# $
case
ÓÓ  
$num
ÓÓ! #
:
ÓÓ# $
_ok
ÔÔ  #
=
ÔÔ$ %
true
ÔÔ& *
;
ÔÔ* +
break
ÕÕ  %
;
ÕÕ% &
}
ÖÖ 
break
×× 
;
×× 
case
ØØ 

WaveFormat
ØØ #
.
ØØ# $
INTERNAL_DOUBLE
ØØ$ 3
:
ØØ3 4
switch
ÙÙ 
(
ÙÙ  
_bitsPerSample
ÙÙ  .
)
ÙÙ. /
{
ÚÚ 
case
ÛÛ  
$num
ÛÛ! #
:
ÛÛ# $
_ok
ÜÜ  #
=
ÜÜ$ %
true
ÜÜ& *
;
ÜÜ* +
break
ÝÝ  %
;
ÝÝ% &
}
ÞÞ 
break
ßß 
;
ßß 
default
àà 
:
àà 
break
áá 
;
áá 
}
ââ 
}
ãã 
if
ää 
(
ää 
_ok
ää 
)
ää 
{
åå 
_max
ææ 
=
ææ 
(
ææ 
uint
ææ 
)
ææ 
(
ææ 
(
ææ 
	_dataSize
ææ (
/
ææ) *
(
ææ+ ,
_bitsPerSample
ææ, :
/
ææ; <
$num
ææ= >
)
ææ> ?
)
ææ? @
/
ææA B
NumChannels
ææC N
)
ææN O
;
ææO P
if
çç 
(
çç 
	_dataSize
çç 
==
çç 
$num
çç )
)
çç) *
{
èè 
Trace
éé 
.
éé 
	WriteLine
éé #
(
éé# $
$str
éé$ I
)
ééI J
;
ééJ K
_max
êê 
=
êê 
uint
êê 
.
êê  
MaxValue
êê  (
;
êê( )
}
ëë 
if
ìì 
(
ìì 
_max
ìì 
==
ìì 
$num
ìì 
)
ìì 
{
íí 
Trace
îî 
.
îî 
	WriteLine
îî #
(
îî# $
$str
îî$ F
)
îîF G
;
îîG H
_max
ïï 
=
ïï 
uint
ïï 
.
ïï  
MaxValue
ïï  (
;
ïï( )
}
ðð 
}
ññ 
}
òò 	
private
ôô 
void
ôô 
	ReadSPDIF
ôô 
(
ôô 
)
ôô  
{
õõ 	
if
öö 
(
öö 
_ok
öö 
)
öö 
{
÷÷ 
byte
øø 
[
øø 
]
øø 
spdif
øø 
=
øø 
{
øø  
$num
øø! %
,
øø% &
$num
øø' +
,
øø+ ,
$num
øø- 1
,
øø1 2
$num
øø3 7
}
øø8 9
;
øø9 :
if
ùù 
(
ùù 
_rdr
ùù 
.
ùù 

BaseStream
ùù #
.
ùù# $
CanSeek
ùù$ +
)
ùù+ ,
{
úú 
_seekpos
ûû 
=
ûû 
_rdr
ûû #
.
ûû# $

BaseStream
ûû$ .
.
ûû. /
Position
ûû/ 7
;
ûû7 8
}
üü 
int
 
nFirst
 
=
 
(
 
_nc
 !
*
" #
_bitsPerSample
$ 2
/
3 4
$num
5 6
)
6 7
;
7 8
byte
 
[
 
]
 

firstBytes
 !
=
" #
_rdr
$ (
.
( )
	ReadBytes
) 2
(
2 3
nFirst
3 9
)
9 :
;
: ;
MemoryStream
 
ms
 
=
  !
new
" %
MemoryStream
& 2
(
2 3

firstBytes
3 =
)
= >
;
> ?
BinaryReader
 
mr
 
=
  !
new
" %
BinaryReader
& 2
(
2 3
ms
3 5
)
5 6
;
6 7
_first
 
=
 
Next
 
(
 
mr
  
,
  !
out
" %
_moreThanFirst
& 4
)
4 5
;
5 6
if
 
(
 

firstBytes
 
.
 
Length
 %
>=
& (
nFirst
) /
)
/ 0
{
 
_isSPDIF
 
=
 
true
 #
;
# $
for
 
(
 
int
 
b
 
=
  
$num
! "
;
" #
_isSPDIF
$ ,
&&
- /
b
0 1
<
2 3
spdif
4 9
.
9 :
Length
: @
&&
A C
b
D E
<
F G
nFirst
H N
;
N O
b
P Q
++
Q S
)
S T
{
 
_isSPDIF
  
&=
! #
(
$ %
spdif
% *
[
* +
b
+ ,
]
, -
==
. 0

firstBytes
1 ;
[
; <
b
< =
]
= >
)
> ?
;
? @
}
 
}
 
}
 
}
 	
private
 
void
 
SkipToStart
  
(
  !
TimeSpan
! )
ts
* ,
)
, -
{
 	
if
 
(
 
_ok
 
)
 
{
 
long
 
pos
 
=
 
(
 
long
  
)
  !
(
! "
ts
" $
.
$ %
TotalSeconds
% 1
*
2 3
_sr
4 7
)
7 8
;
8 9
if
 
(
 
pos
 
>
 
$num
 
)
 
{
 
if
 
(
 
_rdr
 
.
 

BaseStream
 '
.
' (
CanSeek
( /
)
/ 0
{
 
Trace
 
.
 
	WriteLine
 '
(
' (
$str
( G
,
G H
ts
I K
,
K L
pos
M P
)
P Q
;
Q R
_rdr
   
.
   

BaseStream
   '
.
  ' (
Seek
  ( ,
(
  , -
_seekpos
  - 5
+
  6 7
(
  8 9
pos
  9 <
*
  = >
_nc
  ? B
*
  C D
(
  E F
_bitsPerSample
  F T
/
  U V
$num
  W X
)
  X Y
)
  Y Z
,
  Z [

SeekOrigin
  \ f
.
  f g
Begin
  g l
)
  l m
;
  m n
_seekpos
££  
=
££! "
_rdr
££# '
.
££' (

BaseStream
££( 2
.
££2 3
Position
££3 ;
;
££; <
int
¦¦ 
nFirst
¦¦ "
=
¦¦# $
(
¦¦% &
_nc
¦¦& )
*
¦¦* +
_bitsPerSample
¦¦, :
/
¦¦; <
$num
¦¦= >
)
¦¦> ?
;
¦¦? @
byte
§§ 
[
§§ 
]
§§ 

firstBytes
§§ )
=
§§* +
_rdr
§§, 0
.
§§0 1
	ReadBytes
§§1 :
(
§§: ;
nFirst
§§; A
)
§§A B
;
§§B C
MemoryStream
¨¨ $
ms
¨¨% '
=
¨¨( )
new
¨¨* -
MemoryStream
¨¨. :
(
¨¨: ;

firstBytes
¨¨; E
)
¨¨E F
;
¨¨F G
BinaryReader
©© $
mr
©©% '
=
©©( )
new
©©* -
BinaryReader
©©. :
(
©©: ;
ms
©©; =
)
©©= >
;
©©> ?
_first
ªª 
=
ªª  
Next
ªª! %
(
ªª% &
mr
ªª& (
,
ªª( )
out
ªª* -
_moreThanFirst
ªª. <
)
ªª< =
;
ªª= >
}
«« 
else
¬¬ 
{
­­ 
}
°° 
}
±± 
}
²² 
}
³³ 	
private
ÀÀ 
void
ÀÀ 
Seek
ÀÀ 
(
ÀÀ 
long
ÀÀ 
pos
ÀÀ "
)
ÀÀ" #
{
ÁÁ 	
if
ÂÂ 
(
ÂÂ 
_pos
ÂÂ 
!=
ÂÂ 
pos
ÂÂ 
)
ÂÂ 
{
ÃÃ 
if
ÄÄ 
(
ÄÄ 
!
ÄÄ 
_rdr
ÄÄ 
.
ÄÄ 

BaseStream
ÄÄ $
.
ÄÄ$ %
CanSeek
ÄÄ% ,
)
ÄÄ, -
{
ÅÅ 
string
ÆÆ 
msg
ÆÆ 
=
ÆÆ  
String
ÆÆ! '
.
ÆÆ' (
Format
ÆÆ( .
(
ÆÆ. /
$str
ÆÆ/ c
,
ÆÆc d
_pos
ÆÆe i
,
ÆÆi j
pos
ÆÆk n
)
ÆÆn o
;
ÆÆo p
throw
ÇÇ 
new
ÇÇ #
NotSupportedException
ÇÇ 3
(
ÇÇ3 4
msg
ÇÇ4 7
)
ÇÇ7 8
;
ÇÇ8 9
}
ÈÈ 
_rdr
ÉÉ 
.
ÉÉ 

BaseStream
ÉÉ 
.
ÉÉ  
Seek
ÉÉ  $
(
ÉÉ$ %
_seekpos
ÉÉ% -
+
ÉÉ. /
(
ÉÉ0 1
pos
ÉÉ1 4
*
ÉÉ5 6
_nc
ÉÉ7 :
*
ÉÉ; <
(
ÉÉ= >
_bitsPerSample
ÉÉ> L
/
ÉÉM N
$num
ÉÉO P
)
ÉÉP Q
)
ÉÉQ R
,
ÉÉR S

SeekOrigin
ÉÉT ^
.
ÉÉ^ _
Begin
ÉÉ_ d
)
ÉÉd e
;
ÉÉe f
_pos
ÊÊ 
=
ÊÊ 
pos
ÊÊ 
;
ÊÊ 
}
ËË 
}
ÌÌ 	
private
ÎÎ 
double
ÎÎ 

NextDouble
ÎÎ !
(
ÎÎ! "
BinaryReader
ÎÎ" .
rdr
ÎÎ/ 2
)
ÎÎ2 3
{
ÏÏ 	
double
ÐÐ 
val
ÐÐ 
=
ÐÐ 
$num
ÐÐ 
;
ÐÐ 
if
ÑÑ 
(
ÑÑ 

_bigEndian
ÑÑ 
)
ÑÑ 
{
ÒÒ 
if
ÔÔ 
(
ÔÔ 
_bitsPerSample
ÔÔ "
==
ÔÔ# %
$num
ÔÔ& (
)
ÔÔ( )
{
ÕÕ 
short
ÖÖ 
beword
ÖÖ  
=
ÖÖ! "
rdr
ÖÖ# &
.
ÖÖ& '
	ReadInt16
ÖÖ' 0
(
ÖÖ0 1
)
ÖÖ1 2
;
ÖÖ2 3
beword
×× 
=
×× 
System
×× #
.
××# $
Net
××$ '
.
××' (
	IPAddress
××( 1
.
××1 2 
NetworkToHostOrder
××2 D
(
××D E
beword
××E K
)
××K L
;
××L M
val
ØØ 
=
ØØ 
(
ØØ 
(
ØØ 
double
ØØ "
)
ØØ" #
beword
ØØ# )
*
ØØ* +
_scale16
ØØ, 4
)
ØØ4 5
;
ØØ5 6
}
ÙÙ 
}
ÚÚ 
else
ÛÛ 
{
ÜÜ 
switch
ÝÝ 
(
ÝÝ 
_bitsPerSample
ÝÝ &
)
ÝÝ& '
{
ÞÞ 
case
ßß 
$num
ßß 
:
ßß 
val
àà 
=
àà 
(
àà 
(
àà  
double
àà  &
)
àà& '
rdr
àà' *
.
àà* +
	ReadInt16
àà+ 4
(
àà4 5
)
àà5 6
*
àà7 8
_scale16
àà9 A
)
ààA B
;
ààB C
break
áá 
;
áá 
case
ââ 
$num
ââ 
:
ââ 
val
ãã 
=
ãã 
(
ãã 
(
ãã  
double
ãã  &
)
ãã& '
rdr
ãã' *
.
ãã* +
ReadByte
ãã+ 3
(
ãã3 4
)
ãã4 5
-
ãã6 7
$num
ãã8 ;
)
ãã; <
*
ãã= >
_scale8
ãã? F
;
ããF G
break
ää 
;
ää 
case
åå 
$num
åå 
:
åå 
int
çç 
a
çç 
=
çç 
(
çç  !
int
çç! $
)
çç$ %
rdr
çç% (
.
çç( )

ReadUInt16
çç) 3
(
çç3 4
)
çç4 5
;
çç5 6
int
èè 
b
èè 
=
èè 
(
èè  !
int
èè! $
)
èè$ %
rdr
èè% (
.
èè( )
	ReadSByte
èè) 2
(
èè2 3
)
èè3 4
;
èè4 5
int
éé 
c
éé 
=
éé 
(
éé  !
b
éé! "
<<
éé# %
$num
éé& (
)
éé( )
+
éé* +
a
éé, -
;
éé- .
val
êê 
=
êê 
(
êê 
(
êê  
double
êê  &
)
êê& '
c
êê' (
)
êê( )
*
êê* +
_scale24
êê, 4
;
êê4 5
break
ëë 
;
ëë 
case
ìì 
$num
ìì 
:
ìì 
if
íí 
(
íí 
_audioFormat
íí (
==
íí) +

WaveFormat
íí, 6
.
íí6 7

IEEE_FLOAT
íí7 A
)
ííA B
{
îî 
val
ïï 
=
ïï  !
(
ïï" #
double
ïï# )
)
ïï) *
rdr
ïï* -
.
ïï- .

ReadSingle
ïï. 8
(
ïï8 9
)
ïï9 :
;
ïï: ;
}
ðð 
else
ññ 
{
òò 
val
óó 
=
óó  !
(
óó" #
(
óó# $
double
óó$ *
)
óó* +
rdr
óó+ .
.
óó. /
	ReadInt32
óó/ 8
(
óó8 9
)
óó9 :
)
óó: ;
*
óó< =
_scale32
óó> F
;
óóF G
}
ôô 
break
õõ 
;
õõ 
case
öö 
$num
öö 
:
öö 
if
÷÷ 
(
÷÷ 
(
÷÷ 
_audioFormat
÷÷ )
==
÷÷* ,

WaveFormat
÷÷- 7
.
÷÷7 8

IEEE_FLOAT
÷÷8 B
)
÷÷B C
||
÷÷D F
(
÷÷G H
_audioFormat
÷÷H T
==
÷÷U W

WaveFormat
÷÷X b
.
÷÷b c
INTERNAL_DOUBLE
÷÷c r
)
÷÷r s
)
÷÷s t
{
øø 
val
ùù 
=
ùù  !
rdr
ùù" %
.
ùù% &

ReadDouble
ùù& 0
(
ùù0 1
)
ùù1 2
;
ùù2 3
}
úú 
else
ûû 
{
üü 
val
þþ 
=
þþ  !
$num
þþ" #
;
þþ# $
}
ÿÿ 
break
 
;
 
}
 
}
 
return
 
val
 
;
 
}
 	
private
 
ISample
 
First
 
(
 
out
 !
bool
" &
more
' +
)
+ ,
{
 	
more
 
=
 
_moreThanFirst
 !
;
! "
return
 
_first
 
;
 
}
 	
private
 
ISample
 
This
 
(
 
out
  
bool
! %
more
& *
)
* +
{
 	
more
 
=
 
(
 
_current
 
!=
 
null
  $
)
$ %
;
% &
return
 
_current
 
;
 
}
 	
private
 
ISample
 
Next
 
(
 
BinaryReader
 )
rdr
* -
,
- .
out
/ 2
bool
3 7
more
8 <
)
< =
{
 	
try
 
{
 
if
 
(
 
_nc
 
==
 
$num
 
)
 
{
 
if
 
(
 
_pos
 
<
 
_max
 #
)
# $
{
 
_pos
 
++
 
;
 
double
 
a
  
=
! "

NextDouble
# -
(
- .
rdr
. 1
)
1 2
;
2 3
double
 
b
  
=
! "

NextDouble
# -
(
- .
rdr
. 1
)
1 2
;
2 3
more
 
=
 
true
 #
;
# $
_current
    
=
  ! "
new
  # &
Sample2
  ' .
(
  . /
a
  / 0
,
  0 1
b
  2 3
)
  3 4
;
  4 5
}
¡¡ 
else
¢¢ 
{
££ 
more
¤¤ 
=
¤¤ 
false
¤¤ $
;
¤¤$ %
_current
¥¥  
=
¥¥! "
null
¥¥# '
;
¥¥' (
}
¦¦ 
}
§§ 
else
¨¨ 
{
©© 
if
ªª 
(
ªª 
_pos
ªª 
<
ªª 
_max
ªª #
)
ªª# $
{
«« 
_pos
¬¬ 
++
¬¬ 
;
¬¬ 
ISample
­­ 
sample
­­  &
=
­­' (
new
­­) ,
Sample
­­- 3
(
­­3 4
_nc
­­4 7
)
­­7 8
;
­­8 9
for
®® 
(
®® 
int
®®  
n
®®! "
=
®®# $
$num
®®% &
;
®®& '
n
®®( )
<
®®* +
_nc
®®, /
;
®®/ 0
n
®®1 2
++
®®2 4
)
®®4 5
{
¯¯ 
sample
°° "
[
°°" #
n
°°# $
]
°°$ %
=
°°& '

NextDouble
°°( 2
(
°°2 3
rdr
°°3 6
)
°°6 7
;
°°7 8
}
±± 
more
²² 
=
²² 
true
²² #
;
²²# $
_current
³³  
=
³³! "
sample
³³# )
;
³³) *
}
´´ 
else
µµ 
{
¶¶ 
more
·· 
=
·· 
false
·· $
;
··$ %
_current
¸¸  
=
¸¸! "
null
¸¸# '
;
¸¸' (
}
¹¹ 
}
ºº 
}
»» 
catch
¼¼ 
(
¼¼ "
EndOfStreamException
¼¼ '
)
¼¼' (
{
½½ 
Trace
¾¾ 
.
¾¾ 
	WriteLine
¾¾ 
(
¾¾  
$str
¾¾  <
,
¾¾< =

streamName
¾¾> H
,
¾¾H I
_pos
¾¾J N
)
¾¾N O
;
¾¾O P
more
¿¿ 
=
¿¿ 
false
¿¿ 
;
¿¿ 
_current
ÀÀ 
=
ÀÀ 
null
ÀÀ 
;
ÀÀ  
}
ÁÁ 
catch
ÂÂ 
(
ÂÂ 
IOException
ÂÂ 
e
ÂÂ  
)
ÂÂ  !
{
ÃÃ 
Trace
ÄÄ 
.
ÄÄ 
	WriteLine
ÄÄ 
(
ÄÄ  
$str
ÄÄ  <
,
ÄÄ< =

streamName
ÄÄ> H
,
ÄÄH I
_pos
ÄÄJ N
,
ÄÄN O
e
ÄÄP Q
.
ÄÄQ R
Message
ÄÄR Y
)
ÄÄY Z
;
ÄÄZ [
more
ÅÅ 
=
ÅÅ 
false
ÅÅ 
;
ÅÅ 
_current
ÆÆ 
=
ÆÆ 
null
ÆÆ 
;
ÆÆ  
}
ÇÇ 
return
ÈÈ 
_current
ÈÈ 
;
ÈÈ 
}
ÉÉ 	
private
ËË 
string
ËË 

streamName
ËË !
{
ÌÌ 	
get
ÍÍ 
{
ÎÎ 
if
ÏÏ 
(
ÏÏ 
String
ÏÏ 
.
ÏÏ 
IsNullOrEmpty
ÏÏ (
(
ÏÏ( )
	_filename
ÏÏ) 2
)
ÏÏ2 3
)
ÏÏ3 4
{
ÐÐ 
return
ÑÑ 
$str
ÑÑ #
;
ÑÑ# $
}
ÒÒ 
return
ÓÓ 
Path
ÓÓ 
.
ÓÓ 
GetFileName
ÓÓ '
(
ÓÓ' (
	_filename
ÓÓ( 1
)
ÓÓ1 2
;
ÓÓ2 3
}
ÔÔ 
}
ÕÕ 	
public
ÚÚ 
override
ÚÚ 
IEnumerator
ÚÚ #
<
ÚÚ# $
ISample
ÚÚ$ +
>
ÚÚ+ ,
Samples
ÚÚ- 4
{
ÛÛ 	
get
ÜÜ 
{
ÝÝ 
if
ÞÞ 
(
ÞÞ 
!
ÞÞ 
_ok
ÞÞ 
)
ÞÞ 
{
ßß 
Trace
àà 
.
àà 
	WriteLine
àà #
(
àà# $
$str
àà$ @
)
àà@ A
;
ààA B
yield
áá 
break
áá 
;
áá  
}
ââ 
bool
ää 
more
ää 
=
ää 
true
ää  
;
ää  !
long
åå 
pos
åå 
=
åå 
$num
åå 
;
åå 
ISample
ææ 
s
ææ 
=
ææ 
First
ææ !
(
ææ! "
out
ææ" %
more
ææ& *
)
ææ* +
;
ææ+ ,
if
çç 
(
çç 
s
çç 
!=
çç 
null
çç 
)
çç 
{
èè 
pos
éé 
++
éé 
;
éé 
yield
êê 
return
êê  
s
êê! "
;
êê" #
}
ëë 
while
ìì 
(
ìì 
more
ìì 
)
ìì 
{
íí 
if
îî 
(
îî 
_pos
îî 
!=
îî 
pos
îî  #
)
îî# $
{
ïï 
if
òò 
(
òò 
_pos
òò  
==
òò! #
pos
òò$ '
+
òò( )
$num
òò* +
)
òò+ ,
{
óó 
s
ôô 
=
ôô 
This
ôô  $
(
ôô$ %
out
ôô% (
more
ôô) -
)
ôô- .
;
ôô. /
}
õõ 
else
öö 
{
÷÷ 
Seek
øø  
(
øø  !
pos
øø! $
)
øø$ %
;
øø% &
s
ùù 
=
ùù 
Next
ùù  $
(
ùù$ %
_rdr
ùù% )
,
ùù) *
out
ùù+ .
more
ùù/ 3
)
ùù3 4
;
ùù4 5
}
úú 
}
ûû 
else
üü 
{
ýý 
s
þþ 
=
þþ 
Next
þþ  
(
þþ  !
_rdr
þþ! %
,
þþ% &
out
þþ' *
more
þþ+ /
)
þþ/ 0
;
þþ0 1
}
ÿÿ 
if
 
(
 
s
 
!=
 
null
 !
)
! "
{
 
pos
 
++
 
;
 
yield
 
return
 $
s
% &
;
& '
}
 
}
 
yield
 
break
 
;
 
}
 
}
 	
public
ÐÐ 
override
ÐÐ 
int
ÐÐ 

Iterations
ÐÐ &
{
ÑÑ 	
get
ÒÒ 
{
ÒÒ 
return
ÒÒ 
(
ÒÒ 
(
ÒÒ 
int
ÒÒ 
)
ÒÒ 
_max
ÒÒ #
)
ÒÒ# $
;
ÒÒ$ %
}
ÒÒ& '
}
ÓÓ 	
public
ØØ 
ushort
ØØ 
BitsPerSample
ØØ #
{
ÙÙ 	
get
ÚÚ 
{
ÚÚ 
return
ÚÚ 
_bitsPerSample
ÚÚ '
;
ÚÚ' (
}
ÚÚ) *
}
ÛÛ 	
public
ÞÞ 
void
ÞÞ 
Close
ÞÞ 
(
ÞÞ 
)
ÞÞ 
{
ßß 	
if
àà 
(
àà 
_rdr
àà 
!=
àà 
null
àà 
)
àà 
{
àà 
_rdr
àà  $
.
àà$ %
Close
àà% *
(
àà* +
)
àà+ ,
;
àà, -
}
àà. /
if
áá 
(
áá 
bs
áá 
!=
áá 
null
áá 
)
áá 
{
áá 
bs
áá  
.
áá  !
Close
áá! &
(
áá& '
)
áá' (
;
áá( )
bs
áá* ,
=
áá- .
null
áá/ 3
;
áá3 4
}
áá5 6
if
ââ 
(
ââ 
fs
ââ 
!=
ââ 
null
ââ 
)
ââ 
{
ââ 
fs
ââ  
.
ââ  !
Close
ââ! &
(
ââ& '
)
ââ' (
;
ââ( )
fs
ââ* ,
=
ââ- .
null
ââ/ 3
;
ââ3 4
}
ââ5 6
}
ãã 	
public
êê 
bool
êê 
IsSPDIF
êê 
{
ëë 	
get
ìì 
{
ìì 
return
ìì 
_isSPDIF
ìì !
;
ìì! "
}
ìì# $
}
íí 	
public
ðð 
bool
ðð 
	BigEndian
ðð 
{
ññ 	
set
òò 
{
òò 

_bigEndian
òò 
=
òò 
value
òò $
;
òò$ %
}
òò& '
get
óó 
{
óó 
return
óó 

_bigEndian
óó #
;
óó# $
}
óó% &
}
ôô 	
public
÷÷ 
string
÷÷ 
RiffTag
÷÷ 
{
øø 	
get
ùù 
{
ùù 
return
ùù 
_riff
ùù 
;
ùù 
}
ùù  !
}
úú 	
public
ýý 
uint
ýý 

RiffLength
ýý 
{
þþ 	
get
ÿÿ 
{
ÿÿ 
return
ÿÿ 
_length
ÿÿ  
;
ÿÿ  !
}
ÿÿ" #
}
 	
public
 
string
 
WaveTag
 
{
 	
get
 
{
 
return
 
_wave
 
;
 
}
 
}
 	
public
 
string
 
	FormatTag
 
{
 	
get
 
{
 
return
 
_format
 
;
 
}
 
}
 	
public
 
uint
 

FormatSize
 
{
 	
get
 
{
 
return
 
_size
 
;
 
}
  !
}
 	
public
 

WaveFormat
 
Format
  
{
 	
get
 
{
 
return
 
_audioFormat
 %
;
% &
}
' (
}
 	
public
 
WaveFormatEx
 
FormatEx
 $
{
 	
get
 
{
 
return
 
	_formatEx
 "
;
" #
}
$ %
}
   	
public
££ 
uint
££ 
ByteRate
££ 
{
¤¤ 	
get
¥¥ 
{
¥¥ 
return
¥¥ 
	_byteRate
¥¥ "
;
¥¥" #
}
¥¥$ %
}
¦¦ 	
public
©© 
ushort
©© 

BlockAlign
©©  
{
ªª 	
get
«« 
{
«« 
return
«« 
_blockAlign
«« $
;
««$ %
}
««& '
}
¬¬ 	
public
¯¯ 
string
¯¯ 
Data
¯¯ 
{
°° 	
get
±± 
{
±± 
return
±± 
_data
±± 
;
±± 
}
±±  !
}
²² 	
public
µµ 
uint
µµ 
DataSize
µµ 
{
¶¶ 	
get
·· 
{
·· 
return
·· 
	_dataSize
·· "
;
··" #
}
··$ %
}
¸¸ 	
public
»» 
uint
»» 
ChannelMask
»» 
{
¼¼ 	
get
½½ 
{
½½ 
return
½½ 
_channelMask
½½ %
;
½½% &
}
½½' (
}
¾¾ 	
}
ÀÀ 
}ÁÁ §á
5E:\GitHub\inguz-DSPUtil\InguzDSPUtilNew\WaveWriter.cs
	namespace		 	
DSPUtil		
 
{

 
public 

enum 
NormalizationType !
{ 
	PEAK_DBFS 
= 
$num 
, 
	PEAK_GAIN 
, 
RMS_DBFS 
, 
RMS_GAIN 
} 
[ 
Serializable 
] 
public 

sealed 
class 

WaveWriter "
:# $
SoundObj% -
{ 
internal 
const 
int 
FILE_TYPE_DISK )
=* +
$num, 2
;2 3
internal 
const 
int 
FILE_TYPE_CHAR )
=* +
$num, 2
;2 3
internal 
const 
int 
FILE_TYPE_PIPE )
=* +
$num, 2
;2 3
internal 
const 
int 
STD_INPUT_HANDLE +
=, -
-. /
$num/ 1
;1 2
internal 
const 
int 
STD_OUTPUT_HANDLE ,
=- .
-/ 0
$num0 2
;2 3
internal 
const 
int 
STD_ERROR_HANDLE +
=, -
-. /
$num/ 1
;1 2
[!! 	
System!!	 
.!! 
Runtime!! 
.!! 
InteropServices!! '
.!!' (
	DllImport!!( 1
(!!1 2
$str!!2 @
)!!@ A
]!!A B
internal"" 
static"" 
extern"" 
int"" "
GetFileType""# .
("". /
IntPtr""/ 5
i_Handle""6 >
)""> ?
;""? @
[$$ 	
System$$	 
.$$ 
Runtime$$ 
.$$ 
InteropServices$$ '
.$$' (
	DllImport$$( 1
($$1 2
$str$$2 @
,$$@ A
SetLastError$$B N
=$$O P
true$$Q U
)$$U V
]$$V W
internal%% 
static%% 
extern%% 
IntPtr%% %
GetStdHandle%%& 2
(%%2 3
int%%3 6
i_Handle%%7 ?
)%%? @
;%%@ A
private)) 

FileStream)) 
_fs)) 
;)) 
private** 
BinaryWriter** 
_w** 
;**  
private++ 
BufferedStream++ 
_bs++ "
;++" #
private-- 
bool-- 
_raw-- 
=-- 
false-- !
;--! "
private.. 

WaveFormat.. 
_audioFormat.. '
;..' (
private// 
WaveFormatEx// 
	_formatEx// &
;//& '
private00 
SpeakerChannelMask00 "
_channelMask00# /
;00/ 0
private11 

DitherType11 
_dither11 "
;11" #
private22 
ushort22 
_bitsPerSample22 %
;22% &
private33 
int33 
_sampleCount33  
;33  !
private44 
int44 
_iterations44 
=44  !
$num44" #
;44# $
private55 
double55 
_gain55 
=55 
$num55  
;55  !
private66 
bool66 
_ignoreclipping66 $
=66% &
false66' ,
;66, -
private77 
double77 
_normalization77 %
=77& '
double77( .
.77. /
NaN77/ 2
;772 3
private88 
NormalizationType88 !
	_normType88" +
=88, -
NormalizationType88. ?
.88? @
	PEAK_DBFS88@ I
;88I J
private:: 
double:: 
[:: 
]:: 
_gains:: 
=::  !
null::" &
;::& '
private<< 
bool<< 
_doneHeader<<  
;<<  !
private== 
bool== 

_isConsole== 
;==  
privateDD 
DitherDD 
[DD 
]DD 
_ditherProcessorsDD *
;DD* +
publicLL 

WaveWriterLL 
(LL 
stringLL  
fileNameLL! )
,LL) *
ushortLL+ 1
numChannelsLL2 =
,LL= >
uintLL? C

sampleRateLLD N
,LLN O
ushortLLP V
bitsPerSampleLLW d
,LLd e

DitherTypeLLf p
ditherLLq w
,LLw x

WaveFormat	LLy 
format
LL 
,
LL 
bool
LL 
rewrite
LL 
)
LL 
{MM 	

InitializeNN 
(NN 
fileNameNN 
,NN  
numChannelsNN! ,
,NN, -

sampleRateNN. 8
,NN8 9
bitsPerSampleNN: G
,NNG H
ditherNNI O
,NNO P
formatNNQ W
,NNW X
rewriteNNY `
)NN` a
;NNa b
}OO 	
publicPP 

WaveWriterPP 
(PP 
stringPP  
fileNamePP! )
,PP) *
ushortPP+ 1
numChannelsPP2 =
,PP= >
uintPP? C

sampleRatePPD N
,PPN O
ushortPPP V
bitsPerSamplePPW d
,PPd e

DitherTypePPf p
ditherPPq w
,PPw x

WaveFormat	PPy 
format
PP 
)
PP 
{QQ 	

InitializeRR 
(RR 
fileNameRR 
,RR  
numChannelsRR! ,
,RR, -

sampleRateRR. 8
,RR8 9
bitsPerSampleRR: G
,RRG H
ditherRRI O
,RRO P
formatRRQ W
,RRW X
trueRRY ]
)RR] ^
;RR^ _
}SS 	
publicTT 

WaveWriterTT 
(TT 
stringTT  
fileNameTT! )
,TT) *
ushortTT+ 1
numChannelsTT2 =
,TT= >
uintTT? C

sampleRateTTD N
,TTN O
ushortTTP V
bitsPerSampleTTW d
,TTd e

DitherTypeTTf p
ditherTTq w
)TTw x
{UU 	

InitializeVV 
(VV 
fileNameVV 
,VV  
numChannelsVV! ,
,VV, -

sampleRateVV. 8
,VV8 9
bitsPerSampleVV: G
,VVG H
ditherVVI O
,VVO P

WaveFormatVVQ [
.VV[ \
ANYVV\ _
,VV_ `
trueVVa e
)VVe f
;VVf g
}WW 	
publicXX 

WaveWriterXX 
(XX 
stringXX  
fileNameXX! )
,XX) *
ushortXX+ 1
numChannelsXX2 =
,XX= >
uintXX? C

sampleRateXXD N
,XXN O
ushortXXP V
bitsPerSampleXXW d
)XXd e
{YY 	

InitializeZZ 
(ZZ 
fileNameZZ 
,ZZ  
numChannelsZZ! ,
,ZZ, -

sampleRateZZ. 8
,ZZ8 9
bitsPerSampleZZ: G
,ZZG H

DitherTypeZZI S
.ZZS T
NONEZZT X
,ZZX Y

WaveFormatZZZ d
.ZZd e
ANYZZe h
,ZZh i
trueZZj n
)ZZn o
;ZZo p
}[[ 	
public\\ 

WaveWriter\\ 
(\\ 
string\\  
fileName\\! )
)\\) *
{]] 	

Initialize^^ 
(^^ 
fileName^^ 
,^^  
$num^^! "
,^^" #
$num^^$ %
,^^% &
$num^^' (
,^^( )

DitherType^^* 4
.^^4 5
NONE^^5 9
,^^9 :

WaveFormat^^; E
.^^E F
ANY^^F I
,^^I J
true^^K O
)^^O P
;^^P Q
}__ 	
publicaa 

WaveWriteraa 
(aa 
Streamaa  
outputaa! '
,aa' (
ushortaa) /
numChannelsaa0 ;
,aa; <
uintaa= A

sampleRateaaB L
,aaL M
ushortaaN T
bitsPerSampleaaU b
,aab c

DitherTypeaad n
ditheraao u
,aau v

WaveFormat	aaw 
format
aa 
)
aa 
{bb 	

Initializecc 
(cc 
outputcc 
,cc 
numChannelscc *
,cc* +

sampleRatecc, 6
,cc6 7
bitsPerSamplecc8 E
,ccE F
ditherccG M
,ccM N
formatccO U
)ccU V
;ccV W
}dd 	
publicee 

WaveWriteree 
(ee 
Streamee  
outputee! '
,ee' (
ushortee) /
numChannelsee0 ;
,ee; <
uintee= A

sampleRateeeB L
,eeL M
ushorteeN T
bitsPerSampleeeU b
,eeb c

DitherTypeeed n
dithereeo u
)eeu v
{ff 	

Initializegg 
(gg 
outputgg 
,gg 
numChannelsgg *
,gg* +

sampleRategg, 6
,gg6 7
bitsPerSamplegg8 E
,ggE F
ditherggG M
,ggM N

WaveFormatggO Y
.ggY Z
ANYggZ ]
)gg] ^
;gg^ _
}hh 	
publicii 

WaveWriterii 
(ii 
Streamii  
outputii! '
,ii' (
ushortii) /
numChannelsii0 ;
,ii; <
uintii= A

sampleRateiiB L
,iiL M
ushortiiN T
bitsPerSampleiiU b
)iib c
{jj 	

Initializekk 
(kk 
outputkk 
,kk 
numChannelskk *
,kk* +

sampleRatekk, 6
,kk6 7
bitsPerSamplekk8 E
,kkE F

DitherTypekkG Q
.kkQ R
NONEkkR V
,kkV W

WaveFormatkkX b
.kkb c
ANYkkc f
)kkf g
;kkg h
}ll 	
publicmm 

WaveWritermm 
(mm 
Streammm  
outputmm! '
)mm' (
{nn 	

Initializeoo 
(oo 
outputoo 
,oo 
$numoo  
,oo  !
$numoo" #
,oo# $
$numoo% &
,oo& '

DitherTypeoo( 2
.oo2 3
NONEoo3 7
,oo7 8

WaveFormatoo9 C
.ooC D
ANYooD G
)ooG H
;ooH I
}pp 	
publicrr 

WaveWriterrr 
(rr 
)rr 
{ss 	
Streamtt 
outputtt 
=tt 
Systemtt "
.tt" #
Consolett# *
.tt* +
OpenStandardOutputtt+ =
(tt= >
)tt> ?
;tt? @

_isConsoleuu 
=uu 
trueuu 
;uu 

Initializevv 
(vv 
outputvv 
,vv 
$numvv  
,vv  !
$numvv" #
,vv# $
$numvv% &
,vv& '

DitherTypevv( 2
.vv2 3
NONEvv3 7
,vv7 8

WaveFormatvv9 C
.vvC D
ANYvvD G
)vvG H
;vvH I
}ww 	
private}} 
void}} 

Initialize}} 
(}}  
string}}  &
fileName}}' /
,}}/ 0
ushort}}1 7
numChannels}}8 C
,}}C D
uint}}E I

sampleRate}}J T
,}}T U
ushort}}V \
bitsPerSample}}] j
,}}j k

DitherType}}l v
dither}}w }
,}}} ~

WaveFormat	}} 
format
}} 
,
}} 
bool
}} 
rewrite
}} 
)
}} 
{~~ 	
NumChannels 
= 
numChannels %
;% &

SampleRate
 
=
 

sampleRate
 #
;
# $
BitsPerSample
 
=
 
bitsPerSample
 )
;
) *
_audioFormat
 
=
 
format
 !
;
! "
_dither
 
=
 
dither
 
;
 
_sampleCount
 
=
 
$num
 
;
 
_doneHeader
 
=
 
false
 
;
  
if
 
(
 
File
 
.
 
Exists
 
(
 
fileName
 $
)
$ %
)
% &
{
 
if
 
(
 
rewrite
 
==
 
false
 $
)
$ %
throw
 
(
 
new
 
	Exception
 (
(
( )
$str
) @
+
A B
fileName
C K
)
K L
)
L M
;
M N
}
 
_fs
 
=
 
new
 

FileStream
  
(
  !
fileName
! )
,
) *
FileMode
+ 3
.
3 4
Create
4 :
)
: ;
;
; <
_bs
 
=
 
new
 
BufferedStream
 $
(
$ %
_fs
% (
)
( )
;
) *
_w
 
=
 
new
 
BinaryWriter
 !
(
! "
_bs
" %
)
% &
;
& '
}
 	
private
 
void
 

Initialize
 
(
  
Stream
  &
output
' -
,
- .
ushort
/ 5
numChannels
6 A
,
A B
uint
C G

sampleRate
H R
,
R S
ushort
T Z
bitsPerSample
[ h
,
h i

DitherType
j t
dither
u {
,
{ |

WaveFormat} 
format 
) 
{
 	
NumChannels
 
=
 
numChannels
 %
;
% &

SampleRate
 
=
 

sampleRate
 #
;
# $
BitsPerSample
 
=
 
bitsPerSample
 )
;
) *
_audioFormat
 
=
 
format
 !
;
! "
_dither
 
=
 
dither
 
;
 
_sampleCount
 
=
 
$num
 
;
 
_doneHeader
 
=
 
false
 
;
  
_fs
 
=
 
null
 
;
 
_bs
 
=
 
new
 
BufferedStream
 $
(
$ %
output
% +
)
+ ,
;
, -
_w
 
=
 
new
 
BinaryWriter
 !
(
! "
_bs
" %
)
% &
;
& '
}
 	
public
££ 
double
££ 
Gain
££ 
{
¤¤ 	
get
¥¥ 
{
¦¦ 
return
§§ 
_gain
§§ 
;
§§ 
}
¨¨ 
set
©© 
{
ªª 
_gain
«« 
=
«« 
value
«« 
;
«« 
_normalization
­­ 
=
­­  
double
­­! '
.
­­' (
NaN
­­( +
;
­­+ ,
}
®® 
}
¯¯ 	
public
·· 
void
·· 
SetChannelGain
·· "
(
··" #
ushort
··# )
channel
··* 1
,
··1 2
double
··3 9
gain
··: >
)
··> ?
{
¸¸ 	
if
¹¹ 
(
¹¹ 
_gains
¹¹ 
==
¹¹ 
null
¹¹ 
)
¹¹ 
{
ºº 
_gains
»» 
=
»» 
new
»» 
double
»» #
[
»»# $
_nc
»»$ '
]
»»' (
;
»»( )
for
¼¼ 
(
¼¼ 
ushort
¼¼ 
c
¼¼ 
=
¼¼ 
$num
¼¼  !
;
¼¼! "
c
¼¼# $
<
¼¼% &
_nc
¼¼' *
;
¼¼* +
c
¼¼, -
++
¼¼- /
)
¼¼/ 0
{
½½ 
_gains
¾¾ 
[
¾¾ 
c
¾¾ 
]
¾¾ 
=
¾¾ 
double
¾¾  &
.
¾¾& '
NaN
¾¾' *
;
¾¾* +
}
¿¿ 
}
ÀÀ 
_gains
ÁÁ 
[
ÁÁ 
channel
ÁÁ 
]
ÁÁ 
=
ÁÁ 
gain
ÁÁ "
;
ÁÁ" #
_normalization
ÂÂ 
=
ÂÂ 
double
ÂÂ #
.
ÂÂ# $
NaN
ÂÂ$ '
;
ÂÂ' (
}
ÃÃ 	
public
ÅÅ 
bool
ÅÅ 
IgnoreClipping
ÅÅ "
{
ÆÆ 	
get
ÇÇ 
{
ÈÈ 
return
ÉÉ 
_ignoreclipping
ÉÉ &
;
ÉÉ& '
}
ÊÊ 
set
ËË 
{
ÌÌ 
_ignoreclipping
ÍÍ 
=
ÍÍ  !
value
ÍÍ" '
;
ÍÍ' (
}
ÎÎ 
}
ÏÏ 	
private
ÑÑ 
void
ÑÑ 
WriteWaveHeader
ÑÑ $
(
ÑÑ$ %
)
ÑÑ% &
{
ÒÒ 	
if
ÓÓ 
(
ÓÓ 
_raw
ÓÓ 
)
ÓÓ 
{
ÔÔ 
_doneHeader
ÖÖ 
=
ÖÖ 
true
ÖÖ "
;
ÖÖ" #
return
×× 
;
×× 
}
ØØ 
ushort
ÙÙ 
	nChannels
ÙÙ 
=
ÙÙ 
NumChannels
ÙÙ *
;
ÙÙ* +
if
ÚÚ 
(
ÚÚ 
	nChannels
ÚÚ 
==
ÚÚ 
$num
ÚÚ 
)
ÚÚ 
{
ÛÛ 
throw
ÜÜ 
new
ÜÜ #
NotSupportedException
ÜÜ /
(
ÜÜ/ 0
$str
ÜÜ0 S
)
ÜÜS T
;
ÜÜT U
}
ÝÝ 
ushort
ÞÞ 

bPerSample
ÞÞ 
=
ÞÞ 
BitsPerSample
ÞÞ  -
;
ÞÞ- .
if
ßß 
(
ßß 

bPerSample
ßß 
==
ßß 
$num
ßß 
)
ßß  
{
àà 
throw
áá 
new
áá #
NotSupportedException
áá /
(
áá/ 0
$str
áá0 P
)
ááP Q
;
ááQ R
}
ââ 
uint
ãã 
sRate
ãã 
=
ãã 

SampleRate
ãã #
;
ãã# $
if
ää 
(
ää 
sRate
ää 
==
ää 
$num
ää 
)
ää 
{
åå 
throw
ææ 
new
ææ #
NotSupportedException
ææ /
(
ææ/ 0
$str
ææ0 L
)
ææL M
;
ææM N
}
çç 
ushort
éé 
	blockSize
éé 
=
éé 
(
éé  
ushort
éé  &
)
éé& '
(
éé' (
(
éé( )
	nChannels
éé) 2
*
éé3 4

bPerSample
éé5 ?
)
éé? @
/
ééA B
$num
ééC D
)
ééD E
;
ééE F
uint
êê 
dataSize
êê 
=
êê 
(
êê 
uint
êê !
)
êê! "
(
êê" #

Iterations
êê# -
*
êê. /
	blockSize
êê0 9
)
êê9 :
;
êê: ;
uint
ëë 
fmtSize
ëë 
=
ëë 
(
ëë 
uint
ëë  
)
ëë  !
(
ëë! "
_audioFormat
ëë" .
==
ëë/ 1

WaveFormat
ëë2 <
.
ëë< =

EXTENSIBLE
ëë= G
?
ëëH I
$num
ëëJ L
:
ëëM N
$num
ëëO Q
)
ëëQ R
;
ëëR S
_w
ïï 
.
ïï 
Write
ïï 
(
ïï 
$char
ïï 
)
ïï 
;
ïï 
_w
ðð 
.
ðð 
Write
ðð 
(
ðð 
$char
ðð 
)
ðð 
;
ðð 
_w
ññ 
.
ññ 
Write
ññ 
(
ññ 
$char
ññ 
)
ññ 
;
ññ 
_w
òò 
.
òò 
Write
òò 
(
òò 
$char
òò 
)
òò 
;
òò 
uint
÷÷ 
riffSize
÷÷ 
=
÷÷ 
$num
÷÷ 
+
÷÷ 
(
÷÷  !
$num
÷÷! "
+
÷÷# $
fmtSize
÷÷% ,
)
÷÷, -
+
÷÷. /
(
÷÷0 1
$num
÷÷1 2
+
÷÷3 4
dataSize
÷÷5 =
)
÷÷= >
;
÷÷> ?
_w
øø 
.
øø 
Write
øø 
(
øø 
(
øø 
uint
øø 
)
øø 
riffSize
øø #
)
øø# $
;
øø$ %
_w
üü 
.
üü 
Write
üü 
(
üü 
$char
üü 
)
üü 
;
üü 
_w
ýý 
.
ýý 
Write
ýý 
(
ýý 
$char
ýý 
)
ýý 
;
ýý 
_w
þþ 
.
þþ 
Write
þþ 
(
þþ 
$char
þþ 
)
þþ 
;
þþ 
_w
ÿÿ 
.
ÿÿ 
Write
ÿÿ 
(
ÿÿ 
$char
ÿÿ 
)
ÿÿ 
;
ÿÿ 
_w
 
.
 
Write
 
(
 
$char
 
)
 
;
 
_w
 
.
 
Write
 
(
 
$char
 
)
 
;
 
_w
 
.
 
Write
 
(
 
$char
 
)
 
;
 
_w
 
.
 
Write
 
(
 
$char
 
)
 
;
 
_w
 
.
 
Write
 
(
 
(
 
uint
 
)
 
fmtSize
 "
)
" #
;
# $
_w
 
.
 
Write
 
(
 
(
 
ushort
 
)
 
_audioFormat
 )
)
) *
;
* +
_w
 
.
 
Write
 
(
 
(
 
ushort
 
)
 
	nChannels
 &
)
& '
;
' (
_w
 
.
 
Write
 
(
 
(
 
uint
 
)
 
sRate
  
)
  !
;
! "
_w
 
.
 
Write
 
(
 
(
 
uint
 
)
 
(
 
	blockSize
 %
*
& '
sRate
( -
)
- .
)
. /
;
/ 0
_w
 
.
 
Write
 
(
 
(
 
ushort
 
)
 
	blockSize
 &
)
& '
;
' (
_w
 
.
 
Write
 
(
 
(
 
ushort
 
)
 

bPerSample
 '
)
' (
;
( )
if
 
(
 
_audioFormat
 
==
 

WaveFormat
  *
.
* +

EXTENSIBLE
+ 5
)
5 6
{
 
_w
 
.
 
Write
 
(
 
(
 
UInt16
  
)
  !
$num
! #
)
# $
;
$ %
_w
 
.
 
Write
 
(
 
(
 
UInt16
  
)
  !

bPerSample
! +
)
+ ,
;
, -
_w
 
.
 
Write
 
(
 
(
 
UInt32
  
)
  !
_channelMask
! -
)
- .
;
. /
_w
 
.
 
Write
 
(
 
	_formatEx
 "
.
" #
guid
# '
.
' (
ToByteArray
( 3
(
3 4
)
4 5
)
5 6
;
6 7
}
 
_w
 
.
 
Write
 
(
 
$char
 
)
 
;
 
_w
 
.
 
Write
 
(
 
$char
 
)
 
;
 
_w
 
.
 
Write
 
(
 
$char
 
)
 
;
 
_w
 
.
 
Write
 
(
 
$char
 
)
 
;
 
_w
¢¢ 
.
¢¢ 
Write
¢¢ 
(
¢¢ 
(
¢¢ 
uint
¢¢ 
)
¢¢ 
dataSize
¢¢ #
)
¢¢# $
;
¢¢$ %
_doneHeader
¤¤ 
=
¤¤ 
true
¤¤ 
;
¤¤ 
}
¥¥ 	
public
«« 
override
«« 
IEnumerator
«« #
<
««# $
ISample
««$ +
>
««+ ,
Samples
««- 4
{
¬¬ 	
get
­­ 
{
®® 
bool
¯¯ 
err
¯¯ 
;
¯¯ 
if
°° 
(
°° 
_audioFormat
°°  
==
°°! #

WaveFormat
°°$ .
.
°°. /
ANY
°°/ 2
)
°°2 3
{
±± 
throw
²² 
new
²² 
	Exception
²² '
(
²²' (
$str
²²( J
)
²²J K
;
²²K L
}
³³ 

MakeDither
µµ 
(
µµ 
)
µµ 
;
µµ 
WriteWaveHeader
¶¶ 
(
¶¶  
)
¶¶  !
;
¶¶! "
foreach
¸¸ 
(
¸¸ 
ISample
¸¸  
sample
¸¸! '
in
¸¸( *
_buff
¸¸+ 0
(
¸¸0 1
)
¸¸1 2
)
¸¸2 3
{
¹¹ 
ISample
ºº 
s
ºº 
=
ºº 
_next
ºº  %
(
ºº% &
sample
ºº& ,
,
ºº, -
out
ºº. 1
err
ºº2 5
)
ºº5 6
;
ºº6 7
if
»» 
(
»» 
err
»» 
)
»» 
{
¼¼ 
yield
½½ 
break
½½ #
;
½½# $
}
¾¾ 
yield
¿¿ 
return
¿¿  
s
¿¿! "
;
¿¿" #
}
ÀÀ 
}
ÁÁ 
}
ÂÂ 	
private
ÄÄ 
	ISoundObj
ÄÄ 
_buff
ÄÄ 
(
ÄÄ  
)
ÄÄ  !
{
ÅÅ 	
if
ÆÆ 
(
ÆÆ 
double
ÆÆ 
.
ÆÆ 
IsNaN
ÆÆ 
(
ÆÆ 
_normalization
ÆÆ +
)
ÆÆ+ ,
)
ÆÆ, -
{
ÇÇ 
return
ÈÈ 
_input
ÈÈ 
;
ÈÈ 
}
ÉÉ 
SoundBuffer
ËË 
b
ËË 
=
ËË 
new
ËË 
SoundBuffer
ËË  +
(
ËË+ ,
_input
ËË, 2
)
ËË2 3
;
ËË3 4
b
ÌÌ 
.
ÌÌ 
ReadAll
ÌÌ 
(
ÌÌ 
)
ÌÌ 
;
ÌÌ 
_gain
ÍÍ 
=
ÍÍ 
b
ÍÍ 
.
ÍÍ 
	Normalize
ÍÍ 
(
ÍÍ  
_normalization
ÍÍ  .
,
ÍÍ. /
false
ÍÍ0 5
)
ÍÍ5 6
;
ÍÍ6 7
return
ÎÎ 
b
ÎÎ 
;
ÎÎ 
}
ÏÏ 	
private
ÑÑ 
ISample
ÑÑ 
_next
ÑÑ 
(
ÑÑ 
ISample
ÑÑ %
sample
ÑÑ& ,
,
ÑÑ, -
out
ÑÑ. 1
bool
ÑÑ2 6
err
ÑÑ7 :
)
ÑÑ: ;
{
ÒÒ 	
try
ÓÓ 
{
ÔÔ 
_sampleCount
ÖÖ 
++
ÖÖ 
;
ÖÖ 
if
ØØ 
(
ØØ 
!
ØØ 
_ignoreclipping
ØØ $
&&
ØØ% '
(
ØØ( )
_sampleCount
ØØ) 5
%
ØØ6 7
_sr
ØØ8 ;
==
ØØ< >
$num
ØØ? @
)
ØØ@ A
)
ØØA B
{
ÙÙ 
bool
ÛÛ 
clipped
ÛÛ  
=
ÛÛ! "
false
ÛÛ# (
;
ÛÛ( )
for
ÜÜ 
(
ÜÜ 
int
ÜÜ 
n
ÜÜ 
=
ÜÜ  
$num
ÜÜ! "
;
ÜÜ" #
n
ÜÜ$ %
<
ÜÜ& '
_nc
ÜÜ( +
;
ÜÜ+ ,
n
ÜÜ- .
++
ÜÜ. 0
)
ÜÜ0 1
{
ÝÝ 
if
ÞÞ 
(
ÞÞ 
_ditherProcessors
ÞÞ -
[
ÞÞ- .
n
ÞÞ. /
]
ÞÞ/ 0
.
ÞÞ0 1
clipping
ÞÞ1 9
)
ÞÞ9 :
{
ßß 
clipped
àà #
=
àà$ %
true
àà& *
;
àà* +
}
áá 
}
ââ 
if
ãã 
(
ãã 
clipped
ãã 
)
ãã  
{
ää 
Gain
ææ 
=
ææ 
_gain
ææ $
*
ææ% &
$num
ææ' I
;
ææI J
for
èè 
(
èè 
int
èè  
n
èè! "
=
èè# $
$num
èè% &
;
èè& '
n
èè( )
<
èè* +
_nc
èè, /
;
èè/ 0
n
èè1 2
++
èè2 4
)
èè4 5
{
éé 
_ditherProcessors
êê -
[
êê- .
n
êê. /
]
êê/ 0
.
êê0 1
clipping
êê1 9
=
êê: ;
false
êê< A
;
êêA B
}
ëë 
}
ìì 
}
íí 
for
ïï 
(
ïï 
int
ïï 
n
ïï 
=
ïï 
$num
ïï 
;
ïï 
n
ïï  !
<
ïï" #
_nc
ïï$ '
;
ïï' (
n
ïï) *
++
ïï* ,
)
ïï, -
{
ðð 
double
óó 
val
óó 
=
óó  
sample
óó! '
[
óó' (
n
óó( )
]
óó) *
;
óó* +
if
õõ 
(
õõ 
_gain
õõ 
!=
õõ  
$num
õõ! "
&&
õõ# %
!
õõ& '
double
õõ' -
.
õõ- .
IsNaN
õõ. 3
(
õõ3 4
_gain
õõ4 9
)
õõ9 :
)
õõ: ;
{
öö 
val
÷÷ 
*=
÷÷ 
_gain
÷÷ $
;
÷÷$ %
}
øø 
if
ùù 
(
ùù 
_gains
ùù 
!=
ùù !
null
ùù" &
&&
ùù' )
!
ùù* +
double
ùù+ 1
.
ùù1 2
IsNaN
ùù2 7
(
ùù7 8
_gains
ùù8 >
[
ùù> ?
n
ùù? @
]
ùù@ A
)
ùùA B
)
ùùB C
{
úú 
val
ûû 
*=
ûû 
_gains
ûû %
[
ûû% &
n
ûû& '
]
ûû' (
;
ûû( )
}
üü 
switch
þþ 
(
þþ 
_bitsPerSample
þþ *
)
þþ* +
{
ÿÿ 
case
 
$num
 
:
 
_w
 
.
 
Write
 $
(
$ %
(
% &
byte
& *
)
* +
(
+ ,
_ditherProcessors
, =
[
= >
n
> ?
]
? @
.
@ A
process
A H
(
H I
val
I L
)
L M
+
N O
$num
P S
)
S T
)
T U
;
U V
break
 !
;
! "
case
 
$num
 
:
  
_w
 
.
 
Write
 $
(
$ %
(
% &
short
& +
)
+ ,
_ditherProcessors
, =
[
= >
n
> ?
]
? @
.
@ A
process
A H
(
H I
val
I L
)
L M
)
M N
;
N O
break
 !
;
! "
case
 
$num
 
:
  
int
 
c
  !
=
" #
_ditherProcessors
$ 5
[
5 6
n
6 7
]
7 8
.
8 9
process
9 @
(
@ A
val
A D
)
D E
;
E F
_w
 
.
 
Write
 $
(
$ %
(
% &
ushort
& ,
)
, -
(
- .
c
. /
&
0 1
$num
2 8
)
8 9
)
9 :
;
: ;
_w
 
.
 
Write
 $
(
$ %
(
% &
sbyte
& +
)
+ ,
(
, -
c
- .
>>
/ 1
$num
2 4
&
5 6
$num
7 ;
)
; <
)
< =
;
= >
break
 !
;
! "
case
 
$num
 
:
  
if
 
(
  
_audioFormat
  ,
==
- /

WaveFormat
0 :
.
: ;
PCM
; >
||
? A
_audioFormat
B N
==
O Q

WaveFormat
R \
.
\ ]

EXTENSIBLE
] g
)
g h
{
 
_w
  "
.
" #
Write
# (
(
( )
(
) *
int
* -
)
- .
_ditherProcessors
. ?
[
? @
n
@ A
]
A B
.
B C
process
C J
(
J K
val
K N
)
N O
)
O P
;
P Q
}
 
else
  
if
! #
(
$ %
_audioFormat
% 1
==
2 4

WaveFormat
5 ?
.
? @

IEEE_FLOAT
@ J
)
J K
{
 
_w
  "
.
" #
Write
# (
(
( )
(
) *
float
* /
)
/ 0
val
0 3
)
3 4
;
4 5
}
 
break
 !
;
! "
case
 
$num
 
:
  
_w
 
.
 
Write
 $
(
$ %
(
% &
double
& ,
)
, -
val
- 0
)
0 1
;
1 2
break
 !
;
! "
default
 
:
  
throw
 !
new
" %
	Exception
& /
(
/ 0
String
0 6
.
6 7
Format
7 =
(
= >
$str
> ]
,
] ^
BitsPerSample
_ l
)
l m
)
m n
;
n o
}
 
}
 
err
¡¡ 
=
¡¡ 
false
¡¡ 
;
¡¡ 
if
¢¢ 
(
¢¢ 

_isConsole
¢¢ 
)
¢¢ 
{
££ 
int
¥¥ 
Err
¥¥ 
=
¥¥ 
System
¥¥ $
.
¥¥$ %
Runtime
¥¥% ,
.
¥¥, -
InteropServices
¥¥- <
.
¥¥< =
Marshal
¥¥= D
.
¥¥D E
GetLastWin32Error
¥¥E V
(
¥¥V W
)
¥¥W X
;
¥¥X Y
if
¦¦ 
(
¦¦ 
Err
¦¦ 
!=
¦¦ 
$num
¦¦  
)
¦¦  !
{
§§ 
if
«« 
(
«« 
Err
«« 
!=
««  "
$num
««# &
&&
««' )
Err
««* -
!=
««. 0
$num
««1 4
&&
««5 7
Err
««8 ;
!=
««< >
$num
««? @
)
««@ A
{
¬¬ 
System
­­ "
.
­­" #
ComponentModel
­­# 1
.
­­1 2
Win32Exception
­­2 @
e
­­A B
=
­­C D
new
­­E H
System
­­I O
.
­­O P
ComponentModel
­­P ^
.
­­^ _
Win32Exception
­­_ m
(
­­m n
Err
­­n q
)
­­q r
;
­­r s
Trace
®® !
.
®®! "
	WriteLine
®®" +
(
®®+ ,
$str
®®, :
+
®®; <
Err
®®= @
+
®®A B
$str
®®C G
+
®®H I
e
®®J K
.
®®K L
Message
®®L S
)
®®S T
;
®®T U
err
¯¯ 
=
¯¯  !
true
¯¯" &
;
¯¯& '
}
°° 
}
±± 
}
²² 
}
³³ 
catch
´´ 
(
´´ 
	Exception
´´ 
e
´´ 
)
´´ 
{
µµ 
if
¶¶ 
(
¶¶ 
DSPUtil
¶¶ 
.
¶¶ 
IsMono
¶¶ "
(
¶¶" #
)
¶¶# $
&&
¶¶% '
e
¶¶( )
.
¶¶) *
Message
¶¶* 1
.
¶¶1 2
Contains
¶¶2 :
(
¶¶: ;
$str
¶¶; P
)
¶¶P Q
)
¶¶Q R
{
·· 
Trace
¹¹ 
.
¹¹ 
	WriteLine
¹¹ #
(
¹¹# $
$str
¹¹$ 6
+
¹¹7 8
e
¹¹9 :
.
¹¹: ;
Message
¹¹; B
)
¹¹B C
;
¹¹C D
err
ºº 
=
ºº 
true
ºº 
;
ºº 
}
»» 
else
¼¼ 
if
¼¼ 
(
¼¼ 
e
¼¼ 
.
¼¼ 
GetHashCode
¼¼ &
(
¼¼& '
)
¼¼' (
==
¼¼) +
$num
¼¼, 4
)
¼¼4 5
{
½½ 
Trace
¿¿ 
.
¿¿ 
	WriteLine
¿¿ #
(
¿¿# $
$str
¿¿$ 6
+
¿¿7 8
e
¿¿9 :
.
¿¿: ;
Message
¿¿; B
)
¿¿B C
;
¿¿C D
err
ÀÀ 
=
ÀÀ 
true
ÀÀ 
;
ÀÀ 
}
ÁÁ 
else
ÂÂ 
{
ÃÃ 
throw
ÅÅ 
e
ÅÅ 
;
ÅÅ 
}
ÆÆ 
}
ÇÇ 
return
ÈÈ 
sample
ÈÈ 
;
ÈÈ 
}
ÉÉ 	
public
ÌÌ 
override
ÌÌ 
int
ÌÌ 

Iterations
ÌÌ &
{
ÍÍ 	
get
ÎÎ 
{
ÏÏ 
if
ÐÐ 
(
ÐÐ 
_iterations
ÐÐ 
==
ÐÐ  "
$num
ÐÐ# $
&&
ÐÐ% '
base
ÐÐ( ,
.
ÐÐ, -
_input
ÐÐ- 3
!=
ÐÐ3 5
null
ÐÐ5 9
)
ÐÐ9 :
{
ÑÑ 
return
ÒÒ 
(
ÒÒ 
base
ÒÒ  
.
ÒÒ  !
_input
ÒÒ! '
.
ÒÒ' (

Iterations
ÒÒ( 2
)
ÒÒ2 3
;
ÒÒ3 4
}
ÓÓ 
return
ÔÔ 
_iterations
ÔÔ "
;
ÔÔ" #
}
ÕÕ 
}
ÖÖ 	
public
ÙÙ 
ushort
ÙÙ 
BitsPerSample
ÙÙ #
{
ÚÚ 	
get
ÛÛ 
{
ÛÛ 
return
ÛÛ 
_bitsPerSample
ÛÛ '
;
ÛÛ' (
}
ÛÛ) *
set
ÜÜ 
{
ÜÜ 
_bitsPerSample
ÜÜ  
=
ÜÜ! "
value
ÜÜ# (
;
ÜÜ( )
}
ÜÜ* +
}
ÝÝ 	
private
ßß 
void
ßß 

MakeDither
ßß 
(
ßß  
)
ßß  !
{
àà 	
_ditherProcessors
áá 
=
áá 
new
áá  #
Dither
áá$ *
[
áá* +
NumChannels
áá+ 6
]
áá6 7
;
áá7 8
for
ââ 
(
ââ 
int
ââ 
j
ââ 
=
ââ 
$num
ââ 
;
ââ 
j
ââ 
<
ââ 
NumChannels
ââ  +
;
ââ+ ,
j
ââ- .
++
ââ. 0
)
ââ0 1
{
ãã 
_ditherProcessors
ää !
[
ää! "
j
ää" #
]
ää# $
=
ää% &
new
ää' *
Dither
ää+ 1
(
ää1 2
_dither
ää2 9
,
ää9 :

SampleRate
ää; E
,
ääE F
BitsPerSample
ääG T
)
ääT U
;
ääU V
}
åå 
}
ææ 	
public
ëë 

DitherType
ëë 
Dither
ëë  
{
ìì 	
get
íí 
{
îî 
return
ïï 
_dither
ïï 
;
ïï 
}
ðð 
set
ññ 
{
òò 
bool
ôô 
recreate
ôô 
=
ôô 
(
ôô  !
value
ôô! &
!=
ôô' )
_dither
ôô* 1
)
ôô1 2
;
ôô2 3
_dither
õõ 
=
õõ 
value
õõ 
;
õõ  
if
öö 
(
öö 
recreate
öö 
)
öö 
{
÷÷ 

MakeDither
ùù 
(
ùù 
)
ùù  
;
ùù  !
}
úú 
}
ûû 
}
üü 	
public
 

WaveFormat
 
Format
  
{
 	
get
 
{
 
return
 
_audioFormat
 #
;
# $
}
 
set
 
{
 
_audioFormat
 
=
 
value
 $
;
$ %
if
 
(
 
_audioFormat
  
==
! #

WaveFormat
$ .
.
. /
INTERNAL_DOUBLE
/ >
)
> ?
{
 
BitsPerSample
 !
=
" #
$num
$ &
;
& '
}
 
}
 
}
 	
public
 
WaveFormatEx
 
FormatEx
 $
{
 	
get
 
{
 
return
 
	_formatEx
 "
;
" #
}
$ %
set
 
{
 
_audioFormat
 
=
 

WaveFormat
 )
.
) *

EXTENSIBLE
* 4
;
4 5
	_formatEx
 
=
 
value
 !
;
! "
}
   
}
¡¡ 	
public
££  
SpeakerChannelMask
££ !
ChannelMask
££" -
{
¤¤ 	
get
¥¥ 
{
¥¥ 
return
¥¥ 
_channelMask
¥¥ %
;
¥¥% &
}
¥¥' (
set
¦¦ 
{
¦¦ 
_channelMask
¦¦ 
=
¦¦  
value
¦¦! &
;
¦¦& '
}
¦¦( )
}
§§ 	
public
©© 
bool
©© 
Raw
©© 
{
ªª 	
get
«« 
{
¬¬ 
return
­­ 
_raw
­­ 
;
­­ 
}
®® 
set
¯¯ 
{
°° 
_raw
±± 
=
±± 
value
±± 
;
±± 
}
²² 
}
³³ 	
public
¹¹ 
double
¹¹ 
Normalization
¹¹ #
{
ºº 	
get
»» 
{
¼¼ 
return
½½ 
_normalization
½½ %
;
½½% &
}
¾¾ 
set
¿¿ 
{
ÀÀ 
_normalization
ÁÁ 
=
ÁÁ  
value
ÁÁ! &
;
ÁÁ& '
}
ÂÂ 
}
ÃÃ 	
public
ÇÇ 
NormalizationType
ÇÇ  
NormalizationType
ÇÇ! 2
{
ÈÈ 	
get
ÉÉ 
{
ÊÊ 
return
ËË 
	_normType
ËË  
;
ËË  !
}
ÌÌ 
set
ÍÍ 
{
ÎÎ 
	_normType
ÏÏ 
=
ÏÏ 
value
ÏÏ !
;
ÏÏ! "
}
ÐÐ 
}
ÑÑ 	
public
ÖÖ 
double
ÖÖ 
dbfsPeak
ÖÖ 
{
×× 	
get
ØØ 
{
ÙÙ 
double
ÚÚ 
pk
ÚÚ 
=
ÚÚ 
-
ÚÚ 
$num
ÚÚ  
;
ÚÚ  !
for
ÛÛ 
(
ÛÛ 
int
ÛÛ 
j
ÛÛ 
=
ÛÛ 
$num
ÛÛ 
;
ÛÛ 
j
ÛÛ  !
<
ÛÛ" #
NumChannels
ÛÛ$ /
;
ÛÛ/ 0
j
ÛÛ1 2
++
ÛÛ2 4
)
ÛÛ4 5
{
ÜÜ 
pk
ÝÝ 
=
ÝÝ 
Math
ÝÝ 
.
ÝÝ 
Max
ÝÝ !
(
ÝÝ! "
pk
ÝÝ" $
,
ÝÝ$ %
_ditherProcessors
ÝÝ& 7
[
ÝÝ7 8
j
ÝÝ8 9
]
ÝÝ9 :
.
ÝÝ: ;
dbfsPeak
ÝÝ; C
)
ÝÝC D
;
ÝÝD E
}
ÞÞ 
return
ßß 
pk
ßß 
;
ßß 
}
àà 
}
áá 	
public
ää 
void
ää 
Close
ää 
(
ää 
)
ää 
{
åå 	
if
ææ 
(
ææ 
_sampleCount
ææ 
!=
ææ 

Iterations
ææ  *
||
ææ+ -
!
ææ. /
_doneHeader
ææ/ :
)
ææ: ;
{
çç 
try
éé 
{
êê 
if
ëë 
(
ëë 
_w
ëë 
.
ëë 

BaseStream
ëë %
.
ëë% &
CanSeek
ëë& -
)
ëë- .
{
ìì 
_iterations
íí #
=
íí$ %
_sampleCount
íí& 2
;
íí2 3
_w
îî 
.
îî 
Seek
îî 
(
îî  
$num
îî  !
,
îî! "

SeekOrigin
îî# -
.
îî- .
Begin
îî. 3
)
îî3 4
;
îî4 5
WriteWaveHeader
ïï '
(
ïï' (
)
ïï( )
;
ïï) *
}
ðð 
}
ññ 
catch
òò 
(
òò 
	Exception
òò  
)
òò  !
{
óó 
}
ôô 
}
õõ 
try
øø 
{
ùù 
_bs
úú 
.
úú 
Flush
úú 
(
úú 
)
úú 
;
úú 
_w
ûû 
.
ûû 
Close
ûû 
(
ûû 
)
ûû 
;
ûû 
_w
ûû 
=
ûû  
null
ûû! %
;
ûû% &
_bs
üü 
.
üü 
Close
üü 
(
üü 
)
üü 
;
üü 
_bs
üü  
=
üü! "
null
üü# '
;
üü' (
if
ýý 
(
ýý 
_fs
ýý 
!=
ýý 
null
ýý 
)
ýý  
{
ýý! "
_fs
ýý# &
.
ýý& '
Close
ýý' ,
(
ýý, -
)
ýý- .
;
ýý. /
_fs
ýý0 3
=
ýý4 5
null
ýý6 :
;
ýý: ;
}
ýý< =
}
þþ 
catch
ÿÿ 
(
ÿÿ 
	Exception
ÿÿ 
)
ÿÿ 
{
 
}
 
}
 	
}
 
} Ù
2E:\GitHub\inguz-DSPUtil\InguzDSPUtilNew\Windows.cs
	namespace 	
DSPUtil
 
{ 
public		 

class		 
WindowedBuffer		 
:		  !
SoundObj		" *
{

 
SoundBuffer 
_buff 
; 
public 
WindowedBuffer 
( 
	ISoundObj '
input( -
,- .
	CosWindow/ 8
window9 ?
,? @
intA D
startE J
,J K
intL O
countP U
)U V
{ 	
_buff 
= 
new 
SoundBuffer #
(# $
new$ '
SampleBuffer( 4
(4 5
input5 :
): ;
.; <
Subset< B
(B C
startC H
,H I
countJ O
)O P
)P Q
;Q R
_buff 
. 
ApplyWindow 
( 
window $
)$ %
;% &
} 	
public 
override 
IEnumerator #
<# $
ISample$ +
>+ ,
Samples- 4
{ 	
get 
{ 
return 
_buff 
. 
Samples $
;$ %
} 
} 	
} 
public 

class 
OverlappingWindows #
{   
int!! 
_length!! 
;!! 
	ISoundObj"" 
_input"" 
;"" 
double## 
_overlap## 
;## 
	CosWindow$$ 
_window$$ 
;$$ 
public&& 
OverlappingWindows&& !
(&&! "
	ISoundObj&&" +
input&&, 1
,&&1 2
int&&3 6
length&&7 =
)&&= >
{'' 	
_input(( 
=(( 
input(( 
;(( 
_length)) 
=)) 
length)) 
;)) 
_overlap** 
=** 
$num** 
;** 
_window++ 
=++ 
new++ 
Hamming++ !
(++! "
length++" (
/++) *
$num+++ ,
,++, -
length++. 4
/++5 6
$num++7 8
)++8 9
;++9 :
},, 	
public.. 
OverlappingWindows.. !
(..! "
	ISoundObj.." +
input.., 1
,..1 2
int..3 6
length..7 =
,..= >
double..? E
overlap..F M
,..M N
	CosWindow..O X
window..Y _
).._ `
{// 	
_input00 
=00 
input00 
;00 
_length11 
=11 
length11 
;11 
_overlap22 
=22 
overlap22 
;22 
_window33 
=33 
window33 
;33 
}44 	
public;; 
IEnumerator;; 
<;; 
	ISoundObj;; $
>;;$ %
Items;;& +
{<< 	
get== 
{>> 
int?? 
start?? 
=?? 
$num?? 
;?? 
while@@ 
(@@ 
true@@ 
)@@ 
{AA 
yieldBB 
returnBB  
newBB! $
WindowedBufferBB% 3
(BB3 4
_inputBB4 :
,BB: ;
_windowBB< C
,BBC D
startBBE J
,BBJ K
_lengthBBL S
)BBS T
;BBT U
startCC 
+=CC 
_lengthCC $
;CC$ %
}DD 
}EE 
}FF 	
}GG 
}HH 